
scorbot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e650  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002184  0801e850  0801e850  0002e850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080209d4  080209d4  0004247c  2**0
                  CONTENTS
  4 .ARM          00000008  080209d4  080209d4  000309d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080209dc  080209dc  0004247c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  080209dc  080209dc  000309dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080209fc  080209fc  000309fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000247c  20000000  08020a04  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000eb54  20002480  08022e80  00042480  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20010fd4  08022e80  00050fd4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0004247c  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  000424aa  2**0
                  CONTENTS, READONLY
 13 .debug_info   00034d05  00000000  00000000  00042520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000063e5  00000000  00000000  00077225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001df0  00000000  00000000  0007d610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001701  00000000  00000000  0007f400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000357d0  00000000  00000000  00080b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002cec2  00000000  00000000  000b62d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011f175  00000000  00000000  000e3193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008a7c  00000000  00000000  00202308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0020ad84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20002480 	.word	0x20002480
 800021c:	00000000 	.word	0x00000000
 8000220:	0801e838 	.word	0x0801e838

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20002484 	.word	0x20002484
 800023c:	0801e838 	.word	0x0801e838

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800032e:	f000 b9bb 	b.w	80006a8 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <encoder_callback>:
#include <callbacks.hpp>

void encoder_callback(const void* msgin) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	const racs_services__msg__Encoder* enc_msg =
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	60fb      	str	r3, [r7, #12]
			(const racs_services__msg__Encoder*) msgin;

	ScorBot.setEncoders(enc_msg->encoders);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	4619      	mov	r1, r3
 80006bc:	4805      	ldr	r0, [pc, #20]	; (80006d4 <encoder_callback+0x28>)
 80006be:	f000 fca7 	bl	8001010 <_ZN5Robot11setEncodersEPKs>
	ScorBot.setStatus(Robot::Status::PID, false);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2102      	movs	r1, #2
 80006c6:	4803      	ldr	r0, [pc, #12]	; (80006d4 <encoder_callback+0x28>)
 80006c8:	f000 fc03 	bl	8000ed2 <_ZN5Robot9setStatusENS_6StatusEb>
}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2000249c 	.word	0x2000249c

080006d8 <pwm_callback>:

void pwm_callback(const void* msgin) {
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	const racs_services__msg__DirectAccess* pwm_msg =
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	60fb      	str	r3, [r7, #12]
		(const racs_services__msg__DirectAccess*) msgin;

	if(pwm_msg->num_motors != ScorBot.getSize()) {
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461c      	mov	r4, r3
 80006ea:	480f      	ldr	r0, [pc, #60]	; (8000728 <pwm_callback+0x50>)
 80006ec:	f000 fbe4 	bl	8000eb8 <_ZN5Robot7getSizeEv>
 80006f0:	4603      	mov	r3, r0
 80006f2:	429c      	cmp	r4, r3
 80006f4:	bf14      	ite	ne
 80006f6:	2301      	movne	r3, #1
 80006f8:	2300      	moveq	r3, #0
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d005      	beq.n	800070c <pwm_callback+0x34>
	    ScorBot.setStatus(Robot::Status::Idle, true);
 8000700:	2201      	movs	r2, #1
 8000702:	2100      	movs	r1, #0
 8000704:	4808      	ldr	r0, [pc, #32]	; (8000728 <pwm_callback+0x50>)
 8000706:	f000 fbe4 	bl	8000ed2 <_ZN5Robot9setStatusENS_6StatusEb>
	    return;
 800070a:	e00a      	b.n	8000722 <pwm_callback+0x4a>
	}

	ScorBot.setPWMs(pwm_msg->pwms);
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	3302      	adds	r3, #2
 8000710:	4619      	mov	r1, r3
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <pwm_callback+0x50>)
 8000714:	f000 fc9b 	bl	800104e <_ZN5Robot7setPWMsEPKs>
	ScorBot.setStatus(Robot::Status::DAQ, false);
 8000718:	2200      	movs	r2, #0
 800071a:	2101      	movs	r1, #1
 800071c:	4802      	ldr	r0, [pc, #8]	; (8000728 <pwm_callback+0x50>)
 800071e:	f000 fbd8 	bl	8000ed2 <_ZN5Robot9setStatusENS_6StatusEb>
}
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	bd90      	pop	{r4, r7, pc}
 8000728:	2000249c 	.word	0x2000249c

0800072c <control_callback>:

void control_callback(const void* request_msg, void* response_msg){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
		racs_services__srv__Control_Request* req_in =
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	60fb      	str	r3, [r7, #12]
				(racs_services__srv__Control_Request*) request_msg;
		racs_services__srv__Control_Response* res_in =
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	60bb      	str	r3, [r7, #8]
				(racs_services__srv__Control_Response*) response_msg;
		ScorBot.rcvCtrl(req_in);
 800073e:	68f9      	ldr	r1, [r7, #12]
 8000740:	4805      	ldr	r0, [pc, #20]	; (8000758 <control_callback+0x2c>)
 8000742:	f000 fcdb 	bl	80010fc <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request>
		ScorBot.sndCtrl(res_in);
 8000746:	68b9      	ldr	r1, [r7, #8]
 8000748:	4803      	ldr	r0, [pc, #12]	; (8000758 <control_callback+0x2c>)
 800074a:	f000 fd34 	bl	80011b6 <_ZN5Robot7sndCtrlEP36racs_services__srv__Control_Response>
	}
 800074e:	bf00      	nop
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000249c 	.word	0x2000249c

0800075c <setup_callback>:

void setup_callback(const void* request_msg, void* response_msg){
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
		racs_services__srv__Setup_Request* req_in =
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	60fb      	str	r3, [r7, #12]
				(racs_services__srv__Setup_Request*) request_msg;
		racs_services__srv__Setup_Response* res_in =
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	60bb      	str	r3, [r7, #8]
				(racs_services__srv__Setup_Response*) response_msg;
		ScorBot.rcvSetup(req_in);
 800076e:	68f9      	ldr	r1, [r7, #12]
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <setup_callback+0x2c>)
 8000772:	f000 fd31 	bl	80011d8 <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request>
		ScorBot.sndSetup(res_in);
 8000776:	68b9      	ldr	r1, [r7, #8]
 8000778:	4803      	ldr	r0, [pc, #12]	; (8000788 <setup_callback+0x2c>)
 800077a:	f000 fd8d 	bl	8001298 <_ZN5Robot8sndSetupEP34racs_services__srv__Setup_Response>
	}
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	2000249c 	.word	0x2000249c

0800078c <feedback_timer_callback>:

void feedback_timer_callback(rcl_timer_t* timer, int64_t last_call_time)
{
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b093      	sub	sp, #76	; 0x4c
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	e9c7 2300 	strd	r2, r3, [r7]
	//UNUSED(timer);
	UNUSED(last_call_time);

	if (timer != NULL) {
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d06a      	beq.n	8000874 <feedback_timer_callback+0xe8>
		racs_services__msg__Feedback feedback;
		racs_services__msg__Debug debug;
		rcl_ret_t rc;

		int size = ScorBot.getSize();
 800079e:	4837      	ldr	r0, [pc, #220]	; (800087c <feedback_timer_callback+0xf0>)
 80007a0:	f000 fb8a 	bl	8000eb8 <_ZN5Robot7getSizeEv>
 80007a4:	6438      	str	r0, [r7, #64]	; 0x40
		feedback.num_motors = size;
 80007a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		for(uint8_t i = 0; i < size; i++) {
 80007ae:	2300      	movs	r3, #0
 80007b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80007b4:	e013      	b.n	80007de <feedback_timer_callback+0x52>
			feedback.encoders[i] = ScorBot.getEncoder(i);
 80007b6:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 80007ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007be:	4619      	mov	r1, r3
 80007c0:	482e      	ldr	r0, [pc, #184]	; (800087c <feedback_timer_callback+0xf0>)
 80007c2:	f000 fbfc 	bl	8000fbe <_ZN5Robot10getEncoderEh>
 80007c6:	4603      	mov	r3, r0
 80007c8:	461a      	mov	r2, r3
 80007ca:	0063      	lsls	r3, r4, #1
 80007cc:	3348      	adds	r3, #72	; 0x48
 80007ce:	443b      	add	r3, r7
 80007d0:	f823 2c1a 	strh.w	r2, [r3, #-26]
		for(uint8_t i = 0; i < size; i++) {
 80007d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007d8:	3301      	adds	r3, #1
 80007da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80007de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80007e4:	429a      	cmp	r2, r3
 80007e6:	dce6      	bgt.n	80007b6 <feedback_timer_callback+0x2a>
		}

		for(uint8_t i = 6; i > size; i--) {
 80007e8:	2306      	movs	r3, #6
 80007ea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80007ee:	e00c      	b.n	800080a <feedback_timer_callback+0x7e>
			feedback.encoders[i] = 0;
 80007f0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	3348      	adds	r3, #72	; 0x48
 80007f8:	443b      	add	r3, r7
 80007fa:	2200      	movs	r2, #0
 80007fc:	f823 2c1a 	strh.w	r2, [r3, #-26]
		for(uint8_t i = 6; i > size; i--) {
 8000800:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000804:	3b01      	subs	r3, #1
 8000806:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800080a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800080e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000810:	429a      	cmp	r2, r3
 8000812:	dbed      	blt.n	80007f0 <feedback_timer_callback+0x64>
		}
		rc = rcl_publish(&feedback_publisher, &feedback, NULL);
 8000814:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000818:	2200      	movs	r2, #0
 800081a:	4619      	mov	r1, r3
 800081c:	4818      	ldr	r0, [pc, #96]	; (8000880 <feedback_timer_callback+0xf4>)
 800081e:	f00d f849 	bl	800d8b4 <rcl_publish>
 8000822:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (rc != RCL_RET_OK) return;
 8000824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000826:	2b00      	cmp	r3, #0
 8000828:	d123      	bne.n	8000872 <feedback_timer_callback+0xe6>

		for(uint8_t i = 0; i < size; i++) {
 800082a:	2300      	movs	r3, #0
 800082c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8000830:	e00f      	b.n	8000852 <feedback_timer_callback+0xc6>
			ScorBot.getPID(0)->show(i, debug);
 8000832:	2100      	movs	r1, #0
 8000834:	4811      	ldr	r0, [pc, #68]	; (800087c <feedback_timer_callback+0xf0>)
 8000836:	f000 fb8f 	bl	8000f58 <_ZN5Robot6getPIDEh>
 800083a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800083e:	f107 0214 	add.w	r2, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	f001 fb94 	bl	8001f70 <_ZN3PID4showEiR25racs_services__msg__Debug>
		for(uint8_t i = 0; i < size; i++) {
 8000848:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800084c:	3301      	adds	r3, #1
 800084e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8000852:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000856:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000858:	429a      	cmp	r2, r3
 800085a:	dcea      	bgt.n	8000832 <feedback_timer_callback+0xa6>
		}
		rc = rcl_publish(&debug_publisher, &debug, NULL);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	2200      	movs	r2, #0
 8000862:	4619      	mov	r1, r3
 8000864:	4807      	ldr	r0, [pc, #28]	; (8000884 <feedback_timer_callback+0xf8>)
 8000866:	f00d f825 	bl	800d8b4 <rcl_publish>
 800086a:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (rc != RCL_RET_OK) return;
 800086c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800086e:	2b00      	cmp	r3, #0
 8000870:	e000      	b.n	8000874 <feedback_timer_callback+0xe8>
		if (rc != RCL_RET_OK) return;
 8000872:	bf00      	nop
	}
}
 8000874:	374c      	adds	r7, #76	; 0x4c
 8000876:	46bd      	mov	sp, r7
 8000878:	bd90      	pop	{r4, r7, pc}
 800087a:	bf00      	nop
 800087c:	2000249c 	.word	0x2000249c
 8000880:	20006900 	.word	0x20006900
 8000884:	20006904 	.word	0x20006904

08000888 <robot_timer_callback>:

void robot_timer_callback(rcl_timer_t* timer, int64_t last_call_time)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	e9c7 2300 	strd	r2, r3, [r7]
	//UNUSED(timer);
	UNUSED(last_call_time);
	if (timer != NULL) {
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d002      	beq.n	80008a0 <robot_timer_callback+0x18>
		ScorBot.cycle();
 800089a:	4803      	ldr	r0, [pc, #12]	; (80008a8 <robot_timer_callback+0x20>)
 800089c:	f000 fdea 	bl	8001474 <_ZN5Robot5cycleEv>
	}

}
 80008a0:	bf00      	nop
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	2000249c 	.word	0x2000249c

080008ac <_ZN6FilterC1Ev>:


class Filter //final
{
public:
  Filter(){}
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f04f 0200 	mov.w	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f04f 0200 	mov.w	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f04f 0200 	mov.w	r2, #0
 80008ca:	615a      	str	r2, [r3, #20]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f04f 0200 	mov.w	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4618      	mov	r0, r3
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <_ZN3PIDC1Ev>:


class PID final
{
public:
  PID(){}
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b082      	sub	sp, #8
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	f04f 0200 	mov.w	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f04f 0200 	mov.w	r2, #0
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f04f 0200 	mov.w	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2200      	movs	r2, #0
 8000906:	731a      	strb	r2, [r3, #12]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f04f 0200 	mov.w	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f04f 0200 	mov.w	r2, #0
 8000916:	615a      	str	r2, [r3, #20]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f04f 0200 	mov.w	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f04f 0200 	mov.w	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f04f 0200 	mov.w	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f04f 0200 	mov.w	r2, #0
 8000936:	625a      	str	r2, [r3, #36]	; 0x24
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f04f 0200 	mov.w	r2, #0
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f04f 0200 	mov.w	r2, #0
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f04f 0200 	mov.w	r2, #0
 800094e:	631a      	str	r2, [r3, #48]	; 0x30
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f04f 0200 	mov.w	r2, #0
 8000956:	635a      	str	r2, [r3, #52]	; 0x34
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3338      	adds	r3, #56	; 0x38
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff ffa5 	bl	80008ac <_ZN6FilterC1Ev>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <_ZN10PinControlC1EP12GPIO_TypeDeft>:

PinControl::PinControl() {

}

PinControl::PinControl(GPIO_TypeDef* port, uint16_t pin){
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	4613      	mov	r3, r2
 8000978:	80fb      	strh	r3, [r7, #6]
  this->port = port;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	68ba      	ldr	r2, [r7, #8]
 800097e:	601a      	str	r2, [r3, #0]
  this->pin = pin;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	88fa      	ldrh	r2, [r7, #6]
 8000984:	809a      	strh	r2, [r3, #4]
  setLimits(0.0, 0.0);
 8000986:	eddf 0a06 	vldr	s1, [pc, #24]	; 80009a0 <_ZN10PinControlC1EP12GPIO_TypeDeft+0x34>
 800098a:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80009a0 <_ZN10PinControlC1EP12GPIO_TypeDeft+0x34>
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f000 f808 	bl	80009a4 <_ZN10PinControl9setLimitsEff>
}
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	4618      	mov	r0, r3
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	00000000 	.word	0x00000000

080009a4 <_ZN10PinControl9setLimitsEff>:
  this->port = port;
  this->pin = pin;
  setLimits(v1, v2);
}

void PinControl::setLimits(float v1, float v2){
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80009b0:	edc7 0a01 	vstr	s1, [r7, #4]
  this->v1 = v1;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	609a      	str	r2, [r3, #8]
  this->v2 = v2;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	60da      	str	r2, [r3, #12]
}
 80009c0:	bf00      	nop
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <_ZN10PinControl3setEb>:

void PinControl::set(bool state){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	460b      	mov	r3, r1
 80009d6:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(port, pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6818      	ldr	r0, [r3, #0]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	8899      	ldrh	r1, [r3, #4]
 80009e0:	78fb      	ldrb	r3, [r7, #3]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <_ZN10PinControl3setEb+0x1e>
 80009e6:	2301      	movs	r3, #1
 80009e8:	e000      	b.n	80009ec <_ZN10PinControl3setEb+0x20>
 80009ea:	2300      	movs	r3, #0
 80009ec:	461a      	mov	r2, r3
 80009ee:	f004 fb31 	bl	8005054 <HAL_GPIO_WritePin>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <_ZN10PinMeasureC1EP12GPIO_TypeDeft>:

PinMeasure::PinMeasure() {

}

PinMeasure::PinMeasure(GPIO_TypeDef* port, uint16_t pin){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	4613      	mov	r3, r2
 8000a08:	80fb      	strh	r3, [r7, #6]
  this->port = port;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	68ba      	ldr	r2, [r7, #8]
 8000a0e:	601a      	str	r2, [r3, #0]
  this->pin = pin;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	88fa      	ldrh	r2, [r7, #6]
 8000a14:	809a      	strh	r2, [r3, #4]
  setLimits(0.0, 0.0);
 8000a16:	eddf 0a06 	vldr	s1, [pc, #24]	; 8000a30 <_ZN10PinMeasureC1EP12GPIO_TypeDeft+0x34>
 8000a1a:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000a30 <_ZN10PinMeasureC1EP12GPIO_TypeDeft+0x34>
 8000a1e:	68f8      	ldr	r0, [r7, #12]
 8000a20:	f000 f808 	bl	8000a34 <_ZN10PinMeasure9setLimitsEff>
}
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4618      	mov	r0, r3
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	00000000 	.word	0x00000000

08000a34 <_ZN10PinMeasure9setLimitsEff>:
  this->port = port;
  this->pin = pin;
  setLimits(v1, v2);
}

void PinMeasure::setLimits(float v1, float v2){
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000a40:	edc7 0a01 	vstr	s1, [r7, #4]
  this->v1 = v1;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	609a      	str	r2, [r3, #8]
  this->v2 = v2;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	60da      	str	r2, [r3, #12]
}
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <_ZN10PinMeasure5stateEv>:

bool PinMeasure::state(){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin(port, pin);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	889b      	ldrh	r3, [r3, #4]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4610      	mov	r0, r2
 8000a70:	f004 fad8 	bl	8005024 <HAL_GPIO_ReadPin>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	bf14      	ite	ne
 8000a7a:	2301      	movne	r3, #1
 8000a7c:	2300      	moveq	r3, #0
 8000a7e:	b2db      	uxtb	r3, r3
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefh10PinMeasure>:
Motor::Motor(PinControl &INA, PinControl &INB,
			 TIM_HandleTypeDef* htimPWM, uint8_t CCRx,
			 TIM_HandleTypeDef* htimENC, PinMeasure &END)
  : pin_INA(INA), pin_INB(INB), htimPWM(htimPWM), CCRx(CCRx), htimENC(htimENC), pin_END(END) {}
*/
Motor::Motor(PinControl INA, PinControl INB,
 8000a88:	b084      	sub	sp, #16
 8000a8a:	b490      	push	{r4, r7}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	f107 0014 	add.w	r0, r7, #20
 8000a96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			 TIM_HandleTypeDef* htimPWM, uint8_t CCRx,
			 PinMeasure END)
  : pin_INA(INA), pin_INB(INB), htimPWM(htimPWM), CCRx(CCRx), htimENC(NULL), pin_END(END) {}
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	461c      	mov	r4, r3
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f103 0410 	add.w	r4, r3, #16
 8000aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ab4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000abc:	621a      	str	r2, [r3, #32]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2200      	movs	r2, #0
 8000acc:	629a      	str	r2, [r3, #40]	; 0x28
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8000ad4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ad8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ada:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc90      	pop	{r4, r7}
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>:

Motor::Motor(PinControl INA, PinControl INB,
 8000af4:	b084      	sub	sp, #16
 8000af6:	b490      	push	{r4, r7}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
 8000afe:	f107 0014 	add.w	r0, r7, #20
 8000b02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			 TIM_HandleTypeDef* htimPWM, uint8_t CCRx,
			 TIM_HandleTypeDef* htimENC, PinMeasure END)
  : pin_INA(INA), pin_INB(INB), htimPWM(htimPWM), CCRx(CCRx), htimENC(htimENC), pin_END(END) {}
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	461c      	mov	r4, r3
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f103 0410 	add.w	r4, r3, #16
 8000b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b28:	621a      	str	r2, [r3, #32]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000b30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b38:	629a      	str	r2, [r3, #40]	; 0x28
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8000b40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4618      	mov	r0, r3
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc90      	pop	{r4, r7}
 8000b5c:	b004      	add	sp, #16
 8000b5e:	4770      	bx	lr

08000b60 <_ZN5MotorD1Ev>:


Motor::~Motor() {}
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <_ZN5Motor10getEncoderEv>:

/*void Motor::invertEncoder(bool invert){
  this->encoder_invert = invert;
}*/

int16_t Motor::getEncoder(){
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
  if (htimENC != NULL) {
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d009      	beq.n	8000b9a <_ZN5Motor10getEncoderEv+0x24>
	  return htimENC->Instance->CNT - (HALF_ENC+1);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	b21b      	sxth	r3, r3
 8000b98:	e000      	b.n	8000b9c <_ZN5Motor10getEncoderEv+0x26>
  } else {
	  return 0;
 8000b9a:	2300      	movs	r3, #0
  }
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <_ZN5Motor10driveMotorEs>:

void Motor::invertMotor(bool invert){
  this->motor_invert = invert;
}
void Motor::driveMotor(int16_t spwm){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	807b      	strh	r3, [r7, #2]
  OperatingMode mode = OperatingMode::BRAKE_GND;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  spwm = spwm > -(HALF_PWM+1) ? spwm : -(HALF_PWM+1);
  spwm = spwm < HALF_PWM ? spwm : HALF_PWM;
  //spwm = (int16_t) std::min(std::max(spwm, (int16_t) -(HALF_PWM+1)), (int16_t) HALF_PWM);

  if(spwm > 0) {
 8000bb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	dd09      	ble.n	8000bd4 <_ZN5Motor10driveMotorEs+0x2c>
    mode = motor_invert ? OperatingMode::SPIN_CCW : OperatingMode::SPIN_CW;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <_ZN5Motor10driveMotorEs+0x26>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e000      	b.n	8000bd0 <_ZN5Motor10driveMotorEs+0x28>
 8000bce:	2302      	movs	r3, #2
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	e00f      	b.n	8000bf4 <_ZN5Motor10driveMotorEs+0x4c>
  } else if (spwm < 0) {
 8000bd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	da09      	bge.n	8000bf0 <_ZN5Motor10driveMotorEs+0x48>
    mode = motor_invert ? OperatingMode::SPIN_CW : OperatingMode::SPIN_CCW;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <_ZN5Motor10driveMotorEs+0x42>
 8000be6:	2302      	movs	r3, #2
 8000be8:	e000      	b.n	8000bec <_ZN5Motor10driveMotorEs+0x44>
 8000bea:	2301      	movs	r3, #1
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	e001      	b.n	8000bf4 <_ZN5Motor10driveMotorEs+0x4c>
  } else {
    mode = OperatingMode::BRAKE_GND;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
  }

  switch(mode){
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	2b03      	cmp	r3, #3
 8000bf8:	d83a      	bhi.n	8000c70 <_ZN5Motor10driveMotorEs+0xc8>
 8000bfa:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <_ZN5Motor10driveMotorEs+0x58>)
 8000bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c00:	08000c11 	.word	0x08000c11
 8000c04:	08000c29 	.word	0x08000c29
 8000c08:	08000c41 	.word	0x08000c41
 8000c0c:	08000c59 	.word	0x08000c59
    case OperatingMode::BRAKE_GND:
      pin_INA.set(false);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fed9 	bl	80009cc <_ZN10PinControl3setEb>
      pin_INB.set(false);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3310      	adds	r3, #16
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fed3 	bl	80009cc <_ZN10PinControl3setEb>
      break;
 8000c26:	e023      	b.n	8000c70 <_ZN5Motor10driveMotorEs+0xc8>
    case OperatingMode::SPIN_CCW:
      pin_INA.set(false);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fecd 	bl	80009cc <_ZN10PinControl3setEb>
      pin_INB.set(true);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	3310      	adds	r3, #16
 8000c36:	2101      	movs	r1, #1
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fec7 	bl	80009cc <_ZN10PinControl3setEb>
      break;
 8000c3e:	e017      	b.n	8000c70 <_ZN5Motor10driveMotorEs+0xc8>
    case OperatingMode::SPIN_CW:
      pin_INA.set(true);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2101      	movs	r1, #1
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fec1 	bl	80009cc <_ZN10PinControl3setEb>
      pin_INB.set(false);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3310      	adds	r3, #16
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff febb 	bl	80009cc <_ZN10PinControl3setEb>
      break;
 8000c56:	e00b      	b.n	8000c70 <_ZN5Motor10driveMotorEs+0xc8>
    case OperatingMode::BRAKE_VCC:
      pin_INA.set(true);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff feb5 	bl	80009cc <_ZN10PinControl3setEb>
      pin_INB.set(true);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3310      	adds	r3, #16
 8000c66:	2101      	movs	r1, #1
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff feaf 	bl	80009cc <_ZN10PinControl3setEb>
      break;
 8000c6e:	bf00      	nop
  }
  switch(CCRx) {
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c76:	3b01      	subs	r3, #1
 8000c78:	2b05      	cmp	r3, #5
 8000c7a:	d851      	bhi.n	8000d20 <_ZN5Motor10driveMotorEs+0x178>
 8000c7c:	a201      	add	r2, pc, #4	; (adr r2, 8000c84 <_ZN5Motor10driveMotorEs+0xdc>)
 8000c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c82:	bf00      	nop
 8000c84:	08000c9d 	.word	0x08000c9d
 8000c88:	08000cb3 	.word	0x08000cb3
 8000c8c:	08000cc9 	.word	0x08000cc9
 8000c90:	08000cdf 	.word	0x08000cdf
 8000c94:	08000cf5 	.word	0x08000cf5
 8000c98:	08000d0b 	.word	0x08000d0b
    case 1:
      htimPWM->Instance->CCR1 = (uint16_t) abs(spwm);
 8000c9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	bfb8      	it	lt
 8000ca4:	425b      	neglt	r3, r3
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6a1b      	ldr	r3, [r3, #32]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	635a      	str	r2, [r3, #52]	; 0x34
      break;
 8000cb0:	e036      	b.n	8000d20 <_ZN5Motor10driveMotorEs+0x178>
    case 2:
      htimPWM->Instance->CCR2 = (uint16_t) abs(spwm);
 8000cb2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	bfb8      	it	lt
 8000cba:	425b      	neglt	r3, r3
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6a1b      	ldr	r3, [r3, #32]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	639a      	str	r2, [r3, #56]	; 0x38
      break;
 8000cc6:	e02b      	b.n	8000d20 <_ZN5Motor10driveMotorEs+0x178>
    case 3:
      htimPWM->Instance->CCR3 = (uint16_t) abs(spwm);
 8000cc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	bfb8      	it	lt
 8000cd0:	425b      	neglt	r3, r3
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a1b      	ldr	r3, [r3, #32]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8000cdc:	e020      	b.n	8000d20 <_ZN5Motor10driveMotorEs+0x178>
    case 4:
      htimPWM->Instance->CCR4 = (uint16_t) abs(spwm);
 8000cde:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	bfb8      	it	lt
 8000ce6:	425b      	neglt	r3, r3
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a1b      	ldr	r3, [r3, #32]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8000cf2:	e015      	b.n	8000d20 <_ZN5Motor10driveMotorEs+0x178>
    case 5:
      htimPWM->Instance->CCR5 = (uint16_t) abs(spwm);
 8000cf4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	bfb8      	it	lt
 8000cfc:	425b      	neglt	r3, r3
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6a1b      	ldr	r3, [r3, #32]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8000d08:	e00a      	b.n	8000d20 <_ZN5Motor10driveMotorEs+0x178>
    case 6:
      htimPWM->Instance->CCR6 = (uint16_t) abs(spwm);
 8000d0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	bfb8      	it	lt
 8000d12:	425b      	neglt	r3, r3
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6a1b      	ldr	r3, [r3, #32]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8000d1e:	bf00      	nop

  }
}
 8000d20:	bf00      	nop
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <_ZN5Motor11isInEndStopEv>:

bool Motor::isInEndStop(){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  return pin_END.state();
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	332c      	adds	r3, #44	; 0x2c
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fe91 	bl	8000a5c <_ZN10PinMeasure5stateEv>
 8000d3a:	4603      	mov	r3, r0
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <_ZN5RobotC1E10PinControlS0_mhPP5MotorPf>:
// Robot
// ==================================================

/*Robot::Robot(PinControl &enable, PinControl &toggle, unsigned long ts_ms, uint8_t size, Motor **motors, float *encs_div)
  : motors(motors), error_div(encs_div), pin_enable(enable), pin_toggle(toggle) {*/
Robot::Robot(PinControl enable, PinControl toggle, unsigned long ts_ms, uint8_t size, Motor **motors, float *encs_div)
 8000d44:	b084      	sub	sp, #16
 8000d46:	b590      	push	{r4, r7, lr}
 8000d48:	b099      	sub	sp, #100	; 0x64
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8000d52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  : pin_enable(enable), pin_toggle(toggle), motors(motors), error_div(encs_div) {
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	461c      	mov	r4, r3
 8000d5a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000d5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f103 0410 	add.w	r4, r3, #16
 8000d6a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000d6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000d7a:	629a      	str	r2, [r3, #40]	; 0x28
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000d82:	641a      	str	r2, [r3, #64]	; 0x40

  this->ts = ts_ms;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000d8a:	621a      	str	r2, [r3, #32]
  //this->motors = 		(Motor**)	malloc(size * sizeof(Motor*));
  this->pids = 			(PID*)		malloc(size * sizeof(PID));
 8000d8c:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8000d90:	2254      	movs	r2, #84	; 0x54
 8000d92:	fb02 f303 	mul.w	r3, r2, r3
 8000d96:	4618      	mov	r0, r3
 8000d98:	f01c f9c8 	bl	801d12c <malloc>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	461a      	mov	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	62da      	str	r2, [r3, #44]	; 0x2c
  this->switches = 		(bool*) 	malloc(size * sizeof(bool));
 8000da4:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8000da8:	4618      	mov	r0, r3
 8000daa:	f01c f9bf 	bl	801d12c <malloc>
 8000dae:	4603      	mov	r3, r0
 8000db0:	461a      	mov	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	635a      	str	r2, [r3, #52]	; 0x34
  this->motors_pwm = 	(int16_t*) 	malloc(size * sizeof(int16_t));
 8000db6:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f01c f9b5 	bl	801d12c <malloc>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	639a      	str	r2, [r3, #56]	; 0x38
  this->encoders =		(int16_t*)	malloc(size * sizeof(int16_t));
 8000dca:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f01c f9ab 	bl	801d12c <malloc>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	461a      	mov	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	63da      	str	r2, [r3, #60]	; 0x3c
  //this->error_div = 	(float*) 	malloc(size * sizeof(float));

  this->size = size;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f897 2098 	ldrb.w	r2, [r7, #152]	; 0x98
 8000de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  this->status = Status::Idle;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  for(int i = 0; i < size; i++){
 8000df0:	2300      	movs	r3, #0
 8000df2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000df4:	e029      	b.n	8000e4a <_ZN5RobotC1E10PinControlS0_mhPP5MotorPf+0x106>
    this->switches[i] = false;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dfc:	4413      	add	r3, r2
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
    this->motors_pwm[i] = 0;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	4413      	add	r3, r2
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	801a      	strh	r2, [r3, #0]
    this->encoders[i] = 0;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4413      	add	r3, r2
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	801a      	strh	r2, [r3, #0]
    this->pids[i] = PID();
 8000e1e:	f107 0308 	add.w	r3, r7, #8
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fd5d 	bl	80008e2 <_ZN3PIDC1Ev>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e2e:	2154      	movs	r1, #84	; 0x54
 8000e30:	fb01 f303 	mul.w	r3, r1, r3
 8000e34:	4413      	add	r3, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f107 0308 	add.w	r3, r7, #8
 8000e3c:	2254      	movs	r2, #84	; 0x54
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f01c fe1d 	bl	801da7e <memcpy>
  for(int i = 0; i < size; i++){
 8000e44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e46:	3301      	adds	r3, #1
 8000e48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000e4a:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8000e4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000e50:	429a      	cmp	r2, r3
 8000e52:	dbd0      	blt.n	8000df6 <_ZN5RobotC1E10PinControlS0_mhPP5MotorPf+0xb2>
  }

  update();
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f000 fa2d 	bl	80012b4 <_ZN5Robot6updateEv>
}
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3764      	adds	r7, #100	; 0x64
 8000e60:	46bd      	mov	sp, r7
 8000e62:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000e66:	b004      	add	sp, #16
 8000e68:	4770      	bx	lr

08000e6a <_ZN5RobotD1Ev>:
  : Robot(enable, toggle,ts_ms, size, motors, NULL) {}

Robot::Robot(PinControl enable, PinControl toggle, unsigned long ts_ms, uint8_t size)
  : Robot(enable, toggle,ts_ms, size, NULL, NULL) {}

Robot::~Robot() {
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  free(this->motors);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e76:	4618      	mov	r0, r3
 8000e78:	f01c f960 	bl	801d13c <free>
  free(this->pids);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e80:	4618      	mov	r0, r3
 8000e82:	f01c f95b 	bl	801d13c <free>
  free(this->switches);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f01c f956 	bl	801d13c <free>
  free(this->motors_pwm);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e94:	4618      	mov	r0, r3
 8000e96:	f01c f951 	bl	801d13c <free>
  free(this->encoders);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f01c f94c 	bl	801d13c <free>
  free(this->error_div);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f01c f947 	bl	801d13c <free>
}
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <_ZN5Robot7getSizeEv>:

int Robot::getSize(){
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  return this->size;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <_ZN5Robot9setStatusENS_6StatusEb>:

Robot::Status Robot::getStatus(){
  return this->status;
}

void Robot::setStatus(Status status, bool reset = false){
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	460b      	mov	r3, r1
 8000edc:	70fb      	strb	r3, [r7, #3]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	70bb      	strb	r3, [r7, #2]
  if(this->status != status || reset){
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ee8:	78fa      	ldrb	r2, [r7, #3]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d102      	bne.n	8000ef4 <_ZN5Robot9setStatusENS_6StatusEb+0x22>
 8000eee:	78bb      	ldrb	r3, [r7, #2]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d006      	beq.n	8000f02 <_ZN5Robot9setStatusENS_6StatusEb+0x30>
    //resetPWMs(); riga non necessaria?
    resetPIDs();
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 f842 	bl	8000f7e <_ZN5Robot9resetPIDsEv>
    this->status = status;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	78fa      	ldrb	r2, [r7, #3]
 8000efe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  }
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <_ZN5Robot8getMotorEh>:

Motor * Robot::getMotor(uint8_t index){
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	460b      	mov	r3, r1
 8000f14:	70fb      	strb	r3, [r7, #3]
  return this->motors[index];
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f1a:	78fb      	ldrb	r3, [r7, #3]
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	681b      	ldr	r3, [r3, #0]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <_ZN5Robot17setEncoderDividerEhf>:
void Robot::setMotor(uint8_t index, Motor * motor, float enc_div){
  this->motors[index] = motor;
  this->error_div[index] = enc_div;
}

void Robot::setEncoderDivider(uint8_t index, float enc_div){
 8000f2e:	b480      	push	{r7}
 8000f30:	b085      	sub	sp, #20
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	60f8      	str	r0, [r7, #12]
 8000f36:	460b      	mov	r3, r1
 8000f38:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f3c:	72fb      	strb	r3, [r7, #11]
  this->error_div[index] = enc_div;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f42:	7afb      	ldrb	r3, [r7, #11]
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	601a      	str	r2, [r3, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <_ZN5Robot6getPIDEh>:

PID * Robot::getPID(uint8_t index){
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	70fb      	strb	r3, [r7, #3]
  return &(this->pids[index]);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f68:	78fb      	ldrb	r3, [r7, #3]
 8000f6a:	2154      	movs	r1, #84	; 0x54
 8000f6c:	fb01 f303 	mul.w	r3, r1, r3
 8000f70:	4413      	add	r3, r2
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <_ZN5Robot9resetPIDsEv>:
  for(int i = 0; i < size; i++){
    getPID(i)->setup(kp, ki, kd);
  }
}

void Robot::resetPIDs(){
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b084      	sub	sp, #16
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	e00c      	b.n	8000fa6 <_ZN5Robot9resetPIDsEv+0x28>
    getPID(i)->reset();
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	4619      	mov	r1, r3
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ffe0 	bl	8000f58 <_ZN5Robot6getPIDEh>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fed6 	bl	8001d4c <_ZN3PID5resetEv>
  for(int i = 0; i < size; i++){
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fac:	461a      	mov	r2, r3
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	dbeb      	blt.n	8000f8c <_ZN5Robot9resetPIDsEv+0xe>
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <_ZN5Robot10getEncoderEh>:

int16_t Robot::getEncoder(uint8_t index) {
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	70fb      	strb	r3, [r7, #3]
	return getMotor(index)->getEncoder();
 8000fca:	78fb      	ldrb	r3, [r7, #3]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ff9b 	bl	8000f0a <_ZN5Robot8getMotorEh>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fdcd 	bl	8000b76 <_ZN5Motor10getEncoderEv>
 8000fdc:	4603      	mov	r3, r0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <_ZN5Robot10setEncoderEhs>:

void Robot::setEncoder(uint8_t i, const int16_t enc) {
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	70fb      	strb	r3, [r7, #3]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	803b      	strh	r3, [r7, #0]
	encoders[i] = enc;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ffa:	78fb      	ldrb	r3, [r7, #3]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	4413      	add	r3, r2
 8001000:	883a      	ldrh	r2, [r7, #0]
 8001002:	801a      	strh	r2, [r3, #0]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <_ZN5Robot11setEncodersEPKs>:

void Robot::setEncoders(const int16_t *encs) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  for(int i = 0; i < 5; i++) {
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	e00e      	b.n	800103e <_ZN5Robot11setEncodersEPKs+0x2e>
    setEncoder(i, encs[i]);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	b2d9      	uxtb	r1, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	4413      	add	r3, r2
 800102c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001030:	461a      	mov	r2, r3
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffd7 	bl	8000fe6 <_ZN5Robot10setEncoderEhs>
  for(int i = 0; i < 5; i++) {
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	3301      	adds	r3, #1
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2b04      	cmp	r3, #4
 8001042:	dded      	ble.n	8001020 <_ZN5Robot11setEncodersEPKs+0x10>
  }
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <_ZN5Robot7setPWMsEPKs>:

void Robot::setPWMs(const int16_t *pwms){
 800104e:	b580      	push	{r7, lr}
 8001050:	b084      	sub	sp, #16
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	6039      	str	r1, [r7, #0]
  for(int i = 0; i < size; i++){
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	e00e      	b.n	800107c <_ZN5Robot7setPWMsEPKs+0x2e>
    setPWM(i, pwms[i]);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	b2d9      	uxtb	r1, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	4413      	add	r3, r2
 800106a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800106e:	461a      	mov	r2, r3
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f80f 	bl	8001094 <_ZN5Robot6setPWMEhs>
  for(int i = 0; i < size; i++){
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	3301      	adds	r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001082:	461a      	mov	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4293      	cmp	r3, r2
 8001088:	dbe9      	blt.n	800105e <_ZN5Robot7setPWMsEPKs+0x10>
  }
}
 800108a:	bf00      	nop
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <_ZN5Robot6setPWMEhs>:

void Robot::setPWM(uint8_t index, const int16_t pwm){
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	70fb      	strb	r3, [r7, #3]
 80010a0:	4613      	mov	r3, r2
 80010a2:	803b      	strh	r3, [r7, #0]
  motors_pwm[index] = pwm;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4413      	add	r3, r2
 80010ae:	883a      	ldrh	r2, [r7, #0]
 80010b0:	801a      	strh	r2, [r3, #0]

}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <_ZN5Robot9resetPWMsEv>:

void Robot::resetPWMs(){
 80010be:	b480      	push	{r7}
 80010c0:	b085      	sub	sp, #20
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	e009      	b.n	80010e0 <_ZN5Robot9resetPWMsEv+0x22>
    motors_pwm[i] = 0;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4413      	add	r3, r2
 80010d6:	2200      	movs	r2, #0
 80010d8:	801a      	strh	r2, [r3, #0]
  for(int i = 0; i < size; i++){
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	3301      	adds	r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010e6:	461a      	mov	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4293      	cmp	r3, r2
 80010ec:	dbee      	blt.n	80010cc <_ZN5Robot9resetPWMsEv+0xe>
  }
}
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request>:
void Robot::disableMotors(){
  setStatus(Status::Idle, true);
  pin_enable.set(false);
}

void Robot::rcvCtrl(racs_services__srv__Control_Request* request){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]

  if(request->command > 2) {
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	785b      	ldrb	r3, [r3, #1]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d905      	bls.n	800111a <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x1e>
    setStatus(Status::Idle, true);
 800110e:	2201      	movs	r2, #1
 8001110:	2100      	movs	r1, #0
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff fedd 	bl	8000ed2 <_ZN5Robot9setStatusENS_6StatusEb>
    return;
 8001118:	e04a      	b.n	80011b0 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xb4>
  }

  switch(request->command){
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	785b      	ldrb	r3, [r3, #1]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d002      	beq.n	8001128 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x2c>
 8001122:	2b02      	cmp	r3, #2
 8001124:	d01c      	beq.n	8001160 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x64>
 8001126:	e03c      	b.n	80011a2 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xa6>
    case (unsigned char) Command::Idle:
      for(int i = 0; i < size; i++) {
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	e010      	b.n	8001150 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x54>
        motors_pwm[i] = 0;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	2200      	movs	r2, #0
 800113a:	801a      	strh	r2, [r3, #0]
        encoders[i] = 0;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	4413      	add	r3, r2
 8001146:	2200      	movs	r2, #0
 8001148:	801a      	strh	r2, [r3, #0]
      for(int i = 0; i < size; i++) {
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	3301      	adds	r3, #1
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001156:	461a      	mov	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4293      	cmp	r3, r2
 800115c:	dbe7      	blt.n	800112e <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x32>
      }
      break;
 800115e:	e020      	b.n	80011a2 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xa6>

    case (unsigned char) Command::PID:
      for(int i = 0; i < size; i++) {
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	e015      	b.n	8001192 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x96>
        motors_pwm[i] = 0;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	2200      	movs	r2, #0
 8001172:	801a      	strh	r2, [r3, #0]
        encoders[i] = request->encoders[i];
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	441a      	add	r2, r3
 800117e:	6839      	ldr	r1, [r7, #0]
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	440b      	add	r3, r1
 8001186:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800118a:	8013      	strh	r3, [r2, #0]
      for(int i = 0; i < size; i++) {
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	3301      	adds	r3, #1
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001198:	461a      	mov	r2, r3
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	4293      	cmp	r3, r2
 800119e:	dbe2      	blt.n	8001166 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x6a>
      }
      break;
 80011a0:	bf00      	nop
  }

  setStatus((Status) request->command);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	785b      	ldrb	r3, [r3, #1]
 80011a6:	2200      	movs	r2, #0
 80011a8:	4619      	mov	r1, r3
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff fe91 	bl	8000ed2 <_ZN5Robot9setStatusENS_6StatusEb>
}
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <_ZN5Robot7sndCtrlEP36racs_services__srv__Control_Response>:

void Robot::sndCtrl(racs_services__srv__Control_Response* response){
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	6039      	str	r1, [r7, #0]
	response->response = (uint8_t) status;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	701a      	strb	r2, [r3, #0]
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request>:

void Robot::rcvSetup(racs_services__srv__Setup_Request* request){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]

  setEncoderDivider(request->motor_index, request->eed);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	781a      	ldrb	r2, [r3, #0]
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80011ec:	eeb0 0a67 	vmov.f32	s0, s15
 80011f0:	4611      	mov	r1, r2
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff fe9b 	bl	8000f2e <_ZN5Robot17setEncoderDividerEhf>
  getPID(request->motor_index)->reset();
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff feaa 	bl	8000f58 <_ZN5Robot6getPIDEh>
 8001204:	4603      	mov	r3, r0
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fda0 	bl	8001d4c <_ZN3PID5resetEv>
  getPID(request->motor_index)->init((float) ts/1000.0, request->tau, request->sat, true);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff fea0 	bl	8000f58 <_ZN5Robot6getPIDEh>
 8001218:	4602      	mov	r2, r0
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a1b      	ldr	r3, [r3, #32]
 800121e:	ee07 3a90 	vmov	s15, r3
 8001222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001226:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001294 <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request+0xbc>
 800122a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	edd3 7a05 	vldr	s15, [r3, #20]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	edd3 6a06 	vldr	s13, [r3, #24]
 800123a:	2101      	movs	r1, #1
 800123c:	eeb0 1a66 	vmov.f32	s2, s13
 8001240:	eef0 0a67 	vmov.f32	s1, s15
 8001244:	eeb0 0a47 	vmov.f32	s0, s14
 8001248:	4610      	mov	r0, r2
 800124a:	f000 fcd1 	bl	8001bf0 <_ZN3PID4initEfffb>
  getPID(request->motor_index)->setup(request->p, request->i, request->d);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	4619      	mov	r1, r3
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff fe7f 	bl	8000f58 <_ZN5Robot6getPIDEh>
 800125a:	4602      	mov	r2, r0
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	ed93 7a03 	vldr	s14, [r3, #12]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	edd3 6a04 	vldr	s13, [r3, #16]
 800126e:	eeb0 1a66 	vmov.f32	s2, s13
 8001272:	eef0 0a47 	vmov.f32	s1, s14
 8001276:	eeb0 0a67 	vmov.f32	s0, s15
 800127a:	4610      	mov	r0, r2
 800127c:	f000 fd4d 	bl	8001d1a <_ZN3PID5setupEfff>

  setStatus(Status::Idle, true);
 8001280:	2201      	movs	r2, #1
 8001282:	2100      	movs	r1, #0
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff fe24 	bl	8000ed2 <_ZN5Robot9setStatusENS_6StatusEb>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	447a0000 	.word	0x447a0000

08001298 <_ZN5Robot8sndSetupEP34racs_services__srv__Setup_Response>:

void Robot::sndSetup(racs_services__srv__Setup_Response* response){
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  response->response = (uint8_t) Status::Setup;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	2203      	movs	r2, #3
 80012a6:	701a      	strb	r2, [r3, #0]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <_ZN5Robot6updateEv>:

void Robot::update(){
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b089      	sub	sp, #36	; 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  switch(status){
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d00b      	beq.n	80012de <_ZN5Robot6updateEv+0x2a>
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d87d      	bhi.n	80013c6 <_ZN5Robot6updateEv+0x112>
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <_ZN5Robot6updateEv+0x22>
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	f000 8084 	beq.w	80013dc <_ZN5Robot6updateEv+0x128>
 80012d4:	e077      	b.n	80013c6 <_ZN5Robot6updateEv+0x112>
    case Status::Idle:
      resetPWMs();
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff fef1 	bl	80010be <_ZN5Robot9resetPWMsEv>
      break;
 80012dc:	e07f      	b.n	80013de <_ZN5Robot6updateEv+0x12a>

    case Status::DAQ:
      break;

    case Status::PID:
      for(int i = 0; i < 1; i++){
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
 80012e2:	e06c      	b.n	80013be <_ZN5Robot6updateEv+0x10a>
        float err = (float) (encoders[i] - getMotor(i)->getEncoder()) / ((error_div[i] == 0) ? 1.0 : error_div[i]);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	4413      	add	r3, r2
 80012ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f2:	461c      	mov	r4, r3
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	4619      	mov	r1, r3
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff fe05 	bl	8000f0a <_ZN5Robot8getMotorEh>
 8001300:	4603      	mov	r3, r0
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fc37 	bl	8000b76 <_ZN5Motor10getEncoderEv>
 8001308:	4603      	mov	r3, r0
 800130a:	1ae3      	subs	r3, r4, r3
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001314:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	edd3 7a00 	vldr	s15, [r3]
 8001326:	eef5 7a40 	vcmp.f32	s15, #0.0
 800132a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132e:	d009      	beq.n	8001344 <_ZN5Robot6updateEv+0x90>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001342:	e001      	b.n	8001348 <_ZN5Robot6updateEv+0x94>
 8001344:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8001348:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800134c:	eef7 7bc6 	vcvt.f32.f64	s15, d6
 8001350:	edc7 7a05 	vstr	s15, [r7, #20]
        float gettopiddo = getPID(i)->evolve(err);
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	b2db      	uxtb	r3, r3
 8001358:	4619      	mov	r1, r3
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fdfc 	bl	8000f58 <_ZN5Robot6getPIDEh>
 8001360:	4603      	mov	r3, r0
 8001362:	ed97 0a05 	vldr	s0, [r7, #20]
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fde7 	bl	8001f3a <_ZN3PID6evolveEf>
 800136c:	eef0 7a40 	vmov.f32	s15, s0
 8001370:	edc7 7a02 	vstr	s15, [r7, #8]
    	motors_pwm[i] = (int16_t) std::min(std::max((float) -(HALF_PWM+1), gettopiddo), (float) HALF_PWM);
 8001374:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	f107 0208 	add.w	r2, r7, #8
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f000 fbcf 	bl	8001b28 <_ZSt3maxIfERKT_S2_S2_>
 800138a:	4602      	mov	r2, r0
 800138c:	4b25      	ldr	r3, [pc, #148]	; (8001424 <_ZN5Robot6updateEv+0x170>)
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	4619      	mov	r1, r3
 8001396:	4610      	mov	r0, r2
 8001398:	f000 fbdf 	bl	8001b5a <_ZSt3minIfERKT_S2_S2_>
 800139c:	4603      	mov	r3, r0
 800139e:	edd3 7a00 	vldr	s15, [r3]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4413      	add	r3, r2
 80013ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013b0:	ee17 2a90 	vmov	r2, s15
 80013b4:	b212      	sxth	r2, r2
 80013b6:	801a      	strh	r2, [r3, #0]
      for(int i = 0; i < 1; i++){
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	3301      	adds	r3, #1
 80013bc:	61fb      	str	r3, [r7, #28]
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	dd8f      	ble.n	80012e4 <_ZN5Robot6updateEv+0x30>
      }
      break;
 80013c4:	e00b      	b.n	80013de <_ZN5Robot6updateEv+0x12a>

    default:
      resetPWMs();
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff fe79 	bl	80010be <_ZN5Robot9resetPWMsEv>
      resetPIDs();
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff fdd6 	bl	8000f7e <_ZN5Robot9resetPIDsEv>
      status = Status::Idle;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      break;
 80013da:	e000      	b.n	80013de <_ZN5Robot6updateEv+0x12a>
      break;
 80013dc:	bf00      	nop
  }

  for(int i = 0; i < size; i++){
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
 80013e2:	e012      	b.n	800140a <_ZN5Robot6updateEv+0x156>
    switches[i] = getMotor(i)->isInEndStop();
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	4619      	mov	r1, r3
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff fd8d 	bl	8000f0a <_ZN5Robot8getMotorEh>
 80013f0:	4601      	mov	r1, r0
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	18d4      	adds	r4, r2, r3
 80013fa:	4608      	mov	r0, r1
 80013fc:	f7ff fc94 	bl	8000d28 <_ZN5Motor11isInEndStopEv>
 8001400:	4603      	mov	r3, r0
 8001402:	7023      	strb	r3, [r4, #0]
  for(int i = 0; i < size; i++){
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	3301      	adds	r3, #1
 8001408:	61bb      	str	r3, [r7, #24]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001410:	461a      	mov	r2, r3
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	4293      	cmp	r3, r2
 8001416:	dbe5      	blt.n	80013e4 <_ZN5Robot6updateEv+0x130>
  }
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3724      	adds	r7, #36	; 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd90      	pop	{r4, r7, pc}
 8001422:	bf00      	nop
 8001424:	46ffff00 	.word	0x46ffff00

08001428 <_ZN5Robot7actuateEv>:

void Robot::actuate(){
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	e012      	b.n	800145c <_ZN5Robot7actuateEv+0x34>
    getMotor(i)->driveMotor(motors_pwm[i]);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	4619      	mov	r1, r3
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff fd64 	bl	8000f0a <_ZN5Robot8getMotorEh>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001450:	4619      	mov	r1, r3
 8001452:	f7ff fba9 	bl	8000ba8 <_ZN5Motor10driveMotorEs>
  for(int i = 0; i < size; i++){
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	3301      	adds	r3, #1
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001462:	461a      	mov	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4293      	cmp	r3, r2
 8001468:	dbe5      	blt.n	8001436 <_ZN5Robot7actuateEv+0xe>
  }
}
 800146a:	bf00      	nop
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <_ZN5Robot5cycleEv>:

void Robot::cycle(){
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
        pin_toggle.set(true);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3310      	adds	r3, #16
 8001480:	2101      	movs	r1, #1
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff faa2 	bl	80009cc <_ZN10PinControl3setEb>
        update();
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ff13 	bl	80012b4 <_ZN5Robot6updateEv>
        actuate();
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ffca 	bl	8001428 <_ZN5Robot7actuateEv>
        pin_toggle.set(false);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3310      	adds	r3, #16
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fa96 	bl	80009cc <_ZN10PinControl3setEb>
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <_Z12create_robotv>:

Robot create_robot() {
 80014a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014aa:	f5ad 7d41 	sub.w	sp, sp, #772	; 0x304
 80014ae:	af0c      	add	r7, sp, #48	; 0x30
 80014b0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80014b4:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80014b8:	6018      	str	r0, [r3, #0]

	PinControl mot1_ina = PinControl(MOTOR1_INA_GPIO_Port, MOTOR1_INA_Pin);
 80014ba:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80014be:	2201      	movs	r2, #1
 80014c0:	49cd      	ldr	r1, [pc, #820]	; (80017f8 <_Z12create_robotv+0x350>)
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fa52 	bl	800096c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot1_inb = PinControl(MOTOR1_INB_GPIO_Port, MOTOR1_INB_Pin);
 80014c8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80014cc:	2202      	movs	r2, #2
 80014ce:	49ca      	ldr	r1, [pc, #808]	; (80017f8 <_Z12create_robotv+0x350>)
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fa4b 	bl	800096c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot1_end = PinMeasure(MOTOR1_END_GPIO_Port, MOTOR1_END_Pin);
 80014d6:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80014da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014de:	49c7      	ldr	r1, [pc, #796]	; (80017fc <_Z12create_robotv+0x354>)
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fa8b 	bl	80009fc <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot2_ina = PinControl(MOTOR2_INA_GPIO_Port, MOTOR2_INA_Pin);
 80014e6:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80014ea:	2204      	movs	r2, #4
 80014ec:	49c2      	ldr	r1, [pc, #776]	; (80017f8 <_Z12create_robotv+0x350>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fa3c 	bl	800096c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot2_inb = PinControl(MOTOR2_INB_GPIO_Port, MOTOR2_INB_Pin);
 80014f4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80014f8:	2208      	movs	r2, #8
 80014fa:	49bf      	ldr	r1, [pc, #764]	; (80017f8 <_Z12create_robotv+0x350>)
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fa35 	bl	800096c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot2_end = PinMeasure(MOTOR2_END_GPIO_Port, MOTOR2_END_Pin);
 8001502:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001506:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800150a:	49bc      	ldr	r1, [pc, #752]	; (80017fc <_Z12create_robotv+0x354>)
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fa75 	bl	80009fc <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot3_ina = PinControl(MOTOR3_INA_GPIO_Port, MOTOR3_INA_Pin);
 8001512:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001516:	2210      	movs	r2, #16
 8001518:	49b7      	ldr	r1, [pc, #732]	; (80017f8 <_Z12create_robotv+0x350>)
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fa26 	bl	800096c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot3_inb = PinControl(MOTOR3_INB_GPIO_Port, MOTOR3_INB_Pin);
 8001520:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8001524:	2220      	movs	r2, #32
 8001526:	49b4      	ldr	r1, [pc, #720]	; (80017f8 <_Z12create_robotv+0x350>)
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fa1f 	bl	800096c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot3_end = PinMeasure(MOTOR3_END_GPIO_Port, MOTOR3_END_Pin);
 800152e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001532:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001536:	49b1      	ldr	r1, [pc, #708]	; (80017fc <_Z12create_robotv+0x354>)
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fa5f 	bl	80009fc <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot4_ina = PinControl(MOTOR4_INA_GPIO_Port, MOTOR4_INA_Pin);
 800153e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001542:	2240      	movs	r2, #64	; 0x40
 8001544:	49ac      	ldr	r1, [pc, #688]	; (80017f8 <_Z12create_robotv+0x350>)
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fa10 	bl	800096c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot4_inb = PinControl(MOTOR4_INB_GPIO_Port, MOTOR4_INB_Pin);
 800154c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001550:	2280      	movs	r2, #128	; 0x80
 8001552:	49a9      	ldr	r1, [pc, #676]	; (80017f8 <_Z12create_robotv+0x350>)
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fa09 	bl	800096c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot4_end = PinMeasure(MOTOR4_END_GPIO_Port, MOTOR4_END_Pin);
 800155a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800155e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001562:	49a6      	ldr	r1, [pc, #664]	; (80017fc <_Z12create_robotv+0x354>)
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fa49 	bl	80009fc <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot5_ina = PinControl(MOTOR5_INA_GPIO_Port, MOTOR5_INA_Pin);
 800156a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800156e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001572:	49a1      	ldr	r1, [pc, #644]	; (80017f8 <_Z12create_robotv+0x350>)
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff f9f9 	bl	800096c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot5_inb = PinControl(MOTOR5_INB_GPIO_Port, MOTOR5_INB_Pin);
 800157a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800157e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001582:	499d      	ldr	r1, [pc, #628]	; (80017f8 <_Z12create_robotv+0x350>)
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff f9f1 	bl	800096c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot5_end = PinMeasure(MOTOR5_END_GPIO_Port, MOTOR5_END_Pin);
 800158a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800158e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001592:	499a      	ldr	r1, [pc, #616]	; (80017fc <_Z12create_robotv+0x354>)
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fa31 	bl	80009fc <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot6_ina = PinControl(MOTOR6_INA_GPIO_Port, MOTOR6_INA_Pin);
 800159a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800159e:	2204      	movs	r2, #4
 80015a0:	4996      	ldr	r1, [pc, #600]	; (80017fc <_Z12create_robotv+0x354>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff f9e2 	bl	800096c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot6_inb = PinControl(MOTOR6_INB_GPIO_Port, MOTOR6_INB_Pin);
 80015a8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80015ac:	2208      	movs	r2, #8
 80015ae:	4993      	ldr	r1, [pc, #588]	; (80017fc <_Z12create_robotv+0x354>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff f9db 	bl	800096c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot6_end = PinMeasure(MOTOR6_END_GPIO_Port, MOTOR6_END_Pin);
 80015b6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80015ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015be:	498f      	ldr	r1, [pc, #572]	; (80017fc <_Z12create_robotv+0x354>)
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fa1b 	bl	80009fc <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl enable = PinControl(MOTORS_EN_GPIO_Port, MOTORS_EN_Pin);
 80015c6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80015ca:	2240      	movs	r2, #64	; 0x40
 80015cc:	498b      	ldr	r1, [pc, #556]	; (80017fc <_Z12create_robotv+0x354>)
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff f9cc 	bl	800096c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl toggle = PinControl(PIN_TOGGLE_GPIO_Port, PIN_TOGGLE_Pin);
 80015d4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80015d8:	2220      	movs	r2, #32
 80015da:	4988      	ldr	r1, [pc, #544]	; (80017fc <_Z12create_robotv+0x354>)
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff f9c5 	bl	800096c <_ZN10PinControlC1EP12GPIO_TypeDeft>

	Motor motor1 = Motor(mot1_ina, mot1_inb, &htim1, 1, &htim2, mot1_end);
 80015e2:	f507 75a4 	add.w	r5, r7, #328	; 0x148
 80015e6:	ac08      	add	r4, sp, #32
 80015e8:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80015ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80015f2:	4b83      	ldr	r3, [pc, #524]	; (8001800 <_Z12create_robotv+0x358>)
 80015f4:	9307      	str	r3, [sp, #28]
 80015f6:	2301      	movs	r3, #1
 80015f8:	9306      	str	r3, [sp, #24]
 80015fa:	4b82      	ldr	r3, [pc, #520]	; (8001804 <_Z12create_robotv+0x35c>)
 80015fc:	9305      	str	r3, [sp, #20]
 80015fe:	ac01      	add	r4, sp, #4
 8001600:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001604:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001606:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800160a:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001614:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001616:	4628      	mov	r0, r5
 8001618:	f7ff fa6c 	bl	8000af4 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor2 = Motor(mot2_ina, mot2_inb, &htim1, 2, &htim3, mot2_end);
 800161c:	f507 7584 	add.w	r5, r7, #264	; 0x108
 8001620:	ac08      	add	r4, sp, #32
 8001622:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001628:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800162c:	4b76      	ldr	r3, [pc, #472]	; (8001808 <_Z12create_robotv+0x360>)
 800162e:	9307      	str	r3, [sp, #28]
 8001630:	2302      	movs	r3, #2
 8001632:	9306      	str	r3, [sp, #24]
 8001634:	4b73      	ldr	r3, [pc, #460]	; (8001804 <_Z12create_robotv+0x35c>)
 8001636:	9305      	str	r3, [sp, #20]
 8001638:	ac01      	add	r4, sp, #4
 800163a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800163e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001640:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001644:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800164e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001650:	4628      	mov	r0, r5
 8001652:	f7ff fa4f 	bl	8000af4 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor3 = Motor(mot3_ina, mot3_inb, &htim1, 3, &htim4, mot3_end);
 8001656:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
 800165a:	ac08      	add	r4, sp, #32
 800165c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001660:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001662:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001666:	4b69      	ldr	r3, [pc, #420]	; (800180c <_Z12create_robotv+0x364>)
 8001668:	9307      	str	r3, [sp, #28]
 800166a:	2303      	movs	r3, #3
 800166c:	9306      	str	r3, [sp, #24]
 800166e:	4b65      	ldr	r3, [pc, #404]	; (8001804 <_Z12create_robotv+0x35c>)
 8001670:	9305      	str	r3, [sp, #20]
 8001672:	ac01      	add	r4, sp, #4
 8001674:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8001678:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800167a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800167e:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001688:	cb0e      	ldmia	r3, {r1, r2, r3}
 800168a:	4628      	mov	r0, r5
 800168c:	f7ff fa32 	bl	8000af4 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor4 = Motor(mot4_ina, mot4_inb, &htim1, 4, &htim5, mot4_end);
 8001690:	f107 0588 	add.w	r5, r7, #136	; 0x88
 8001694:	ac08      	add	r4, sp, #32
 8001696:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800169a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800169c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016a0:	4b5b      	ldr	r3, [pc, #364]	; (8001810 <_Z12create_robotv+0x368>)
 80016a2:	9307      	str	r3, [sp, #28]
 80016a4:	2304      	movs	r3, #4
 80016a6:	9306      	str	r3, [sp, #24]
 80016a8:	4b56      	ldr	r3, [pc, #344]	; (8001804 <_Z12create_robotv+0x35c>)
 80016aa:	9305      	str	r3, [sp, #20]
 80016ac:	ac01      	add	r4, sp, #4
 80016ae:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80016b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016b8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80016c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016c4:	4628      	mov	r0, r5
 80016c6:	f7ff fa15 	bl	8000af4 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor5 = Motor(mot5_ina, mot5_inb, &htim9, 1, &htim8, mot5_end);
 80016ca:	f107 0548 	add.w	r5, r7, #72	; 0x48
 80016ce:	ac08      	add	r4, sp, #32
 80016d0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80016d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016da:	4b4e      	ldr	r3, [pc, #312]	; (8001814 <_Z12create_robotv+0x36c>)
 80016dc:	9307      	str	r3, [sp, #28]
 80016de:	2301      	movs	r3, #1
 80016e0:	9306      	str	r3, [sp, #24]
 80016e2:	4b4d      	ldr	r3, [pc, #308]	; (8001818 <_Z12create_robotv+0x370>)
 80016e4:	9305      	str	r3, [sp, #20]
 80016e6:	ac01      	add	r4, sp, #4
 80016e8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80016ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016f2:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80016fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016fe:	4628      	mov	r0, r5
 8001700:	f7ff f9f8 	bl	8000af4 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor6 = Motor(mot6_ina, mot6_inb, &htim9, 2, 		mot6_end);
 8001704:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001708:	f5a3 7484 	sub.w	r4, r3, #264	; 0x108
 800170c:	f107 0608 	add.w	r6, r7, #8
 8001710:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001714:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001718:	ad07      	add	r5, sp, #28
 800171a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800171c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001720:	2302      	movs	r3, #2
 8001722:	9306      	str	r3, [sp, #24]
 8001724:	4b3c      	ldr	r3, [pc, #240]	; (8001818 <_Z12create_robotv+0x370>)
 8001726:	9305      	str	r3, [sp, #20]
 8001728:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800172c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001730:	ad01      	add	r5, sp, #4
 8001732:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001734:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001738:	68e3      	ldr	r3, [r4, #12]
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001740:	4630      	mov	r0, r6
 8001742:	f7ff f9a1 	bl	8000a88 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefh10PinMeasure>

	Motor** motors = (Motor**) malloc(sizeof(Motor*)*6);
 8001746:	2018      	movs	r0, #24
 8001748:	f01b fcf0 	bl	801d12c <malloc>
 800174c:	4603      	mov	r3, r0
 800174e:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
	float* encs_div = (float*) malloc(sizeof(float)*6);
 8001752:	2018      	movs	r0, #24
 8001754:	f01b fcea 	bl	801d12c <malloc>
 8001758:	4603      	mov	r3, r0
 800175a:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8

	motors[0] = &motor1; motors[1] = &motor2; motors[2] = &motor3; motors[3] = &motor4; motors[4] = &motor5; motors[5] = &motor6;
 800175e:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8001762:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 800176c:	3304      	adds	r3, #4
 800176e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8001778:	3308      	adds	r3, #8
 800177a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8001784:	330c      	adds	r3, #12
 8001786:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8001790:	3310      	adds	r3, #16
 8001792:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 800179c:	3314      	adds	r3, #20
 800179e:	f107 0208 	add.w	r2, r7, #8
 80017a2:	601a      	str	r2, [r3, #0]
	encs_div[0] = 1; encs_div[1] = 1; encs_div[2] = 1; encs_div[3] = 1; encs_div[4] = 1; encs_div[5] = 1;
 80017a4:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 80017a8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 80017b2:	3304      	adds	r3, #4
 80017b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 80017be:	3308      	adds	r3, #8
 80017c0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 80017ca:	330c      	adds	r3, #12
 80017cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 80017d6:	3310      	adds	r3, #16
 80017d8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 80017e2:	3314      	adds	r3, #20
 80017e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017e8:	601a      	str	r2, [r3, #0]
	Robot myRobot = Robot(enable, toggle, TS, 6, motors, encs_div);
 80017ea:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80017ee:	f5a3 749c 	sub.w	r4, r3, #312	; 0x138
 80017f2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80017f6:	e019      	b.n	800182c <_Z12create_robotv+0x384>
 80017f8:	40020c00 	.word	0x40020c00
 80017fc:	40021800 	.word	0x40021800
 8001800:	200069b4 	.word	0x200069b4
 8001804:	20006968 	.word	0x20006968
 8001808:	20006a00 	.word	0x20006a00
 800180c:	20006a4c 	.word	0x20006a4c
 8001810:	20006a98 	.word	0x20006a98
 8001814:	20006ae4 	.word	0x20006ae4
 8001818:	20006b30 	.word	0x20006b30
 800181c:	42c80000 	.word	0x42c80000
 8001820:	3c23d70a 	.word	0x3c23d70a
 8001824:	00000000 	.word	0x00000000
 8001828:	3dcccccd 	.word	0x3dcccccd
 800182c:	f5a3 7633 	sub.w	r6, r3, #716	; 0x2cc
 8001830:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8001834:	9308      	str	r3, [sp, #32]
 8001836:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 800183a:	9307      	str	r3, [sp, #28]
 800183c:	2306      	movs	r3, #6
 800183e:	9306      	str	r3, [sp, #24]
 8001840:	230a      	movs	r3, #10
 8001842:	9305      	str	r3, [sp, #20]
 8001844:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001848:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800184c:	ad01      	add	r5, sp, #4
 800184e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001850:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001854:	68e3      	ldr	r3, [r4, #12]
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800185c:	6830      	ldr	r0, [r6, #0]
 800185e:	f7ff fa71 	bl	8000d44 <_ZN5RobotC1E10PinControlS0_mhPP5MotorPf>

	myRobot.setStatus(Robot::Status::Idle, true);
 8001862:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001866:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800186a:	2201      	movs	r2, #1
 800186c:	2100      	movs	r1, #0
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	f7ff fb2f 	bl	8000ed2 <_ZN5Robot9setStatusENS_6StatusEb>

	myRobot.setEncoderDivider(0, ENC_1_DIV);
 8001874:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001878:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800187c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001880:	2100      	movs	r1, #0
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	f7ff fb53 	bl	8000f2e <_ZN5Robot17setEncoderDividerEhf>
	myRobot.getPID(0)->reset();
 8001888:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800188c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8001890:	2100      	movs	r1, #0
 8001892:	6818      	ldr	r0, [r3, #0]
 8001894:	f7ff fb60 	bl	8000f58 <_ZN5Robot6getPIDEh>
 8001898:	4603      	mov	r3, r0
 800189a:	4618      	mov	r0, r3
 800189c:	f000 fa56 	bl	8001d4c <_ZN3PID5resetEv>
	myRobot.getPID(0)->init((float) TS/1000.0, PID_1_POLE, PID_1_SAT, true);
 80018a0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80018a4:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80018a8:	2100      	movs	r1, #0
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	f7ff fb54 	bl	8000f58 <_ZN5Robot6getPIDEh>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2101      	movs	r1, #1
 80018b4:	ed1f 1a27 	vldr	s2, [pc, #-156]	; 800181c <_Z12create_robotv+0x374>
 80018b8:	ed5f 0a25 	vldr	s1, [pc, #-148]	; 8001828 <_Z12create_robotv+0x380>
 80018bc:	ed1f 0a28 	vldr	s0, [pc, #-160]	; 8001820 <_Z12create_robotv+0x378>
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 f995 	bl	8001bf0 <_ZN3PID4initEfffb>
	myRobot.getPID(0)->setup(PID_1_KP, PID_1_KI, PID_1_KD);
 80018c6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80018ca:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80018ce:	2100      	movs	r1, #0
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	f7ff fb41 	bl	8000f58 <_ZN5Robot6getPIDEh>
 80018d6:	4603      	mov	r3, r0
 80018d8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80018dc:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80018e0:	ed1f 0a32 	vldr	s0, [pc, #-200]	; 800181c <_Z12create_robotv+0x374>
 80018e4:	4618      	mov	r0, r3
 80018e6:	f000 fa18 	bl	8001d1a <_ZN3PID5setupEfff>

	myRobot.setEncoderDivider(1, ENC_2_DIV);
 80018ea:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80018ee:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80018f2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80018f6:	2101      	movs	r1, #1
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	f7ff fb18 	bl	8000f2e <_ZN5Robot17setEncoderDividerEhf>
	myRobot.getPID(1)->reset();
 80018fe:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001902:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8001906:	2101      	movs	r1, #1
 8001908:	6818      	ldr	r0, [r3, #0]
 800190a:	f7ff fb25 	bl	8000f58 <_ZN5Robot6getPIDEh>
 800190e:	4603      	mov	r3, r0
 8001910:	4618      	mov	r0, r3
 8001912:	f000 fa1b 	bl	8001d4c <_ZN3PID5resetEv>
	myRobot.getPID(1)->init((float) TS/1000.0, PID_2_POLE, PID_2_SAT, true);
 8001916:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800191a:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800191e:	2101      	movs	r1, #1
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	f7ff fb19 	bl	8000f58 <_ZN5Robot6getPIDEh>
 8001926:	4603      	mov	r3, r0
 8001928:	2101      	movs	r1, #1
 800192a:	ed1f 1a44 	vldr	s2, [pc, #-272]	; 800181c <_Z12create_robotv+0x374>
 800192e:	ed5f 0a42 	vldr	s1, [pc, #-264]	; 8001828 <_Z12create_robotv+0x380>
 8001932:	ed1f 0a45 	vldr	s0, [pc, #-276]	; 8001820 <_Z12create_robotv+0x378>
 8001936:	4618      	mov	r0, r3
 8001938:	f000 f95a 	bl	8001bf0 <_ZN3PID4initEfffb>
	myRobot.getPID(1)->setup(PID_2_KP, PID_2_KI, PID_2_KD);
 800193c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001940:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8001944:	2101      	movs	r1, #1
 8001946:	6818      	ldr	r0, [r3, #0]
 8001948:	f7ff fb06 	bl	8000f58 <_ZN5Robot6getPIDEh>
 800194c:	4603      	mov	r3, r0
 800194e:	ed1f 1a4b 	vldr	s2, [pc, #-300]	; 8001824 <_Z12create_robotv+0x37c>
 8001952:	ed5f 0a4b 	vldr	s1, [pc, #-300]	; 8001828 <_Z12create_robotv+0x380>
 8001956:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800195a:	4618      	mov	r0, r3
 800195c:	f000 f9dd 	bl	8001d1a <_ZN3PID5setupEfff>

	myRobot.setEncoderDivider(2, ENC_3_DIV);
 8001960:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001964:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8001968:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800196c:	2102      	movs	r1, #2
 800196e:	6818      	ldr	r0, [r3, #0]
 8001970:	f7ff fadd 	bl	8000f2e <_ZN5Robot17setEncoderDividerEhf>
	myRobot.getPID(2)->reset();
 8001974:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001978:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800197c:	2102      	movs	r1, #2
 800197e:	6818      	ldr	r0, [r3, #0]
 8001980:	f7ff faea 	bl	8000f58 <_ZN5Robot6getPIDEh>
 8001984:	4603      	mov	r3, r0
 8001986:	4618      	mov	r0, r3
 8001988:	f000 f9e0 	bl	8001d4c <_ZN3PID5resetEv>
	myRobot.getPID(2)->init((float) TS/1000.0, PID_3_POLE, PID_3_SAT, true);
 800198c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001990:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8001994:	2102      	movs	r1, #2
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	f7ff fade 	bl	8000f58 <_ZN5Robot6getPIDEh>
 800199c:	4603      	mov	r3, r0
 800199e:	2101      	movs	r1, #1
 80019a0:	ed1f 1a62 	vldr	s2, [pc, #-392]	; 800181c <_Z12create_robotv+0x374>
 80019a4:	ed5f 0a60 	vldr	s1, [pc, #-384]	; 8001828 <_Z12create_robotv+0x380>
 80019a8:	ed1f 0a63 	vldr	s0, [pc, #-396]	; 8001820 <_Z12create_robotv+0x378>
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 f91f 	bl	8001bf0 <_ZN3PID4initEfffb>
	myRobot.getPID(2)->setup(PID_3_KP, PID_3_KI, PID_3_KD);
 80019b2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80019b6:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80019ba:	2102      	movs	r1, #2
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	f7ff facb 	bl	8000f58 <_ZN5Robot6getPIDEh>
 80019c2:	4603      	mov	r3, r0
 80019c4:	ed1f 1a69 	vldr	s2, [pc, #-420]	; 8001824 <_Z12create_robotv+0x37c>
 80019c8:	ed5f 0a69 	vldr	s1, [pc, #-420]	; 8001828 <_Z12create_robotv+0x380>
 80019cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 f9a2 	bl	8001d1a <_ZN3PID5setupEfff>

	myRobot.setEncoderDivider(3, ENC_4_DIV);
 80019d6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80019da:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80019de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80019e2:	2103      	movs	r1, #3
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	f7ff faa2 	bl	8000f2e <_ZN5Robot17setEncoderDividerEhf>
	myRobot.getPID(3)->reset();
 80019ea:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80019ee:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80019f2:	2103      	movs	r1, #3
 80019f4:	6818      	ldr	r0, [r3, #0]
 80019f6:	f7ff faaf 	bl	8000f58 <_ZN5Robot6getPIDEh>
 80019fa:	4603      	mov	r3, r0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 f9a5 	bl	8001d4c <_ZN3PID5resetEv>
	myRobot.getPID(3)->init((float) TS/1000.0, PID_4_POLE, PID_4_SAT, true);
 8001a02:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001a06:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8001a0a:	2103      	movs	r1, #3
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	f7ff faa3 	bl	8000f58 <_ZN5Robot6getPIDEh>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2101      	movs	r1, #1
 8001a16:	ed1f 1a7f 	vldr	s2, [pc, #-508]	; 800181c <_Z12create_robotv+0x374>
 8001a1a:	ed5f 0a7d 	vldr	s1, [pc, #-500]	; 8001828 <_Z12create_robotv+0x380>
 8001a1e:	ed1f 0a80 	vldr	s0, [pc, #-512]	; 8001820 <_Z12create_robotv+0x378>
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 f8e4 	bl	8001bf0 <_ZN3PID4initEfffb>
	myRobot.getPID(3)->setup(PID_4_KP, PID_4_KI, PID_4_KD);
 8001a28:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001a2c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8001a30:	2103      	movs	r1, #3
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	f7ff fa90 	bl	8000f58 <_ZN5Robot6getPIDEh>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	ed1f 1a86 	vldr	s2, [pc, #-536]	; 8001824 <_Z12create_robotv+0x37c>
 8001a3e:	ed5f 0a86 	vldr	s1, [pc, #-536]	; 8001828 <_Z12create_robotv+0x380>
 8001a42:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f967 	bl	8001d1a <_ZN3PID5setupEfff>

	myRobot.setEncoderDivider(4, ENC_5_DIV);
 8001a4c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001a50:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8001a54:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001a58:	2104      	movs	r1, #4
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	f7ff fa67 	bl	8000f2e <_ZN5Robot17setEncoderDividerEhf>
	myRobot.getPID(4)->reset();
 8001a60:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001a64:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8001a68:	2104      	movs	r1, #4
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	f7ff fa74 	bl	8000f58 <_ZN5Robot6getPIDEh>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 f96a 	bl	8001d4c <_ZN3PID5resetEv>
	myRobot.getPID(4)->init((float) TS/1000.0, PID_5_POLE, PID_5_SAT, true);
 8001a78:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001a7c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8001a80:	2104      	movs	r1, #4
 8001a82:	6818      	ldr	r0, [r3, #0]
 8001a84:	f7ff fa68 	bl	8000f58 <_ZN5Robot6getPIDEh>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	ed1f 1a9d 	vldr	s2, [pc, #-628]	; 800181c <_Z12create_robotv+0x374>
 8001a90:	ed5f 0a9b 	vldr	s1, [pc, #-620]	; 8001828 <_Z12create_robotv+0x380>
 8001a94:	ed1f 0a9e 	vldr	s0, [pc, #-632]	; 8001820 <_Z12create_robotv+0x378>
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 f8a9 	bl	8001bf0 <_ZN3PID4initEfffb>
	myRobot.getPID(4)->setup(PID_5_KP, PID_5_KI, PID_5_KD);
 8001a9e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001aa2:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8001aa6:	2104      	movs	r1, #4
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	f7ff fa55 	bl	8000f58 <_ZN5Robot6getPIDEh>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	ed1f 1aa4 	vldr	s2, [pc, #-656]	; 8001824 <_Z12create_robotv+0x37c>
 8001ab4:	ed5f 0aa4 	vldr	s1, [pc, #-656]	; 8001828 <_Z12create_robotv+0x380>
 8001ab8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 f92c 	bl	8001d1a <_ZN3PID5setupEfff>

	return myRobot;
 8001ac2:	bf00      	nop
}
 8001ac4:	f107 0308 	add.w	r3, r7, #8
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff f849 	bl	8000b60 <_ZN5MotorD1Ev>
 8001ace:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff f844 	bl	8000b60 <_ZN5MotorD1Ev>
 8001ad8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff f83f 	bl	8000b60 <_ZN5MotorD1Ev>
 8001ae2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff f83a 	bl	8000b60 <_ZN5MotorD1Ev>
 8001aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff f835 	bl	8000b60 <_ZN5MotorD1Ev>
 8001af6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff f830 	bl	8000b60 <_ZN5MotorD1Ev>
	return myRobot;
 8001b00:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001b04:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8001b08:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8001b0c:	f5a2 7233 	sub.w	r2, r2, #716	; 0x2cc
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	601a      	str	r2, [r3, #0]
}
 8001b14:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001b18:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8001b1c:	6818      	ldr	r0, [r3, #0]
 8001b1e:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b26:	bf00      	nop

08001b28 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	ed93 7a00 	vldr	s14, [r3]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	edd3 7a00 	vldr	s15, [r3]
 8001b3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b46:	d501      	bpl.n	8001b4c <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	e000      	b.n	8001b4e <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8001b4c:	687b      	ldr	r3, [r7, #4]
    }
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	ed93 7a00 	vldr	s14, [r3]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	edd3 7a00 	vldr	s15, [r3]
 8001b70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b78:	d501      	bpl.n	8001b7e <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	e000      	b.n	8001b80 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8001b7e:	687b      	ldr	r3, [r7, #4]
    }
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <_Z41__static_initialization_and_destruction_0ii>:

Robot ScorBot = create_robot();
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d108      	bne.n	8001bae <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d103      	bne.n	8001bae <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fc7d 	bl	80014a8 <_Z12create_robotv>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d107      	bne.n	8001bc4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d102      	bne.n	8001bc4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001bbe:	4803      	ldr	r0, [pc, #12]	; (8001bcc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001bc0:	f7ff f953 	bl	8000e6a <_ZN5RobotD1Ev>
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	2000249c 	.word	0x2000249c

08001bd0 <_GLOBAL__sub_I__ZN10PinControlC2Ev>:
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f7ff ffd7 	bl	8001b8c <_Z41__static_initialization_and_destruction_0ii>
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <_GLOBAL__sub_D__ZN10PinControlC2Ev>:
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001be8:	2000      	movs	r0, #0
 8001bea:	f7ff ffcf 	bl	8001b8c <_Z41__static_initialization_and_destruction_0ii>
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <_ZN3PID4initEfffb>:


// PID

void PID::init(float ts, float tau, float sat, bool bumpless)
{
 8001bf0:	b5b0      	push	{r4, r5, r7, lr}
 8001bf2:	b08e      	sub	sp, #56	; 0x38
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6178      	str	r0, [r7, #20]
 8001bf8:	ed87 0a04 	vstr	s0, [r7, #16]
 8001bfc:	edc7 0a03 	vstr	s1, [r7, #12]
 8001c00:	ed87 1a02 	vstr	s2, [r7, #8]
 8001c04:	460b      	mov	r3, r1
 8001c06:	71fb      	strb	r3, [r7, #7]
  this->ts = ts;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	601a      	str	r2, [r3, #0]
  this->tau = tau;
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	605a      	str	r2, [r3, #4]
  this->sat = sat;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	609a      	str	r2, [r3, #8]
  this->bumpless = bumpless;
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	79fa      	ldrb	r2, [r7, #7]
 8001c1e:	731a      	strb	r2, [r3, #12]
  this->antiWindUp = Filter();
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fe41 	bl	80008ac <_ZN6FilterC1Ev>
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8001c30:	f107 051c 	add.w	r5, r7, #28
 8001c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  antiWindUp.init(tau, ts);
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	3338      	adds	r3, #56	; 0x38
 8001c44:	edd7 0a04 	vldr	s1, [r7, #16]
 8001c48:	ed97 0a03 	vldr	s0, [r7, #12]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 f9f9 	bl	8002044 <_ZN6Filter4initEff>

  if(tau > 0)
 8001c52:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5e:	dd45      	ble.n	8001cec <_ZN3PID4initEfffb+0xfc>
  {
	A = (2*tau - ts)/(2*tau + ts);
 8001c60:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c64:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001c68:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c6c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c70:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c74:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001c78:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	B = 1;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c90:	62da      	str	r2, [r3, #44]	; 0x2c
	C = -4*ts/((ts+2*tau)*(ts+2*tau));
 8001c92:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c96:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 8001c9a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001c9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ca2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001ca6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001caa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cae:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cb2:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8001cb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cba:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001cbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	D = 2 / (ts + 2*tau);
 8001ccc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cd0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001cd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cdc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8001cea:	e00f      	b.n	8001d0c <_ZN3PID4initEfffb+0x11c>
    C = -pole*pole;
    D = pole;*/
  }
  else
  {
	  A = 0;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	629a      	str	r2, [r3, #40]	; 0x28
	  B = 0;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	62da      	str	r2, [r3, #44]	; 0x2c
	  C = 0;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	631a      	str	r2, [r3, #48]	; 0x30
	  D = 0;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  apply_saturation();
 8001d0c:	6978      	ldr	r0, [r7, #20]
 8001d0e:	f000 f95b 	bl	8001fc8 <_ZN3PID16apply_saturationEv>
}
 8001d12:	bf00      	nop
 8001d14:	3738      	adds	r7, #56	; 0x38
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bdb0      	pop	{r4, r5, r7, pc}

08001d1a <_ZN3PID5setupEfff>:

void PID::setup(float kp, float ki, float kd)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b085      	sub	sp, #20
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	60f8      	str	r0, [r7, #12]
 8001d22:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d26:	edc7 0a01 	vstr	s1, [r7, #4]
 8001d2a:	ed87 1a00 	vstr	s2, [r7]
  this->kp = kp;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	611a      	str	r2, [r3, #16]
  this->ki = ki;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	615a      	str	r2, [r3, #20]
  this->kd = kd;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	619a      	str	r2, [r3, #24]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_ZN3PID5resetEv>:

void PID::reset()
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  reset(0.0, 0.0);
 8001d54:	eddf 0a05 	vldr	s1, [pc, #20]	; 8001d6c <_ZN3PID5resetEv+0x20>
 8001d58:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001d6c <_ZN3PID5resetEv+0x20>
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f807 	bl	8001d70 <_ZN3PID5resetEff>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	00000000 	.word	0x00000000

08001d70 <_ZN3PID5resetEff>:

void PID::reset(float xi, float xd)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d7c:	edc7 0a01 	vstr	s1, [r7, #4]
  this-> xi = xi;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	621a      	str	r2, [r3, #32]
  this-> xd = xd;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	625a      	str	r2, [r3, #36]	; 0x24

  apply_saturation();
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 f91b 	bl	8001fc8 <_ZN3PID16apply_saturationEv>
}
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <_ZN3PID5inputEf>:

void PID::input(float e)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	ed87 0a00 	vstr	s0, [r7]
  this->e = e;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	61da      	str	r2, [r3, #28]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <_ZN3PID4stepEv>:

void PID::step()
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  //xi = xi + (bumpless ? ki*ts*e : ts*e);
  xi = antiWindUp.evolve(xi) + (bumpless ? ki*ts*e : ts*e);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	edd3 7a08 	vldr	s15, [r3, #32]
 8001dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	f000 f9b2 	bl	800213a <_ZN6Filter6evolveEf>
 8001dd6:	eef0 6a40 	vmov.f32	s13, s0
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	7b1b      	ldrb	r3, [r3, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00d      	beq.n	8001dfe <_ZN3PID4stepEv+0x46>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	ed93 7a05 	vldr	s14, [r3, #20]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	edd3 7a00 	vldr	s15, [r3]
 8001dee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	edd3 7a07 	vldr	s15, [r3, #28]
 8001df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dfc:	e007      	b.n	8001e0e <_ZN3PID4stepEv+0x56>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	ed93 7a00 	vldr	s14, [r3]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	edd3 7a07 	vldr	s15, [r3, #28]
 8001e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	edc3 7a08 	vstr	s15, [r3, #32]
  xd = A*xd + (bumpless ? kd*B*e : B*e);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001e24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	7b1b      	ldrb	r3, [r3, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00d      	beq.n	8001e4c <_ZN3PID4stepEv+0x94>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	edd3 6a06 	vldr	s13, [r3, #24]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001e3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	edd3 7a07 	vldr	s15, [r3, #28]
 8001e46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e4a:	e007      	b.n	8001e5c <_ZN3PID4stepEv+0xa4>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	edd3 7a07 	vldr	s15, [r3, #28]
 8001e58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

  apply_saturation();
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f8ae 	bl	8001fc8 <_ZN3PID16apply_saturationEv>
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <_ZN3PID6outputEv>:

float PID::output()
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  float u;

  if(bumpless) u = (kp + kd*D) * e + xi + C*xd;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	7b1b      	ldrb	r3, [r3, #12]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d023      	beq.n	8001ecc <_ZN3PID6outputEv+0x58>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	edd3 6a06 	vldr	s13, [r3, #24]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001e96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ea4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	edd3 7a08 	vldr	s15, [r3, #32]
 8001eae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001ebe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec6:	edc7 7a03 	vstr	s15, [r7, #12]
 8001eca:	e02c      	b.n	8001f26 <_ZN3PID6outputEv+0xb2>
  else u = (kp + kd*D) * e + ki*xi + kd*C*xd;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	ed93 7a04 	vldr	s14, [r3, #16]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	edd3 6a06 	vldr	s13, [r3, #24]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001ede:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ee2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	edd3 7a07 	vldr	s15, [r3, #28]
 8001eec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	edd3 6a05 	vldr	s13, [r3, #20]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	edd3 7a08 	vldr	s15, [r3, #32]
 8001efc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	edd3 6a06 	vldr	s13, [r3, #24]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001f10:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001f1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f22:	edc7 7a03 	vstr	s15, [r7, #12]

  return u;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	ee07 3a90 	vmov	s15, r3
}
 8001f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <_ZN3PID6evolveEf>:

float PID::evolve(float e)
{ 
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	ed87 0a00 	vstr	s0, [r7]
  float u;
  
  input(e);
 8001f46:	ed97 0a00 	vldr	s0, [r7]
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff ff25 	bl	8001d9a <_ZN3PID5inputEf>
  u = output();
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff ff8f 	bl	8001e74 <_ZN3PID6outputEv>
 8001f56:	ed87 0a03 	vstr	s0, [r7, #12]
  step();
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ff2c 	bl	8001db8 <_ZN3PID4stepEv>

  return u;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	ee07 3a90 	vmov	s15, r3
}
 8001f66:	eeb0 0a67 	vmov.f32	s0, s15
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <_ZN3PID4showEiR25racs_services__msg__Debug>:

void PID::show(int i, racs_services__msg__Debug &debug_msg)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
	debug_msg.data[0] = (float) i;
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	ee07 3a90 	vmov	s15, r3
 8001f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	edc3 7a00 	vstr	s15, [r3]
	debug_msg.data[1] = xi;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6a1a      	ldr	r2, [r3, #32]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	605a      	str	r2, [r3, #4]
	debug_msg.data[2] = antiWindUp.output();
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	3338      	adds	r3, #56	; 0x38
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 f8b1 	bl	8002100 <_ZN6Filter6outputEv>
 8001f9e:	eef0 7a40 	vmov.f32	s15, s0
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	edc3 7a02 	vstr	s15, [r3, #8]
	debug_msg.data[3] = 0;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	60da      	str	r2, [r3, #12]
	debug_msg.data[4] = 0;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	611a      	str	r2, [r3, #16]
	debug_msg.data[5] = 0;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	615a      	str	r2, [r3, #20]
}
 8001fc0:	bf00      	nop
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <_ZN3PID16apply_saturationEv>:

void PID::apply_saturation()
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if(sat > 0)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fde:	dc00      	bgt.n	8001fe2 <_ZN3PID16apply_saturationEv+0x1a>
  {
    xi = xi > +sat ? +sat : xi;
    xi = xi < -sat ? -sat : xi;
  }
}
 8001fe0:	e02a      	b.n	8002038 <_ZN3PID16apply_saturationEv+0x70>
    xi = xi > +sat ? +sat : xi;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	ed93 7a08 	vldr	s14, [r3, #32]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff6:	dd02      	ble.n	8001ffe <_ZN3PID16apply_saturationEv+0x36>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	e001      	b.n	8002002 <_ZN3PID16apply_saturationEv+0x3a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6213      	str	r3, [r2, #32]
    xi = xi < -sat ? -sat : xi;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	ed93 7a08 	vldr	s14, [r3, #32]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002012:	eef1 7a67 	vneg.f32	s15, s15
 8002016:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800201a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201e:	d505      	bpl.n	800202c <_ZN3PID16apply_saturationEv+0x64>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	edd3 7a02 	vldr	s15, [r3, #8]
 8002026:	eef1 7a67 	vneg.f32	s15, s15
 800202a:	e002      	b.n	8002032 <_ZN3PID16apply_saturationEv+0x6a>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <_ZN6Filter4initEff>:


// Filter

void Filter::init(float tau, float ts)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002050:	edc7 0a01 	vstr	s1, [r7, #4]

  A = 1;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800205a:	60da      	str	r2, [r3, #12]
  B = 1;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002062:	611a      	str	r2, [r3, #16]
  C = ts / tau;
 8002064:	edd7 6a01 	vldr	s13, [r7, #4]
 8002068:	ed97 7a02 	vldr	s14, [r7, #8]
 800206c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	edc3 7a05 	vstr	s15, [r3, #20]
  D = (ts + 2 * tau)/(2 * tau);
 8002076:	edd7 7a02 	vldr	s15, [r7, #8]
 800207a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800207e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002082:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002086:	edd7 7a02 	vldr	s15, [r7, #8]
 800208a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800208e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	edc3 7a06 	vstr	s15, [r3, #24]
  D = ts / (ts + 2 * tau);*/

  /*A = exp(-ts/tau);
  B = (1-A)*tau;
  C = 1/tau;*/
}
 8002098:	bf00      	nop
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <_ZN6Filter5inputEf>:
{
  this->x = x;
}

void Filter::input(float u)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	ed87 0a00 	vstr	s0, [r7]
  this->u = u;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	605a      	str	r2, [r3, #4]
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <_ZN6Filter4stepEv>:

void Filter::step()
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  x = A*x + B*u;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	ed93 7a03 	vldr	s14, [r3, #12]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80020d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	edd3 6a04 	vldr	s13, [r3, #16]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80020e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <_ZN6Filter6outputEv>:

float Filter::output()
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  return C*x + D*u;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	ed93 7a05 	vldr	s14, [r3, #20]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	edd3 7a02 	vldr	s15, [r3, #8]
 8002114:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	edd3 6a06 	vldr	s13, [r3, #24]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	edd3 7a01 	vldr	s15, [r3, #4]
 8002124:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002128:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800212c:	eeb0 0a67 	vmov.f32	s0, s15
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <_ZN6Filter6evolveEf>:

float Filter::evolve(float u)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	ed87 0a00 	vstr	s0, [r7]
  float y;
  
  input(u);
 8002146:	ed97 0a00 	vldr	s0, [r7]
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff ffaa 	bl	80020a4 <_ZN6Filter5inputEf>
  y = output();
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff ffd5 	bl	8002100 <_ZN6Filter6outputEv>
 8002156:	ed87 0a03 	vstr	s0, [r7, #12]
  step();
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff ffb1 	bl	80020c2 <_ZN6Filter4stepEv>

  return y;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	ee07 3a90 	vmov	s15, r3
}
 8002166:	eeb0 0a67 	vmov.f32	s0, s15
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002178:	2300      	movs	r3, #0
 800217a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800217c:	f008 fde4 	bl	800ad48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002180:	4b5b      	ldr	r3, [pc, #364]	; (80022f0 <pvPortMallocMicroROS+0x180>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8002188:	f000 f98a 	bl	80024a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800218c:	4b59      	ldr	r3, [pc, #356]	; (80022f4 <pvPortMallocMicroROS+0x184>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4013      	ands	r3, r2
 8002194:	2b00      	cmp	r3, #0
 8002196:	f040 8092 	bne.w	80022be <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d01f      	beq.n	80021e0 <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 80021a0:	2208      	movs	r2, #8
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d016      	beq.n	80021e0 <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f023 0307 	bic.w	r3, r3, #7
 80021b8:	3308      	adds	r3, #8
 80021ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00c      	beq.n	80021e0 <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80021c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ca:	b672      	cpsid	i
 80021cc:	f383 8811 	msr	BASEPRI, r3
 80021d0:	f3bf 8f6f 	isb	sy
 80021d4:	f3bf 8f4f 	dsb	sy
 80021d8:	b662      	cpsie	i
 80021da:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80021dc:	bf00      	nop
 80021de:	e7fe      	b.n	80021de <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d06b      	beq.n	80022be <pvPortMallocMicroROS+0x14e>
 80021e6:	4b44      	ldr	r3, [pc, #272]	; (80022f8 <pvPortMallocMicroROS+0x188>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d866      	bhi.n	80022be <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80021f0:	4b42      	ldr	r3, [pc, #264]	; (80022fc <pvPortMallocMicroROS+0x18c>)
 80021f2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80021f4:	4b41      	ldr	r3, [pc, #260]	; (80022fc <pvPortMallocMicroROS+0x18c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80021fa:	e004      	b.n	8002206 <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	429a      	cmp	r2, r3
 800220e:	d903      	bls.n	8002218 <pvPortMallocMicroROS+0xa8>
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1f1      	bne.n	80021fc <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002218:	4b35      	ldr	r3, [pc, #212]	; (80022f0 <pvPortMallocMicroROS+0x180>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800221e:	429a      	cmp	r2, r3
 8002220:	d04d      	beq.n	80022be <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2208      	movs	r2, #8
 8002228:	4413      	add	r3, r2
 800222a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	1ad2      	subs	r2, r2, r3
 800223c:	2308      	movs	r3, #8
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	429a      	cmp	r2, r3
 8002242:	d921      	bls.n	8002288 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00c      	beq.n	8002270 <pvPortMallocMicroROS+0x100>
	__asm volatile
 8002256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800225a:	b672      	cpsid	i
 800225c:	f383 8811 	msr	BASEPRI, r3
 8002260:	f3bf 8f6f 	isb	sy
 8002264:	f3bf 8f4f 	dsb	sy
 8002268:	b662      	cpsie	i
 800226a:	613b      	str	r3, [r7, #16]
}
 800226c:	bf00      	nop
 800226e:	e7fe      	b.n	800226e <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	1ad2      	subs	r2, r2, r3
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002282:	69b8      	ldr	r0, [r7, #24]
 8002284:	f000 f96e 	bl	8002564 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <pvPortMallocMicroROS+0x188>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	4a19      	ldr	r2, [pc, #100]	; (80022f8 <pvPortMallocMicroROS+0x188>)
 8002294:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002296:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <pvPortMallocMicroROS+0x188>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4b19      	ldr	r3, [pc, #100]	; (8002300 <pvPortMallocMicroROS+0x190>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d203      	bcs.n	80022aa <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80022a2:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <pvPortMallocMicroROS+0x188>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a16      	ldr	r2, [pc, #88]	; (8002300 <pvPortMallocMicroROS+0x190>)
 80022a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <pvPortMallocMicroROS+0x184>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	431a      	orrs	r2, r3
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80022be:	f008 fd51 	bl	800ad64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00c      	beq.n	80022e6 <pvPortMallocMicroROS+0x176>
	__asm volatile
 80022cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d0:	b672      	cpsid	i
 80022d2:	f383 8811 	msr	BASEPRI, r3
 80022d6:	f3bf 8f6f 	isb	sy
 80022da:	f3bf 8f4f 	dsb	sy
 80022de:	b662      	cpsie	i
 80022e0:	60fb      	str	r3, [r7, #12]
}
 80022e2:	bf00      	nop
 80022e4:	e7fe      	b.n	80022e4 <pvPortMallocMicroROS+0x174>
	return pvReturn;
 80022e6:	69fb      	ldr	r3, [r7, #28]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3728      	adds	r7, #40	; 0x28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	200060e8 	.word	0x200060e8
 80022f4:	200060f4 	.word	0x200060f4
 80022f8:	200060ec 	.word	0x200060ec
 80022fc:	200060e0 	.word	0x200060e0
 8002300:	200060f0 	.word	0x200060f0

08002304 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d04c      	beq.n	80023b0 <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002316:	2308      	movs	r3, #8
 8002318:	425b      	negs	r3, r3
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	4413      	add	r3, r2
 800231e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <vPortFreeMicroROS+0xb4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4013      	ands	r3, r2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10c      	bne.n	800234c <vPortFreeMicroROS+0x48>
	__asm volatile
 8002332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002336:	b672      	cpsid	i
 8002338:	f383 8811 	msr	BASEPRI, r3
 800233c:	f3bf 8f6f 	isb	sy
 8002340:	f3bf 8f4f 	dsb	sy
 8002344:	b662      	cpsie	i
 8002346:	60fb      	str	r3, [r7, #12]
}
 8002348:	bf00      	nop
 800234a:	e7fe      	b.n	800234a <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00c      	beq.n	800236e <vPortFreeMicroROS+0x6a>
	__asm volatile
 8002354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002358:	b672      	cpsid	i
 800235a:	f383 8811 	msr	BASEPRI, r3
 800235e:	f3bf 8f6f 	isb	sy
 8002362:	f3bf 8f4f 	dsb	sy
 8002366:	b662      	cpsie	i
 8002368:	60bb      	str	r3, [r7, #8]
}
 800236a:	bf00      	nop
 800236c:	e7fe      	b.n	800236c <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <vPortFreeMicroROS+0xb4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d019      	beq.n	80023b0 <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d115      	bne.n	80023b0 <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <vPortFreeMicroROS+0xb4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	43db      	mvns	r3, r3
 800238e:	401a      	ands	r2, r3
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002394:	f008 fcd8 	bl	800ad48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	4b07      	ldr	r3, [pc, #28]	; (80023bc <vPortFreeMicroROS+0xb8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4413      	add	r3, r2
 80023a2:	4a06      	ldr	r2, [pc, #24]	; (80023bc <vPortFreeMicroROS+0xb8>)
 80023a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80023a6:	6938      	ldr	r0, [r7, #16]
 80023a8:	f000 f8dc 	bl	8002564 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80023ac:	f008 fcda 	bl	800ad64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80023b0:	bf00      	nop
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	200060f4 	.word	0x200060f4
 80023bc:	200060ec 	.word	0x200060ec

080023c0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80023c0:	b480      	push	{r7}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80023cc:	2308      	movs	r3, #8
 80023ce:	425b      	negs	r3, r3
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	4413      	add	r3, r2
 80023d4:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <getBlockSize+0x38>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	4013      	ands	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]

	return count;
 80023e8:	68fb      	ldr	r3, [r7, #12]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	371c      	adds	r7, #28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	200060f4 	.word	0x200060f4

080023fc <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002406:	f008 fc9f 	bl	800ad48 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800240a:	6838      	ldr	r0, [r7, #0]
 800240c:	f7ff feb0 	bl	8002170 <pvPortMallocMicroROS>
 8002410:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d017      	beq.n	8002448 <pvPortReallocMicroROS+0x4c>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d014      	beq.n	8002448 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff ffce 	bl	80023c0 <getBlockSize>
 8002424:	4603      	mov	r3, r0
 8002426:	2208      	movs	r2, #8
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	429a      	cmp	r2, r3
 8002432:	d201      	bcs.n	8002438 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	68b8      	ldr	r0, [r7, #8]
 800243e:	f01b fb1e 	bl	801da7e <memcpy>

		vPortFreeMicroROS(pv);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ff5e 	bl	8002304 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8002448:	f008 fc8c 	bl	800ad64 <xTaskResumeAll>

	return newmem;
 800244c:	68bb      	ldr	r3, [r7, #8]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b086      	sub	sp, #24
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002460:	f008 fc72 	bl	800ad48 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	fb02 f303 	mul.w	r3, r2, r3
 800246c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800246e:	6978      	ldr	r0, [r7, #20]
 8002470:	f7ff fe7e 	bl	8002170 <pvPortMallocMicroROS>
 8002474:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	613b      	str	r3, [r7, #16]

  	while(count--)
 800247a:	e004      	b.n	8002486 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	613a      	str	r2, [r7, #16]
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	1e5a      	subs	r2, r3, #1
 800248a:	617a      	str	r2, [r7, #20]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1f5      	bne.n	800247c <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8002490:	f008 fc68 	bl	800ad64 <xTaskResumeAll>
  	return mem;
 8002494:	68fb      	ldr	r3, [r7, #12]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80024a6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80024aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80024ac:	4b27      	ldr	r3, [pc, #156]	; (800254c <prvHeapInit+0xac>)
 80024ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00c      	beq.n	80024d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3307      	adds	r3, #7
 80024be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f023 0307 	bic.w	r3, r3, #7
 80024c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	4a1f      	ldr	r2, [pc, #124]	; (800254c <prvHeapInit+0xac>)
 80024d0:	4413      	add	r3, r2
 80024d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80024d8:	4a1d      	ldr	r2, [pc, #116]	; (8002550 <prvHeapInit+0xb0>)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80024de:	4b1c      	ldr	r3, [pc, #112]	; (8002550 <prvHeapInit+0xb0>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	4413      	add	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80024ec:	2208      	movs	r2, #8
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1a9b      	subs	r3, r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f023 0307 	bic.w	r3, r3, #7
 80024fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4a15      	ldr	r2, [pc, #84]	; (8002554 <prvHeapInit+0xb4>)
 8002500:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002502:	4b14      	ldr	r3, [pc, #80]	; (8002554 <prvHeapInit+0xb4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2200      	movs	r2, #0
 8002508:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <prvHeapInit+0xb4>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	1ad2      	subs	r2, r2, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <prvHeapInit+0xb4>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <prvHeapInit+0xb8>)
 800252e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	4a09      	ldr	r2, [pc, #36]	; (800255c <prvHeapInit+0xbc>)
 8002536:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002538:	4b09      	ldr	r3, [pc, #36]	; (8002560 <prvHeapInit+0xc0>)
 800253a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800253e:	601a      	str	r2, [r3, #0]
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	200024e0 	.word	0x200024e0
 8002550:	200060e0 	.word	0x200060e0
 8002554:	200060e8 	.word	0x200060e8
 8002558:	200060f0 	.word	0x200060f0
 800255c:	200060ec 	.word	0x200060ec
 8002560:	200060f4 	.word	0x200060f4

08002564 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800256c:	4b28      	ldr	r3, [pc, #160]	; (8002610 <prvInsertBlockIntoFreeList+0xac>)
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	e002      	b.n	8002578 <prvInsertBlockIntoFreeList+0x14>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	429a      	cmp	r2, r3
 8002580:	d8f7      	bhi.n	8002572 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	4413      	add	r3, r2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	429a      	cmp	r2, r3
 8002592:	d108      	bne.n	80025a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	441a      	add	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	441a      	add	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d118      	bne.n	80025ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	4b15      	ldr	r3, [pc, #84]	; (8002614 <prvInsertBlockIntoFreeList+0xb0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d00d      	beq.n	80025e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	441a      	add	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	e008      	b.n	80025f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80025e2:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <prvInsertBlockIntoFreeList+0xb0>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	e003      	b.n	80025f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d002      	beq.n	8002602 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002602:	bf00      	nop
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	200060e0 	.word	0x200060e0
 8002614:	200060e8 	.word	0x200060e8

08002618 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800261e:	4b10      	ldr	r3, [pc, #64]	; (8002660 <MX_DMA_Init+0x48>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	4a0f      	ldr	r2, [pc, #60]	; (8002660 <MX_DMA_Init+0x48>)
 8002624:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002628:	6313      	str	r3, [r2, #48]	; 0x30
 800262a:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <MX_DMA_Init+0x48>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002632:	607b      	str	r3, [r7, #4]
 8002634:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	2105      	movs	r1, #5
 800263a:	200c      	movs	r0, #12
 800263c:	f001 ff06 	bl	800444c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002640:	200c      	movs	r0, #12
 8002642:	f001 ff1f 	bl	8004484 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	2105      	movs	r1, #5
 800264a:	200e      	movs	r0, #14
 800264c:	f001 fefe 	bl	800444c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002650:	200e      	movs	r0, #14
 8002652:	f001 ff17 	bl	8004484 <HAL_NVIC_EnableIRQ>

}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800

08002664 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002672:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002674:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002678:	4904      	ldr	r1, [pc, #16]	; (800268c <cubemx_transport_open+0x28>)
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f005 fbf8 	bl	8007e70 <HAL_UART_Receive_DMA>
    return true;
 8002680:	2301      	movs	r3, #1
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	200060f8 	.word	0x200060f8

08002690 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800269e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f005 fc29 	bl	8007ef8 <HAL_UART_DMAStop>
    return true;
 80026a6:	2301      	movs	r3, #1
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, const uint8_t * buf, size_t len, uint8_t * err){
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
 80026bc:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80026c4:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026ca:	2b20      	cmp	r3, #32
 80026cc:	d11a      	bne.n	8002704 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	461a      	mov	r2, r3
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	6978      	ldr	r0, [r7, #20]
 80026d8:	f005 fb4e 	bl	8007d78 <HAL_UART_Transmit_DMA>
 80026dc:	4603      	mov	r3, r0
 80026de:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80026e0:	e002      	b.n	80026e8 <cubemx_transport_write+0x38>
            osDelay(1);
 80026e2:	2001      	movs	r0, #1
 80026e4:	f007 faa6 	bl	8009c34 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80026e8:	7cfb      	ldrb	r3, [r7, #19]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d103      	bne.n	80026f6 <cubemx_transport_write+0x46>
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026f2:	2b20      	cmp	r3, #32
 80026f4:	d1f5      	bne.n	80026e2 <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 80026f6:	7cfb      	ldrb	r3, [r7, #19]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <cubemx_transport_write+0x50>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	e002      	b.n	8002706 <cubemx_transport_write+0x56>
 8002700:	2300      	movs	r3, #0
 8002702:	e000      	b.n	8002706 <cubemx_transport_write+0x56>
    }else{
        return 0;
 8002704:	2300      	movs	r3, #0
    }
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002724:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800272a:	b672      	cpsid	i
}
 800272c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800273a:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <cubemx_transport_read+0x9c>)
 800273c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800273e:	b662      	cpsie	i
}
 8002740:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	3301      	adds	r3, #1
 8002746:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002748:	2001      	movs	r0, #1
 800274a:	f007 fa73 	bl	8009c34 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800274e:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <cubemx_transport_read+0xa0>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	4b16      	ldr	r3, [pc, #88]	; (80027ac <cubemx_transport_read+0x9c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d103      	bne.n	8002762 <cubemx_transport_read+0x52>
 800275a:	69fa      	ldr	r2, [r7, #28]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	dbe3      	blt.n	800272a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002766:	e011      	b.n	800278c <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002768:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <cubemx_transport_read+0xa0>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	440b      	add	r3, r1
 8002772:	4910      	ldr	r1, [pc, #64]	; (80027b4 <cubemx_transport_read+0xa4>)
 8002774:	5c8a      	ldrb	r2, [r1, r2]
 8002776:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002778:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <cubemx_transport_read+0xa0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	3301      	adds	r3, #1
 800277e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002782:	4a0b      	ldr	r2, [pc, #44]	; (80027b0 <cubemx_transport_read+0xa0>)
 8002784:	6013      	str	r3, [r2, #0]
        wrote++;
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	3301      	adds	r3, #1
 800278a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800278c:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <cubemx_transport_read+0xa0>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <cubemx_transport_read+0x9c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d003      	beq.n	80027a0 <cubemx_transport_read+0x90>
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	429a      	cmp	r2, r3
 800279e:	d3e3      	bcc.n	8002768 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80027a0:	69bb      	ldr	r3, [r7, #24]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3720      	adds	r7, #32
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	200068fc 	.word	0x200068fc
 80027b0:	200068f8 	.word	0x200068f8
 80027b4:	200060f8 	.word	0x200060f8

080027b8 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80027bc:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <_Z16MX_FREERTOS_Initv+0x18>)
 80027be:	2100      	movs	r1, #0
 80027c0:	4804      	ldr	r0, [pc, #16]	; (80027d4 <_Z16MX_FREERTOS_Initv+0x1c>)
 80027c2:	f007 f991 	bl	8009ae8 <osThreadNew>
 80027c6:	4603      	mov	r3, r0
 80027c8:	4a03      	ldr	r2, [pc, #12]	; (80027d8 <_Z16MX_FREERTOS_Initv+0x20>)
 80027ca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80027cc:	bf00      	nop
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	0801e8e0 	.word	0x0801e8e0
 80027d4:	080027dd 	.word	0x080027dd
 80027d8:	20006908 	.word	0x20006908

080027dc <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80027dc:	b5b0      	push	{r4, r5, r7, lr}
 80027de:	f5ad 7d28 	sub.w	sp, sp, #672	; 0x2a0
 80027e2:	af02      	add	r7, sp, #8
 80027e4:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80027e8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80027ec:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
	rmw_uros_set_custom_transport(
 80027ee:	4bda      	ldr	r3, [pc, #872]	; (8002b58 <_Z16StartDefaultTaskPv+0x37c>)
 80027f0:	9301      	str	r3, [sp, #4]
 80027f2:	4bda      	ldr	r3, [pc, #872]	; (8002b5c <_Z16StartDefaultTaskPv+0x380>)
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	4bda      	ldr	r3, [pc, #872]	; (8002b60 <_Z16StartDefaultTaskPv+0x384>)
 80027f8:	4ada      	ldr	r2, [pc, #872]	; (8002b64 <_Z16StartDefaultTaskPv+0x388>)
 80027fa:	49db      	ldr	r1, [pc, #876]	; (8002b68 <_Z16StartDefaultTaskPv+0x38c>)
 80027fc:	2001      	movs	r0, #1
 80027fe:	f00c f98b 	bl	800eb18 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002802:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8002806:	4618      	mov	r0, r3
 8002808:	f00c f8b8 	bl	800e97c <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 800280c:	4bd7      	ldr	r3, [pc, #860]	; (8002b6c <_Z16StartDefaultTaskPv+0x390>)
 800280e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	freeRTOS_allocator.deallocate = microros_deallocate;
 8002812:	4bd7      	ldr	r3, [pc, #860]	; (8002b70 <_Z16StartDefaultTaskPv+0x394>)
 8002814:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
	freeRTOS_allocator.reallocate = microros_reallocate;
 8002818:	4bd6      	ldr	r3, [pc, #856]	; (8002b74 <_Z16StartDefaultTaskPv+0x398>)
 800281a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800281e:	4bd6      	ldr	r3, [pc, #856]	; (8002b78 <_Z16StartDefaultTaskPv+0x39c>)
 8002820:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) return;
 8002824:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8002828:	4618      	mov	r0, r3
 800282a:	f00c f8b5 	bl	800e998 <rcutils_set_default_allocator>
 800282e:	4603      	mov	r3, r0
 8002830:	f083 0301 	eor.w	r3, r3, #1
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	f040 817b 	bne.w	8002b32 <_Z16StartDefaultTaskPv+0x356>

	rcl_ret_t rc;
	rcl_node_t node; // nodo;
	rcl_timer_t feedback_timer, robot_timer;
	const unsigned int feedback_timer_period = RCL_MS_TO_NS(10);
 800283c:	4bcf      	ldr	r3, [pc, #828]	; (8002b7c <_Z16StartDefaultTaskPv+0x3a0>)
 800283e:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
	const unsigned int robot_timer_period = RCL_MS_TO_NS(10);
 8002842:	4bce      	ldr	r3, [pc, #824]	; (8002b7c <_Z16StartDefaultTaskPv+0x3a0>)
 8002844:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
	//rcl_publisher_t feedback_publisher; // publisher
	rcl_subscription_t pwm_subscriber, encoder_subscriber;
	rcl_service_t setup_service, control_service; //servizi

	const char* feedback_publisher_name = "/feedback";	//publishers
 8002848:	4bcd      	ldr	r3, [pc, #820]	; (8002b80 <_Z16StartDefaultTaskPv+0x3a4>)
 800284a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
	const char* debug_publisher_name = "/debug";
 800284e:	4bcd      	ldr	r3, [pc, #820]	; (8002b84 <_Z16StartDefaultTaskPv+0x3a8>)
 8002850:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
	const char* pwm_subscriber_name = "/pwm";			//subscribers
 8002854:	4bcc      	ldr	r3, [pc, #816]	; (8002b88 <_Z16StartDefaultTaskPv+0x3ac>)
 8002856:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
	const char* encoder_subscriber_name = "/encoder";
 800285a:	4bcc      	ldr	r3, [pc, #816]	; (8002b8c <_Z16StartDefaultTaskPv+0x3b0>)
 800285c:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
	const char* setup_service_name = "/setup";			//servizi
 8002860:	4bcb      	ldr	r3, [pc, #812]	; (8002b90 <_Z16StartDefaultTaskPv+0x3b4>)
 8002862:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
	const char* control_service_name = "/control";
 8002866:	4bcb      	ldr	r3, [pc, #812]	; (8002b94 <_Z16StartDefaultTaskPv+0x3b8>)
 8002868:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278

	const rosidl_message_type_support_t* feedback_type_support =
		ROSIDL_GET_MSG_TYPE_SUPPORT(racs_services, msg, Feedback);
 800286c:	f009 ff5c 	bl	800c728 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback>
 8002870:	f8c7 0274 	str.w	r0, [r7, #628]	; 0x274
	const rosidl_message_type_support_t * pwm_type_support =
		ROSIDL_GET_MSG_TYPE_SUPPORT(racs_services, msg, DirectAccess);
 8002874:	f009 ff28 	bl	800c6c8 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess>
 8002878:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
	const rosidl_message_type_support_t * encoder_type_support =
		ROSIDL_GET_MSG_TYPE_SUPPORT(racs_services, msg, Encoder);
 800287c:	f009 ff3c 	bl	800c6f8 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder>
 8002880:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
	const rosidl_message_type_support_t * debug_type_support =
		ROSIDL_GET_MSG_TYPE_SUPPORT(racs_services, msg, Debug);
 8002884:	f009 ff08 	bl	800c698 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug>
 8002888:	f8c7 0268 	str.w	r0, [r7, #616]	; 0x268
	const rosidl_service_type_support_t* setup_type_support =
		ROSIDL_GET_SRV_TYPE_SUPPORT(racs_services, srv, Setup);
 800288c:	f009 ff64 	bl	800c758 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup>
 8002890:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
	const rosidl_service_type_support_t* control_type_support =
		ROSIDL_GET_SRV_TYPE_SUPPORT(racs_services, srv, Control);
 8002894:	f009 feda 	bl	800c64c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control>
 8002898:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
	racs_services__srv__Setup_Request req_setup;
	racs_services__srv__Setup_Response res_setup;
	racs_services__srv__Control_Request req_control;
	racs_services__srv__Control_Response res_control;

	allocator = rcl_get_default_allocator();
 800289c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80028a0:	4618      	mov	r0, r3
 80028a2:	f00c f897 	bl	800e9d4 <rcutils_get_default_allocator>
 80028a6:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80028aa:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80028ae:	f507 74ee 	add.w	r4, r7, #476	; 0x1dc
 80028b2:	461d      	mov	r5, r3
 80028b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028b8:	682b      	ldr	r3, [r5, #0]
 80028ba:	6023      	str	r3, [r4, #0]

	rc = rclc_support_init(&support, 0, NULL, &allocator);
 80028bc:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 80028c0:	f507 70f8 	add.w	r0, r7, #496	; 0x1f0
 80028c4:	2200      	movs	r2, #0
 80028c6:	2100      	movs	r1, #0
 80028c8:	f00b fee6 	bl	800e698 <rclc_support_init>
 80028cc:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	if (rc != RCL_RET_OK) return;
 80028d0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f040 812e 	bne.w	8002b36 <_Z16StartDefaultTaskPv+0x35a>

	rc = rclc_timer_init_default(&feedback_timer, &support, feedback_timer_period, feedback_timer_callback);
 80028da:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 80028de:	f507 700e 	add.w	r0, r7, #568	; 0x238
 80028e2:	4bad      	ldr	r3, [pc, #692]	; (8002b98 <_Z16StartDefaultTaskPv+0x3bc>)
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	4aa5      	ldr	r2, [pc, #660]	; (8002b7c <_Z16StartDefaultTaskPv+0x3a0>)
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	f00c f80e 	bl	800e90c <rclc_timer_init_default>
 80028f0:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	if (rc != RCL_RET_OK) return;
 80028f4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f040 811e 	bne.w	8002b3a <_Z16StartDefaultTaskPv+0x35e>

	rc = rclc_timer_init_default(&robot_timer, &support, robot_timer_period, robot_timer_callback);
 80028fe:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8002902:	f507 700d 	add.w	r0, r7, #564	; 0x234
 8002906:	4ba5      	ldr	r3, [pc, #660]	; (8002b9c <_Z16StartDefaultTaskPv+0x3c0>)
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	4a9c      	ldr	r2, [pc, #624]	; (8002b7c <_Z16StartDefaultTaskPv+0x3a0>)
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	f00b fffc 	bl	800e90c <rclc_timer_init_default>
 8002914:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	if (rc != RCL_RET_OK) return;
 8002918:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800291c:	2b00      	cmp	r3, #0
 800291e:	f040 810e 	bne.w	8002b3e <_Z16StartDefaultTaskPv+0x362>

	rc = rclc_node_init_default(&node, "STM32_node", "", &support);
 8002922:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002926:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 800292a:	4a9d      	ldr	r2, [pc, #628]	; (8002ba0 <_Z16StartDefaultTaskPv+0x3c4>)
 800292c:	499d      	ldr	r1, [pc, #628]	; (8002ba4 <_Z16StartDefaultTaskPv+0x3c8>)
 800292e:	f00b fefd 	bl	800e72c <rclc_node_init_default>
 8002932:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	if (rc != RCL_RET_OK) return;
 8002936:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800293a:	2b00      	cmp	r3, #0
 800293c:	f040 8101 	bne.w	8002b42 <_Z16StartDefaultTaskPv+0x366>

	rc = rclc_publisher_init_best_effort(
 8002940:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8002944:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8002948:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800294c:	4896      	ldr	r0, [pc, #600]	; (8002ba8 <_Z16StartDefaultTaskPv+0x3cc>)
 800294e:	f00b ff2f 	bl	800e7b0 <rclc_publisher_init_best_effort>
 8002952:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	  &feedback_publisher, &node, feedback_type_support, feedback_publisher_name);
	if (rc != RCL_RET_OK) return;
 8002956:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800295a:	2b00      	cmp	r3, #0
 800295c:	f040 80f3 	bne.w	8002b46 <_Z16StartDefaultTaskPv+0x36a>

	rc = rclc_publisher_init_best_effort(
 8002960:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8002964:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8002968:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 800296c:	488f      	ldr	r0, [pc, #572]	; (8002bac <_Z16StartDefaultTaskPv+0x3d0>)
 800296e:	f00b ff1f 	bl	800e7b0 <rclc_publisher_init_best_effort>
 8002972:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	  &debug_publisher, &node, debug_type_support, debug_publisher_name);
	if (rc != RCL_RET_OK) return;
 8002976:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800297a:	2b00      	cmp	r3, #0
 800297c:	f040 80e5 	bne.w	8002b4a <_Z16StartDefaultTaskPv+0x36e>

	rc = rclc_subscription_init_best_effort(
 8002980:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8002984:	f507 700c 	add.w	r0, r7, #560	; 0x230
 8002988:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800298c:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8002990:	f00b ff82 	bl	800e898 <rclc_subscription_init_best_effort>
 8002994:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	  &pwm_subscriber, &node, pwm_type_support, pwm_subscriber_name);
	if (rc != RCL_RET_OK) return;
 8002998:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800299c:	2b00      	cmp	r3, #0
 800299e:	f040 80d6 	bne.w	8002b4e <_Z16StartDefaultTaskPv+0x372>

	rc = rclc_subscription_init_best_effort(
 80029a2:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 80029a6:	f507 700b 	add.w	r0, r7, #556	; 0x22c
 80029aa:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80029ae:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80029b2:	f00b ff71 	bl	800e898 <rclc_subscription_init_best_effort>
 80029b6:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	  &encoder_subscriber, &node, encoder_type_support, encoder_subscriber_name);
	if (rc != RCL_RET_OK) return;
 80029ba:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f040 80c7 	bne.w	8002b52 <_Z16StartDefaultTaskPv+0x376>

	rc = rclc_service_init_default(
 80029c4:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 80029c8:	f507 700a 	add.w	r0, r7, #552	; 0x228
 80029cc:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80029d0:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80029d4:	f00b ff26 	bl	800e824 <rclc_service_init_default>
 80029d8:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
		&setup_service, &node, setup_type_support, setup_service_name);
	if (rc != RCL_RET_OK) return;
 80029dc:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f040 80ed 	bne.w	8002bc0 <_Z16StartDefaultTaskPv+0x3e4>

	rc = rclc_service_init_default(
 80029e6:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 80029ea:	f507 7009 	add.w	r0, r7, #548	; 0x224
 80029ee:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 80029f2:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80029f6:	f00b ff15 	bl	800e824 <rclc_service_init_default>
 80029fa:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
		&control_service, &node, control_type_support, control_service_name);
	if (rc != RCL_RET_OK) return;
 80029fe:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f040 80de 	bne.w	8002bc4 <_Z16StartDefaultTaskPv+0x3e8>

	rclc_executor_t executor;
	executor = rclc_executor_get_zero_initialized_executor();
 8002a08:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002a0c:	f5a3 74d0 	sub.w	r4, r3, #416	; 0x1a0
 8002a10:	463b      	mov	r3, r7
 8002a12:	4618      	mov	r0, r3
 8002a14:	f00b fadc 	bl	800dfd0 <rclc_executor_get_zero_initialized_executor>
 8002a18:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002a1c:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8002a20:	4620      	mov	r0, r4
 8002a22:	4619      	mov	r1, r3
 8002a24:	2390      	movs	r3, #144	; 0x90
 8002a26:	461a      	mov	r2, r3
 8002a28:	f01b f829 	bl	801da7e <memcpy>
	unsigned int num_handles = 6; //2 servizi, 2 timer e 2 subs
 8002a2c:	2306      	movs	r3, #6
 8002a2e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
	rclc_executor_init(&executor, &support.context, num_handles, &allocator);
 8002a32:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8002a36:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8002a3a:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8002a3e:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8002a42:	f00b fad1 	bl	800dfe8 <rclc_executor_init>

	rc = rclc_executor_add_timer(&executor, &feedback_timer);
 8002a46:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8002a4a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f00b fb83 	bl	800e15c <rclc_executor_add_timer>
 8002a56:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	if (rc != RCL_RET_OK) return;
 8002a5a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f040 80b2 	bne.w	8002bc8 <_Z16StartDefaultTaskPv+0x3ec>

	rc = rclc_executor_add_timer(&executor, &robot_timer);
 8002a64:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8002a68:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f00b fb74 	bl	800e15c <rclc_executor_add_timer>
 8002a74:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	if (rc != RCL_RET_OK) return;
 8002a78:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f040 80a5 	bne.w	8002bcc <_Z16StartDefaultTaskPv+0x3f0>

	rc = rclc_executor_add_subscription(
 8002a82:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 8002a86:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8002a8a:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8002a8e:	2300      	movs	r3, #0
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	4b47      	ldr	r3, [pc, #284]	; (8002bb0 <_Z16StartDefaultTaskPv+0x3d4>)
 8002a94:	f00b fb24 	bl	800e0e0 <rclc_executor_add_subscription>
 8002a98:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	  &executor, &pwm_subscriber, &pwm_msg,
	  &pwm_callback, ON_NEW_DATA);
	if (rc != RCL_RET_OK) return;
 8002a9c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f040 8095 	bne.w	8002bd0 <_Z16StartDefaultTaskPv+0x3f4>

	rc = rclc_executor_add_subscription(
 8002aa6:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 8002aaa:	f507 710b 	add.w	r1, r7, #556	; 0x22c
 8002aae:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	4b3f      	ldr	r3, [pc, #252]	; (8002bb4 <_Z16StartDefaultTaskPv+0x3d8>)
 8002ab8:	f00b fb12 	bl	800e0e0 <rclc_executor_add_subscription>
 8002abc:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	  &executor, &encoder_subscriber, &encoder_msg,
	  &encoder_callback, ON_NEW_DATA);
	if (rc != RCL_RET_OK) return;
 8002ac0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f040 8085 	bne.w	8002bd4 <_Z16StartDefaultTaskPv+0x3f8>

	rc = rclc_executor_add_service(
 8002aca:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002ace:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8002ad2:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8002ad6:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8002ada:	4c37      	ldr	r4, [pc, #220]	; (8002bb8 <_Z16StartDefaultTaskPv+0x3dc>)
 8002adc:	9400      	str	r4, [sp, #0]
 8002ade:	f00b fb6b 	bl	800e1b8 <rclc_executor_add_service>
 8002ae2:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
		&executor, &setup_service, &req_setup,
		&res_setup, setup_callback);
	if (rc != RCL_RET_OK) return;
 8002ae6:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d174      	bne.n	8002bd8 <_Z16StartDefaultTaskPv+0x3fc>

	rc = rclc_executor_add_service(
 8002aee:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8002af2:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8002af6:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8002afa:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8002afe:	4c2f      	ldr	r4, [pc, #188]	; (8002bbc <_Z16StartDefaultTaskPv+0x3e0>)
 8002b00:	9400      	str	r4, [sp, #0]
 8002b02:	f00b fb59 	bl	800e1b8 <rclc_executor_add_service>
 8002b06:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
		&executor, &control_service, &req_control,
		&res_control, control_callback);
	if (rc != RCL_RET_OK) return;
 8002b0a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d164      	bne.n	8002bdc <_Z16StartDefaultTaskPv+0x400>

	Robot ScorBot = create_robot();
 8002b12:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002b16:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fe fcc4 	bl	80014a8 <_Z12create_robotv>

	rclc_executor_spin(&executor);
 8002b20:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002b24:	4618      	mov	r0, r3
 8002b26:	f00b fd77 	bl	800e618 <rclc_executor_spin>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002b2a:	2001      	movs	r0, #1
 8002b2c:	f007 f882 	bl	8009c34 <osDelay>
 8002b30:	e7fb      	b.n	8002b2a <_Z16StartDefaultTaskPv+0x34e>
	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) return;
 8002b32:	bf00      	nop
 8002b34:	e053      	b.n	8002bde <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002b36:	bf00      	nop
 8002b38:	e051      	b.n	8002bde <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002b3a:	bf00      	nop
 8002b3c:	e04f      	b.n	8002bde <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002b3e:	bf00      	nop
 8002b40:	e04d      	b.n	8002bde <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002b42:	bf00      	nop
 8002b44:	e04b      	b.n	8002bde <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002b46:	bf00      	nop
 8002b48:	e049      	b.n	8002bde <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002b4a:	bf00      	nop
 8002b4c:	e047      	b.n	8002bde <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002b4e:	bf00      	nop
 8002b50:	e045      	b.n	8002bde <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002b52:	bf00      	nop
 8002b54:	e043      	b.n	8002bde <_Z16StartDefaultTaskPv+0x402>
 8002b56:	bf00      	nop
 8002b58:	08002711 	.word	0x08002711
 8002b5c:	080026b1 	.word	0x080026b1
 8002b60:	08002691 	.word	0x08002691
 8002b64:	08002665 	.word	0x08002665
 8002b68:	20006b7c 	.word	0x20006b7c
 8002b6c:	08002f09 	.word	0x08002f09
 8002b70:	08002f4d 	.word	0x08002f4d
 8002b74:	08002f85 	.word	0x08002f85
 8002b78:	08002ff1 	.word	0x08002ff1
 8002b7c:	00989680 	.word	0x00989680
 8002b80:	0801e85c 	.word	0x0801e85c
 8002b84:	0801e868 	.word	0x0801e868
 8002b88:	0801e870 	.word	0x0801e870
 8002b8c:	0801e878 	.word	0x0801e878
 8002b90:	0801e884 	.word	0x0801e884
 8002b94:	0801e88c 	.word	0x0801e88c
 8002b98:	0800078d 	.word	0x0800078d
 8002b9c:	08000889 	.word	0x08000889
 8002ba0:	0801e898 	.word	0x0801e898
 8002ba4:	0801e89c 	.word	0x0801e89c
 8002ba8:	20006900 	.word	0x20006900
 8002bac:	20006904 	.word	0x20006904
 8002bb0:	080006d9 	.word	0x080006d9
 8002bb4:	080006ad 	.word	0x080006ad
 8002bb8:	0800075d 	.word	0x0800075d
 8002bbc:	0800072d 	.word	0x0800072d
	if (rc != RCL_RET_OK) return;
 8002bc0:	bf00      	nop
 8002bc2:	e00c      	b.n	8002bde <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002bc4:	bf00      	nop
 8002bc6:	e00a      	b.n	8002bde <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002bc8:	bf00      	nop
 8002bca:	e008      	b.n	8002bde <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002bcc:	bf00      	nop
 8002bce:	e006      	b.n	8002bde <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002bd0:	bf00      	nop
 8002bd2:	e004      	b.n	8002bde <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002bd4:	bf00      	nop
 8002bd6:	e002      	b.n	8002bde <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002bd8:	bf00      	nop
 8002bda:	e000      	b.n	8002bde <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002bdc:	bf00      	nop
  }
  /* USER CODE END StartDefaultTask */
}
 8002bde:	f507 7726 	add.w	r7, r7, #664	; 0x298
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bdb0      	pop	{r4, r5, r7, pc}
 8002be6:	bf00      	nop

08002be8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08c      	sub	sp, #48	; 0x30
 8002bec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bee:	f107 031c 	add.w	r3, r7, #28
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	605a      	str	r2, [r3, #4]
 8002bf8:	609a      	str	r2, [r3, #8]
 8002bfa:	60da      	str	r2, [r3, #12]
 8002bfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bfe:	4b58      	ldr	r3, [pc, #352]	; (8002d60 <MX_GPIO_Init+0x178>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	4a57      	ldr	r2, [pc, #348]	; (8002d60 <MX_GPIO_Init+0x178>)
 8002c04:	f043 0310 	orr.w	r3, r3, #16
 8002c08:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0a:	4b55      	ldr	r3, [pc, #340]	; (8002d60 <MX_GPIO_Init+0x178>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	f003 0310 	and.w	r3, r3, #16
 8002c12:	61bb      	str	r3, [r7, #24]
 8002c14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c16:	4b52      	ldr	r3, [pc, #328]	; (8002d60 <MX_GPIO_Init+0x178>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	4a51      	ldr	r2, [pc, #324]	; (8002d60 <MX_GPIO_Init+0x178>)
 8002c1c:	f043 0304 	orr.w	r3, r3, #4
 8002c20:	6313      	str	r3, [r2, #48]	; 0x30
 8002c22:	4b4f      	ldr	r3, [pc, #316]	; (8002d60 <MX_GPIO_Init+0x178>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c2e:	4b4c      	ldr	r3, [pc, #304]	; (8002d60 <MX_GPIO_Init+0x178>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	4a4b      	ldr	r2, [pc, #300]	; (8002d60 <MX_GPIO_Init+0x178>)
 8002c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c38:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3a:	4b49      	ldr	r3, [pc, #292]	; (8002d60 <MX_GPIO_Init+0x178>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c46:	4b46      	ldr	r3, [pc, #280]	; (8002d60 <MX_GPIO_Init+0x178>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	4a45      	ldr	r2, [pc, #276]	; (8002d60 <MX_GPIO_Init+0x178>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	6313      	str	r3, [r2, #48]	; 0x30
 8002c52:	4b43      	ldr	r3, [pc, #268]	; (8002d60 <MX_GPIO_Init+0x178>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5e:	4b40      	ldr	r3, [pc, #256]	; (8002d60 <MX_GPIO_Init+0x178>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	4a3f      	ldr	r2, [pc, #252]	; (8002d60 <MX_GPIO_Init+0x178>)
 8002c64:	f043 0302 	orr.w	r3, r3, #2
 8002c68:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6a:	4b3d      	ldr	r3, [pc, #244]	; (8002d60 <MX_GPIO_Init+0x178>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c76:	4b3a      	ldr	r3, [pc, #232]	; (8002d60 <MX_GPIO_Init+0x178>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	4a39      	ldr	r2, [pc, #228]	; (8002d60 <MX_GPIO_Init+0x178>)
 8002c7c:	f043 0308 	orr.w	r3, r3, #8
 8002c80:	6313      	str	r3, [r2, #48]	; 0x30
 8002c82:	4b37      	ldr	r3, [pc, #220]	; (8002d60 <MX_GPIO_Init+0x178>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	607b      	str	r3, [r7, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c8e:	4b34      	ldr	r3, [pc, #208]	; (8002d60 <MX_GPIO_Init+0x178>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	4a33      	ldr	r2, [pc, #204]	; (8002d60 <MX_GPIO_Init+0x178>)
 8002c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c98:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9a:	4b31      	ldr	r3, [pc, #196]	; (8002d60 <MX_GPIO_Init+0x178>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f244 0181 	movw	r1, #16513	; 0x4081
 8002cac:	482d      	ldr	r0, [pc, #180]	; (8002d64 <MX_GPIO_Init+0x17c>)
 8002cae:	f002 f9d1 	bl	8005054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR5_INA_Pin|MOTOR5_INB_Pin|MOTOR1_INA_Pin|MOTOR1_INB_Pin
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 8002cb8:	482b      	ldr	r0, [pc, #172]	; (8002d68 <MX_GPIO_Init+0x180>)
 8002cba:	f002 f9cb 	bl	8005054 <HAL_GPIO_WritePin>
                          |MOTOR2_INA_Pin|MOTOR2_INB_Pin|MOTOR3_INA_Pin|MOTOR3_INB_Pin
                          |MOTOR4_INA_Pin|MOTOR4_INB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MOTOR6_INA_Pin|MOTOR6_INB_Pin|PIN_TOGGLE_Pin|MOTORS_EN_Pin
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f647 616c 	movw	r1, #32364	; 0x7e6c
 8002cc4:	4829      	ldr	r0, [pc, #164]	; (8002d6c <MX_GPIO_Init+0x184>)
 8002cc6:	f002 f9c5 	bl	8005054 <HAL_GPIO_WritePin>
                          |MOTOR1_END_Pin|MOTOR2_END_Pin|MOTOR3_END_Pin|MOTOR4_END_Pin
                          |MOTOR5_END_Pin|MOTOR6_END_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002cca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cd0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002cd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002cda:	f107 031c 	add.w	r3, r7, #28
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4823      	ldr	r0, [pc, #140]	; (8002d70 <MX_GPIO_Init+0x188>)
 8002ce2:	f001 fff3 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002ce6:	f244 0381 	movw	r3, #16513	; 0x4081
 8002cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cec:	2301      	movs	r3, #1
 8002cee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf8:	f107 031c 	add.w	r3, r7, #28
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4819      	ldr	r0, [pc, #100]	; (8002d64 <MX_GPIO_Init+0x17c>)
 8002d00:	f001 ffe4 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = MOTOR5_INA_Pin|MOTOR5_INB_Pin|MOTOR1_INA_Pin|MOTOR1_INB_Pin
 8002d04:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 8002d08:	61fb      	str	r3, [r7, #28]
                          |MOTOR2_INA_Pin|MOTOR2_INB_Pin|MOTOR3_INA_Pin|MOTOR3_INB_Pin
                          |MOTOR4_INA_Pin|MOTOR4_INB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d12:	2300      	movs	r3, #0
 8002d14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d16:	f107 031c 	add.w	r3, r7, #28
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4812      	ldr	r0, [pc, #72]	; (8002d68 <MX_GPIO_Init+0x180>)
 8002d1e:	f001 ffd5 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = MOTOR6_INA_Pin|MOTOR6_INB_Pin|PIN_TOGGLE_Pin|MOTORS_EN_Pin
 8002d22:	f647 636c 	movw	r3, #32364	; 0x7e6c
 8002d26:	61fb      	str	r3, [r7, #28]
                          |MOTOR1_END_Pin|MOTOR2_END_Pin|MOTOR3_END_Pin|MOTOR4_END_Pin
                          |MOTOR5_END_Pin|MOTOR6_END_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d30:	2300      	movs	r3, #0
 8002d32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d34:	f107 031c 	add.w	r3, r7, #28
 8002d38:	4619      	mov	r1, r3
 8002d3a:	480c      	ldr	r0, [pc, #48]	; (8002d6c <MX_GPIO_Init+0x184>)
 8002d3c:	f001 ffc6 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d44:	2300      	movs	r3, #0
 8002d46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002d4c:	f107 031c 	add.w	r3, r7, #28
 8002d50:	4619      	mov	r1, r3
 8002d52:	4806      	ldr	r0, [pc, #24]	; (8002d6c <MX_GPIO_Init+0x184>)
 8002d54:	f001 ffba 	bl	8004ccc <HAL_GPIO_Init>

}
 8002d58:	bf00      	nop
 8002d5a:	3730      	adds	r7, #48	; 0x30
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40020400 	.word	0x40020400
 8002d68:	40020c00 	.word	0x40020c00
 8002d6c:	40021800 	.word	0x40021800
 8002d70:	40020800 	.word	0x40020800

08002d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d78:	f001 fa5f 	bl	800423a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d7c:	f000 f82e 	bl	8002ddc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d80:	f7ff ff32 	bl	8002be8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d84:	f7ff fc48 	bl	8002618 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002d88:	f001 f886 	bl	8003e98 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002d8c:	f001 f984 	bl	8004098 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8002d90:	f000 fbd6 	bl	8003540 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002d94:	f000 fca4 	bl	80036e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002d98:	f000 fcf6 	bl	8003788 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002d9c:	f000 fd4a 	bl	8003834 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002da0:	f000 fd9e 	bl	80038e0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002da4:	f000 fdf2 	bl	800398c <MX_TIM8_Init>
  MX_TIM9_Init();
 8002da8:	f000 fe4a 	bl	8003a40 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002dac:	2100      	movs	r1, #0
 8002dae:	4809      	ldr	r0, [pc, #36]	; (8002dd4 <main+0x60>)
 8002db0:	f003 fd58 	bl	8006864 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002db4:	213c      	movs	r1, #60	; 0x3c
 8002db6:	4808      	ldr	r0, [pc, #32]	; (8002dd8 <main+0x64>)
 8002db8:	f003 fef4 	bl	8006ba4 <HAL_TIM_Encoder_Start>
  TIM2->CNT = HALF_ENC+1;
 8002dbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dc0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002dc4:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002dc6:	f006 fe25 	bl	8009a14 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002dca:	f7ff fcf5 	bl	80027b8 <_Z16MX_FREERTOS_Initv>

  /* Start scheduler */
  osKernelStart();
 8002dce:	f006 fe55 	bl	8009a7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002dd2:	e7fe      	b.n	8002dd2 <main+0x5e>
 8002dd4:	20006968 	.word	0x20006968
 8002dd8:	200069b4 	.word	0x200069b4

08002ddc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b094      	sub	sp, #80	; 0x50
 8002de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002de2:	f107 031c 	add.w	r3, r7, #28
 8002de6:	2234      	movs	r2, #52	; 0x34
 8002de8:	2100      	movs	r1, #0
 8002dea:	4618      	mov	r0, r3
 8002dec:	f01a fd16 	bl	801d81c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002df0:	f107 0308 	add.w	r3, r7, #8
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e00:	4b33      	ldr	r3, [pc, #204]	; (8002ed0 <_Z18SystemClock_Configv+0xf4>)
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	4a32      	ldr	r2, [pc, #200]	; (8002ed0 <_Z18SystemClock_Configv+0xf4>)
 8002e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0c:	4b30      	ldr	r3, [pc, #192]	; (8002ed0 <_Z18SystemClock_Configv+0xf4>)
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e14:	607b      	str	r3, [r7, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002e18:	4b2e      	ldr	r3, [pc, #184]	; (8002ed4 <_Z18SystemClock_Configv+0xf8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002e20:	4a2c      	ldr	r2, [pc, #176]	; (8002ed4 <_Z18SystemClock_Configv+0xf8>)
 8002e22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	4b2a      	ldr	r3, [pc, #168]	; (8002ed4 <_Z18SystemClock_Configv+0xf8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e30:	603b      	str	r3, [r7, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e34:	2301      	movs	r3, #1
 8002e36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e3c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e46:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002e48:	2304      	movs	r3, #4
 8002e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002e4c:	2360      	movs	r3, #96	; 0x60
 8002e4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e50:	2302      	movs	r3, #2
 8002e52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e54:	2304      	movs	r3, #4
 8002e56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002e58:	2302      	movs	r3, #2
 8002e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e5c:	f107 031c 	add.w	r3, r7, #28
 8002e60:	4618      	mov	r0, r3
 8002e62:	f002 faa9 	bl	80053b8 <HAL_RCC_OscConfig>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	bf14      	ite	ne
 8002e6c:	2301      	movne	r3, #1
 8002e6e:	2300      	moveq	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8002e76:	f000 f841 	bl	8002efc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002e7a:	f002 fa4d 	bl	8005318 <HAL_PWREx_EnableOverDrive>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf14      	ite	ne
 8002e84:	2301      	movne	r3, #1
 8002e86:	2300      	moveq	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8002e8e:	f000 f835 	bl	8002efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e92:	230f      	movs	r3, #15
 8002e94:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e96:	2302      	movs	r3, #2
 8002e98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ea2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002ea8:	f107 0308 	add.w	r3, r7, #8
 8002eac:	2103      	movs	r1, #3
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f002 fd30 	bl	8005914 <HAL_RCC_ClockConfig>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	bf14      	ite	ne
 8002eba:	2301      	movne	r3, #1
 8002ebc:	2300      	moveq	r3, #0
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 8002ec4:	f000 f81a 	bl	8002efc <Error_Handler>
  }
}
 8002ec8:	bf00      	nop
 8002eca:	3750      	adds	r7, #80	; 0x50
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40007000 	.word	0x40007000

08002ed8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a04      	ldr	r2, [pc, #16]	; (8002ef8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d101      	bne.n	8002eee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002eea:	f001 f9b3 	bl	8004254 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40001000 	.word	0x40001000

08002efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002f00:	b672      	cpsid	i
}
 8002f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f04:	e7fe      	b.n	8002f04 <Error_Handler+0x8>
	...

08002f08 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002f12:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <microros_allocate+0x3c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <microros_allocate+0x3c>)
 8002f20:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002f22:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <microros_allocate+0x40>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	461a      	mov	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <microros_allocate+0x40>)
 8002f30:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff f91c 	bl	8002170 <pvPortMallocMicroROS>
 8002f38:	4603      	mov	r3, r0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	2000690c 	.word	0x2000690c
 8002f48:	20006910 	.word	0x20006910

08002f4c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00c      	beq.n	8002f76 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7ff fa2f 	bl	80023c0 <getBlockSize>
 8002f62:	4603      	mov	r3, r0
 8002f64:	4a06      	ldr	r2, [pc, #24]	; (8002f80 <microros_deallocate+0x34>)
 8002f66:	6812      	ldr	r2, [r2, #0]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <microros_deallocate+0x34>)
 8002f6e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff f9c7 	bl	8002304 <vPortFreeMicroROS>
  }
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20006910 	.word	0x20006910

08002f84 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002f90:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <microros_reallocate+0x64>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	461a      	mov	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	4413      	add	r3, r2
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <microros_reallocate+0x64>)
 8002f9e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002fa0:	4b12      	ldr	r3, [pc, #72]	; (8002fec <microros_reallocate+0x68>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	4413      	add	r3, r2
 8002faa:	461a      	mov	r2, r3
 8002fac:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <microros_reallocate+0x68>)
 8002fae:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d104      	bne.n	8002fc0 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002fb6:	68b8      	ldr	r0, [r7, #8]
 8002fb8:	f7ff f8da 	bl	8002170 <pvPortMallocMicroROS>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	e00e      	b.n	8002fde <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f7ff f9fd 	bl	80023c0 <getBlockSize>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	4a08      	ldr	r2, [pc, #32]	; (8002fec <microros_reallocate+0x68>)
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	461a      	mov	r2, r3
 8002fd0:	4b06      	ldr	r3, [pc, #24]	; (8002fec <microros_reallocate+0x68>)
 8002fd2:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f7ff fa10 	bl	80023fc <pvPortReallocMicroROS>
 8002fdc:	4603      	mov	r3, r0
  }
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	2000690c 	.word	0x2000690c
 8002fec:	20006910 	.word	0x20006910

08002ff0 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	fb02 f303 	mul.w	r3, r2, r3
 8003004:	4a0c      	ldr	r2, [pc, #48]	; (8003038 <microros_zero_allocate+0x48>)
 8003006:	6812      	ldr	r2, [r2, #0]
 8003008:	4413      	add	r3, r2
 800300a:	461a      	mov	r2, r3
 800300c:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <microros_zero_allocate+0x48>)
 800300e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	fb02 f303 	mul.w	r3, r2, r3
 8003018:	4a08      	ldr	r2, [pc, #32]	; (800303c <microros_zero_allocate+0x4c>)
 800301a:	6812      	ldr	r2, [r2, #0]
 800301c:	4413      	add	r3, r2
 800301e:	461a      	mov	r2, r3
 8003020:	4b06      	ldr	r3, [pc, #24]	; (800303c <microros_zero_allocate+0x4c>)
 8003022:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f7ff fa15 	bl	8002456 <pvPortCallocMicroROS>
 800302c:	4603      	mov	r3, r0
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	2000690c 	.word	0x2000690c
 800303c:	20006910 	.word	0x20006910

08003040 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003040:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003044:	b086      	sub	sp, #24
 8003046:	af00      	add	r7, sp, #0
 8003048:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8003052:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003056:	a320      	add	r3, pc, #128	; (adr r3, 80030d8 <UTILS_NanosecondsToTimespec+0x98>)
 8003058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305c:	f7fd f958 	bl	8000310 <__aeabi_ldivmod>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800306a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800306e:	a31a      	add	r3, pc, #104	; (adr r3, 80030d8 <UTILS_NanosecondsToTimespec+0x98>)
 8003070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003074:	f7fd f94c 	bl	8000310 <__aeabi_ldivmod>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	da20      	bge.n	80030c6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	4a11      	ldr	r2, [pc, #68]	; (80030d0 <UTILS_NanosecondsToTimespec+0x90>)
 800308a:	fb82 1203 	smull	r1, r2, r2, r3
 800308e:	1712      	asrs	r2, r2, #28
 8003090:	17db      	asrs	r3, r3, #31
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	3301      	adds	r3, #1
 8003096:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309e:	6979      	ldr	r1, [r7, #20]
 80030a0:	17c8      	asrs	r0, r1, #31
 80030a2:	460c      	mov	r4, r1
 80030a4:	4605      	mov	r5, r0
 80030a6:	ebb2 0804 	subs.w	r8, r2, r4
 80030aa:	eb63 0905 	sbc.w	r9, r3, r5
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	4906      	ldr	r1, [pc, #24]	; (80030d4 <UTILS_NanosecondsToTimespec+0x94>)
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	441a      	add	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	609a      	str	r2, [r3, #8]
    }
}
 80030c6:	bf00      	nop
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80030d0:	44b82fa1 	.word	0x44b82fa1
 80030d4:	3b9aca00 	.word	0x3b9aca00
 80030d8:	3b9aca00 	.word	0x3b9aca00
 80030dc:	00000000 	.word	0x00000000

080030e0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80030e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030e4:	b08e      	sub	sp, #56	; 0x38
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6278      	str	r0, [r7, #36]	; 0x24
 80030ea:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80030ec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030f0:	2300      	movs	r3, #0
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8003102:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003106:	4618      	mov	r0, r3
 8003108:	f008 f8b8 	bl	800b27c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800310c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310e:	17da      	asrs	r2, r3, #31
 8003110:	61bb      	str	r3, [r7, #24]
 8003112:	61fa      	str	r2, [r7, #28]
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	69b9      	ldr	r1, [r7, #24]
 800311e:	000b      	movs	r3, r1
 8003120:	2200      	movs	r2, #0
 8003122:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8003126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003128:	2200      	movs	r2, #0
 800312a:	461c      	mov	r4, r3
 800312c:	4615      	mov	r5, r2
 800312e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003132:	1911      	adds	r1, r2, r4
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	416b      	adcs	r3, r5
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800313e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8003142:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	f04f 0400 	mov.w	r4, #0
 800314e:	f04f 0500 	mov.w	r5, #0
 8003152:	015d      	lsls	r5, r3, #5
 8003154:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003158:	0154      	lsls	r4, r2, #5
 800315a:	4622      	mov	r2, r4
 800315c:	462b      	mov	r3, r5
 800315e:	ebb2 0800 	subs.w	r8, r2, r0
 8003162:	eb63 0901 	sbc.w	r9, r3, r1
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8003172:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8003176:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800317a:	4690      	mov	r8, r2
 800317c:	4699      	mov	r9, r3
 800317e:	eb18 0a00 	adds.w	sl, r8, r0
 8003182:	eb49 0b01 	adc.w	fp, r9, r1
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003192:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003196:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800319a:	ebb2 040a 	subs.w	r4, r2, sl
 800319e:	603c      	str	r4, [r7, #0]
 80031a0:	eb63 030b 	sbc.w	r3, r3, fp
 80031a4:	607b      	str	r3, [r7, #4]
 80031a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031aa:	4623      	mov	r3, r4
 80031ac:	181b      	adds	r3, r3, r0
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	462b      	mov	r3, r5
 80031b2:	eb41 0303 	adc.w	r3, r1, r3
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	6a3a      	ldr	r2, [r7, #32]
 80031ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031be:	f7ff ff3f 	bl	8003040 <UTILS_NanosecondsToTimespec>

    return 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	4618      	mov	r0, r3
 80031c6:	3738      	adds	r7, #56	; 0x38
 80031c8:	46bd      	mov	sp, r7
 80031ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080031d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80031d6:	4b11      	ldr	r3, [pc, #68]	; (800321c <HAL_MspInit+0x4c>)
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	4a10      	ldr	r2, [pc, #64]	; (800321c <HAL_MspInit+0x4c>)
 80031dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e0:	6413      	str	r3, [r2, #64]	; 0x40
 80031e2:	4b0e      	ldr	r3, [pc, #56]	; (800321c <HAL_MspInit+0x4c>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ea:	607b      	str	r3, [r7, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ee:	4b0b      	ldr	r3, [pc, #44]	; (800321c <HAL_MspInit+0x4c>)
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	4a0a      	ldr	r2, [pc, #40]	; (800321c <HAL_MspInit+0x4c>)
 80031f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031f8:	6453      	str	r3, [r2, #68]	; 0x44
 80031fa:	4b08      	ldr	r3, [pc, #32]	; (800321c <HAL_MspInit+0x4c>)
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003206:	2200      	movs	r2, #0
 8003208:	210f      	movs	r1, #15
 800320a:	f06f 0001 	mvn.w	r0, #1
 800320e:	f001 f91d 	bl	800444c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40023800 	.word	0x40023800

08003220 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b08e      	sub	sp, #56	; 0x38
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003230:	4b33      	ldr	r3, [pc, #204]	; (8003300 <HAL_InitTick+0xe0>)
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	4a32      	ldr	r2, [pc, #200]	; (8003300 <HAL_InitTick+0xe0>)
 8003236:	f043 0310 	orr.w	r3, r3, #16
 800323a:	6413      	str	r3, [r2, #64]	; 0x40
 800323c:	4b30      	ldr	r3, [pc, #192]	; (8003300 <HAL_InitTick+0xe0>)
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003248:	f107 0210 	add.w	r2, r7, #16
 800324c:	f107 0314 	add.w	r3, r7, #20
 8003250:	4611      	mov	r1, r2
 8003252:	4618      	mov	r0, r3
 8003254:	f002 fd84 	bl	8005d60 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800325c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325e:	2b00      	cmp	r3, #0
 8003260:	d103      	bne.n	800326a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003262:	f002 fd55 	bl	8005d10 <HAL_RCC_GetPCLK1Freq>
 8003266:	6378      	str	r0, [r7, #52]	; 0x34
 8003268:	e004      	b.n	8003274 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800326a:	f002 fd51 	bl	8005d10 <HAL_RCC_GetPCLK1Freq>
 800326e:	4603      	mov	r3, r0
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003276:	4a23      	ldr	r2, [pc, #140]	; (8003304 <HAL_InitTick+0xe4>)
 8003278:	fba2 2303 	umull	r2, r3, r2, r3
 800327c:	0c9b      	lsrs	r3, r3, #18
 800327e:	3b01      	subs	r3, #1
 8003280:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003282:	4b21      	ldr	r3, [pc, #132]	; (8003308 <HAL_InitTick+0xe8>)
 8003284:	4a21      	ldr	r2, [pc, #132]	; (800330c <HAL_InitTick+0xec>)
 8003286:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003288:	4b1f      	ldr	r3, [pc, #124]	; (8003308 <HAL_InitTick+0xe8>)
 800328a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800328e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003290:	4a1d      	ldr	r2, [pc, #116]	; (8003308 <HAL_InitTick+0xe8>)
 8003292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003294:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003296:	4b1c      	ldr	r3, [pc, #112]	; (8003308 <HAL_InitTick+0xe8>)
 8003298:	2200      	movs	r2, #0
 800329a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800329c:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <HAL_InitTick+0xe8>)
 800329e:	2200      	movs	r2, #0
 80032a0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032a2:	4b19      	ldr	r3, [pc, #100]	; (8003308 <HAL_InitTick+0xe8>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80032a8:	4817      	ldr	r0, [pc, #92]	; (8003308 <HAL_InitTick+0xe8>)
 80032aa:	f003 f9b3 	bl	8006614 <HAL_TIM_Base_Init>
 80032ae:	4603      	mov	r3, r0
 80032b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80032b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d11b      	bne.n	80032f4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80032bc:	4812      	ldr	r0, [pc, #72]	; (8003308 <HAL_InitTick+0xe8>)
 80032be:	f003 fa01 	bl	80066c4 <HAL_TIM_Base_Start_IT>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80032c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d111      	bne.n	80032f4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80032d0:	2036      	movs	r0, #54	; 0x36
 80032d2:	f001 f8d7 	bl	8004484 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b0f      	cmp	r3, #15
 80032da:	d808      	bhi.n	80032ee <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80032dc:	2200      	movs	r2, #0
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	2036      	movs	r0, #54	; 0x36
 80032e2:	f001 f8b3 	bl	800444c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032e6:	4a0a      	ldr	r2, [pc, #40]	; (8003310 <HAL_InitTick+0xf0>)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	e002      	b.n	80032f4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80032f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3738      	adds	r7, #56	; 0x38
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40023800 	.word	0x40023800
 8003304:	431bde83 	.word	0x431bde83
 8003308:	20006914 	.word	0x20006914
 800330c:	40001000 	.word	0x40001000
 8003310:	20000008 	.word	0x20000008

08003314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003318:	e7fe      	b.n	8003318 <NMI_Handler+0x4>

0800331a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800331a:	b480      	push	{r7}
 800331c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800331e:	e7fe      	b.n	800331e <HardFault_Handler+0x4>

08003320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003324:	e7fe      	b.n	8003324 <MemManage_Handler+0x4>

08003326 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003326:	b480      	push	{r7}
 8003328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800332a:	e7fe      	b.n	800332a <BusFault_Handler+0x4>

0800332c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003330:	e7fe      	b.n	8003330 <UsageFault_Handler+0x4>

08003332 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003332:	b480      	push	{r7}
 8003334:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003336:	bf00      	nop
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003344:	4802      	ldr	r0, [pc, #8]	; (8003350 <DMA1_Stream1_IRQHandler+0x10>)
 8003346:	f001 fa4b 	bl	80047e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800334a:	bf00      	nop
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	20006c64 	.word	0x20006c64

08003354 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003358:	4802      	ldr	r0, [pc, #8]	; (8003364 <DMA1_Stream3_IRQHandler+0x10>)
 800335a:	f001 fa41 	bl	80047e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20006c04 	.word	0x20006c04

08003368 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800336c:	4802      	ldr	r0, [pc, #8]	; (8003378 <USART3_IRQHandler+0x10>)
 800336e:	f004 fe55 	bl	800801c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003372:	bf00      	nop
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20006b7c 	.word	0x20006b7c

0800337c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003380:	4802      	ldr	r0, [pc, #8]	; (800338c <TIM6_DAC_IRQHandler+0x10>)
 8003382:	f003 fc9d 	bl	8006cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003386:	bf00      	nop
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20006914 	.word	0x20006914

08003390 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return 1;
 8003394:	2301      	movs	r3, #1
}
 8003396:	4618      	mov	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <_kill>:

int _kill(int pid, int sig)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033aa:	f01a fb33 	bl	801da14 <__errno>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2216      	movs	r2, #22
 80033b2:	601a      	str	r2, [r3, #0]
  return -1;
 80033b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <_exit>:

void _exit (int status)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff ffe7 	bl	80033a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80033d2:	e7fe      	b.n	80033d2 <_exit+0x12>

080033d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	e00a      	b.n	80033fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033e6:	f3af 8000 	nop.w
 80033ea:	4601      	mov	r1, r0
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	1c5a      	adds	r2, r3, #1
 80033f0:	60ba      	str	r2, [r7, #8]
 80033f2:	b2ca      	uxtb	r2, r1
 80033f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	3301      	adds	r3, #1
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	429a      	cmp	r2, r3
 8003402:	dbf0      	blt.n	80033e6 <_read+0x12>
  }

  return len;
 8003404:	687b      	ldr	r3, [r7, #4]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b086      	sub	sp, #24
 8003412:	af00      	add	r7, sp, #0
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	e009      	b.n	8003434 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	60ba      	str	r2, [r7, #8]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	3301      	adds	r3, #1
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	429a      	cmp	r2, r3
 800343a:	dbf1      	blt.n	8003420 <_write+0x12>
  }
  return len;
 800343c:	687b      	ldr	r3, [r7, #4]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <_close>:

int _close(int file)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800344e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003452:	4618      	mov	r0, r3
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800346e:	605a      	str	r2, [r3, #4]
  return 0;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <_isatty>:

int _isatty(int file)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003486:	2301      	movs	r3, #1
}
 8003488:	4618      	mov	r0, r3
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
	...

080034b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034b8:	4a14      	ldr	r2, [pc, #80]	; (800350c <_sbrk+0x5c>)
 80034ba:	4b15      	ldr	r3, [pc, #84]	; (8003510 <_sbrk+0x60>)
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034c4:	4b13      	ldr	r3, [pc, #76]	; (8003514 <_sbrk+0x64>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d102      	bne.n	80034d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034cc:	4b11      	ldr	r3, [pc, #68]	; (8003514 <_sbrk+0x64>)
 80034ce:	4a12      	ldr	r2, [pc, #72]	; (8003518 <_sbrk+0x68>)
 80034d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034d2:	4b10      	ldr	r3, [pc, #64]	; (8003514 <_sbrk+0x64>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d207      	bcs.n	80034f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034e0:	f01a fa98 	bl	801da14 <__errno>
 80034e4:	4603      	mov	r3, r0
 80034e6:	220c      	movs	r2, #12
 80034e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034ee:	e009      	b.n	8003504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034f0:	4b08      	ldr	r3, [pc, #32]	; (8003514 <_sbrk+0x64>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034f6:	4b07      	ldr	r3, [pc, #28]	; (8003514 <_sbrk+0x64>)
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4413      	add	r3, r2
 80034fe:	4a05      	ldr	r2, [pc, #20]	; (8003514 <_sbrk+0x64>)
 8003500:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003502:	68fb      	ldr	r3, [r7, #12]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20080000 	.word	0x20080000
 8003510:	00000400 	.word	0x00000400
 8003514:	20006964 	.word	0x20006964
 8003518:	20010fd8 	.word	0x20010fd8

0800351c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003520:	4b06      	ldr	r3, [pc, #24]	; (800353c <SystemInit+0x20>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	4a05      	ldr	r2, [pc, #20]	; (800353c <SystemInit+0x20>)
 8003528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800352c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003530:	bf00      	nop
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	e000ed00 	.word	0xe000ed00

08003540 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b09a      	sub	sp, #104	; 0x68
 8003544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003546:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	605a      	str	r2, [r3, #4]
 8003550:	609a      	str	r2, [r3, #8]
 8003552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003554:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	605a      	str	r2, [r3, #4]
 800355e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003560:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	605a      	str	r2, [r3, #4]
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	60da      	str	r2, [r3, #12]
 800356e:	611a      	str	r2, [r3, #16]
 8003570:	615a      	str	r2, [r3, #20]
 8003572:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003574:	1d3b      	adds	r3, r7, #4
 8003576:	222c      	movs	r2, #44	; 0x2c
 8003578:	2100      	movs	r1, #0
 800357a:	4618      	mov	r0, r3
 800357c:	f01a f94e 	bl	801d81c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003580:	4b55      	ldr	r3, [pc, #340]	; (80036d8 <MX_TIM1_Init+0x198>)
 8003582:	4a56      	ldr	r2, [pc, #344]	; (80036dc <MX_TIM1_Init+0x19c>)
 8003584:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 8003586:	4b54      	ldr	r3, [pc, #336]	; (80036d8 <MX_TIM1_Init+0x198>)
 8003588:	2201      	movs	r2, #1
 800358a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800358c:	4b52      	ldr	r3, [pc, #328]	; (80036d8 <MX_TIM1_Init+0x198>)
 800358e:	2200      	movs	r2, #0
 8003590:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 32767;
 8003592:	4b51      	ldr	r3, [pc, #324]	; (80036d8 <MX_TIM1_Init+0x198>)
 8003594:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003598:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800359a:	4b4f      	ldr	r3, [pc, #316]	; (80036d8 <MX_TIM1_Init+0x198>)
 800359c:	2200      	movs	r2, #0
 800359e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80035a0:	4b4d      	ldr	r3, [pc, #308]	; (80036d8 <MX_TIM1_Init+0x198>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035a6:	4b4c      	ldr	r3, [pc, #304]	; (80036d8 <MX_TIM1_Init+0x198>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80035ac:	484a      	ldr	r0, [pc, #296]	; (80036d8 <MX_TIM1_Init+0x198>)
 80035ae:	f003 f831 	bl	8006614 <HAL_TIM_Base_Init>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80035b8:	f7ff fca0 	bl	8002efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035c0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80035c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035c6:	4619      	mov	r1, r3
 80035c8:	4843      	ldr	r0, [pc, #268]	; (80036d8 <MX_TIM1_Init+0x198>)
 80035ca:	f003 fdad 	bl	8007128 <HAL_TIM_ConfigClockSource>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80035d4:	f7ff fc92 	bl	8002efc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80035d8:	483f      	ldr	r0, [pc, #252]	; (80036d8 <MX_TIM1_Init+0x198>)
 80035da:	f003 f8eb 	bl	80067b4 <HAL_TIM_PWM_Init>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80035e4:	f7ff fc8a 	bl	8002efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035e8:	2300      	movs	r3, #0
 80035ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80035ec:	2300      	movs	r3, #0
 80035ee:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035f0:	2300      	movs	r3, #0
 80035f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80035f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80035f8:	4619      	mov	r1, r3
 80035fa:	4837      	ldr	r0, [pc, #220]	; (80036d8 <MX_TIM1_Init+0x198>)
 80035fc:	f004 fa44 	bl	8007a88 <HAL_TIMEx_MasterConfigSynchronization>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003606:	f7ff fc79 	bl	8002efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800360a:	2360      	movs	r3, #96	; 0x60
 800360c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800360e:	2300      	movs	r3, #0
 8003610:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003612:	2300      	movs	r3, #0
 8003614:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003616:	2300      	movs	r3, #0
 8003618:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800361a:	2300      	movs	r3, #0
 800361c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800361e:	2300      	movs	r3, #0
 8003620:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003622:	2300      	movs	r3, #0
 8003624:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003626:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800362a:	2200      	movs	r2, #0
 800362c:	4619      	mov	r1, r3
 800362e:	482a      	ldr	r0, [pc, #168]	; (80036d8 <MX_TIM1_Init+0x198>)
 8003630:	f003 fc66 	bl	8006f00 <HAL_TIM_PWM_ConfigChannel>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800363a:	f7ff fc5f 	bl	8002efc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800363e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003642:	2204      	movs	r2, #4
 8003644:	4619      	mov	r1, r3
 8003646:	4824      	ldr	r0, [pc, #144]	; (80036d8 <MX_TIM1_Init+0x198>)
 8003648:	f003 fc5a 	bl	8006f00 <HAL_TIM_PWM_ConfigChannel>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8003652:	f7ff fc53 	bl	8002efc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003656:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800365a:	2208      	movs	r2, #8
 800365c:	4619      	mov	r1, r3
 800365e:	481e      	ldr	r0, [pc, #120]	; (80036d8 <MX_TIM1_Init+0x198>)
 8003660:	f003 fc4e 	bl	8006f00 <HAL_TIM_PWM_ConfigChannel>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800366a:	f7ff fc47 	bl	8002efc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800366e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003672:	220c      	movs	r2, #12
 8003674:	4619      	mov	r1, r3
 8003676:	4818      	ldr	r0, [pc, #96]	; (80036d8 <MX_TIM1_Init+0x198>)
 8003678:	f003 fc42 	bl	8006f00 <HAL_TIM_PWM_ConfigChannel>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8003682:	f7ff fc3b 	bl	8002efc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800368a:	2300      	movs	r3, #0
 800368c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003696:	2300      	movs	r3, #0
 8003698:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800369a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800369e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80036a0:	2300      	movs	r3, #0
 80036a2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80036a4:	2300      	movs	r3, #0
 80036a6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80036a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80036b2:	2300      	movs	r3, #0
 80036b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80036b6:	1d3b      	adds	r3, r7, #4
 80036b8:	4619      	mov	r1, r3
 80036ba:	4807      	ldr	r0, [pc, #28]	; (80036d8 <MX_TIM1_Init+0x198>)
 80036bc:	f004 fa72 	bl	8007ba4 <HAL_TIMEx_ConfigBreakDeadTime>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 80036c6:	f7ff fc19 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80036ca:	4803      	ldr	r0, [pc, #12]	; (80036d8 <MX_TIM1_Init+0x198>)
 80036cc:	f000 fb88 	bl	8003de0 <HAL_TIM_MspPostInit>

}
 80036d0:	bf00      	nop
 80036d2:	3768      	adds	r7, #104	; 0x68
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	20006968 	.word	0x20006968
 80036dc:	40010000 	.word	0x40010000

080036e0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08c      	sub	sp, #48	; 0x30
 80036e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80036e6:	f107 030c 	add.w	r3, r7, #12
 80036ea:	2224      	movs	r2, #36	; 0x24
 80036ec:	2100      	movs	r1, #0
 80036ee:	4618      	mov	r0, r3
 80036f0:	f01a f894 	bl	801d81c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036f4:	463b      	mov	r3, r7
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	605a      	str	r2, [r3, #4]
 80036fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036fe:	4b21      	ldr	r3, [pc, #132]	; (8003784 <MX_TIM2_Init+0xa4>)
 8003700:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003704:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003706:	4b1f      	ldr	r3, [pc, #124]	; (8003784 <MX_TIM2_Init+0xa4>)
 8003708:	2200      	movs	r2, #0
 800370a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800370c:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <MX_TIM2_Init+0xa4>)
 800370e:	2200      	movs	r2, #0
 8003710:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003712:	4b1c      	ldr	r3, [pc, #112]	; (8003784 <MX_TIM2_Init+0xa4>)
 8003714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003718:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800371a:	4b1a      	ldr	r3, [pc, #104]	; (8003784 <MX_TIM2_Init+0xa4>)
 800371c:	2200      	movs	r2, #0
 800371e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003720:	4b18      	ldr	r3, [pc, #96]	; (8003784 <MX_TIM2_Init+0xa4>)
 8003722:	2200      	movs	r2, #0
 8003724:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003726:	2301      	movs	r3, #1
 8003728:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800372a:	2300      	movs	r3, #0
 800372c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800372e:	2301      	movs	r3, #1
 8003730:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003732:	2300      	movs	r3, #0
 8003734:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003736:	2300      	movs	r3, #0
 8003738:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800373a:	2300      	movs	r3, #0
 800373c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800373e:	2301      	movs	r3, #1
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003742:	2300      	movs	r3, #0
 8003744:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003746:	2300      	movs	r3, #0
 8003748:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800374a:	f107 030c 	add.w	r3, r7, #12
 800374e:	4619      	mov	r1, r3
 8003750:	480c      	ldr	r0, [pc, #48]	; (8003784 <MX_TIM2_Init+0xa4>)
 8003752:	f003 f981 	bl	8006a58 <HAL_TIM_Encoder_Init>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800375c:	f7ff fbce 	bl	8002efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003760:	2300      	movs	r3, #0
 8003762:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003764:	2300      	movs	r3, #0
 8003766:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003768:	463b      	mov	r3, r7
 800376a:	4619      	mov	r1, r3
 800376c:	4805      	ldr	r0, [pc, #20]	; (8003784 <MX_TIM2_Init+0xa4>)
 800376e:	f004 f98b 	bl	8007a88 <HAL_TIMEx_MasterConfigSynchronization>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003778:	f7ff fbc0 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800377c:	bf00      	nop
 800377e:	3730      	adds	r7, #48	; 0x30
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	200069b4 	.word	0x200069b4

08003788 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08c      	sub	sp, #48	; 0x30
 800378c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800378e:	f107 030c 	add.w	r3, r7, #12
 8003792:	2224      	movs	r2, #36	; 0x24
 8003794:	2100      	movs	r1, #0
 8003796:	4618      	mov	r0, r3
 8003798:	f01a f840 	bl	801d81c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800379c:	463b      	mov	r3, r7
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	605a      	str	r2, [r3, #4]
 80037a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80037a6:	4b21      	ldr	r3, [pc, #132]	; (800382c <MX_TIM3_Init+0xa4>)
 80037a8:	4a21      	ldr	r2, [pc, #132]	; (8003830 <MX_TIM3_Init+0xa8>)
 80037aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80037ac:	4b1f      	ldr	r3, [pc, #124]	; (800382c <MX_TIM3_Init+0xa4>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037b2:	4b1e      	ldr	r3, [pc, #120]	; (800382c <MX_TIM3_Init+0xa4>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80037b8:	4b1c      	ldr	r3, [pc, #112]	; (800382c <MX_TIM3_Init+0xa4>)
 80037ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037c0:	4b1a      	ldr	r3, [pc, #104]	; (800382c <MX_TIM3_Init+0xa4>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037c6:	4b19      	ldr	r3, [pc, #100]	; (800382c <MX_TIM3_Init+0xa4>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80037cc:	2301      	movs	r3, #1
 80037ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80037d0:	2300      	movs	r3, #0
 80037d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80037d4:	2301      	movs	r3, #1
 80037d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80037d8:	2300      	movs	r3, #0
 80037da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80037dc:	2300      	movs	r3, #0
 80037de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80037e0:	2300      	movs	r3, #0
 80037e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037e4:	2301      	movs	r3, #1
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80037e8:	2300      	movs	r3, #0
 80037ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80037ec:	2300      	movs	r3, #0
 80037ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80037f0:	f107 030c 	add.w	r3, r7, #12
 80037f4:	4619      	mov	r1, r3
 80037f6:	480d      	ldr	r0, [pc, #52]	; (800382c <MX_TIM3_Init+0xa4>)
 80037f8:	f003 f92e 	bl	8006a58 <HAL_TIM_Encoder_Init>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003802:	f7ff fb7b 	bl	8002efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003806:	2300      	movs	r3, #0
 8003808:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800380a:	2300      	movs	r3, #0
 800380c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800380e:	463b      	mov	r3, r7
 8003810:	4619      	mov	r1, r3
 8003812:	4806      	ldr	r0, [pc, #24]	; (800382c <MX_TIM3_Init+0xa4>)
 8003814:	f004 f938 	bl	8007a88 <HAL_TIMEx_MasterConfigSynchronization>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800381e:	f7ff fb6d 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003822:	bf00      	nop
 8003824:	3730      	adds	r7, #48	; 0x30
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	20006a00 	.word	0x20006a00
 8003830:	40000400 	.word	0x40000400

08003834 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08c      	sub	sp, #48	; 0x30
 8003838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800383a:	f107 030c 	add.w	r3, r7, #12
 800383e:	2224      	movs	r2, #36	; 0x24
 8003840:	2100      	movs	r1, #0
 8003842:	4618      	mov	r0, r3
 8003844:	f019 ffea 	bl	801d81c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003848:	463b      	mov	r3, r7
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	605a      	str	r2, [r3, #4]
 8003850:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003852:	4b21      	ldr	r3, [pc, #132]	; (80038d8 <MX_TIM4_Init+0xa4>)
 8003854:	4a21      	ldr	r2, [pc, #132]	; (80038dc <MX_TIM4_Init+0xa8>)
 8003856:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003858:	4b1f      	ldr	r3, [pc, #124]	; (80038d8 <MX_TIM4_Init+0xa4>)
 800385a:	2200      	movs	r2, #0
 800385c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800385e:	4b1e      	ldr	r3, [pc, #120]	; (80038d8 <MX_TIM4_Init+0xa4>)
 8003860:	2200      	movs	r2, #0
 8003862:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003864:	4b1c      	ldr	r3, [pc, #112]	; (80038d8 <MX_TIM4_Init+0xa4>)
 8003866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800386a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800386c:	4b1a      	ldr	r3, [pc, #104]	; (80038d8 <MX_TIM4_Init+0xa4>)
 800386e:	2200      	movs	r2, #0
 8003870:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003872:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <MX_TIM4_Init+0xa4>)
 8003874:	2200      	movs	r2, #0
 8003876:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003878:	2301      	movs	r3, #1
 800387a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800387c:	2300      	movs	r3, #0
 800387e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003880:	2301      	movs	r3, #1
 8003882:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003884:	2300      	movs	r3, #0
 8003886:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003888:	2300      	movs	r3, #0
 800388a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800388c:	2300      	movs	r3, #0
 800388e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003890:	2301      	movs	r3, #1
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003894:	2300      	movs	r3, #0
 8003896:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800389c:	f107 030c 	add.w	r3, r7, #12
 80038a0:	4619      	mov	r1, r3
 80038a2:	480d      	ldr	r0, [pc, #52]	; (80038d8 <MX_TIM4_Init+0xa4>)
 80038a4:	f003 f8d8 	bl	8006a58 <HAL_TIM_Encoder_Init>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80038ae:	f7ff fb25 	bl	8002efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038b2:	2300      	movs	r3, #0
 80038b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038b6:	2300      	movs	r3, #0
 80038b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80038ba:	463b      	mov	r3, r7
 80038bc:	4619      	mov	r1, r3
 80038be:	4806      	ldr	r0, [pc, #24]	; (80038d8 <MX_TIM4_Init+0xa4>)
 80038c0:	f004 f8e2 	bl	8007a88 <HAL_TIMEx_MasterConfigSynchronization>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80038ca:	f7ff fb17 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80038ce:	bf00      	nop
 80038d0:	3730      	adds	r7, #48	; 0x30
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20006a4c 	.word	0x20006a4c
 80038dc:	40000800 	.word	0x40000800

080038e0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08c      	sub	sp, #48	; 0x30
 80038e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80038e6:	f107 030c 	add.w	r3, r7, #12
 80038ea:	2224      	movs	r2, #36	; 0x24
 80038ec:	2100      	movs	r1, #0
 80038ee:	4618      	mov	r0, r3
 80038f0:	f019 ff94 	bl	801d81c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038f4:	463b      	mov	r3, r7
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	605a      	str	r2, [r3, #4]
 80038fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80038fe:	4b21      	ldr	r3, [pc, #132]	; (8003984 <MX_TIM5_Init+0xa4>)
 8003900:	4a21      	ldr	r2, [pc, #132]	; (8003988 <MX_TIM5_Init+0xa8>)
 8003902:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003904:	4b1f      	ldr	r3, [pc, #124]	; (8003984 <MX_TIM5_Init+0xa4>)
 8003906:	2200      	movs	r2, #0
 8003908:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800390a:	4b1e      	ldr	r3, [pc, #120]	; (8003984 <MX_TIM5_Init+0xa4>)
 800390c:	2200      	movs	r2, #0
 800390e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003910:	4b1c      	ldr	r3, [pc, #112]	; (8003984 <MX_TIM5_Init+0xa4>)
 8003912:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003916:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003918:	4b1a      	ldr	r3, [pc, #104]	; (8003984 <MX_TIM5_Init+0xa4>)
 800391a:	2200      	movs	r2, #0
 800391c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800391e:	4b19      	ldr	r3, [pc, #100]	; (8003984 <MX_TIM5_Init+0xa4>)
 8003920:	2200      	movs	r2, #0
 8003922:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003924:	2301      	movs	r3, #1
 8003926:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003928:	2300      	movs	r3, #0
 800392a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800392c:	2301      	movs	r3, #1
 800392e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003930:	2300      	movs	r3, #0
 8003932:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003934:	2300      	movs	r3, #0
 8003936:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003938:	2300      	movs	r3, #0
 800393a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800393c:	2301      	movs	r3, #1
 800393e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003940:	2300      	movs	r3, #0
 8003942:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003944:	2300      	movs	r3, #0
 8003946:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003948:	f107 030c 	add.w	r3, r7, #12
 800394c:	4619      	mov	r1, r3
 800394e:	480d      	ldr	r0, [pc, #52]	; (8003984 <MX_TIM5_Init+0xa4>)
 8003950:	f003 f882 	bl	8006a58 <HAL_TIM_Encoder_Init>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800395a:	f7ff facf 	bl	8002efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800395e:	2300      	movs	r3, #0
 8003960:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003962:	2300      	movs	r3, #0
 8003964:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003966:	463b      	mov	r3, r7
 8003968:	4619      	mov	r1, r3
 800396a:	4806      	ldr	r0, [pc, #24]	; (8003984 <MX_TIM5_Init+0xa4>)
 800396c:	f004 f88c 	bl	8007a88 <HAL_TIMEx_MasterConfigSynchronization>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8003976:	f7ff fac1 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800397a:	bf00      	nop
 800397c:	3730      	adds	r7, #48	; 0x30
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	20006a98 	.word	0x20006a98
 8003988:	40000c00 	.word	0x40000c00

0800398c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b08c      	sub	sp, #48	; 0x30
 8003990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003992:	f107 030c 	add.w	r3, r7, #12
 8003996:	2224      	movs	r2, #36	; 0x24
 8003998:	2100      	movs	r1, #0
 800399a:	4618      	mov	r0, r3
 800399c:	f019 ff3e 	bl	801d81c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039a0:	463b      	mov	r3, r7
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	605a      	str	r2, [r3, #4]
 80039a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80039aa:	4b23      	ldr	r3, [pc, #140]	; (8003a38 <MX_TIM8_Init+0xac>)
 80039ac:	4a23      	ldr	r2, [pc, #140]	; (8003a3c <MX_TIM8_Init+0xb0>)
 80039ae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80039b0:	4b21      	ldr	r3, [pc, #132]	; (8003a38 <MX_TIM8_Init+0xac>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039b6:	4b20      	ldr	r3, [pc, #128]	; (8003a38 <MX_TIM8_Init+0xac>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80039bc:	4b1e      	ldr	r3, [pc, #120]	; (8003a38 <MX_TIM8_Init+0xac>)
 80039be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039c2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039c4:	4b1c      	ldr	r3, [pc, #112]	; (8003a38 <MX_TIM8_Init+0xac>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80039ca:	4b1b      	ldr	r3, [pc, #108]	; (8003a38 <MX_TIM8_Init+0xac>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039d0:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <MX_TIM8_Init+0xac>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80039d6:	2301      	movs	r3, #1
 80039d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80039da:	2300      	movs	r3, #0
 80039dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80039de:	2301      	movs	r3, #1
 80039e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80039e6:	2300      	movs	r3, #0
 80039e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80039ea:	2300      	movs	r3, #0
 80039ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80039ee:	2301      	movs	r3, #1
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80039f2:	2300      	movs	r3, #0
 80039f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80039f6:	2300      	movs	r3, #0
 80039f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80039fa:	f107 030c 	add.w	r3, r7, #12
 80039fe:	4619      	mov	r1, r3
 8003a00:	480d      	ldr	r0, [pc, #52]	; (8003a38 <MX_TIM8_Init+0xac>)
 8003a02:	f003 f829 	bl	8006a58 <HAL_TIM_Encoder_Init>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8003a0c:	f7ff fa76 	bl	8002efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a10:	2300      	movs	r3, #0
 8003a12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003a14:	2300      	movs	r3, #0
 8003a16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003a1c:	463b      	mov	r3, r7
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4805      	ldr	r0, [pc, #20]	; (8003a38 <MX_TIM8_Init+0xac>)
 8003a22:	f004 f831 	bl	8007a88 <HAL_TIMEx_MasterConfigSynchronization>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8003a2c:	f7ff fa66 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003a30:	bf00      	nop
 8003a32:	3730      	adds	r7, #48	; 0x30
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	20006ae4 	.word	0x20006ae4
 8003a3c:	40010400 	.word	0x40010400

08003a40 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b088      	sub	sp, #32
 8003a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a46:	1d3b      	adds	r3, r7, #4
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	609a      	str	r2, [r3, #8]
 8003a50:	60da      	str	r2, [r3, #12]
 8003a52:	611a      	str	r2, [r3, #16]
 8003a54:	615a      	str	r2, [r3, #20]
 8003a56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003a58:	4b1f      	ldr	r3, [pc, #124]	; (8003ad8 <MX_TIM9_Init+0x98>)
 8003a5a:	4a20      	ldr	r2, [pc, #128]	; (8003adc <MX_TIM9_Init+0x9c>)
 8003a5c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8003a5e:	4b1e      	ldr	r3, [pc, #120]	; (8003ad8 <MX_TIM9_Init+0x98>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a64:	4b1c      	ldr	r3, [pc, #112]	; (8003ad8 <MX_TIM9_Init+0x98>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8003a6a:	4b1b      	ldr	r3, [pc, #108]	; (8003ad8 <MX_TIM9_Init+0x98>)
 8003a6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a70:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a72:	4b19      	ldr	r3, [pc, #100]	; (8003ad8 <MX_TIM9_Init+0x98>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a78:	4b17      	ldr	r3, [pc, #92]	; (8003ad8 <MX_TIM9_Init+0x98>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8003a7e:	4816      	ldr	r0, [pc, #88]	; (8003ad8 <MX_TIM9_Init+0x98>)
 8003a80:	f002 fe98 	bl	80067b4 <HAL_TIM_PWM_Init>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8003a8a:	f7ff fa37 	bl	8002efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a8e:	2360      	movs	r3, #96	; 0x60
 8003a90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a9e:	1d3b      	adds	r3, r7, #4
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	480c      	ldr	r0, [pc, #48]	; (8003ad8 <MX_TIM9_Init+0x98>)
 8003aa6:	f003 fa2b 	bl	8006f00 <HAL_TIM_PWM_ConfigChannel>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8003ab0:	f7ff fa24 	bl	8002efc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ab4:	1d3b      	adds	r3, r7, #4
 8003ab6:	2204      	movs	r2, #4
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4807      	ldr	r0, [pc, #28]	; (8003ad8 <MX_TIM9_Init+0x98>)
 8003abc:	f003 fa20 	bl	8006f00 <HAL_TIM_PWM_ConfigChannel>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8003ac6:	f7ff fa19 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8003aca:	4803      	ldr	r0, [pc, #12]	; (8003ad8 <MX_TIM9_Init+0x98>)
 8003acc:	f000 f988 	bl	8003de0 <HAL_TIM_MspPostInit>

}
 8003ad0:	bf00      	nop
 8003ad2:	3720      	adds	r7, #32
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	20006b30 	.word	0x20006b30
 8003adc:	40014000 	.word	0x40014000

08003ae0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <HAL_TIM_Base_MspInit+0x38>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d10b      	bne.n	8003b0a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003af2:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <HAL_TIM_Base_MspInit+0x3c>)
 8003af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af6:	4a09      	ldr	r2, [pc, #36]	; (8003b1c <HAL_TIM_Base_MspInit+0x3c>)
 8003af8:	f043 0301 	orr.w	r3, r3, #1
 8003afc:	6453      	str	r3, [r2, #68]	; 0x44
 8003afe:	4b07      	ldr	r3, [pc, #28]	; (8003b1c <HAL_TIM_Base_MspInit+0x3c>)
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003b0a:	bf00      	nop
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	40010000 	.word	0x40010000
 8003b1c:	40023800 	.word	0x40023800

08003b20 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b094      	sub	sp, #80	; 0x50
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	605a      	str	r2, [r3, #4]
 8003b32:	609a      	str	r2, [r3, #8]
 8003b34:	60da      	str	r2, [r3, #12]
 8003b36:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b40:	d144      	bne.n	8003bcc <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b42:	4b8e      	ldr	r3, [pc, #568]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	4a8d      	ldr	r2, [pc, #564]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003b48:	f043 0301 	orr.w	r3, r3, #1
 8003b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b4e:	4b8b      	ldr	r3, [pc, #556]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b5a:	4b88      	ldr	r3, [pc, #544]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	4a87      	ldr	r2, [pc, #540]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	6313      	str	r3, [r2, #48]	; 0x30
 8003b66:	4b85      	ldr	r3, [pc, #532]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b72:	4b82      	ldr	r3, [pc, #520]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	4a81      	ldr	r2, [pc, #516]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003b78:	f043 0302 	orr.w	r3, r3, #2
 8003b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b7e:	4b7f      	ldr	r3, [pc, #508]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	633b      	str	r3, [r7, #48]	; 0x30
 8003b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR1_CHA_Pin;
 8003b8a:	2320      	movs	r3, #32
 8003b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8e:	2302      	movs	r3, #2
 8003b90:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b96:	2300      	movs	r3, #0
 8003b98:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR1_CHA_GPIO_Port, &GPIO_InitStruct);
 8003b9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4876      	ldr	r0, [pc, #472]	; (8003d80 <HAL_TIM_Encoder_MspInit+0x260>)
 8003ba6:	f001 f891 	bl	8004ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR1_CHB_Pin;
 8003baa:	2308      	movs	r3, #8
 8003bac:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bae:	2302      	movs	r3, #2
 8003bb0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR1_CHB_GPIO_Port, &GPIO_InitStruct);
 8003bbe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	486f      	ldr	r0, [pc, #444]	; (8003d84 <HAL_TIM_Encoder_MspInit+0x264>)
 8003bc6:	f001 f881 	bl	8004ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003bca:	e0d3      	b.n	8003d74 <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM3)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a6d      	ldr	r2, [pc, #436]	; (8003d88 <HAL_TIM_Encoder_MspInit+0x268>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d144      	bne.n	8003c60 <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003bd6:	4b69      	ldr	r3, [pc, #420]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	4a68      	ldr	r2, [pc, #416]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003bdc:	f043 0302 	orr.w	r3, r3, #2
 8003be0:	6413      	str	r3, [r2, #64]	; 0x40
 8003be2:	4b66      	ldr	r3, [pc, #408]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bee:	4b63      	ldr	r3, [pc, #396]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	4a62      	ldr	r2, [pc, #392]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfa:	4b60      	ldr	r3, [pc, #384]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c06:	4b5d      	ldr	r3, [pc, #372]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	4a5c      	ldr	r2, [pc, #368]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003c0c:	f043 0302 	orr.w	r3, r3, #2
 8003c10:	6313      	str	r3, [r2, #48]	; 0x30
 8003c12:	4b5a      	ldr	r3, [pc, #360]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = MOTOR2_CHA_Pin;
 8003c1e:	2340      	movs	r3, #64	; 0x40
 8003c20:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c22:	2302      	movs	r3, #2
 8003c24:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c2e:	2302      	movs	r3, #2
 8003c30:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR2_CHA_GPIO_Port, &GPIO_InitStruct);
 8003c32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c36:	4619      	mov	r1, r3
 8003c38:	4851      	ldr	r0, [pc, #324]	; (8003d80 <HAL_TIM_Encoder_MspInit+0x260>)
 8003c3a:	f001 f847 	bl	8004ccc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR2_CHB_Pin;
 8003c3e:	2320      	movs	r3, #32
 8003c40:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c42:	2302      	movs	r3, #2
 8003c44:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c4e:	2302      	movs	r3, #2
 8003c50:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR2_CHB_GPIO_Port, &GPIO_InitStruct);
 8003c52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c56:	4619      	mov	r1, r3
 8003c58:	484a      	ldr	r0, [pc, #296]	; (8003d84 <HAL_TIM_Encoder_MspInit+0x264>)
 8003c5a:	f001 f837 	bl	8004ccc <HAL_GPIO_Init>
}
 8003c5e:	e089      	b.n	8003d74 <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM4)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a49      	ldr	r2, [pc, #292]	; (8003d8c <HAL_TIM_Encoder_MspInit+0x26c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d129      	bne.n	8003cbe <HAL_TIM_Encoder_MspInit+0x19e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c6a:	4b44      	ldr	r3, [pc, #272]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	4a43      	ldr	r2, [pc, #268]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003c70:	f043 0304 	orr.w	r3, r3, #4
 8003c74:	6413      	str	r3, [r2, #64]	; 0x40
 8003c76:	4b41      	ldr	r3, [pc, #260]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	623b      	str	r3, [r7, #32]
 8003c80:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c82:	4b3e      	ldr	r3, [pc, #248]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	4a3d      	ldr	r2, [pc, #244]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003c88:	f043 0308 	orr.w	r3, r3, #8
 8003c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c8e:	4b3b      	ldr	r3, [pc, #236]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	61fb      	str	r3, [r7, #28]
 8003c98:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = MOTOR3_CHA_Pin|MOTOR3_CHB_Pin;
 8003c9a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003cac:	2302      	movs	r3, #2
 8003cae:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cb0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4836      	ldr	r0, [pc, #216]	; (8003d90 <HAL_TIM_Encoder_MspInit+0x270>)
 8003cb8:	f001 f808 	bl	8004ccc <HAL_GPIO_Init>
}
 8003cbc:	e05a      	b.n	8003d74 <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM5)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a34      	ldr	r2, [pc, #208]	; (8003d94 <HAL_TIM_Encoder_MspInit+0x274>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d128      	bne.n	8003d1a <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003cc8:	4b2c      	ldr	r3, [pc, #176]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	4a2b      	ldr	r2, [pc, #172]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003cce:	f043 0308 	orr.w	r3, r3, #8
 8003cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8003cd4:	4b29      	ldr	r3, [pc, #164]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ce0:	4b26      	ldr	r3, [pc, #152]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce4:	4a25      	ldr	r2, [pc, #148]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003ce6:	f043 0301 	orr.w	r3, r3, #1
 8003cea:	6313      	str	r3, [r2, #48]	; 0x30
 8003cec:	4b23      	ldr	r3, [pc, #140]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	617b      	str	r3, [r7, #20]
 8003cf6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOTOR4_CHA_Pin|MOTOR4_CHB_Pin;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d00:	2300      	movs	r3, #0
 8003d02:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d04:	2300      	movs	r3, #0
 8003d06:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003d08:	2302      	movs	r3, #2
 8003d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d10:	4619      	mov	r1, r3
 8003d12:	481b      	ldr	r0, [pc, #108]	; (8003d80 <HAL_TIM_Encoder_MspInit+0x260>)
 8003d14:	f000 ffda 	bl	8004ccc <HAL_GPIO_Init>
}
 8003d18:	e02c      	b.n	8003d74 <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM8)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a1e      	ldr	r2, [pc, #120]	; (8003d98 <HAL_TIM_Encoder_MspInit+0x278>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d127      	bne.n	8003d74 <HAL_TIM_Encoder_MspInit+0x254>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003d24:	4b15      	ldr	r3, [pc, #84]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d28:	4a14      	ldr	r2, [pc, #80]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003d2a:	f043 0302 	orr.w	r3, r3, #2
 8003d2e:	6453      	str	r3, [r2, #68]	; 0x44
 8003d30:	4b12      	ldr	r3, [pc, #72]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	613b      	str	r3, [r7, #16]
 8003d3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d3c:	4b0f      	ldr	r3, [pc, #60]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d40:	4a0e      	ldr	r2, [pc, #56]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003d42:	f043 0304 	orr.w	r3, r3, #4
 8003d46:	6313      	str	r3, [r2, #48]	; 0x30
 8003d48:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x25c>)
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR5_CHA_Pin|MOTOR5_CHB_Pin;
 8003d54:	23c0      	movs	r3, #192	; 0xc0
 8003d56:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d58:	2302      	movs	r3, #2
 8003d5a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d60:	2300      	movs	r3, #0
 8003d62:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003d64:	2303      	movs	r3, #3
 8003d66:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	480b      	ldr	r0, [pc, #44]	; (8003d9c <HAL_TIM_Encoder_MspInit+0x27c>)
 8003d70:	f000 ffac 	bl	8004ccc <HAL_GPIO_Init>
}
 8003d74:	bf00      	nop
 8003d76:	3750      	adds	r7, #80	; 0x50
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	40020000 	.word	0x40020000
 8003d84:	40020400 	.word	0x40020400
 8003d88:	40000400 	.word	0x40000400
 8003d8c:	40000800 	.word	0x40000800
 8003d90:	40020c00 	.word	0x40020c00
 8003d94:	40000c00 	.word	0x40000c00
 8003d98:	40010400 	.word	0x40010400
 8003d9c:	40020800 	.word	0x40020800

08003da0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM9)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a0a      	ldr	r2, [pc, #40]	; (8003dd8 <HAL_TIM_PWM_MspInit+0x38>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d10b      	bne.n	8003dca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003db2:	4b0a      	ldr	r3, [pc, #40]	; (8003ddc <HAL_TIM_PWM_MspInit+0x3c>)
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	4a09      	ldr	r2, [pc, #36]	; (8003ddc <HAL_TIM_PWM_MspInit+0x3c>)
 8003db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dbe:	4b07      	ldr	r3, [pc, #28]	; (8003ddc <HAL_TIM_PWM_MspInit+0x3c>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8003dca:	bf00      	nop
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40014000 	.word	0x40014000
 8003ddc:	40023800 	.word	0x40023800

08003de0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08a      	sub	sp, #40	; 0x28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de8:	f107 0314 	add.w	r3, r7, #20
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	609a      	str	r2, [r3, #8]
 8003df4:	60da      	str	r2, [r3, #12]
 8003df6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a22      	ldr	r2, [pc, #136]	; (8003e88 <HAL_TIM_MspPostInit+0xa8>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d11d      	bne.n	8003e3e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e02:	4b22      	ldr	r3, [pc, #136]	; (8003e8c <HAL_TIM_MspPostInit+0xac>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	4a21      	ldr	r2, [pc, #132]	; (8003e8c <HAL_TIM_MspPostInit+0xac>)
 8003e08:	f043 0310 	orr.w	r3, r3, #16
 8003e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e0e:	4b1f      	ldr	r3, [pc, #124]	; (8003e8c <HAL_TIM_MspPostInit+0xac>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	f003 0310 	and.w	r3, r3, #16
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR1_PWM_Pin|MOTOR2_PWM_Pin|MOTOR3_PWM_Pin|MOTOR4_PWM_Pin;
 8003e1a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8003e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e20:	2302      	movs	r3, #2
 8003e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e24:	2300      	movs	r3, #0
 8003e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e30:	f107 0314 	add.w	r3, r7, #20
 8003e34:	4619      	mov	r1, r3
 8003e36:	4816      	ldr	r0, [pc, #88]	; (8003e90 <HAL_TIM_MspPostInit+0xb0>)
 8003e38:	f000 ff48 	bl	8004ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8003e3c:	e020      	b.n	8003e80 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM9)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a14      	ldr	r2, [pc, #80]	; (8003e94 <HAL_TIM_MspPostInit+0xb4>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d11b      	bne.n	8003e80 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e48:	4b10      	ldr	r3, [pc, #64]	; (8003e8c <HAL_TIM_MspPostInit+0xac>)
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4c:	4a0f      	ldr	r2, [pc, #60]	; (8003e8c <HAL_TIM_MspPostInit+0xac>)
 8003e4e:	f043 0310 	orr.w	r3, r3, #16
 8003e52:	6313      	str	r3, [r2, #48]	; 0x30
 8003e54:	4b0d      	ldr	r3, [pc, #52]	; (8003e8c <HAL_TIM_MspPostInit+0xac>)
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR5_PWM_Pin|MOTOR6_PWM_Pin;
 8003e60:	2360      	movs	r3, #96	; 0x60
 8003e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e64:	2302      	movs	r3, #2
 8003e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003e70:	2303      	movs	r3, #3
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e74:	f107 0314 	add.w	r3, r7, #20
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4805      	ldr	r0, [pc, #20]	; (8003e90 <HAL_TIM_MspPostInit+0xb0>)
 8003e7c:	f000 ff26 	bl	8004ccc <HAL_GPIO_Init>
}
 8003e80:	bf00      	nop
 8003e82:	3728      	adds	r7, #40	; 0x28
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40010000 	.word	0x40010000
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	40021000 	.word	0x40021000
 8003e94:	40014000 	.word	0x40014000

08003e98 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003e9c:	4b14      	ldr	r3, [pc, #80]	; (8003ef0 <MX_USART3_UART_Init+0x58>)
 8003e9e:	4a15      	ldr	r2, [pc, #84]	; (8003ef4 <MX_USART3_UART_Init+0x5c>)
 8003ea0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003ea2:	4b13      	ldr	r3, [pc, #76]	; (8003ef0 <MX_USART3_UART_Init+0x58>)
 8003ea4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ea8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003eaa:	4b11      	ldr	r3, [pc, #68]	; (8003ef0 <MX_USART3_UART_Init+0x58>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003eb0:	4b0f      	ldr	r3, [pc, #60]	; (8003ef0 <MX_USART3_UART_Init+0x58>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003eb6:	4b0e      	ldr	r3, [pc, #56]	; (8003ef0 <MX_USART3_UART_Init+0x58>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <MX_USART3_UART_Init+0x58>)
 8003ebe:	220c      	movs	r2, #12
 8003ec0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <MX_USART3_UART_Init+0x58>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ec8:	4b09      	ldr	r3, [pc, #36]	; (8003ef0 <MX_USART3_UART_Init+0x58>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ece:	4b08      	ldr	r3, [pc, #32]	; (8003ef0 <MX_USART3_UART_Init+0x58>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ed4:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <MX_USART3_UART_Init+0x58>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003eda:	4805      	ldr	r0, [pc, #20]	; (8003ef0 <MX_USART3_UART_Init+0x58>)
 8003edc:	f003 fefe 	bl	8007cdc <HAL_UART_Init>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003ee6:	f7ff f809 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003eea:	bf00      	nop
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20006b7c 	.word	0x20006b7c
 8003ef4:	40004800 	.word	0x40004800

08003ef8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b0ae      	sub	sp, #184	; 0xb8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	605a      	str	r2, [r3, #4]
 8003f0a:	609a      	str	r2, [r3, #8]
 8003f0c:	60da      	str	r2, [r3, #12]
 8003f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f10:	f107 0314 	add.w	r3, r7, #20
 8003f14:	2290      	movs	r2, #144	; 0x90
 8003f16:	2100      	movs	r1, #0
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f019 fc7f 	bl	801d81c <memset>
  if(uartHandle->Instance==USART3)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a56      	ldr	r2, [pc, #344]	; (800407c <HAL_UART_MspInit+0x184>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	f040 80a4 	bne.w	8004072 <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003f2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f2e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003f30:	2300      	movs	r3, #0
 8003f32:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f34:	f107 0314 	add.w	r3, r7, #20
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f001 ff43 	bl	8005dc4 <HAL_RCCEx_PeriphCLKConfig>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003f44:	f7fe ffda 	bl	8002efc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f48:	4b4d      	ldr	r3, [pc, #308]	; (8004080 <HAL_UART_MspInit+0x188>)
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	4a4c      	ldr	r2, [pc, #304]	; (8004080 <HAL_UART_MspInit+0x188>)
 8003f4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f52:	6413      	str	r3, [r2, #64]	; 0x40
 8003f54:	4b4a      	ldr	r3, [pc, #296]	; (8004080 <HAL_UART_MspInit+0x188>)
 8003f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f5c:	613b      	str	r3, [r7, #16]
 8003f5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f60:	4b47      	ldr	r3, [pc, #284]	; (8004080 <HAL_UART_MspInit+0x188>)
 8003f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f64:	4a46      	ldr	r2, [pc, #280]	; (8004080 <HAL_UART_MspInit+0x188>)
 8003f66:	f043 0308 	orr.w	r3, r3, #8
 8003f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8003f6c:	4b44      	ldr	r3, [pc, #272]	; (8004080 <HAL_UART_MspInit+0x188>)
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f70:	f003 0308 	and.w	r3, r3, #8
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003f78:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f80:	2302      	movs	r3, #2
 8003f82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f86:	2300      	movs	r3, #0
 8003f88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f92:	2307      	movs	r3, #7
 8003f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4839      	ldr	r0, [pc, #228]	; (8004084 <HAL_UART_MspInit+0x18c>)
 8003fa0:	f000 fe94 	bl	8004ccc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003fa4:	4b38      	ldr	r3, [pc, #224]	; (8004088 <HAL_UART_MspInit+0x190>)
 8003fa6:	4a39      	ldr	r2, [pc, #228]	; (800408c <HAL_UART_MspInit+0x194>)
 8003fa8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003faa:	4b37      	ldr	r3, [pc, #220]	; (8004088 <HAL_UART_MspInit+0x190>)
 8003fac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003fb0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fb2:	4b35      	ldr	r3, [pc, #212]	; (8004088 <HAL_UART_MspInit+0x190>)
 8003fb4:	2240      	movs	r2, #64	; 0x40
 8003fb6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fb8:	4b33      	ldr	r3, [pc, #204]	; (8004088 <HAL_UART_MspInit+0x190>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003fbe:	4b32      	ldr	r3, [pc, #200]	; (8004088 <HAL_UART_MspInit+0x190>)
 8003fc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fc4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fc6:	4b30      	ldr	r3, [pc, #192]	; (8004088 <HAL_UART_MspInit+0x190>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fcc:	4b2e      	ldr	r3, [pc, #184]	; (8004088 <HAL_UART_MspInit+0x190>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003fd2:	4b2d      	ldr	r3, [pc, #180]	; (8004088 <HAL_UART_MspInit+0x190>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003fd8:	4b2b      	ldr	r3, [pc, #172]	; (8004088 <HAL_UART_MspInit+0x190>)
 8003fda:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003fde:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fe0:	4b29      	ldr	r3, [pc, #164]	; (8004088 <HAL_UART_MspInit+0x190>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003fe6:	4828      	ldr	r0, [pc, #160]	; (8004088 <HAL_UART_MspInit+0x190>)
 8003fe8:	f000 fa5a 	bl	80044a0 <HAL_DMA_Init>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8003ff2:	f7fe ff83 	bl	8002efc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a23      	ldr	r2, [pc, #140]	; (8004088 <HAL_UART_MspInit+0x190>)
 8003ffa:	671a      	str	r2, [r3, #112]	; 0x70
 8003ffc:	4a22      	ldr	r2, [pc, #136]	; (8004088 <HAL_UART_MspInit+0x190>)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004002:	4b23      	ldr	r3, [pc, #140]	; (8004090 <HAL_UART_MspInit+0x198>)
 8004004:	4a23      	ldr	r2, [pc, #140]	; (8004094 <HAL_UART_MspInit+0x19c>)
 8004006:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004008:	4b21      	ldr	r3, [pc, #132]	; (8004090 <HAL_UART_MspInit+0x198>)
 800400a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800400e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004010:	4b1f      	ldr	r3, [pc, #124]	; (8004090 <HAL_UART_MspInit+0x198>)
 8004012:	2200      	movs	r2, #0
 8004014:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004016:	4b1e      	ldr	r3, [pc, #120]	; (8004090 <HAL_UART_MspInit+0x198>)
 8004018:	2200      	movs	r2, #0
 800401a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800401c:	4b1c      	ldr	r3, [pc, #112]	; (8004090 <HAL_UART_MspInit+0x198>)
 800401e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004022:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004024:	4b1a      	ldr	r3, [pc, #104]	; (8004090 <HAL_UART_MspInit+0x198>)
 8004026:	2200      	movs	r2, #0
 8004028:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800402a:	4b19      	ldr	r3, [pc, #100]	; (8004090 <HAL_UART_MspInit+0x198>)
 800402c:	2200      	movs	r2, #0
 800402e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004030:	4b17      	ldr	r3, [pc, #92]	; (8004090 <HAL_UART_MspInit+0x198>)
 8004032:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004036:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004038:	4b15      	ldr	r3, [pc, #84]	; (8004090 <HAL_UART_MspInit+0x198>)
 800403a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800403e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004040:	4b13      	ldr	r3, [pc, #76]	; (8004090 <HAL_UART_MspInit+0x198>)
 8004042:	2200      	movs	r2, #0
 8004044:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004046:	4812      	ldr	r0, [pc, #72]	; (8004090 <HAL_UART_MspInit+0x198>)
 8004048:	f000 fa2a 	bl	80044a0 <HAL_DMA_Init>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8004052:	f7fe ff53 	bl	8002efc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a0d      	ldr	r2, [pc, #52]	; (8004090 <HAL_UART_MspInit+0x198>)
 800405a:	675a      	str	r2, [r3, #116]	; 0x74
 800405c:	4a0c      	ldr	r2, [pc, #48]	; (8004090 <HAL_UART_MspInit+0x198>)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004062:	2200      	movs	r2, #0
 8004064:	2105      	movs	r1, #5
 8004066:	2027      	movs	r0, #39	; 0x27
 8004068:	f000 f9f0 	bl	800444c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800406c:	2027      	movs	r0, #39	; 0x27
 800406e:	f000 fa09 	bl	8004484 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004072:	bf00      	nop
 8004074:	37b8      	adds	r7, #184	; 0xb8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40004800 	.word	0x40004800
 8004080:	40023800 	.word	0x40023800
 8004084:	40020c00 	.word	0x40020c00
 8004088:	20006c04 	.word	0x20006c04
 800408c:	40026058 	.word	0x40026058
 8004090:	20006c64 	.word	0x20006c64
 8004094:	40026028 	.word	0x40026028

08004098 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800409c:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800409e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80040a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80040a4:	4b12      	ldr	r3, [pc, #72]	; (80040f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80040a6:	2206      	movs	r2, #6
 80040a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80040aa:	4b11      	ldr	r3, [pc, #68]	; (80040f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80040ac:	2202      	movs	r2, #2
 80040ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80040b0:	4b0f      	ldr	r3, [pc, #60]	; (80040f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80040b6:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80040b8:	2202      	movs	r2, #2
 80040ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80040bc:	4b0c      	ldr	r3, [pc, #48]	; (80040f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80040be:	2201      	movs	r2, #1
 80040c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80040c2:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80040c8:	4b09      	ldr	r3, [pc, #36]	; (80040f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80040ce:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80040d4:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80040da:	4805      	ldr	r0, [pc, #20]	; (80040f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80040dc:	f000 ffd3 	bl	8005086 <HAL_PCD_Init>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80040e6:	f7fe ff09 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80040ea:	bf00      	nop
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20006cc4 	.word	0x20006cc4

080040f4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b0ae      	sub	sp, #184	; 0xb8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	605a      	str	r2, [r3, #4]
 8004106:	609a      	str	r2, [r3, #8]
 8004108:	60da      	str	r2, [r3, #12]
 800410a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800410c:	f107 0314 	add.w	r3, r7, #20
 8004110:	2290      	movs	r2, #144	; 0x90
 8004112:	2100      	movs	r1, #0
 8004114:	4618      	mov	r0, r3
 8004116:	f019 fb81 	bl	801d81c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004122:	d159      	bne.n	80041d8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8004124:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004128:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800412a:	2300      	movs	r3, #0
 800412c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004130:	f107 0314 	add.w	r3, r7, #20
 8004134:	4618      	mov	r0, r3
 8004136:	f001 fe45 	bl	8005dc4 <HAL_RCCEx_PeriphCLKConfig>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8004140:	f7fe fedc 	bl	8002efc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004144:	4b26      	ldr	r3, [pc, #152]	; (80041e0 <HAL_PCD_MspInit+0xec>)
 8004146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004148:	4a25      	ldr	r2, [pc, #148]	; (80041e0 <HAL_PCD_MspInit+0xec>)
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	6313      	str	r3, [r2, #48]	; 0x30
 8004150:	4b23      	ldr	r3, [pc, #140]	; (80041e0 <HAL_PCD_MspInit+0xec>)
 8004152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	613b      	str	r3, [r7, #16]
 800415a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800415c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8004160:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004164:	2302      	movs	r3, #2
 8004166:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416a:	2300      	movs	r3, #0
 800416c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004170:	2303      	movs	r3, #3
 8004172:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004176:	230a      	movs	r3, #10
 8004178:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800417c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004180:	4619      	mov	r1, r3
 8004182:	4818      	ldr	r0, [pc, #96]	; (80041e4 <HAL_PCD_MspInit+0xf0>)
 8004184:	f000 fda2 	bl	8004ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8004188:	f44f 7300 	mov.w	r3, #512	; 0x200
 800418c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004190:	2300      	movs	r3, #0
 8004192:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004196:	2300      	movs	r3, #0
 8004198:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800419c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80041a0:	4619      	mov	r1, r3
 80041a2:	4810      	ldr	r0, [pc, #64]	; (80041e4 <HAL_PCD_MspInit+0xf0>)
 80041a4:	f000 fd92 	bl	8004ccc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80041a8:	4b0d      	ldr	r3, [pc, #52]	; (80041e0 <HAL_PCD_MspInit+0xec>)
 80041aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ac:	4a0c      	ldr	r2, [pc, #48]	; (80041e0 <HAL_PCD_MspInit+0xec>)
 80041ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b2:	6353      	str	r3, [r2, #52]	; 0x34
 80041b4:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <HAL_PCD_MspInit+0xec>)
 80041b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4b07      	ldr	r3, [pc, #28]	; (80041e0 <HAL_PCD_MspInit+0xec>)
 80041c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c4:	4a06      	ldr	r2, [pc, #24]	; (80041e0 <HAL_PCD_MspInit+0xec>)
 80041c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041ca:	6453      	str	r3, [r2, #68]	; 0x44
 80041cc:	4b04      	ldr	r3, [pc, #16]	; (80041e0 <HAL_PCD_MspInit+0xec>)
 80041ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041d4:	60bb      	str	r3, [r7, #8]
 80041d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80041d8:	bf00      	nop
 80041da:	37b8      	adds	r7, #184	; 0xb8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40023800 	.word	0x40023800
 80041e4:	40020000 	.word	0x40020000

080041e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80041e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004220 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80041ec:	480d      	ldr	r0, [pc, #52]	; (8004224 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80041ee:	490e      	ldr	r1, [pc, #56]	; (8004228 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80041f0:	4a0e      	ldr	r2, [pc, #56]	; (800422c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80041f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041f4:	e002      	b.n	80041fc <LoopCopyDataInit>

080041f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041fa:	3304      	adds	r3, #4

080041fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004200:	d3f9      	bcc.n	80041f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004202:	4a0b      	ldr	r2, [pc, #44]	; (8004230 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004204:	4c0b      	ldr	r4, [pc, #44]	; (8004234 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004208:	e001      	b.n	800420e <LoopFillZerobss>

0800420a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800420a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800420c:	3204      	adds	r2, #4

0800420e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800420e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004210:	d3fb      	bcc.n	800420a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004212:	f7ff f983 	bl	800351c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004216:	f019 fc03 	bl	801da20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800421a:	f7fe fdab 	bl	8002d74 <main>
  bx  lr    
 800421e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004220:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8004224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004228:	2000247c 	.word	0x2000247c
  ldr r2, =_sidata
 800422c:	08020a04 	.word	0x08020a04
  ldr r2, =_sbss
 8004230:	20002480 	.word	0x20002480
  ldr r4, =_ebss
 8004234:	20010fd4 	.word	0x20010fd4

08004238 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004238:	e7fe      	b.n	8004238 <ADC_IRQHandler>

0800423a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800423e:	2003      	movs	r0, #3
 8004240:	f000 f8f9 	bl	8004436 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004244:	200f      	movs	r0, #15
 8004246:	f7fe ffeb 	bl	8003220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800424a:	f7fe ffc1 	bl	80031d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	bd80      	pop	{r7, pc}

08004254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004258:	4b06      	ldr	r3, [pc, #24]	; (8004274 <HAL_IncTick+0x20>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	461a      	mov	r2, r3
 800425e:	4b06      	ldr	r3, [pc, #24]	; (8004278 <HAL_IncTick+0x24>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4413      	add	r3, r2
 8004264:	4a04      	ldr	r2, [pc, #16]	; (8004278 <HAL_IncTick+0x24>)
 8004266:	6013      	str	r3, [r2, #0]
}
 8004268:	bf00      	nop
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	2000000c 	.word	0x2000000c
 8004278:	200071cc 	.word	0x200071cc

0800427c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  return uwTick;
 8004280:	4b03      	ldr	r3, [pc, #12]	; (8004290 <HAL_GetTick+0x14>)
 8004282:	681b      	ldr	r3, [r3, #0]
}
 8004284:	4618      	mov	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	200071cc 	.word	0x200071cc

08004294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800429c:	f7ff ffee 	bl	800427c <HAL_GetTick>
 80042a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042ac:	d005      	beq.n	80042ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042ae:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <HAL_Delay+0x44>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4413      	add	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042ba:	bf00      	nop
 80042bc:	f7ff ffde 	bl	800427c <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d8f7      	bhi.n	80042bc <HAL_Delay+0x28>
  {
  }
}
 80042cc:	bf00      	nop
 80042ce:	bf00      	nop
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	2000000c 	.word	0x2000000c

080042dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042ec:	4b0b      	ldr	r3, [pc, #44]	; (800431c <__NVIC_SetPriorityGrouping+0x40>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042f8:	4013      	ands	r3, r2
 80042fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004304:	4b06      	ldr	r3, [pc, #24]	; (8004320 <__NVIC_SetPriorityGrouping+0x44>)
 8004306:	4313      	orrs	r3, r2
 8004308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800430a:	4a04      	ldr	r2, [pc, #16]	; (800431c <__NVIC_SetPriorityGrouping+0x40>)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	60d3      	str	r3, [r2, #12]
}
 8004310:	bf00      	nop
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	e000ed00 	.word	0xe000ed00
 8004320:	05fa0000 	.word	0x05fa0000

08004324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004328:	4b04      	ldr	r3, [pc, #16]	; (800433c <__NVIC_GetPriorityGrouping+0x18>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	0a1b      	lsrs	r3, r3, #8
 800432e:	f003 0307 	and.w	r3, r3, #7
}
 8004332:	4618      	mov	r0, r3
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	e000ed00 	.word	0xe000ed00

08004340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800434a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434e:	2b00      	cmp	r3, #0
 8004350:	db0b      	blt.n	800436a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	f003 021f 	and.w	r2, r3, #31
 8004358:	4907      	ldr	r1, [pc, #28]	; (8004378 <__NVIC_EnableIRQ+0x38>)
 800435a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435e:	095b      	lsrs	r3, r3, #5
 8004360:	2001      	movs	r0, #1
 8004362:	fa00 f202 	lsl.w	r2, r0, r2
 8004366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	e000e100 	.word	0xe000e100

0800437c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	4603      	mov	r3, r0
 8004384:	6039      	str	r1, [r7, #0]
 8004386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438c:	2b00      	cmp	r3, #0
 800438e:	db0a      	blt.n	80043a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	b2da      	uxtb	r2, r3
 8004394:	490c      	ldr	r1, [pc, #48]	; (80043c8 <__NVIC_SetPriority+0x4c>)
 8004396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439a:	0112      	lsls	r2, r2, #4
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	440b      	add	r3, r1
 80043a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043a4:	e00a      	b.n	80043bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	4908      	ldr	r1, [pc, #32]	; (80043cc <__NVIC_SetPriority+0x50>)
 80043ac:	79fb      	ldrb	r3, [r7, #7]
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	3b04      	subs	r3, #4
 80043b4:	0112      	lsls	r2, r2, #4
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	440b      	add	r3, r1
 80043ba:	761a      	strb	r2, [r3, #24]
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	e000e100 	.word	0xe000e100
 80043cc:	e000ed00 	.word	0xe000ed00

080043d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b089      	sub	sp, #36	; 0x24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f1c3 0307 	rsb	r3, r3, #7
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	bf28      	it	cs
 80043ee:	2304      	movcs	r3, #4
 80043f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	3304      	adds	r3, #4
 80043f6:	2b06      	cmp	r3, #6
 80043f8:	d902      	bls.n	8004400 <NVIC_EncodePriority+0x30>
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	3b03      	subs	r3, #3
 80043fe:	e000      	b.n	8004402 <NVIC_EncodePriority+0x32>
 8004400:	2300      	movs	r3, #0
 8004402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	43da      	mvns	r2, r3
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	401a      	ands	r2, r3
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004418:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	fa01 f303 	lsl.w	r3, r1, r3
 8004422:	43d9      	mvns	r1, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004428:	4313      	orrs	r3, r2
         );
}
 800442a:	4618      	mov	r0, r3
 800442c:	3724      	adds	r7, #36	; 0x24
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b082      	sub	sp, #8
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7ff ff4c 	bl	80042dc <__NVIC_SetPriorityGrouping>
}
 8004444:	bf00      	nop
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	4603      	mov	r3, r0
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800445a:	2300      	movs	r3, #0
 800445c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800445e:	f7ff ff61 	bl	8004324 <__NVIC_GetPriorityGrouping>
 8004462:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	68b9      	ldr	r1, [r7, #8]
 8004468:	6978      	ldr	r0, [r7, #20]
 800446a:	f7ff ffb1 	bl	80043d0 <NVIC_EncodePriority>
 800446e:	4602      	mov	r2, r0
 8004470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004474:	4611      	mov	r1, r2
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff ff80 	bl	800437c <__NVIC_SetPriority>
}
 800447c:	bf00      	nop
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	4603      	mov	r3, r0
 800448c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800448e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff ff54 	bl	8004340 <__NVIC_EnableIRQ>
}
 8004498:	bf00      	nop
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80044ac:	f7ff fee6 	bl	800427c <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e099      	b.n	80045f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0201 	bic.w	r2, r2, #1
 80044da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044dc:	e00f      	b.n	80044fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044de:	f7ff fecd 	bl	800427c <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b05      	cmp	r3, #5
 80044ea:	d908      	bls.n	80044fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2220      	movs	r2, #32
 80044f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2203      	movs	r2, #3
 80044f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e078      	b.n	80045f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e8      	bne.n	80044de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	4b38      	ldr	r3, [pc, #224]	; (80045f8 <HAL_DMA_Init+0x158>)
 8004518:	4013      	ands	r3, r2
 800451a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800452a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004536:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004542:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	4313      	orrs	r3, r2
 800454e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	2b04      	cmp	r3, #4
 8004556:	d107      	bne.n	8004568 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	4313      	orrs	r3, r2
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4313      	orrs	r3, r2
 8004566:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f023 0307 	bic.w	r3, r3, #7
 800457e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	4313      	orrs	r3, r2
 8004588:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	2b04      	cmp	r3, #4
 8004590:	d117      	bne.n	80045c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	4313      	orrs	r3, r2
 800459a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00e      	beq.n	80045c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 fb15 	bl	8004bd4 <DMA_CheckFifoParam>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d008      	beq.n	80045c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2240      	movs	r2, #64	; 0x40
 80045b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80045be:	2301      	movs	r3, #1
 80045c0:	e016      	b.n	80045f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 facc 	bl	8004b68 <DMA_CalcBaseAndBitshift>
 80045d0:	4603      	mov	r3, r0
 80045d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d8:	223f      	movs	r2, #63	; 0x3f
 80045da:	409a      	lsls	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	e010803f 	.word	0xe010803f

080045fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004612:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_DMA_Start_IT+0x26>
 800461e:	2302      	movs	r3, #2
 8004620:	e048      	b.n	80046b4 <HAL_DMA_Start_IT+0xb8>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b01      	cmp	r3, #1
 8004634:	d137      	bne.n	80046a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2202      	movs	r2, #2
 800463a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	68b9      	ldr	r1, [r7, #8]
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 fa5e 	bl	8004b0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004654:	223f      	movs	r2, #63	; 0x3f
 8004656:	409a      	lsls	r2, r3
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0216 	orr.w	r2, r2, #22
 800466a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695a      	ldr	r2, [r3, #20]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800467a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	2b00      	cmp	r3, #0
 8004682:	d007      	beq.n	8004694 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0208 	orr.w	r2, r2, #8
 8004692:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0201 	orr.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	e005      	b.n	80046b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046ae:	2302      	movs	r3, #2
 80046b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3718      	adds	r7, #24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046ca:	f7ff fdd7 	bl	800427c <HAL_GetTick>
 80046ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d008      	beq.n	80046ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2280      	movs	r2, #128	; 0x80
 80046e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e052      	b.n	8004794 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0216 	bic.w	r2, r2, #22
 80046fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695a      	ldr	r2, [r3, #20]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800470c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	2b00      	cmp	r3, #0
 8004714:	d103      	bne.n	800471e <HAL_DMA_Abort+0x62>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800471a:	2b00      	cmp	r3, #0
 800471c:	d007      	beq.n	800472e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0208 	bic.w	r2, r2, #8
 800472c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0201 	bic.w	r2, r2, #1
 800473c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800473e:	e013      	b.n	8004768 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004740:	f7ff fd9c 	bl	800427c <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b05      	cmp	r3, #5
 800474c:	d90c      	bls.n	8004768 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2220      	movs	r2, #32
 8004752:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2203      	movs	r2, #3
 8004758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e015      	b.n	8004794 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1e4      	bne.n	8004740 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477a:	223f      	movs	r2, #63	; 0x3f
 800477c:	409a      	lsls	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d004      	beq.n	80047ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2280      	movs	r2, #128	; 0x80
 80047b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e00c      	b.n	80047d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2205      	movs	r2, #5
 80047be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0201 	bic.w	r2, r2, #1
 80047d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80047e8:	2300      	movs	r3, #0
 80047ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80047ec:	4b8e      	ldr	r3, [pc, #568]	; (8004a28 <HAL_DMA_IRQHandler+0x248>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a8e      	ldr	r2, [pc, #568]	; (8004a2c <HAL_DMA_IRQHandler+0x24c>)
 80047f2:	fba2 2303 	umull	r2, r3, r2, r3
 80047f6:	0a9b      	lsrs	r3, r3, #10
 80047f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480a:	2208      	movs	r2, #8
 800480c:	409a      	lsls	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4013      	ands	r3, r2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d01a      	beq.n	800484c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d013      	beq.n	800484c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0204 	bic.w	r2, r2, #4
 8004832:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004838:	2208      	movs	r2, #8
 800483a:	409a      	lsls	r2, r3
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004844:	f043 0201 	orr.w	r2, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004850:	2201      	movs	r2, #1
 8004852:	409a      	lsls	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4013      	ands	r3, r2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d012      	beq.n	8004882 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00b      	beq.n	8004882 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800486e:	2201      	movs	r2, #1
 8004870:	409a      	lsls	r2, r3
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487a:	f043 0202 	orr.w	r2, r3, #2
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004886:	2204      	movs	r2, #4
 8004888:	409a      	lsls	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4013      	ands	r3, r2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d012      	beq.n	80048b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00b      	beq.n	80048b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a4:	2204      	movs	r2, #4
 80048a6:	409a      	lsls	r2, r3
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b0:	f043 0204 	orr.w	r2, r3, #4
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048bc:	2210      	movs	r2, #16
 80048be:	409a      	lsls	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d043      	beq.n	8004950 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d03c      	beq.n	8004950 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048da:	2210      	movs	r2, #16
 80048dc:	409a      	lsls	r2, r3
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d018      	beq.n	8004922 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d108      	bne.n	8004910 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	2b00      	cmp	r3, #0
 8004904:	d024      	beq.n	8004950 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	4798      	blx	r3
 800490e:	e01f      	b.n	8004950 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01b      	beq.n	8004950 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	4798      	blx	r3
 8004920:	e016      	b.n	8004950 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492c:	2b00      	cmp	r3, #0
 800492e:	d107      	bne.n	8004940 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0208 	bic.w	r2, r2, #8
 800493e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004954:	2220      	movs	r2, #32
 8004956:	409a      	lsls	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4013      	ands	r3, r2
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 808f 	beq.w	8004a80 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0310 	and.w	r3, r3, #16
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 8087 	beq.w	8004a80 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004976:	2220      	movs	r2, #32
 8004978:	409a      	lsls	r2, r3
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b05      	cmp	r3, #5
 8004988:	d136      	bne.n	80049f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0216 	bic.w	r2, r2, #22
 8004998:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	695a      	ldr	r2, [r3, #20]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d103      	bne.n	80049ba <HAL_DMA_IRQHandler+0x1da>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d007      	beq.n	80049ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0208 	bic.w	r2, r2, #8
 80049c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ce:	223f      	movs	r2, #63	; 0x3f
 80049d0:	409a      	lsls	r2, r3
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d07e      	beq.n	8004aec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	4798      	blx	r3
        }
        return;
 80049f6:	e079      	b.n	8004aec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d01d      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10d      	bne.n	8004a30 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d031      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	4798      	blx	r3
 8004a24:	e02c      	b.n	8004a80 <HAL_DMA_IRQHandler+0x2a0>
 8004a26:	bf00      	nop
 8004a28:	20000004 	.word	0x20000004
 8004a2c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d023      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	4798      	blx	r3
 8004a40:	e01e      	b.n	8004a80 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10f      	bne.n	8004a70 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0210 	bic.w	r2, r2, #16
 8004a5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d032      	beq.n	8004aee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d022      	beq.n	8004ada <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2205      	movs	r2, #5
 8004a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0201 	bic.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	60bb      	str	r3, [r7, #8]
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d307      	bcc.n	8004ac8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1f2      	bne.n	8004aac <HAL_DMA_IRQHandler+0x2cc>
 8004ac6:	e000      	b.n	8004aca <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ac8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	4798      	blx	r3
 8004aea:	e000      	b.n	8004aee <HAL_DMA_IRQHandler+0x30e>
        return;
 8004aec:	bf00      	nop
    }
  }
}
 8004aee:	3718      	adds	r7, #24
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	2b40      	cmp	r3, #64	; 0x40
 8004b38:	d108      	bne.n	8004b4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b4a:	e007      	b.n	8004b5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	60da      	str	r2, [r3, #12]
}
 8004b5c:	bf00      	nop
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	3b10      	subs	r3, #16
 8004b78:	4a13      	ldr	r2, [pc, #76]	; (8004bc8 <DMA_CalcBaseAndBitshift+0x60>)
 8004b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7e:	091b      	lsrs	r3, r3, #4
 8004b80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b82:	4a12      	ldr	r2, [pc, #72]	; (8004bcc <DMA_CalcBaseAndBitshift+0x64>)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2b03      	cmp	r3, #3
 8004b94:	d908      	bls.n	8004ba8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	4b0c      	ldr	r3, [pc, #48]	; (8004bd0 <DMA_CalcBaseAndBitshift+0x68>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	1d1a      	adds	r2, r3, #4
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	659a      	str	r2, [r3, #88]	; 0x58
 8004ba6:	e006      	b.n	8004bb6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	461a      	mov	r2, r3
 8004bae:	4b08      	ldr	r3, [pc, #32]	; (8004bd0 <DMA_CalcBaseAndBitshift+0x68>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	aaaaaaab 	.word	0xaaaaaaab
 8004bcc:	0801e91c 	.word	0x0801e91c
 8004bd0:	fffffc00 	.word	0xfffffc00

08004bd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d11f      	bne.n	8004c2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d856      	bhi.n	8004ca2 <DMA_CheckFifoParam+0xce>
 8004bf4:	a201      	add	r2, pc, #4	; (adr r2, 8004bfc <DMA_CheckFifoParam+0x28>)
 8004bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfa:	bf00      	nop
 8004bfc:	08004c0d 	.word	0x08004c0d
 8004c00:	08004c1f 	.word	0x08004c1f
 8004c04:	08004c0d 	.word	0x08004c0d
 8004c08:	08004ca3 	.word	0x08004ca3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d046      	beq.n	8004ca6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c1c:	e043      	b.n	8004ca6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c26:	d140      	bne.n	8004caa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c2c:	e03d      	b.n	8004caa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c36:	d121      	bne.n	8004c7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d837      	bhi.n	8004cae <DMA_CheckFifoParam+0xda>
 8004c3e:	a201      	add	r2, pc, #4	; (adr r2, 8004c44 <DMA_CheckFifoParam+0x70>)
 8004c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c44:	08004c55 	.word	0x08004c55
 8004c48:	08004c5b 	.word	0x08004c5b
 8004c4c:	08004c55 	.word	0x08004c55
 8004c50:	08004c6d 	.word	0x08004c6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	73fb      	strb	r3, [r7, #15]
      break;
 8004c58:	e030      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d025      	beq.n	8004cb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c6a:	e022      	b.n	8004cb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c74:	d11f      	bne.n	8004cb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c7a:	e01c      	b.n	8004cb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d903      	bls.n	8004c8a <DMA_CheckFifoParam+0xb6>
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	2b03      	cmp	r3, #3
 8004c86:	d003      	beq.n	8004c90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c88:	e018      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c8e:	e015      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00e      	beq.n	8004cba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004ca0:	e00b      	b.n	8004cba <DMA_CheckFifoParam+0xe6>
      break;
 8004ca2:	bf00      	nop
 8004ca4:	e00a      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
      break;
 8004ca6:	bf00      	nop
 8004ca8:	e008      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
      break;
 8004caa:	bf00      	nop
 8004cac:	e006      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
      break;
 8004cae:	bf00      	nop
 8004cb0:	e004      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
      break;
 8004cb2:	bf00      	nop
 8004cb4:	e002      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
      break;   
 8004cb6:	bf00      	nop
 8004cb8:	e000      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
      break;
 8004cba:	bf00      	nop
    }
  } 
  
  return status; 
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop

08004ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b089      	sub	sp, #36	; 0x24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	61fb      	str	r3, [r7, #28]
 8004cea:	e175      	b.n	8004fd8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004cec:	2201      	movs	r2, #1
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	f040 8164 	bne.w	8004fd2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d005      	beq.n	8004d22 <HAL_GPIO_Init+0x56>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d130      	bne.n	8004d84 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	2203      	movs	r2, #3
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	43db      	mvns	r3, r3
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	4013      	ands	r3, r2
 8004d38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68da      	ldr	r2, [r3, #12]
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d58:	2201      	movs	r2, #1
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	43db      	mvns	r3, r3
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	4013      	ands	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	091b      	lsrs	r3, r3, #4
 8004d6e:	f003 0201 	and.w	r2, r3, #1
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	fa02 f303 	lsl.w	r3, r2, r3
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f003 0303 	and.w	r3, r3, #3
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d017      	beq.n	8004dc0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	2203      	movs	r2, #3
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	43db      	mvns	r3, r3
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	4013      	ands	r3, r2
 8004da6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f003 0303 	and.w	r3, r3, #3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d123      	bne.n	8004e14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	08da      	lsrs	r2, r3, #3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	3208      	adds	r2, #8
 8004dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	220f      	movs	r2, #15
 8004de4:	fa02 f303 	lsl.w	r3, r2, r3
 8004de8:	43db      	mvns	r3, r3
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	4013      	ands	r3, r2
 8004dee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	691a      	ldr	r2, [r3, #16]
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f003 0307 	and.w	r3, r3, #7
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	08da      	lsrs	r2, r3, #3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	3208      	adds	r2, #8
 8004e0e:	69b9      	ldr	r1, [r7, #24]
 8004e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	2203      	movs	r2, #3
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	43db      	mvns	r3, r3
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f003 0203 	and.w	r2, r3, #3
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 80be 	beq.w	8004fd2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e56:	4b66      	ldr	r3, [pc, #408]	; (8004ff0 <HAL_GPIO_Init+0x324>)
 8004e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5a:	4a65      	ldr	r2, [pc, #404]	; (8004ff0 <HAL_GPIO_Init+0x324>)
 8004e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e60:	6453      	str	r3, [r2, #68]	; 0x44
 8004e62:	4b63      	ldr	r3, [pc, #396]	; (8004ff0 <HAL_GPIO_Init+0x324>)
 8004e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004e6e:	4a61      	ldr	r2, [pc, #388]	; (8004ff4 <HAL_GPIO_Init+0x328>)
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	089b      	lsrs	r3, r3, #2
 8004e74:	3302      	adds	r3, #2
 8004e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	220f      	movs	r2, #15
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a58      	ldr	r2, [pc, #352]	; (8004ff8 <HAL_GPIO_Init+0x32c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d037      	beq.n	8004f0a <HAL_GPIO_Init+0x23e>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a57      	ldr	r2, [pc, #348]	; (8004ffc <HAL_GPIO_Init+0x330>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d031      	beq.n	8004f06 <HAL_GPIO_Init+0x23a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a56      	ldr	r2, [pc, #344]	; (8005000 <HAL_GPIO_Init+0x334>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d02b      	beq.n	8004f02 <HAL_GPIO_Init+0x236>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a55      	ldr	r2, [pc, #340]	; (8005004 <HAL_GPIO_Init+0x338>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d025      	beq.n	8004efe <HAL_GPIO_Init+0x232>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a54      	ldr	r2, [pc, #336]	; (8005008 <HAL_GPIO_Init+0x33c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d01f      	beq.n	8004efa <HAL_GPIO_Init+0x22e>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a53      	ldr	r2, [pc, #332]	; (800500c <HAL_GPIO_Init+0x340>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d019      	beq.n	8004ef6 <HAL_GPIO_Init+0x22a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a52      	ldr	r2, [pc, #328]	; (8005010 <HAL_GPIO_Init+0x344>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d013      	beq.n	8004ef2 <HAL_GPIO_Init+0x226>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a51      	ldr	r2, [pc, #324]	; (8005014 <HAL_GPIO_Init+0x348>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d00d      	beq.n	8004eee <HAL_GPIO_Init+0x222>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a50      	ldr	r2, [pc, #320]	; (8005018 <HAL_GPIO_Init+0x34c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d007      	beq.n	8004eea <HAL_GPIO_Init+0x21e>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a4f      	ldr	r2, [pc, #316]	; (800501c <HAL_GPIO_Init+0x350>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d101      	bne.n	8004ee6 <HAL_GPIO_Init+0x21a>
 8004ee2:	2309      	movs	r3, #9
 8004ee4:	e012      	b.n	8004f0c <HAL_GPIO_Init+0x240>
 8004ee6:	230a      	movs	r3, #10
 8004ee8:	e010      	b.n	8004f0c <HAL_GPIO_Init+0x240>
 8004eea:	2308      	movs	r3, #8
 8004eec:	e00e      	b.n	8004f0c <HAL_GPIO_Init+0x240>
 8004eee:	2307      	movs	r3, #7
 8004ef0:	e00c      	b.n	8004f0c <HAL_GPIO_Init+0x240>
 8004ef2:	2306      	movs	r3, #6
 8004ef4:	e00a      	b.n	8004f0c <HAL_GPIO_Init+0x240>
 8004ef6:	2305      	movs	r3, #5
 8004ef8:	e008      	b.n	8004f0c <HAL_GPIO_Init+0x240>
 8004efa:	2304      	movs	r3, #4
 8004efc:	e006      	b.n	8004f0c <HAL_GPIO_Init+0x240>
 8004efe:	2303      	movs	r3, #3
 8004f00:	e004      	b.n	8004f0c <HAL_GPIO_Init+0x240>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e002      	b.n	8004f0c <HAL_GPIO_Init+0x240>
 8004f06:	2301      	movs	r3, #1
 8004f08:	e000      	b.n	8004f0c <HAL_GPIO_Init+0x240>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	69fa      	ldr	r2, [r7, #28]
 8004f0e:	f002 0203 	and.w	r2, r2, #3
 8004f12:	0092      	lsls	r2, r2, #2
 8004f14:	4093      	lsls	r3, r2
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004f1c:	4935      	ldr	r1, [pc, #212]	; (8004ff4 <HAL_GPIO_Init+0x328>)
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	089b      	lsrs	r3, r3, #2
 8004f22:	3302      	adds	r3, #2
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f2a:	4b3d      	ldr	r3, [pc, #244]	; (8005020 <HAL_GPIO_Init+0x354>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	43db      	mvns	r3, r3
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	4013      	ands	r3, r2
 8004f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f4e:	4a34      	ldr	r2, [pc, #208]	; (8005020 <HAL_GPIO_Init+0x354>)
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f54:	4b32      	ldr	r3, [pc, #200]	; (8005020 <HAL_GPIO_Init+0x354>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	4013      	ands	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f78:	4a29      	ldr	r2, [pc, #164]	; (8005020 <HAL_GPIO_Init+0x354>)
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f7e:	4b28      	ldr	r3, [pc, #160]	; (8005020 <HAL_GPIO_Init+0x354>)
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	43db      	mvns	r3, r3
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fa2:	4a1f      	ldr	r2, [pc, #124]	; (8005020 <HAL_GPIO_Init+0x354>)
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fa8:	4b1d      	ldr	r3, [pc, #116]	; (8005020 <HAL_GPIO_Init+0x354>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fcc:	4a14      	ldr	r2, [pc, #80]	; (8005020 <HAL_GPIO_Init+0x354>)
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	61fb      	str	r3, [r7, #28]
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	2b0f      	cmp	r3, #15
 8004fdc:	f67f ae86 	bls.w	8004cec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004fe0:	bf00      	nop
 8004fe2:	bf00      	nop
 8004fe4:	3724      	adds	r7, #36	; 0x24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40023800 	.word	0x40023800
 8004ff4:	40013800 	.word	0x40013800
 8004ff8:	40020000 	.word	0x40020000
 8004ffc:	40020400 	.word	0x40020400
 8005000:	40020800 	.word	0x40020800
 8005004:	40020c00 	.word	0x40020c00
 8005008:	40021000 	.word	0x40021000
 800500c:	40021400 	.word	0x40021400
 8005010:	40021800 	.word	0x40021800
 8005014:	40021c00 	.word	0x40021c00
 8005018:	40022000 	.word	0x40022000
 800501c:	40022400 	.word	0x40022400
 8005020:	40013c00 	.word	0x40013c00

08005024 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	887b      	ldrh	r3, [r7, #2]
 8005036:	4013      	ands	r3, r2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800503c:	2301      	movs	r3, #1
 800503e:	73fb      	strb	r3, [r7, #15]
 8005040:	e001      	b.n	8005046 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005042:	2300      	movs	r3, #0
 8005044:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005046:	7bfb      	ldrb	r3, [r7, #15]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	460b      	mov	r3, r1
 800505e:	807b      	strh	r3, [r7, #2]
 8005060:	4613      	mov	r3, r2
 8005062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005064:	787b      	ldrb	r3, [r7, #1]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800506a:	887a      	ldrh	r2, [r7, #2]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005070:	e003      	b.n	800507a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005072:	887b      	ldrh	r3, [r7, #2]
 8005074:	041a      	lsls	r2, r3, #16
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	619a      	str	r2, [r3, #24]
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005086:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005088:	b08f      	sub	sp, #60	; 0x3c
 800508a:	af0a      	add	r7, sp, #40	; 0x28
 800508c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e116      	b.n	80052c6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d106      	bne.n	80050b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7ff f81e 	bl	80040f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2203      	movs	r2, #3
 80050bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d102      	bne.n	80050d2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f004 f9f8 	bl	80094cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	603b      	str	r3, [r7, #0]
 80050e2:	687e      	ldr	r6, [r7, #4]
 80050e4:	466d      	mov	r5, sp
 80050e6:	f106 0410 	add.w	r4, r6, #16
 80050ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80050f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80050fa:	1d33      	adds	r3, r6, #4
 80050fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050fe:	6838      	ldr	r0, [r7, #0]
 8005100:	f004 f98c 	bl	800941c <USB_CoreInit>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d005      	beq.n	8005116 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2202      	movs	r2, #2
 800510e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e0d7      	b.n	80052c6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2100      	movs	r1, #0
 800511c:	4618      	mov	r0, r3
 800511e:	f004 f9e6 	bl	80094ee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005122:	2300      	movs	r3, #0
 8005124:	73fb      	strb	r3, [r7, #15]
 8005126:	e04a      	b.n	80051be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005128:	7bfa      	ldrb	r2, [r7, #15]
 800512a:	6879      	ldr	r1, [r7, #4]
 800512c:	4613      	mov	r3, r2
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	440b      	add	r3, r1
 8005136:	333d      	adds	r3, #61	; 0x3d
 8005138:	2201      	movs	r2, #1
 800513a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800513c:	7bfa      	ldrb	r2, [r7, #15]
 800513e:	6879      	ldr	r1, [r7, #4]
 8005140:	4613      	mov	r3, r2
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	4413      	add	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	440b      	add	r3, r1
 800514a:	333c      	adds	r3, #60	; 0x3c
 800514c:	7bfa      	ldrb	r2, [r7, #15]
 800514e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005150:	7bfa      	ldrb	r2, [r7, #15]
 8005152:	7bfb      	ldrb	r3, [r7, #15]
 8005154:	b298      	uxth	r0, r3
 8005156:	6879      	ldr	r1, [r7, #4]
 8005158:	4613      	mov	r3, r2
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	4413      	add	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	3344      	adds	r3, #68	; 0x44
 8005164:	4602      	mov	r2, r0
 8005166:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005168:	7bfa      	ldrb	r2, [r7, #15]
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	4613      	mov	r3, r2
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	4413      	add	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	440b      	add	r3, r1
 8005176:	3340      	adds	r3, #64	; 0x40
 8005178:	2200      	movs	r2, #0
 800517a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800517c:	7bfa      	ldrb	r2, [r7, #15]
 800517e:	6879      	ldr	r1, [r7, #4]
 8005180:	4613      	mov	r3, r2
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	4413      	add	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	440b      	add	r3, r1
 800518a:	3348      	adds	r3, #72	; 0x48
 800518c:	2200      	movs	r2, #0
 800518e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005190:	7bfa      	ldrb	r2, [r7, #15]
 8005192:	6879      	ldr	r1, [r7, #4]
 8005194:	4613      	mov	r3, r2
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	4413      	add	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	440b      	add	r3, r1
 800519e:	334c      	adds	r3, #76	; 0x4c
 80051a0:	2200      	movs	r2, #0
 80051a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80051a4:	7bfa      	ldrb	r2, [r7, #15]
 80051a6:	6879      	ldr	r1, [r7, #4]
 80051a8:	4613      	mov	r3, r2
 80051aa:	00db      	lsls	r3, r3, #3
 80051ac:	4413      	add	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	440b      	add	r3, r1
 80051b2:	3354      	adds	r3, #84	; 0x54
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
 80051ba:	3301      	adds	r3, #1
 80051bc:	73fb      	strb	r3, [r7, #15]
 80051be:	7bfa      	ldrb	r2, [r7, #15]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d3af      	bcc.n	8005128 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051c8:	2300      	movs	r3, #0
 80051ca:	73fb      	strb	r3, [r7, #15]
 80051cc:	e044      	b.n	8005258 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80051ce:	7bfa      	ldrb	r2, [r7, #15]
 80051d0:	6879      	ldr	r1, [r7, #4]
 80051d2:	4613      	mov	r3, r2
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	4413      	add	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	440b      	add	r3, r1
 80051dc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80051e0:	2200      	movs	r2, #0
 80051e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80051e4:	7bfa      	ldrb	r2, [r7, #15]
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	4613      	mov	r3, r2
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	4413      	add	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	440b      	add	r3, r1
 80051f2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80051f6:	7bfa      	ldrb	r2, [r7, #15]
 80051f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80051fa:	7bfa      	ldrb	r2, [r7, #15]
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	4613      	mov	r3, r2
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	4413      	add	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	440b      	add	r3, r1
 8005208:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800520c:	2200      	movs	r2, #0
 800520e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005210:	7bfa      	ldrb	r2, [r7, #15]
 8005212:	6879      	ldr	r1, [r7, #4]
 8005214:	4613      	mov	r3, r2
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	4413      	add	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	440b      	add	r3, r1
 800521e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005226:	7bfa      	ldrb	r2, [r7, #15]
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	4613      	mov	r3, r2
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	4413      	add	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	440b      	add	r3, r1
 8005234:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800523c:	7bfa      	ldrb	r2, [r7, #15]
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	4613      	mov	r3, r2
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	4413      	add	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	440b      	add	r3, r1
 800524a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005252:	7bfb      	ldrb	r3, [r7, #15]
 8005254:	3301      	adds	r3, #1
 8005256:	73fb      	strb	r3, [r7, #15]
 8005258:	7bfa      	ldrb	r2, [r7, #15]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	429a      	cmp	r2, r3
 8005260:	d3b5      	bcc.n	80051ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	603b      	str	r3, [r7, #0]
 8005268:	687e      	ldr	r6, [r7, #4]
 800526a:	466d      	mov	r5, sp
 800526c:	f106 0410 	add.w	r4, r6, #16
 8005270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005272:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005276:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005278:	e894 0003 	ldmia.w	r4, {r0, r1}
 800527c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005280:	1d33      	adds	r3, r6, #4
 8005282:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005284:	6838      	ldr	r0, [r7, #0]
 8005286:	f004 f97f 	bl	8009588 <USB_DevInit>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d005      	beq.n	800529c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e014      	b.n	80052c6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d102      	bne.n	80052ba <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f80b 	bl	80052d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f004 fb3d 	bl	800993e <USB_DevDisconnect>

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080052d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052fe:	4b05      	ldr	r3, [pc, #20]	; (8005314 <HAL_PCDEx_ActivateLPM+0x44>)
 8005300:	4313      	orrs	r3, r2
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	10000003 	.word	0x10000003

08005318 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800531e:	2300      	movs	r3, #0
 8005320:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005322:	4b23      	ldr	r3, [pc, #140]	; (80053b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	4a22      	ldr	r2, [pc, #136]	; (80053b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800532c:	6413      	str	r3, [r2, #64]	; 0x40
 800532e:	4b20      	ldr	r3, [pc, #128]	; (80053b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005336:	603b      	str	r3, [r7, #0]
 8005338:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800533a:	4b1e      	ldr	r3, [pc, #120]	; (80053b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a1d      	ldr	r2, [pc, #116]	; (80053b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005344:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005346:	f7fe ff99 	bl	800427c <HAL_GetTick>
 800534a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800534c:	e009      	b.n	8005362 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800534e:	f7fe ff95 	bl	800427c <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800535c:	d901      	bls.n	8005362 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e022      	b.n	80053a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005362:	4b14      	ldr	r3, [pc, #80]	; (80053b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800536a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800536e:	d1ee      	bne.n	800534e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005370:	4b10      	ldr	r3, [pc, #64]	; (80053b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a0f      	ldr	r2, [pc, #60]	; (80053b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800537a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800537c:	f7fe ff7e 	bl	800427c <HAL_GetTick>
 8005380:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005382:	e009      	b.n	8005398 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005384:	f7fe ff7a 	bl	800427c <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005392:	d901      	bls.n	8005398 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e007      	b.n	80053a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005398:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053a4:	d1ee      	bne.n	8005384 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40023800 	.word	0x40023800
 80053b4:	40007000 	.word	0x40007000

080053b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80053c0:	2300      	movs	r3, #0
 80053c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e29b      	b.n	8005906 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 8087 	beq.w	80054ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053dc:	4b96      	ldr	r3, [pc, #600]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f003 030c 	and.w	r3, r3, #12
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d00c      	beq.n	8005402 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053e8:	4b93      	ldr	r3, [pc, #588]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f003 030c 	and.w	r3, r3, #12
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d112      	bne.n	800541a <HAL_RCC_OscConfig+0x62>
 80053f4:	4b90      	ldr	r3, [pc, #576]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005400:	d10b      	bne.n	800541a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005402:	4b8d      	ldr	r3, [pc, #564]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d06c      	beq.n	80054e8 <HAL_RCC_OscConfig+0x130>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d168      	bne.n	80054e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e275      	b.n	8005906 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005422:	d106      	bne.n	8005432 <HAL_RCC_OscConfig+0x7a>
 8005424:	4b84      	ldr	r3, [pc, #528]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a83      	ldr	r2, [pc, #524]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 800542a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800542e:	6013      	str	r3, [r2, #0]
 8005430:	e02e      	b.n	8005490 <HAL_RCC_OscConfig+0xd8>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10c      	bne.n	8005454 <HAL_RCC_OscConfig+0x9c>
 800543a:	4b7f      	ldr	r3, [pc, #508]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a7e      	ldr	r2, [pc, #504]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 8005440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	4b7c      	ldr	r3, [pc, #496]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a7b      	ldr	r2, [pc, #492]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 800544c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	e01d      	b.n	8005490 <HAL_RCC_OscConfig+0xd8>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800545c:	d10c      	bne.n	8005478 <HAL_RCC_OscConfig+0xc0>
 800545e:	4b76      	ldr	r3, [pc, #472]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a75      	ldr	r2, [pc, #468]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 8005464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	4b73      	ldr	r3, [pc, #460]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a72      	ldr	r2, [pc, #456]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 8005470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	e00b      	b.n	8005490 <HAL_RCC_OscConfig+0xd8>
 8005478:	4b6f      	ldr	r3, [pc, #444]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a6e      	ldr	r2, [pc, #440]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 800547e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	4b6c      	ldr	r3, [pc, #432]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a6b      	ldr	r2, [pc, #428]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 800548a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800548e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d013      	beq.n	80054c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005498:	f7fe fef0 	bl	800427c <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054a0:	f7fe feec 	bl	800427c <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b64      	cmp	r3, #100	; 0x64
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e229      	b.n	8005906 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054b2:	4b61      	ldr	r3, [pc, #388]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d0f0      	beq.n	80054a0 <HAL_RCC_OscConfig+0xe8>
 80054be:	e014      	b.n	80054ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c0:	f7fe fedc 	bl	800427c <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054c8:	f7fe fed8 	bl	800427c <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b64      	cmp	r3, #100	; 0x64
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e215      	b.n	8005906 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054da:	4b57      	ldr	r3, [pc, #348]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1f0      	bne.n	80054c8 <HAL_RCC_OscConfig+0x110>
 80054e6:	e000      	b.n	80054ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d069      	beq.n	80055ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054f6:	4b50      	ldr	r3, [pc, #320]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 030c 	and.w	r3, r3, #12
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00b      	beq.n	800551a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005502:	4b4d      	ldr	r3, [pc, #308]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 030c 	and.w	r3, r3, #12
 800550a:	2b08      	cmp	r3, #8
 800550c:	d11c      	bne.n	8005548 <HAL_RCC_OscConfig+0x190>
 800550e:	4b4a      	ldr	r3, [pc, #296]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d116      	bne.n	8005548 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800551a:	4b47      	ldr	r3, [pc, #284]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d005      	beq.n	8005532 <HAL_RCC_OscConfig+0x17a>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d001      	beq.n	8005532 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e1e9      	b.n	8005906 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005532:	4b41      	ldr	r3, [pc, #260]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	493d      	ldr	r1, [pc, #244]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 8005542:	4313      	orrs	r3, r2
 8005544:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005546:	e040      	b.n	80055ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d023      	beq.n	8005598 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005550:	4b39      	ldr	r3, [pc, #228]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a38      	ldr	r2, [pc, #224]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 8005556:	f043 0301 	orr.w	r3, r3, #1
 800555a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555c:	f7fe fe8e 	bl	800427c <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005564:	f7fe fe8a 	bl	800427c <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e1c7      	b.n	8005906 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005576:	4b30      	ldr	r3, [pc, #192]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d0f0      	beq.n	8005564 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005582:	4b2d      	ldr	r3, [pc, #180]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	4929      	ldr	r1, [pc, #164]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 8005592:	4313      	orrs	r3, r2
 8005594:	600b      	str	r3, [r1, #0]
 8005596:	e018      	b.n	80055ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005598:	4b27      	ldr	r3, [pc, #156]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a26      	ldr	r2, [pc, #152]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 800559e:	f023 0301 	bic.w	r3, r3, #1
 80055a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a4:	f7fe fe6a 	bl	800427c <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ac:	f7fe fe66 	bl	800427c <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e1a3      	b.n	8005906 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055be:	4b1e      	ldr	r3, [pc, #120]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1f0      	bne.n	80055ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d038      	beq.n	8005648 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d019      	beq.n	8005612 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055de:	4b16      	ldr	r3, [pc, #88]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 80055e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e2:	4a15      	ldr	r2, [pc, #84]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 80055e4:	f043 0301 	orr.w	r3, r3, #1
 80055e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ea:	f7fe fe47 	bl	800427c <HAL_GetTick>
 80055ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055f0:	e008      	b.n	8005604 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055f2:	f7fe fe43 	bl	800427c <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d901      	bls.n	8005604 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e180      	b.n	8005906 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005604:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 8005606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0f0      	beq.n	80055f2 <HAL_RCC_OscConfig+0x23a>
 8005610:	e01a      	b.n	8005648 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005612:	4b09      	ldr	r3, [pc, #36]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 8005614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005616:	4a08      	ldr	r2, [pc, #32]	; (8005638 <HAL_RCC_OscConfig+0x280>)
 8005618:	f023 0301 	bic.w	r3, r3, #1
 800561c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800561e:	f7fe fe2d 	bl	800427c <HAL_GetTick>
 8005622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005624:	e00a      	b.n	800563c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005626:	f7fe fe29 	bl	800427c <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b02      	cmp	r3, #2
 8005632:	d903      	bls.n	800563c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e166      	b.n	8005906 <HAL_RCC_OscConfig+0x54e>
 8005638:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800563c:	4b92      	ldr	r3, [pc, #584]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 800563e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1ee      	bne.n	8005626 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 80a4 	beq.w	800579e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005656:	4b8c      	ldr	r3, [pc, #560]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10d      	bne.n	800567e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005662:	4b89      	ldr	r3, [pc, #548]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	4a88      	ldr	r2, [pc, #544]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 8005668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800566c:	6413      	str	r3, [r2, #64]	; 0x40
 800566e:	4b86      	ldr	r3, [pc, #536]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005676:	60bb      	str	r3, [r7, #8]
 8005678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800567a:	2301      	movs	r3, #1
 800567c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800567e:	4b83      	ldr	r3, [pc, #524]	; (800588c <HAL_RCC_OscConfig+0x4d4>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005686:	2b00      	cmp	r3, #0
 8005688:	d118      	bne.n	80056bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800568a:	4b80      	ldr	r3, [pc, #512]	; (800588c <HAL_RCC_OscConfig+0x4d4>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a7f      	ldr	r2, [pc, #508]	; (800588c <HAL_RCC_OscConfig+0x4d4>)
 8005690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005696:	f7fe fdf1 	bl	800427c <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800569c:	e008      	b.n	80056b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800569e:	f7fe fded 	bl	800427c <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b64      	cmp	r3, #100	; 0x64
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e12a      	b.n	8005906 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056b0:	4b76      	ldr	r3, [pc, #472]	; (800588c <HAL_RCC_OscConfig+0x4d4>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0f0      	beq.n	800569e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d106      	bne.n	80056d2 <HAL_RCC_OscConfig+0x31a>
 80056c4:	4b70      	ldr	r3, [pc, #448]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 80056c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c8:	4a6f      	ldr	r2, [pc, #444]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 80056ca:	f043 0301 	orr.w	r3, r3, #1
 80056ce:	6713      	str	r3, [r2, #112]	; 0x70
 80056d0:	e02d      	b.n	800572e <HAL_RCC_OscConfig+0x376>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10c      	bne.n	80056f4 <HAL_RCC_OscConfig+0x33c>
 80056da:	4b6b      	ldr	r3, [pc, #428]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 80056dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056de:	4a6a      	ldr	r2, [pc, #424]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 80056e0:	f023 0301 	bic.w	r3, r3, #1
 80056e4:	6713      	str	r3, [r2, #112]	; 0x70
 80056e6:	4b68      	ldr	r3, [pc, #416]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 80056e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ea:	4a67      	ldr	r2, [pc, #412]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 80056ec:	f023 0304 	bic.w	r3, r3, #4
 80056f0:	6713      	str	r3, [r2, #112]	; 0x70
 80056f2:	e01c      	b.n	800572e <HAL_RCC_OscConfig+0x376>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	2b05      	cmp	r3, #5
 80056fa:	d10c      	bne.n	8005716 <HAL_RCC_OscConfig+0x35e>
 80056fc:	4b62      	ldr	r3, [pc, #392]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 80056fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005700:	4a61      	ldr	r2, [pc, #388]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 8005702:	f043 0304 	orr.w	r3, r3, #4
 8005706:	6713      	str	r3, [r2, #112]	; 0x70
 8005708:	4b5f      	ldr	r3, [pc, #380]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 800570a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570c:	4a5e      	ldr	r2, [pc, #376]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 800570e:	f043 0301 	orr.w	r3, r3, #1
 8005712:	6713      	str	r3, [r2, #112]	; 0x70
 8005714:	e00b      	b.n	800572e <HAL_RCC_OscConfig+0x376>
 8005716:	4b5c      	ldr	r3, [pc, #368]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 8005718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571a:	4a5b      	ldr	r2, [pc, #364]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 800571c:	f023 0301 	bic.w	r3, r3, #1
 8005720:	6713      	str	r3, [r2, #112]	; 0x70
 8005722:	4b59      	ldr	r3, [pc, #356]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 8005724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005726:	4a58      	ldr	r2, [pc, #352]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 8005728:	f023 0304 	bic.w	r3, r3, #4
 800572c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d015      	beq.n	8005762 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005736:	f7fe fda1 	bl	800427c <HAL_GetTick>
 800573a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800573c:	e00a      	b.n	8005754 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800573e:	f7fe fd9d 	bl	800427c <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	f241 3288 	movw	r2, #5000	; 0x1388
 800574c:	4293      	cmp	r3, r2
 800574e:	d901      	bls.n	8005754 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e0d8      	b.n	8005906 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005754:	4b4c      	ldr	r3, [pc, #304]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 8005756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0ee      	beq.n	800573e <HAL_RCC_OscConfig+0x386>
 8005760:	e014      	b.n	800578c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005762:	f7fe fd8b 	bl	800427c <HAL_GetTick>
 8005766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005768:	e00a      	b.n	8005780 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800576a:	f7fe fd87 	bl	800427c <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	f241 3288 	movw	r2, #5000	; 0x1388
 8005778:	4293      	cmp	r3, r2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e0c2      	b.n	8005906 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005780:	4b41      	ldr	r3, [pc, #260]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 8005782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1ee      	bne.n	800576a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800578c:	7dfb      	ldrb	r3, [r7, #23]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d105      	bne.n	800579e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005792:	4b3d      	ldr	r3, [pc, #244]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	4a3c      	ldr	r2, [pc, #240]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 8005798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800579c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 80ae 	beq.w	8005904 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057a8:	4b37      	ldr	r3, [pc, #220]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f003 030c 	and.w	r3, r3, #12
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d06d      	beq.n	8005890 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d14b      	bne.n	8005854 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057bc:	4b32      	ldr	r3, [pc, #200]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a31      	ldr	r2, [pc, #196]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 80057c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c8:	f7fe fd58 	bl	800427c <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057d0:	f7fe fd54 	bl	800427c <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e091      	b.n	8005906 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057e2:	4b29      	ldr	r3, [pc, #164]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1f0      	bne.n	80057d0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	69da      	ldr	r2, [r3, #28]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	431a      	orrs	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fc:	019b      	lsls	r3, r3, #6
 80057fe:	431a      	orrs	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005804:	085b      	lsrs	r3, r3, #1
 8005806:	3b01      	subs	r3, #1
 8005808:	041b      	lsls	r3, r3, #16
 800580a:	431a      	orrs	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005810:	061b      	lsls	r3, r3, #24
 8005812:	431a      	orrs	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005818:	071b      	lsls	r3, r3, #28
 800581a:	491b      	ldr	r1, [pc, #108]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 800581c:	4313      	orrs	r3, r2
 800581e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005820:	4b19      	ldr	r3, [pc, #100]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a18      	ldr	r2, [pc, #96]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 8005826:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800582a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800582c:	f7fe fd26 	bl	800427c <HAL_GetTick>
 8005830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005832:	e008      	b.n	8005846 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005834:	f7fe fd22 	bl	800427c <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e05f      	b.n	8005906 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005846:	4b10      	ldr	r3, [pc, #64]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d0f0      	beq.n	8005834 <HAL_RCC_OscConfig+0x47c>
 8005852:	e057      	b.n	8005904 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005854:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a0b      	ldr	r2, [pc, #44]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 800585a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800585e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005860:	f7fe fd0c 	bl	800427c <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005868:	f7fe fd08 	bl	800427c <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e045      	b.n	8005906 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800587a:	4b03      	ldr	r3, [pc, #12]	; (8005888 <HAL_RCC_OscConfig+0x4d0>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f0      	bne.n	8005868 <HAL_RCC_OscConfig+0x4b0>
 8005886:	e03d      	b.n	8005904 <HAL_RCC_OscConfig+0x54c>
 8005888:	40023800 	.word	0x40023800
 800588c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005890:	4b1f      	ldr	r3, [pc, #124]	; (8005910 <HAL_RCC_OscConfig+0x558>)
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d030      	beq.n	8005900 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d129      	bne.n	8005900 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d122      	bne.n	8005900 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058c0:	4013      	ands	r3, r2
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d119      	bne.n	8005900 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d6:	085b      	lsrs	r3, r3, #1
 80058d8:	3b01      	subs	r3, #1
 80058da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058dc:	429a      	cmp	r2, r3
 80058de:	d10f      	bne.n	8005900 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d107      	bne.n	8005900 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d001      	beq.n	8005904 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e000      	b.n	8005906 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40023800 	.word	0x40023800

08005914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e0d0      	b.n	8005ace <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800592c:	4b6a      	ldr	r3, [pc, #424]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 030f 	and.w	r3, r3, #15
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d910      	bls.n	800595c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800593a:	4b67      	ldr	r3, [pc, #412]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f023 020f 	bic.w	r2, r3, #15
 8005942:	4965      	ldr	r1, [pc, #404]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	4313      	orrs	r3, r2
 8005948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800594a:	4b63      	ldr	r3, [pc, #396]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	429a      	cmp	r2, r3
 8005956:	d001      	beq.n	800595c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e0b8      	b.n	8005ace <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d020      	beq.n	80059aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	d005      	beq.n	8005980 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005974:	4b59      	ldr	r3, [pc, #356]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	4a58      	ldr	r2, [pc, #352]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 800597a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800597e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0308 	and.w	r3, r3, #8
 8005988:	2b00      	cmp	r3, #0
 800598a:	d005      	beq.n	8005998 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800598c:	4b53      	ldr	r3, [pc, #332]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	4a52      	ldr	r2, [pc, #328]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 8005992:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005996:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005998:	4b50      	ldr	r3, [pc, #320]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	494d      	ldr	r1, [pc, #308]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d040      	beq.n	8005a38 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d107      	bne.n	80059ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059be:	4b47      	ldr	r3, [pc, #284]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d115      	bne.n	80059f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e07f      	b.n	8005ace <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d107      	bne.n	80059e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059d6:	4b41      	ldr	r3, [pc, #260]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d109      	bne.n	80059f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e073      	b.n	8005ace <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059e6:	4b3d      	ldr	r3, [pc, #244]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e06b      	b.n	8005ace <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059f6:	4b39      	ldr	r3, [pc, #228]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f023 0203 	bic.w	r2, r3, #3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	4936      	ldr	r1, [pc, #216]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a08:	f7fe fc38 	bl	800427c <HAL_GetTick>
 8005a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a0e:	e00a      	b.n	8005a26 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a10:	f7fe fc34 	bl	800427c <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e053      	b.n	8005ace <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a26:	4b2d      	ldr	r3, [pc, #180]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 020c 	and.w	r2, r3, #12
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d1eb      	bne.n	8005a10 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a38:	4b27      	ldr	r3, [pc, #156]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 030f 	and.w	r3, r3, #15
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d210      	bcs.n	8005a68 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a46:	4b24      	ldr	r3, [pc, #144]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f023 020f 	bic.w	r2, r3, #15
 8005a4e:	4922      	ldr	r1, [pc, #136]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a56:	4b20      	ldr	r3, [pc, #128]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 030f 	and.w	r3, r3, #15
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d001      	beq.n	8005a68 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e032      	b.n	8005ace <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d008      	beq.n	8005a86 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a74:	4b19      	ldr	r3, [pc, #100]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	4916      	ldr	r1, [pc, #88]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0308 	and.w	r3, r3, #8
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d009      	beq.n	8005aa6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a92:	4b12      	ldr	r3, [pc, #72]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	490e      	ldr	r1, [pc, #56]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005aa6:	f000 f821 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	4b0b      	ldr	r3, [pc, #44]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	091b      	lsrs	r3, r3, #4
 8005ab2:	f003 030f 	and.w	r3, r3, #15
 8005ab6:	490a      	ldr	r1, [pc, #40]	; (8005ae0 <HAL_RCC_ClockConfig+0x1cc>)
 8005ab8:	5ccb      	ldrb	r3, [r1, r3]
 8005aba:	fa22 f303 	lsr.w	r3, r2, r3
 8005abe:	4a09      	ldr	r2, [pc, #36]	; (8005ae4 <HAL_RCC_ClockConfig+0x1d0>)
 8005ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005ac2:	4b09      	ldr	r3, [pc, #36]	; (8005ae8 <HAL_RCC_ClockConfig+0x1d4>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fd fbaa 	bl	8003220 <HAL_InitTick>

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	40023c00 	.word	0x40023c00
 8005adc:	40023800 	.word	0x40023800
 8005ae0:	0801e904 	.word	0x0801e904
 8005ae4:	20000004 	.word	0x20000004
 8005ae8:	20000008 	.word	0x20000008

08005aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005af0:	b094      	sub	sp, #80	; 0x50
 8005af2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005af4:	2300      	movs	r3, #0
 8005af6:	647b      	str	r3, [r7, #68]	; 0x44
 8005af8:	2300      	movs	r3, #0
 8005afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005afc:	2300      	movs	r3, #0
 8005afe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005b00:	2300      	movs	r3, #0
 8005b02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b04:	4b79      	ldr	r3, [pc, #484]	; (8005cec <HAL_RCC_GetSysClockFreq+0x200>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 030c 	and.w	r3, r3, #12
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d00d      	beq.n	8005b2c <HAL_RCC_GetSysClockFreq+0x40>
 8005b10:	2b08      	cmp	r3, #8
 8005b12:	f200 80e1 	bhi.w	8005cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d002      	beq.n	8005b20 <HAL_RCC_GetSysClockFreq+0x34>
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d003      	beq.n	8005b26 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b1e:	e0db      	b.n	8005cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b20:	4b73      	ldr	r3, [pc, #460]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b24:	e0db      	b.n	8005cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b26:	4b73      	ldr	r3, [pc, #460]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005b28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b2a:	e0d8      	b.n	8005cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b2c:	4b6f      	ldr	r3, [pc, #444]	; (8005cec <HAL_RCC_GetSysClockFreq+0x200>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b34:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005b36:	4b6d      	ldr	r3, [pc, #436]	; (8005cec <HAL_RCC_GetSysClockFreq+0x200>)
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d063      	beq.n	8005c0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b42:	4b6a      	ldr	r3, [pc, #424]	; (8005cec <HAL_RCC_GetSysClockFreq+0x200>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	099b      	lsrs	r3, r3, #6
 8005b48:	2200      	movs	r2, #0
 8005b4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b54:	633b      	str	r3, [r7, #48]	; 0x30
 8005b56:	2300      	movs	r3, #0
 8005b58:	637b      	str	r3, [r7, #52]	; 0x34
 8005b5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005b5e:	4622      	mov	r2, r4
 8005b60:	462b      	mov	r3, r5
 8005b62:	f04f 0000 	mov.w	r0, #0
 8005b66:	f04f 0100 	mov.w	r1, #0
 8005b6a:	0159      	lsls	r1, r3, #5
 8005b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b70:	0150      	lsls	r0, r2, #5
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	4621      	mov	r1, r4
 8005b78:	1a51      	subs	r1, r2, r1
 8005b7a:	6139      	str	r1, [r7, #16]
 8005b7c:	4629      	mov	r1, r5
 8005b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	f04f 0200 	mov.w	r2, #0
 8005b88:	f04f 0300 	mov.w	r3, #0
 8005b8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b90:	4659      	mov	r1, fp
 8005b92:	018b      	lsls	r3, r1, #6
 8005b94:	4651      	mov	r1, sl
 8005b96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b9a:	4651      	mov	r1, sl
 8005b9c:	018a      	lsls	r2, r1, #6
 8005b9e:	4651      	mov	r1, sl
 8005ba0:	ebb2 0801 	subs.w	r8, r2, r1
 8005ba4:	4659      	mov	r1, fp
 8005ba6:	eb63 0901 	sbc.w	r9, r3, r1
 8005baa:	f04f 0200 	mov.w	r2, #0
 8005bae:	f04f 0300 	mov.w	r3, #0
 8005bb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bbe:	4690      	mov	r8, r2
 8005bc0:	4699      	mov	r9, r3
 8005bc2:	4623      	mov	r3, r4
 8005bc4:	eb18 0303 	adds.w	r3, r8, r3
 8005bc8:	60bb      	str	r3, [r7, #8]
 8005bca:	462b      	mov	r3, r5
 8005bcc:	eb49 0303 	adc.w	r3, r9, r3
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	f04f 0200 	mov.w	r2, #0
 8005bd6:	f04f 0300 	mov.w	r3, #0
 8005bda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005bde:	4629      	mov	r1, r5
 8005be0:	024b      	lsls	r3, r1, #9
 8005be2:	4621      	mov	r1, r4
 8005be4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005be8:	4621      	mov	r1, r4
 8005bea:	024a      	lsls	r2, r1, #9
 8005bec:	4610      	mov	r0, r2
 8005bee:	4619      	mov	r1, r3
 8005bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bfc:	f7fa fbd8 	bl	80003b0 <__aeabi_uldivmod>
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	4613      	mov	r3, r2
 8005c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c08:	e058      	b.n	8005cbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c0a:	4b38      	ldr	r3, [pc, #224]	; (8005cec <HAL_RCC_GetSysClockFreq+0x200>)
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	099b      	lsrs	r3, r3, #6
 8005c10:	2200      	movs	r2, #0
 8005c12:	4618      	mov	r0, r3
 8005c14:	4611      	mov	r1, r2
 8005c16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c1a:	623b      	str	r3, [r7, #32]
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c24:	4642      	mov	r2, r8
 8005c26:	464b      	mov	r3, r9
 8005c28:	f04f 0000 	mov.w	r0, #0
 8005c2c:	f04f 0100 	mov.w	r1, #0
 8005c30:	0159      	lsls	r1, r3, #5
 8005c32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c36:	0150      	lsls	r0, r2, #5
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4641      	mov	r1, r8
 8005c3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c42:	4649      	mov	r1, r9
 8005c44:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c48:	f04f 0200 	mov.w	r2, #0
 8005c4c:	f04f 0300 	mov.w	r3, #0
 8005c50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c5c:	ebb2 040a 	subs.w	r4, r2, sl
 8005c60:	eb63 050b 	sbc.w	r5, r3, fp
 8005c64:	f04f 0200 	mov.w	r2, #0
 8005c68:	f04f 0300 	mov.w	r3, #0
 8005c6c:	00eb      	lsls	r3, r5, #3
 8005c6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c72:	00e2      	lsls	r2, r4, #3
 8005c74:	4614      	mov	r4, r2
 8005c76:	461d      	mov	r5, r3
 8005c78:	4643      	mov	r3, r8
 8005c7a:	18e3      	adds	r3, r4, r3
 8005c7c:	603b      	str	r3, [r7, #0]
 8005c7e:	464b      	mov	r3, r9
 8005c80:	eb45 0303 	adc.w	r3, r5, r3
 8005c84:	607b      	str	r3, [r7, #4]
 8005c86:	f04f 0200 	mov.w	r2, #0
 8005c8a:	f04f 0300 	mov.w	r3, #0
 8005c8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c92:	4629      	mov	r1, r5
 8005c94:	028b      	lsls	r3, r1, #10
 8005c96:	4621      	mov	r1, r4
 8005c98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	028a      	lsls	r2, r1, #10
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	61bb      	str	r3, [r7, #24]
 8005caa:	61fa      	str	r2, [r7, #28]
 8005cac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cb0:	f7fa fb7e 	bl	80003b0 <__aeabi_uldivmod>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4613      	mov	r3, r2
 8005cba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005cbc:	4b0b      	ldr	r3, [pc, #44]	; (8005cec <HAL_RCC_GetSysClockFreq+0x200>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	0c1b      	lsrs	r3, r3, #16
 8005cc2:	f003 0303 	and.w	r3, r3, #3
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005ccc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cd6:	e002      	b.n	8005cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005cd8:	4b05      	ldr	r3, [pc, #20]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005cda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3750      	adds	r7, #80	; 0x50
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cea:	bf00      	nop
 8005cec:	40023800 	.word	0x40023800
 8005cf0:	00f42400 	.word	0x00f42400
 8005cf4:	007a1200 	.word	0x007a1200

08005cf8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cfc:	4b03      	ldr	r3, [pc, #12]	; (8005d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	20000004 	.word	0x20000004

08005d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d14:	f7ff fff0 	bl	8005cf8 <HAL_RCC_GetHCLKFreq>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	4b05      	ldr	r3, [pc, #20]	; (8005d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	0a9b      	lsrs	r3, r3, #10
 8005d20:	f003 0307 	and.w	r3, r3, #7
 8005d24:	4903      	ldr	r1, [pc, #12]	; (8005d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d26:	5ccb      	ldrb	r3, [r1, r3]
 8005d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40023800 	.word	0x40023800
 8005d34:	0801e914 	.word	0x0801e914

08005d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d3c:	f7ff ffdc 	bl	8005cf8 <HAL_RCC_GetHCLKFreq>
 8005d40:	4602      	mov	r2, r0
 8005d42:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	0b5b      	lsrs	r3, r3, #13
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	4903      	ldr	r1, [pc, #12]	; (8005d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d4e:	5ccb      	ldrb	r3, [r1, r3]
 8005d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	40023800 	.word	0x40023800
 8005d5c:	0801e914 	.word	0x0801e914

08005d60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	220f      	movs	r2, #15
 8005d6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d70:	4b12      	ldr	r3, [pc, #72]	; (8005dbc <HAL_RCC_GetClockConfig+0x5c>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f003 0203 	and.w	r2, r3, #3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005d7c:	4b0f      	ldr	r3, [pc, #60]	; (8005dbc <HAL_RCC_GetClockConfig+0x5c>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005d88:	4b0c      	ldr	r3, [pc, #48]	; (8005dbc <HAL_RCC_GetClockConfig+0x5c>)
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005d94:	4b09      	ldr	r3, [pc, #36]	; (8005dbc <HAL_RCC_GetClockConfig+0x5c>)
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	08db      	lsrs	r3, r3, #3
 8005d9a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005da2:	4b07      	ldr	r3, [pc, #28]	; (8005dc0 <HAL_RCC_GetClockConfig+0x60>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 020f 	and.w	r2, r3, #15
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	601a      	str	r2, [r3, #0]
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	40023800 	.word	0x40023800
 8005dc0:	40023c00 	.word	0x40023c00

08005dc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b088      	sub	sp, #32
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d012      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005dec:	4b69      	ldr	r3, [pc, #420]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	4a68      	ldr	r2, [pc, #416]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005df2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005df6:	6093      	str	r3, [r2, #8]
 8005df8:	4b66      	ldr	r3, [pc, #408]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e00:	4964      	ldr	r1, [pc, #400]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d017      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e1e:	4b5d      	ldr	r3, [pc, #372]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e2c:	4959      	ldr	r1, [pc, #356]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e3c:	d101      	bne.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d017      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e5a:	4b4e      	ldr	r3, [pc, #312]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e68:	494a      	ldr	r1, [pc, #296]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e78:	d101      	bne.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005e86:	2301      	movs	r3, #1
 8005e88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005e96:	2301      	movs	r3, #1
 8005e98:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0320 	and.w	r3, r3, #32
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f000 808b 	beq.w	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ea8:	4b3a      	ldr	r3, [pc, #232]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eac:	4a39      	ldr	r2, [pc, #228]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8005eb4:	4b37      	ldr	r3, [pc, #220]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ebc:	60bb      	str	r3, [r7, #8]
 8005ebe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ec0:	4b35      	ldr	r3, [pc, #212]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a34      	ldr	r2, [pc, #208]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ecc:	f7fe f9d6 	bl	800427c <HAL_GetTick>
 8005ed0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005ed2:	e008      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ed4:	f7fe f9d2 	bl	800427c <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	2b64      	cmp	r3, #100	; 0x64
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e38f      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005ee6:	4b2c      	ldr	r3, [pc, #176]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d0f0      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ef2:	4b28      	ldr	r3, [pc, #160]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005efa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d035      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d02e      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f10:	4b20      	ldr	r3, [pc, #128]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f18:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f1a:	4b1e      	ldr	r3, [pc, #120]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1e:	4a1d      	ldr	r2, [pc, #116]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f24:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f26:	4b1b      	ldr	r3, [pc, #108]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2a:	4a1a      	ldr	r2, [pc, #104]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005f32:	4a18      	ldr	r2, [pc, #96]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f38:	4b16      	ldr	r3, [pc, #88]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3c:	f003 0301 	and.w	r3, r3, #1
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d114      	bne.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f44:	f7fe f99a 	bl	800427c <HAL_GetTick>
 8005f48:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f4a:	e00a      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f4c:	f7fe f996 	bl	800427c <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e351      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f62:	4b0c      	ldr	r3, [pc, #48]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d0ee      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f7a:	d111      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005f7c:	4b05      	ldr	r3, [pc, #20]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005f88:	4b04      	ldr	r3, [pc, #16]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005f8a:	400b      	ands	r3, r1
 8005f8c:	4901      	ldr	r1, [pc, #4]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	608b      	str	r3, [r1, #8]
 8005f92:	e00b      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005f94:	40023800 	.word	0x40023800
 8005f98:	40007000 	.word	0x40007000
 8005f9c:	0ffffcff 	.word	0x0ffffcff
 8005fa0:	4bac      	ldr	r3, [pc, #688]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	4aab      	ldr	r2, [pc, #684]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fa6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005faa:	6093      	str	r3, [r2, #8]
 8005fac:	4ba9      	ldr	r3, [pc, #676]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fb8:	49a6      	ldr	r1, [pc, #664]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0310 	and.w	r3, r3, #16
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d010      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005fca:	4ba2      	ldr	r3, [pc, #648]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fd0:	4aa0      	ldr	r2, [pc, #640]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fd6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005fda:	4b9e      	ldr	r3, [pc, #632]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fdc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe4:	499b      	ldr	r1, [pc, #620]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00a      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ff8:	4b96      	ldr	r3, [pc, #600]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ffe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006006:	4993      	ldr	r1, [pc, #588]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006008:	4313      	orrs	r3, r2
 800600a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00a      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800601a:	4b8e      	ldr	r3, [pc, #568]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800601c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006020:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006028:	498a      	ldr	r1, [pc, #552]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800602a:	4313      	orrs	r3, r2
 800602c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00a      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800603c:	4b85      	ldr	r3, [pc, #532]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800603e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006042:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800604a:	4982      	ldr	r1, [pc, #520]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800604c:	4313      	orrs	r3, r2
 800604e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00a      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800605e:	4b7d      	ldr	r3, [pc, #500]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006064:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606c:	4979      	ldr	r1, [pc, #484]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800606e:	4313      	orrs	r3, r2
 8006070:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00a      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006080:	4b74      	ldr	r3, [pc, #464]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006086:	f023 0203 	bic.w	r2, r3, #3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800608e:	4971      	ldr	r1, [pc, #452]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006090:	4313      	orrs	r3, r2
 8006092:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00a      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060a2:	4b6c      	ldr	r3, [pc, #432]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a8:	f023 020c 	bic.w	r2, r3, #12
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060b0:	4968      	ldr	r1, [pc, #416]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00a      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80060c4:	4b63      	ldr	r3, [pc, #396]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060d2:	4960      	ldr	r1, [pc, #384]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80060e6:	4b5b      	ldr	r3, [pc, #364]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f4:	4957      	ldr	r1, [pc, #348]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00a      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006108:	4b52      	ldr	r3, [pc, #328]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800610a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800610e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006116:	494f      	ldr	r1, [pc, #316]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006118:	4313      	orrs	r3, r2
 800611a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800612a:	4b4a      	ldr	r3, [pc, #296]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800612c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006130:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006138:	4946      	ldr	r1, [pc, #280]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800613a:	4313      	orrs	r3, r2
 800613c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800614c:	4b41      	ldr	r3, [pc, #260]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800614e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006152:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800615a:	493e      	ldr	r1, [pc, #248]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800615c:	4313      	orrs	r3, r2
 800615e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800616e:	4b39      	ldr	r3, [pc, #228]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006174:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800617c:	4935      	ldr	r1, [pc, #212]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800617e:	4313      	orrs	r3, r2
 8006180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006190:	4b30      	ldr	r3, [pc, #192]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006196:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800619e:	492d      	ldr	r1, [pc, #180]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d011      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80061b2:	4b28      	ldr	r3, [pc, #160]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061c0:	4924      	ldr	r1, [pc, #144]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061d0:	d101      	bne.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80061d2:	2301      	movs	r3, #1
 80061d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0308 	and.w	r3, r3, #8
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80061e2:	2301      	movs	r3, #1
 80061e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061f2:	4b18      	ldr	r3, [pc, #96]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006200:	4914      	ldr	r1, [pc, #80]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006202:	4313      	orrs	r3, r2
 8006204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00b      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006214:	4b0f      	ldr	r3, [pc, #60]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006224:	490b      	ldr	r1, [pc, #44]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006226:	4313      	orrs	r3, r2
 8006228:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00f      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006238:	4b06      	ldr	r3, [pc, #24]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800623a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800623e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006248:	4902      	ldr	r1, [pc, #8]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800624a:	4313      	orrs	r3, r2
 800624c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006250:	e002      	b.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006252:	bf00      	nop
 8006254:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00b      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006264:	4b8a      	ldr	r3, [pc, #552]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006266:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800626a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006274:	4986      	ldr	r1, [pc, #536]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006276:	4313      	orrs	r3, r2
 8006278:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00b      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006288:	4b81      	ldr	r3, [pc, #516]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800628a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800628e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006298:	497d      	ldr	r1, [pc, #500]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800629a:	4313      	orrs	r3, r2
 800629c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d006      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 80d6 	beq.w	8006460 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80062b4:	4b76      	ldr	r3, [pc, #472]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a75      	ldr	r2, [pc, #468]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062c0:	f7fd ffdc 	bl	800427c <HAL_GetTick>
 80062c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062c6:	e008      	b.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80062c8:	f7fd ffd8 	bl	800427c <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b64      	cmp	r3, #100	; 0x64
 80062d4:	d901      	bls.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e195      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062da:	4b6d      	ldr	r3, [pc, #436]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1f0      	bne.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d021      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d11d      	bne.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80062fa:	4b65      	ldr	r3, [pc, #404]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006300:	0c1b      	lsrs	r3, r3, #16
 8006302:	f003 0303 	and.w	r3, r3, #3
 8006306:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006308:	4b61      	ldr	r3, [pc, #388]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800630a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800630e:	0e1b      	lsrs	r3, r3, #24
 8006310:	f003 030f 	and.w	r3, r3, #15
 8006314:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	019a      	lsls	r2, r3, #6
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	041b      	lsls	r3, r3, #16
 8006320:	431a      	orrs	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	061b      	lsls	r3, r3, #24
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	071b      	lsls	r3, r3, #28
 800632e:	4958      	ldr	r1, [pc, #352]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006330:	4313      	orrs	r3, r2
 8006332:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d004      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800634a:	d00a      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006354:	2b00      	cmp	r3, #0
 8006356:	d02e      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006360:	d129      	bne.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006362:	4b4b      	ldr	r3, [pc, #300]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006368:	0c1b      	lsrs	r3, r3, #16
 800636a:	f003 0303 	and.w	r3, r3, #3
 800636e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006370:	4b47      	ldr	r3, [pc, #284]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006376:	0f1b      	lsrs	r3, r3, #28
 8006378:	f003 0307 	and.w	r3, r3, #7
 800637c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	019a      	lsls	r2, r3, #6
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	041b      	lsls	r3, r3, #16
 8006388:	431a      	orrs	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	061b      	lsls	r3, r3, #24
 8006390:	431a      	orrs	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	071b      	lsls	r3, r3, #28
 8006396:	493e      	ldr	r1, [pc, #248]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006398:	4313      	orrs	r3, r2
 800639a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800639e:	4b3c      	ldr	r3, [pc, #240]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063a4:	f023 021f 	bic.w	r2, r3, #31
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ac:	3b01      	subs	r3, #1
 80063ae:	4938      	ldr	r1, [pc, #224]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d01d      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80063c2:	4b33      	ldr	r3, [pc, #204]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063c8:	0e1b      	lsrs	r3, r3, #24
 80063ca:	f003 030f 	and.w	r3, r3, #15
 80063ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80063d0:	4b2f      	ldr	r3, [pc, #188]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063d6:	0f1b      	lsrs	r3, r3, #28
 80063d8:	f003 0307 	and.w	r3, r3, #7
 80063dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	019a      	lsls	r2, r3, #6
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	041b      	lsls	r3, r3, #16
 80063ea:	431a      	orrs	r2, r3
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	061b      	lsls	r3, r3, #24
 80063f0:	431a      	orrs	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	071b      	lsls	r3, r3, #28
 80063f6:	4926      	ldr	r1, [pc, #152]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d011      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	019a      	lsls	r2, r3, #6
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	041b      	lsls	r3, r3, #16
 8006416:	431a      	orrs	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	061b      	lsls	r3, r3, #24
 800641e:	431a      	orrs	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	071b      	lsls	r3, r3, #28
 8006426:	491a      	ldr	r1, [pc, #104]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006428:	4313      	orrs	r3, r2
 800642a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800642e:	4b18      	ldr	r3, [pc, #96]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a17      	ldr	r2, [pc, #92]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006434:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006438:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800643a:	f7fd ff1f 	bl	800427c <HAL_GetTick>
 800643e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006440:	e008      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006442:	f7fd ff1b 	bl	800427c <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	2b64      	cmp	r3, #100	; 0x64
 800644e:	d901      	bls.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e0d8      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006454:	4b0e      	ldr	r3, [pc, #56]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d0f0      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	2b01      	cmp	r3, #1
 8006464:	f040 80ce 	bne.w	8006604 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006468:	4b09      	ldr	r3, [pc, #36]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a08      	ldr	r2, [pc, #32]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800646e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006472:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006474:	f7fd ff02 	bl	800427c <HAL_GetTick>
 8006478:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800647a:	e00b      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800647c:	f7fd fefe 	bl	800427c <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2b64      	cmp	r3, #100	; 0x64
 8006488:	d904      	bls.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e0bb      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800648e:	bf00      	nop
 8006490:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006494:	4b5e      	ldr	r3, [pc, #376]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800649c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064a0:	d0ec      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d009      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d02e      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d12a      	bne.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80064ca:	4b51      	ldr	r3, [pc, #324]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d0:	0c1b      	lsrs	r3, r3, #16
 80064d2:	f003 0303 	and.w	r3, r3, #3
 80064d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80064d8:	4b4d      	ldr	r3, [pc, #308]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064de:	0f1b      	lsrs	r3, r3, #28
 80064e0:	f003 0307 	and.w	r3, r3, #7
 80064e4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	019a      	lsls	r2, r3, #6
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	041b      	lsls	r3, r3, #16
 80064f0:	431a      	orrs	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	061b      	lsls	r3, r3, #24
 80064f8:	431a      	orrs	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	071b      	lsls	r3, r3, #28
 80064fe:	4944      	ldr	r1, [pc, #272]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006500:	4313      	orrs	r3, r2
 8006502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006506:	4b42      	ldr	r3, [pc, #264]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800650c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006514:	3b01      	subs	r3, #1
 8006516:	021b      	lsls	r3, r3, #8
 8006518:	493d      	ldr	r1, [pc, #244]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800651a:	4313      	orrs	r3, r2
 800651c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d022      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006530:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006534:	d11d      	bne.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006536:	4b36      	ldr	r3, [pc, #216]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800653c:	0e1b      	lsrs	r3, r3, #24
 800653e:	f003 030f 	and.w	r3, r3, #15
 8006542:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006544:	4b32      	ldr	r3, [pc, #200]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654a:	0f1b      	lsrs	r3, r3, #28
 800654c:	f003 0307 	and.w	r3, r3, #7
 8006550:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	019a      	lsls	r2, r3, #6
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a1b      	ldr	r3, [r3, #32]
 800655c:	041b      	lsls	r3, r3, #16
 800655e:	431a      	orrs	r2, r3
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	061b      	lsls	r3, r3, #24
 8006564:	431a      	orrs	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	071b      	lsls	r3, r3, #28
 800656a:	4929      	ldr	r1, [pc, #164]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800656c:	4313      	orrs	r3, r2
 800656e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0308 	and.w	r3, r3, #8
 800657a:	2b00      	cmp	r3, #0
 800657c:	d028      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800657e:	4b24      	ldr	r3, [pc, #144]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006584:	0e1b      	lsrs	r3, r3, #24
 8006586:	f003 030f 	and.w	r3, r3, #15
 800658a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800658c:	4b20      	ldr	r3, [pc, #128]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800658e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006592:	0c1b      	lsrs	r3, r3, #16
 8006594:	f003 0303 	and.w	r3, r3, #3
 8006598:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	019a      	lsls	r2, r3, #6
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	041b      	lsls	r3, r3, #16
 80065a4:	431a      	orrs	r2, r3
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	061b      	lsls	r3, r3, #24
 80065aa:	431a      	orrs	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	69db      	ldr	r3, [r3, #28]
 80065b0:	071b      	lsls	r3, r3, #28
 80065b2:	4917      	ldr	r1, [pc, #92]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80065ba:	4b15      	ldr	r3, [pc, #84]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c8:	4911      	ldr	r1, [pc, #68]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80065d0:	4b0f      	ldr	r3, [pc, #60]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a0e      	ldr	r2, [pc, #56]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065dc:	f7fd fe4e 	bl	800427c <HAL_GetTick>
 80065e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065e2:	e008      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80065e4:	f7fd fe4a 	bl	800427c <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b64      	cmp	r3, #100	; 0x64
 80065f0:	d901      	bls.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e007      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065f6:	4b06      	ldr	r3, [pc, #24]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006602:	d1ef      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3720      	adds	r7, #32
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	40023800 	.word	0x40023800

08006614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e049      	b.n	80066ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d106      	bne.n	8006640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7fd fa50 	bl	8003ae0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	3304      	adds	r3, #4
 8006650:	4619      	mov	r1, r3
 8006652:	4610      	mov	r0, r2
 8006654:	f000 fe5a 	bl	800730c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
	...

080066c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d001      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e054      	b.n	8006786 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2202      	movs	r2, #2
 80066e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0201 	orr.w	r2, r2, #1
 80066f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a26      	ldr	r2, [pc, #152]	; (8006794 <HAL_TIM_Base_Start_IT+0xd0>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d022      	beq.n	8006744 <HAL_TIM_Base_Start_IT+0x80>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006706:	d01d      	beq.n	8006744 <HAL_TIM_Base_Start_IT+0x80>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a22      	ldr	r2, [pc, #136]	; (8006798 <HAL_TIM_Base_Start_IT+0xd4>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d018      	beq.n	8006744 <HAL_TIM_Base_Start_IT+0x80>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a21      	ldr	r2, [pc, #132]	; (800679c <HAL_TIM_Base_Start_IT+0xd8>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d013      	beq.n	8006744 <HAL_TIM_Base_Start_IT+0x80>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a1f      	ldr	r2, [pc, #124]	; (80067a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d00e      	beq.n	8006744 <HAL_TIM_Base_Start_IT+0x80>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a1e      	ldr	r2, [pc, #120]	; (80067a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d009      	beq.n	8006744 <HAL_TIM_Base_Start_IT+0x80>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a1c      	ldr	r2, [pc, #112]	; (80067a8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d004      	beq.n	8006744 <HAL_TIM_Base_Start_IT+0x80>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a1b      	ldr	r2, [pc, #108]	; (80067ac <HAL_TIM_Base_Start_IT+0xe8>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d115      	bne.n	8006770 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689a      	ldr	r2, [r3, #8]
 800674a:	4b19      	ldr	r3, [pc, #100]	; (80067b0 <HAL_TIM_Base_Start_IT+0xec>)
 800674c:	4013      	ands	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2b06      	cmp	r3, #6
 8006754:	d015      	beq.n	8006782 <HAL_TIM_Base_Start_IT+0xbe>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800675c:	d011      	beq.n	8006782 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f042 0201 	orr.w	r2, r2, #1
 800676c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800676e:	e008      	b.n	8006782 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0201 	orr.w	r2, r2, #1
 800677e:	601a      	str	r2, [r3, #0]
 8006780:	e000      	b.n	8006784 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006782:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	40010000 	.word	0x40010000
 8006798:	40000400 	.word	0x40000400
 800679c:	40000800 	.word	0x40000800
 80067a0:	40000c00 	.word	0x40000c00
 80067a4:	40010400 	.word	0x40010400
 80067a8:	40014000 	.word	0x40014000
 80067ac:	40001800 	.word	0x40001800
 80067b0:	00010007 	.word	0x00010007

080067b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e049      	b.n	800685a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d106      	bne.n	80067e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7fd fae0 	bl	8003da0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	3304      	adds	r3, #4
 80067f0:	4619      	mov	r1, r3
 80067f2:	4610      	mov	r0, r2
 80067f4:	f000 fd8a 	bl	800730c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
	...

08006864 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d109      	bne.n	8006888 <HAL_TIM_PWM_Start+0x24>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b01      	cmp	r3, #1
 800687e:	bf14      	ite	ne
 8006880:	2301      	movne	r3, #1
 8006882:	2300      	moveq	r3, #0
 8006884:	b2db      	uxtb	r3, r3
 8006886:	e03c      	b.n	8006902 <HAL_TIM_PWM_Start+0x9e>
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2b04      	cmp	r3, #4
 800688c:	d109      	bne.n	80068a2 <HAL_TIM_PWM_Start+0x3e>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b01      	cmp	r3, #1
 8006898:	bf14      	ite	ne
 800689a:	2301      	movne	r3, #1
 800689c:	2300      	moveq	r3, #0
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	e02f      	b.n	8006902 <HAL_TIM_PWM_Start+0x9e>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d109      	bne.n	80068bc <HAL_TIM_PWM_Start+0x58>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	bf14      	ite	ne
 80068b4:	2301      	movne	r3, #1
 80068b6:	2300      	moveq	r3, #0
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	e022      	b.n	8006902 <HAL_TIM_PWM_Start+0x9e>
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	2b0c      	cmp	r3, #12
 80068c0:	d109      	bne.n	80068d6 <HAL_TIM_PWM_Start+0x72>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	bf14      	ite	ne
 80068ce:	2301      	movne	r3, #1
 80068d0:	2300      	moveq	r3, #0
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	e015      	b.n	8006902 <HAL_TIM_PWM_Start+0x9e>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b10      	cmp	r3, #16
 80068da:	d109      	bne.n	80068f0 <HAL_TIM_PWM_Start+0x8c>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	bf14      	ite	ne
 80068e8:	2301      	movne	r3, #1
 80068ea:	2300      	moveq	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	e008      	b.n	8006902 <HAL_TIM_PWM_Start+0x9e>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	bf14      	ite	ne
 80068fc:	2301      	movne	r3, #1
 80068fe:	2300      	moveq	r3, #0
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e092      	b.n	8006a30 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d104      	bne.n	800691a <HAL_TIM_PWM_Start+0xb6>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2202      	movs	r2, #2
 8006914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006918:	e023      	b.n	8006962 <HAL_TIM_PWM_Start+0xfe>
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b04      	cmp	r3, #4
 800691e:	d104      	bne.n	800692a <HAL_TIM_PWM_Start+0xc6>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2202      	movs	r2, #2
 8006924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006928:	e01b      	b.n	8006962 <HAL_TIM_PWM_Start+0xfe>
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b08      	cmp	r3, #8
 800692e:	d104      	bne.n	800693a <HAL_TIM_PWM_Start+0xd6>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006938:	e013      	b.n	8006962 <HAL_TIM_PWM_Start+0xfe>
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b0c      	cmp	r3, #12
 800693e:	d104      	bne.n	800694a <HAL_TIM_PWM_Start+0xe6>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006948:	e00b      	b.n	8006962 <HAL_TIM_PWM_Start+0xfe>
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b10      	cmp	r3, #16
 800694e:	d104      	bne.n	800695a <HAL_TIM_PWM_Start+0xf6>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006958:	e003      	b.n	8006962 <HAL_TIM_PWM_Start+0xfe>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2202      	movs	r2, #2
 800695e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2201      	movs	r2, #1
 8006968:	6839      	ldr	r1, [r7, #0]
 800696a:	4618      	mov	r0, r3
 800696c:	f001 f866 	bl	8007a3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a30      	ldr	r2, [pc, #192]	; (8006a38 <HAL_TIM_PWM_Start+0x1d4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d004      	beq.n	8006984 <HAL_TIM_PWM_Start+0x120>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a2f      	ldr	r2, [pc, #188]	; (8006a3c <HAL_TIM_PWM_Start+0x1d8>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d101      	bne.n	8006988 <HAL_TIM_PWM_Start+0x124>
 8006984:	2301      	movs	r3, #1
 8006986:	e000      	b.n	800698a <HAL_TIM_PWM_Start+0x126>
 8006988:	2300      	movs	r3, #0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d007      	beq.n	800699e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800699c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a25      	ldr	r2, [pc, #148]	; (8006a38 <HAL_TIM_PWM_Start+0x1d4>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d022      	beq.n	80069ee <HAL_TIM_PWM_Start+0x18a>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069b0:	d01d      	beq.n	80069ee <HAL_TIM_PWM_Start+0x18a>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a22      	ldr	r2, [pc, #136]	; (8006a40 <HAL_TIM_PWM_Start+0x1dc>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d018      	beq.n	80069ee <HAL_TIM_PWM_Start+0x18a>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a20      	ldr	r2, [pc, #128]	; (8006a44 <HAL_TIM_PWM_Start+0x1e0>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d013      	beq.n	80069ee <HAL_TIM_PWM_Start+0x18a>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a1f      	ldr	r2, [pc, #124]	; (8006a48 <HAL_TIM_PWM_Start+0x1e4>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d00e      	beq.n	80069ee <HAL_TIM_PWM_Start+0x18a>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a19      	ldr	r2, [pc, #100]	; (8006a3c <HAL_TIM_PWM_Start+0x1d8>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d009      	beq.n	80069ee <HAL_TIM_PWM_Start+0x18a>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a1b      	ldr	r2, [pc, #108]	; (8006a4c <HAL_TIM_PWM_Start+0x1e8>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d004      	beq.n	80069ee <HAL_TIM_PWM_Start+0x18a>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a19      	ldr	r2, [pc, #100]	; (8006a50 <HAL_TIM_PWM_Start+0x1ec>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d115      	bne.n	8006a1a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	689a      	ldr	r2, [r3, #8]
 80069f4:	4b17      	ldr	r3, [pc, #92]	; (8006a54 <HAL_TIM_PWM_Start+0x1f0>)
 80069f6:	4013      	ands	r3, r2
 80069f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2b06      	cmp	r3, #6
 80069fe:	d015      	beq.n	8006a2c <HAL_TIM_PWM_Start+0x1c8>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a06:	d011      	beq.n	8006a2c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0201 	orr.w	r2, r2, #1
 8006a16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a18:	e008      	b.n	8006a2c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f042 0201 	orr.w	r2, r2, #1
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	e000      	b.n	8006a2e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	40010000 	.word	0x40010000
 8006a3c:	40010400 	.word	0x40010400
 8006a40:	40000400 	.word	0x40000400
 8006a44:	40000800 	.word	0x40000800
 8006a48:	40000c00 	.word	0x40000c00
 8006a4c:	40014000 	.word	0x40014000
 8006a50:	40001800 	.word	0x40001800
 8006a54:	00010007 	.word	0x00010007

08006a58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e08f      	b.n	8006b8c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d106      	bne.n	8006a86 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7fd f84d 	bl	8003b20 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2202      	movs	r2, #2
 8006a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	6899      	ldr	r1, [r3, #8]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	4b3e      	ldr	r3, [pc, #248]	; (8006b94 <HAL_TIM_Encoder_Init+0x13c>)
 8006a9a:	400b      	ands	r3, r1
 8006a9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	f000 fc2f 	bl	800730c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6a1b      	ldr	r3, [r3, #32]
 8006ac4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	4b31      	ldr	r3, [pc, #196]	; (8006b98 <HAL_TIM_Encoder_Init+0x140>)
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	021b      	lsls	r3, r3, #8
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	4b2b      	ldr	r3, [pc, #172]	; (8006b9c <HAL_TIM_Encoder_Init+0x144>)
 8006aee:	4013      	ands	r3, r2
 8006af0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	4b2a      	ldr	r3, [pc, #168]	; (8006ba0 <HAL_TIM_Encoder_Init+0x148>)
 8006af6:	4013      	ands	r3, r2
 8006af8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	68da      	ldr	r2, [r3, #12]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	021b      	lsls	r3, r3, #8
 8006b04:	4313      	orrs	r3, r2
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	011a      	lsls	r2, r3, #4
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	031b      	lsls	r3, r3, #12
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006b26:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006b2e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	011b      	lsls	r3, r3, #4
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3718      	adds	r7, #24
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	fffebff8 	.word	0xfffebff8
 8006b98:	fffffcfc 	.word	0xfffffcfc
 8006b9c:	fffff3f3 	.word	0xfffff3f3
 8006ba0:	ffff0f0f 	.word	0xffff0f0f

08006ba4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bb4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006bbc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bc4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bcc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d110      	bne.n	8006bf6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d102      	bne.n	8006be0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bda:	7b7b      	ldrb	r3, [r7, #13]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d001      	beq.n	8006be4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e069      	b.n	8006cb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2202      	movs	r2, #2
 8006bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bf4:	e031      	b.n	8006c5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	2b04      	cmp	r3, #4
 8006bfa:	d110      	bne.n	8006c1e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bfc:	7bbb      	ldrb	r3, [r7, #14]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d102      	bne.n	8006c08 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c02:	7b3b      	ldrb	r3, [r7, #12]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d001      	beq.n	8006c0c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e055      	b.n	8006cb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2202      	movs	r2, #2
 8006c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c1c:	e01d      	b.n	8006c5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d108      	bne.n	8006c36 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c24:	7bbb      	ldrb	r3, [r7, #14]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d105      	bne.n	8006c36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c2a:	7b7b      	ldrb	r3, [r7, #13]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d102      	bne.n	8006c36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c30:	7b3b      	ldrb	r3, [r7, #12]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d001      	beq.n	8006c3a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e03e      	b.n	8006cb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2202      	movs	r2, #2
 8006c46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2202      	movs	r2, #2
 8006c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d003      	beq.n	8006c68 <HAL_TIM_Encoder_Start+0xc4>
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	d008      	beq.n	8006c78 <HAL_TIM_Encoder_Start+0xd4>
 8006c66:	e00f      	b.n	8006c88 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	2100      	movs	r1, #0
 8006c70:	4618      	mov	r0, r3
 8006c72:	f000 fee3 	bl	8007a3c <TIM_CCxChannelCmd>
      break;
 8006c76:	e016      	b.n	8006ca6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	2104      	movs	r1, #4
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 fedb 	bl	8007a3c <TIM_CCxChannelCmd>
      break;
 8006c86:	e00e      	b.n	8006ca6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	2100      	movs	r1, #0
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 fed3 	bl	8007a3c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	2104      	movs	r1, #4
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fecc 	bl	8007a3c <TIM_CCxChannelCmd>
      break;
 8006ca4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f042 0201 	orr.w	r2, r2, #1
 8006cb4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d122      	bne.n	8006d1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f003 0302 	and.w	r3, r3, #2
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d11b      	bne.n	8006d1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f06f 0202 	mvn.w	r2, #2
 8006cec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	f003 0303 	and.w	r3, r3, #3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d003      	beq.n	8006d0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fae4 	bl	80072d0 <HAL_TIM_IC_CaptureCallback>
 8006d08:	e005      	b.n	8006d16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fad6 	bl	80072bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fae7 	bl	80072e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	f003 0304 	and.w	r3, r3, #4
 8006d26:	2b04      	cmp	r3, #4
 8006d28:	d122      	bne.n	8006d70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	f003 0304 	and.w	r3, r3, #4
 8006d34:	2b04      	cmp	r3, #4
 8006d36:	d11b      	bne.n	8006d70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f06f 0204 	mvn.w	r2, #4
 8006d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2202      	movs	r2, #2
 8006d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 faba 	bl	80072d0 <HAL_TIM_IC_CaptureCallback>
 8006d5c:	e005      	b.n	8006d6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 faac 	bl	80072bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fabd 	bl	80072e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	f003 0308 	and.w	r3, r3, #8
 8006d7a:	2b08      	cmp	r3, #8
 8006d7c:	d122      	bne.n	8006dc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f003 0308 	and.w	r3, r3, #8
 8006d88:	2b08      	cmp	r3, #8
 8006d8a:	d11b      	bne.n	8006dc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f06f 0208 	mvn.w	r2, #8
 8006d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2204      	movs	r2, #4
 8006d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	69db      	ldr	r3, [r3, #28]
 8006da2:	f003 0303 	and.w	r3, r3, #3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fa90 	bl	80072d0 <HAL_TIM_IC_CaptureCallback>
 8006db0:	e005      	b.n	8006dbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fa82 	bl	80072bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fa93 	bl	80072e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	f003 0310 	and.w	r3, r3, #16
 8006dce:	2b10      	cmp	r3, #16
 8006dd0:	d122      	bne.n	8006e18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f003 0310 	and.w	r3, r3, #16
 8006ddc:	2b10      	cmp	r3, #16
 8006dde:	d11b      	bne.n	8006e18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f06f 0210 	mvn.w	r2, #16
 8006de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2208      	movs	r2, #8
 8006dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fa66 	bl	80072d0 <HAL_TIM_IC_CaptureCallback>
 8006e04:	e005      	b.n	8006e12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 fa58 	bl	80072bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fa69 	bl	80072e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d10e      	bne.n	8006e44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d107      	bne.n	8006e44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f06f 0201 	mvn.w	r2, #1
 8006e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7fc f84a 	bl	8002ed8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e4e:	2b80      	cmp	r3, #128	; 0x80
 8006e50:	d10e      	bne.n	8006e70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e5c:	2b80      	cmp	r3, #128	; 0x80
 8006e5e:	d107      	bne.n	8006e70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 ff22 	bl	8007cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e7e:	d10e      	bne.n	8006e9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e8a:	2b80      	cmp	r3, #128	; 0x80
 8006e8c:	d107      	bne.n	8006e9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 ff15 	bl	8007cc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea8:	2b40      	cmp	r3, #64	; 0x40
 8006eaa:	d10e      	bne.n	8006eca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb6:	2b40      	cmp	r3, #64	; 0x40
 8006eb8:	d107      	bne.n	8006eca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fa17 	bl	80072f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	f003 0320 	and.w	r3, r3, #32
 8006ed4:	2b20      	cmp	r3, #32
 8006ed6:	d10e      	bne.n	8006ef6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	f003 0320 	and.w	r3, r3, #32
 8006ee2:	2b20      	cmp	r3, #32
 8006ee4:	d107      	bne.n	8006ef6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f06f 0220 	mvn.w	r2, #32
 8006eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fed5 	bl	8007ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ef6:	bf00      	nop
 8006ef8:	3708      	adds	r7, #8
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
	...

08006f00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d101      	bne.n	8006f1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f1a:	2302      	movs	r3, #2
 8006f1c:	e0ff      	b.n	800711e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2b14      	cmp	r3, #20
 8006f2a:	f200 80f0 	bhi.w	800710e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006f2e:	a201      	add	r2, pc, #4	; (adr r2, 8006f34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f34:	08006f89 	.word	0x08006f89
 8006f38:	0800710f 	.word	0x0800710f
 8006f3c:	0800710f 	.word	0x0800710f
 8006f40:	0800710f 	.word	0x0800710f
 8006f44:	08006fc9 	.word	0x08006fc9
 8006f48:	0800710f 	.word	0x0800710f
 8006f4c:	0800710f 	.word	0x0800710f
 8006f50:	0800710f 	.word	0x0800710f
 8006f54:	0800700b 	.word	0x0800700b
 8006f58:	0800710f 	.word	0x0800710f
 8006f5c:	0800710f 	.word	0x0800710f
 8006f60:	0800710f 	.word	0x0800710f
 8006f64:	0800704b 	.word	0x0800704b
 8006f68:	0800710f 	.word	0x0800710f
 8006f6c:	0800710f 	.word	0x0800710f
 8006f70:	0800710f 	.word	0x0800710f
 8006f74:	0800708d 	.word	0x0800708d
 8006f78:	0800710f 	.word	0x0800710f
 8006f7c:	0800710f 	.word	0x0800710f
 8006f80:	0800710f 	.word	0x0800710f
 8006f84:	080070cd 	.word	0x080070cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68b9      	ldr	r1, [r7, #8]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 fa5c 	bl	800744c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	699a      	ldr	r2, [r3, #24]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0208 	orr.w	r2, r2, #8
 8006fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	699a      	ldr	r2, [r3, #24]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 0204 	bic.w	r2, r2, #4
 8006fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6999      	ldr	r1, [r3, #24]
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	691a      	ldr	r2, [r3, #16]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	619a      	str	r2, [r3, #24]
      break;
 8006fc6:	e0a5      	b.n	8007114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68b9      	ldr	r1, [r7, #8]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 faae 	bl	8007530 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	699a      	ldr	r2, [r3, #24]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	699a      	ldr	r2, [r3, #24]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6999      	ldr	r1, [r3, #24]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	021a      	lsls	r2, r3, #8
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	430a      	orrs	r2, r1
 8007006:	619a      	str	r2, [r3, #24]
      break;
 8007008:	e084      	b.n	8007114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68b9      	ldr	r1, [r7, #8]
 8007010:	4618      	mov	r0, r3
 8007012:	f000 fb05 	bl	8007620 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	69da      	ldr	r2, [r3, #28]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f042 0208 	orr.w	r2, r2, #8
 8007024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	69da      	ldr	r2, [r3, #28]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 0204 	bic.w	r2, r2, #4
 8007034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	69d9      	ldr	r1, [r3, #28]
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	691a      	ldr	r2, [r3, #16]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	430a      	orrs	r2, r1
 8007046:	61da      	str	r2, [r3, #28]
      break;
 8007048:	e064      	b.n	8007114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68b9      	ldr	r1, [r7, #8]
 8007050:	4618      	mov	r0, r3
 8007052:	f000 fb5b 	bl	800770c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	69da      	ldr	r2, [r3, #28]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	69da      	ldr	r2, [r3, #28]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	69d9      	ldr	r1, [r3, #28]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	021a      	lsls	r2, r3, #8
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	430a      	orrs	r2, r1
 8007088:	61da      	str	r2, [r3, #28]
      break;
 800708a:	e043      	b.n	8007114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68b9      	ldr	r1, [r7, #8]
 8007092:	4618      	mov	r0, r3
 8007094:	f000 fb92 	bl	80077bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f042 0208 	orr.w	r2, r2, #8
 80070a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 0204 	bic.w	r2, r2, #4
 80070b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	691a      	ldr	r2, [r3, #16]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	430a      	orrs	r2, r1
 80070c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80070ca:	e023      	b.n	8007114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68b9      	ldr	r1, [r7, #8]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f000 fbc4 	bl	8007860 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	021a      	lsls	r2, r3, #8
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	430a      	orrs	r2, r1
 800710a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800710c:	e002      	b.n	8007114 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	75fb      	strb	r3, [r7, #23]
      break;
 8007112:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800711c:	7dfb      	ldrb	r3, [r7, #23]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3718      	adds	r7, #24
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop

08007128 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800713c:	2b01      	cmp	r3, #1
 800713e:	d101      	bne.n	8007144 <HAL_TIM_ConfigClockSource+0x1c>
 8007140:	2302      	movs	r3, #2
 8007142:	e0b4      	b.n	80072ae <HAL_TIM_ConfigClockSource+0x186>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2202      	movs	r2, #2
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	4b56      	ldr	r3, [pc, #344]	; (80072b8 <HAL_TIM_ConfigClockSource+0x190>)
 8007160:	4013      	ands	r3, r2
 8007162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800716a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800717c:	d03e      	beq.n	80071fc <HAL_TIM_ConfigClockSource+0xd4>
 800717e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007182:	f200 8087 	bhi.w	8007294 <HAL_TIM_ConfigClockSource+0x16c>
 8007186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800718a:	f000 8086 	beq.w	800729a <HAL_TIM_ConfigClockSource+0x172>
 800718e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007192:	d87f      	bhi.n	8007294 <HAL_TIM_ConfigClockSource+0x16c>
 8007194:	2b70      	cmp	r3, #112	; 0x70
 8007196:	d01a      	beq.n	80071ce <HAL_TIM_ConfigClockSource+0xa6>
 8007198:	2b70      	cmp	r3, #112	; 0x70
 800719a:	d87b      	bhi.n	8007294 <HAL_TIM_ConfigClockSource+0x16c>
 800719c:	2b60      	cmp	r3, #96	; 0x60
 800719e:	d050      	beq.n	8007242 <HAL_TIM_ConfigClockSource+0x11a>
 80071a0:	2b60      	cmp	r3, #96	; 0x60
 80071a2:	d877      	bhi.n	8007294 <HAL_TIM_ConfigClockSource+0x16c>
 80071a4:	2b50      	cmp	r3, #80	; 0x50
 80071a6:	d03c      	beq.n	8007222 <HAL_TIM_ConfigClockSource+0xfa>
 80071a8:	2b50      	cmp	r3, #80	; 0x50
 80071aa:	d873      	bhi.n	8007294 <HAL_TIM_ConfigClockSource+0x16c>
 80071ac:	2b40      	cmp	r3, #64	; 0x40
 80071ae:	d058      	beq.n	8007262 <HAL_TIM_ConfigClockSource+0x13a>
 80071b0:	2b40      	cmp	r3, #64	; 0x40
 80071b2:	d86f      	bhi.n	8007294 <HAL_TIM_ConfigClockSource+0x16c>
 80071b4:	2b30      	cmp	r3, #48	; 0x30
 80071b6:	d064      	beq.n	8007282 <HAL_TIM_ConfigClockSource+0x15a>
 80071b8:	2b30      	cmp	r3, #48	; 0x30
 80071ba:	d86b      	bhi.n	8007294 <HAL_TIM_ConfigClockSource+0x16c>
 80071bc:	2b20      	cmp	r3, #32
 80071be:	d060      	beq.n	8007282 <HAL_TIM_ConfigClockSource+0x15a>
 80071c0:	2b20      	cmp	r3, #32
 80071c2:	d867      	bhi.n	8007294 <HAL_TIM_ConfigClockSource+0x16c>
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d05c      	beq.n	8007282 <HAL_TIM_ConfigClockSource+0x15a>
 80071c8:	2b10      	cmp	r3, #16
 80071ca:	d05a      	beq.n	8007282 <HAL_TIM_ConfigClockSource+0x15a>
 80071cc:	e062      	b.n	8007294 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071de:	f000 fc0d 	bl	80079fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80071f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	609a      	str	r2, [r3, #8]
      break;
 80071fa:	e04f      	b.n	800729c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800720c:	f000 fbf6 	bl	80079fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	689a      	ldr	r2, [r3, #8]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800721e:	609a      	str	r2, [r3, #8]
      break;
 8007220:	e03c      	b.n	800729c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800722e:	461a      	mov	r2, r3
 8007230:	f000 fb6a 	bl	8007908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2150      	movs	r1, #80	; 0x50
 800723a:	4618      	mov	r0, r3
 800723c:	f000 fbc3 	bl	80079c6 <TIM_ITRx_SetConfig>
      break;
 8007240:	e02c      	b.n	800729c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800724e:	461a      	mov	r2, r3
 8007250:	f000 fb89 	bl	8007966 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2160      	movs	r1, #96	; 0x60
 800725a:	4618      	mov	r0, r3
 800725c:	f000 fbb3 	bl	80079c6 <TIM_ITRx_SetConfig>
      break;
 8007260:	e01c      	b.n	800729c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800726e:	461a      	mov	r2, r3
 8007270:	f000 fb4a 	bl	8007908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2140      	movs	r1, #64	; 0x40
 800727a:	4618      	mov	r0, r3
 800727c:	f000 fba3 	bl	80079c6 <TIM_ITRx_SetConfig>
      break;
 8007280:	e00c      	b.n	800729c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4619      	mov	r1, r3
 800728c:	4610      	mov	r0, r2
 800728e:	f000 fb9a 	bl	80079c6 <TIM_ITRx_SetConfig>
      break;
 8007292:	e003      	b.n	800729c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	73fb      	strb	r3, [r7, #15]
      break;
 8007298:	e000      	b.n	800729c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800729a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	fffeff88 	.word	0xfffeff88

080072bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a40      	ldr	r2, [pc, #256]	; (8007420 <TIM_Base_SetConfig+0x114>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d013      	beq.n	800734c <TIM_Base_SetConfig+0x40>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800732a:	d00f      	beq.n	800734c <TIM_Base_SetConfig+0x40>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a3d      	ldr	r2, [pc, #244]	; (8007424 <TIM_Base_SetConfig+0x118>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d00b      	beq.n	800734c <TIM_Base_SetConfig+0x40>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a3c      	ldr	r2, [pc, #240]	; (8007428 <TIM_Base_SetConfig+0x11c>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d007      	beq.n	800734c <TIM_Base_SetConfig+0x40>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a3b      	ldr	r2, [pc, #236]	; (800742c <TIM_Base_SetConfig+0x120>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d003      	beq.n	800734c <TIM_Base_SetConfig+0x40>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a3a      	ldr	r2, [pc, #232]	; (8007430 <TIM_Base_SetConfig+0x124>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d108      	bne.n	800735e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	4313      	orrs	r3, r2
 800735c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a2f      	ldr	r2, [pc, #188]	; (8007420 <TIM_Base_SetConfig+0x114>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d02b      	beq.n	80073be <TIM_Base_SetConfig+0xb2>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800736c:	d027      	beq.n	80073be <TIM_Base_SetConfig+0xb2>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a2c      	ldr	r2, [pc, #176]	; (8007424 <TIM_Base_SetConfig+0x118>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d023      	beq.n	80073be <TIM_Base_SetConfig+0xb2>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a2b      	ldr	r2, [pc, #172]	; (8007428 <TIM_Base_SetConfig+0x11c>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d01f      	beq.n	80073be <TIM_Base_SetConfig+0xb2>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a2a      	ldr	r2, [pc, #168]	; (800742c <TIM_Base_SetConfig+0x120>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d01b      	beq.n	80073be <TIM_Base_SetConfig+0xb2>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a29      	ldr	r2, [pc, #164]	; (8007430 <TIM_Base_SetConfig+0x124>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d017      	beq.n	80073be <TIM_Base_SetConfig+0xb2>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a28      	ldr	r2, [pc, #160]	; (8007434 <TIM_Base_SetConfig+0x128>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d013      	beq.n	80073be <TIM_Base_SetConfig+0xb2>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a27      	ldr	r2, [pc, #156]	; (8007438 <TIM_Base_SetConfig+0x12c>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d00f      	beq.n	80073be <TIM_Base_SetConfig+0xb2>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a26      	ldr	r2, [pc, #152]	; (800743c <TIM_Base_SetConfig+0x130>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d00b      	beq.n	80073be <TIM_Base_SetConfig+0xb2>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a25      	ldr	r2, [pc, #148]	; (8007440 <TIM_Base_SetConfig+0x134>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d007      	beq.n	80073be <TIM_Base_SetConfig+0xb2>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a24      	ldr	r2, [pc, #144]	; (8007444 <TIM_Base_SetConfig+0x138>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d003      	beq.n	80073be <TIM_Base_SetConfig+0xb2>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a23      	ldr	r2, [pc, #140]	; (8007448 <TIM_Base_SetConfig+0x13c>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d108      	bne.n	80073d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	4313      	orrs	r3, r2
 80073dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	689a      	ldr	r2, [r3, #8]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a0a      	ldr	r2, [pc, #40]	; (8007420 <TIM_Base_SetConfig+0x114>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d003      	beq.n	8007404 <TIM_Base_SetConfig+0xf8>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a0c      	ldr	r2, [pc, #48]	; (8007430 <TIM_Base_SetConfig+0x124>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d103      	bne.n	800740c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	691a      	ldr	r2, [r3, #16]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	615a      	str	r2, [r3, #20]
}
 8007412:	bf00      	nop
 8007414:	3714      	adds	r7, #20
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	40010000 	.word	0x40010000
 8007424:	40000400 	.word	0x40000400
 8007428:	40000800 	.word	0x40000800
 800742c:	40000c00 	.word	0x40000c00
 8007430:	40010400 	.word	0x40010400
 8007434:	40014000 	.word	0x40014000
 8007438:	40014400 	.word	0x40014400
 800743c:	40014800 	.word	0x40014800
 8007440:	40001800 	.word	0x40001800
 8007444:	40001c00 	.word	0x40001c00
 8007448:	40002000 	.word	0x40002000

0800744c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800744c:	b480      	push	{r7}
 800744e:	b087      	sub	sp, #28
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a1b      	ldr	r3, [r3, #32]
 800745a:	f023 0201 	bic.w	r2, r3, #1
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	4b2b      	ldr	r3, [pc, #172]	; (8007524 <TIM_OC1_SetConfig+0xd8>)
 8007478:	4013      	ands	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f023 0303 	bic.w	r3, r3, #3
 8007482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	4313      	orrs	r3, r2
 800748c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f023 0302 	bic.w	r3, r3, #2
 8007494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	4313      	orrs	r3, r2
 800749e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a21      	ldr	r2, [pc, #132]	; (8007528 <TIM_OC1_SetConfig+0xdc>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d003      	beq.n	80074b0 <TIM_OC1_SetConfig+0x64>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a20      	ldr	r2, [pc, #128]	; (800752c <TIM_OC1_SetConfig+0xe0>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d10c      	bne.n	80074ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	f023 0308 	bic.w	r3, r3, #8
 80074b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	4313      	orrs	r3, r2
 80074c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	f023 0304 	bic.w	r3, r3, #4
 80074c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a16      	ldr	r2, [pc, #88]	; (8007528 <TIM_OC1_SetConfig+0xdc>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d003      	beq.n	80074da <TIM_OC1_SetConfig+0x8e>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a15      	ldr	r2, [pc, #84]	; (800752c <TIM_OC1_SetConfig+0xe0>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d111      	bne.n	80074fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	621a      	str	r2, [r3, #32]
}
 8007518:	bf00      	nop
 800751a:	371c      	adds	r7, #28
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	fffeff8f 	.word	0xfffeff8f
 8007528:	40010000 	.word	0x40010000
 800752c:	40010400 	.word	0x40010400

08007530 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007530:	b480      	push	{r7}
 8007532:	b087      	sub	sp, #28
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a1b      	ldr	r3, [r3, #32]
 800753e:	f023 0210 	bic.w	r2, r3, #16
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	4b2e      	ldr	r3, [pc, #184]	; (8007614 <TIM_OC2_SetConfig+0xe4>)
 800755c:	4013      	ands	r3, r2
 800755e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	021b      	lsls	r3, r3, #8
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	4313      	orrs	r3, r2
 8007572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	f023 0320 	bic.w	r3, r3, #32
 800757a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	011b      	lsls	r3, r3, #4
 8007582:	697a      	ldr	r2, [r7, #20]
 8007584:	4313      	orrs	r3, r2
 8007586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a23      	ldr	r2, [pc, #140]	; (8007618 <TIM_OC2_SetConfig+0xe8>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d003      	beq.n	8007598 <TIM_OC2_SetConfig+0x68>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a22      	ldr	r2, [pc, #136]	; (800761c <TIM_OC2_SetConfig+0xec>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d10d      	bne.n	80075b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800759e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	011b      	lsls	r3, r3, #4
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a18      	ldr	r2, [pc, #96]	; (8007618 <TIM_OC2_SetConfig+0xe8>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d003      	beq.n	80075c4 <TIM_OC2_SetConfig+0x94>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a17      	ldr	r2, [pc, #92]	; (800761c <TIM_OC2_SetConfig+0xec>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d113      	bne.n	80075ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	4313      	orrs	r3, r2
 80075de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	693a      	ldr	r2, [r7, #16]
 80075f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	685a      	ldr	r2, [r3, #4]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	621a      	str	r2, [r3, #32]
}
 8007606:	bf00      	nop
 8007608:	371c      	adds	r7, #28
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	feff8fff 	.word	0xfeff8fff
 8007618:	40010000 	.word	0x40010000
 800761c:	40010400 	.word	0x40010400

08007620 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007620:	b480      	push	{r7}
 8007622:	b087      	sub	sp, #28
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	4b2d      	ldr	r3, [pc, #180]	; (8007700 <TIM_OC3_SetConfig+0xe0>)
 800764c:	4013      	ands	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f023 0303 	bic.w	r3, r3, #3
 8007656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	4313      	orrs	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	021b      	lsls	r3, r3, #8
 8007670:	697a      	ldr	r2, [r7, #20]
 8007672:	4313      	orrs	r3, r2
 8007674:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a22      	ldr	r2, [pc, #136]	; (8007704 <TIM_OC3_SetConfig+0xe4>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d003      	beq.n	8007686 <TIM_OC3_SetConfig+0x66>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a21      	ldr	r2, [pc, #132]	; (8007708 <TIM_OC3_SetConfig+0xe8>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d10d      	bne.n	80076a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800768c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	021b      	lsls	r3, r3, #8
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	4313      	orrs	r3, r2
 8007698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a17      	ldr	r2, [pc, #92]	; (8007704 <TIM_OC3_SetConfig+0xe4>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d003      	beq.n	80076b2 <TIM_OC3_SetConfig+0x92>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a16      	ldr	r2, [pc, #88]	; (8007708 <TIM_OC3_SetConfig+0xe8>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d113      	bne.n	80076da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	011b      	lsls	r3, r3, #4
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	011b      	lsls	r3, r3, #4
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	621a      	str	r2, [r3, #32]
}
 80076f4:	bf00      	nop
 80076f6:	371c      	adds	r7, #28
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	fffeff8f 	.word	0xfffeff8f
 8007704:	40010000 	.word	0x40010000
 8007708:	40010400 	.word	0x40010400

0800770c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800770c:	b480      	push	{r7}
 800770e:	b087      	sub	sp, #28
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	69db      	ldr	r3, [r3, #28]
 8007732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	4b1e      	ldr	r3, [pc, #120]	; (80077b0 <TIM_OC4_SetConfig+0xa4>)
 8007738:	4013      	ands	r3, r2
 800773a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	021b      	lsls	r3, r3, #8
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	4313      	orrs	r3, r2
 800774e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007756:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	031b      	lsls	r3, r3, #12
 800775e:	693a      	ldr	r2, [r7, #16]
 8007760:	4313      	orrs	r3, r2
 8007762:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a13      	ldr	r2, [pc, #76]	; (80077b4 <TIM_OC4_SetConfig+0xa8>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d003      	beq.n	8007774 <TIM_OC4_SetConfig+0x68>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a12      	ldr	r2, [pc, #72]	; (80077b8 <TIM_OC4_SetConfig+0xac>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d109      	bne.n	8007788 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800777a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	019b      	lsls	r3, r3, #6
 8007782:	697a      	ldr	r2, [r7, #20]
 8007784:	4313      	orrs	r3, r2
 8007786:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	621a      	str	r2, [r3, #32]
}
 80077a2:	bf00      	nop
 80077a4:	371c      	adds	r7, #28
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	feff8fff 	.word	0xfeff8fff
 80077b4:	40010000 	.word	0x40010000
 80077b8:	40010400 	.word	0x40010400

080077bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	4b1b      	ldr	r3, [pc, #108]	; (8007854 <TIM_OC5_SetConfig+0x98>)
 80077e8:	4013      	ands	r3, r2
 80077ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80077fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	041b      	lsls	r3, r3, #16
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	4313      	orrs	r3, r2
 8007808:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a12      	ldr	r2, [pc, #72]	; (8007858 <TIM_OC5_SetConfig+0x9c>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d003      	beq.n	800781a <TIM_OC5_SetConfig+0x5e>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a11      	ldr	r2, [pc, #68]	; (800785c <TIM_OC5_SetConfig+0xa0>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d109      	bne.n	800782e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007820:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	021b      	lsls	r3, r3, #8
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	4313      	orrs	r3, r2
 800782c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	621a      	str	r2, [r3, #32]
}
 8007848:	bf00      	nop
 800784a:	371c      	adds	r7, #28
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr
 8007854:	fffeff8f 	.word	0xfffeff8f
 8007858:	40010000 	.word	0x40010000
 800785c:	40010400 	.word	0x40010400

08007860 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	4b1c      	ldr	r3, [pc, #112]	; (80078fc <TIM_OC6_SetConfig+0x9c>)
 800788c:	4013      	ands	r3, r2
 800788e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	021b      	lsls	r3, r3, #8
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	4313      	orrs	r3, r2
 800789a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	051b      	lsls	r3, r3, #20
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a13      	ldr	r2, [pc, #76]	; (8007900 <TIM_OC6_SetConfig+0xa0>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d003      	beq.n	80078c0 <TIM_OC6_SetConfig+0x60>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a12      	ldr	r2, [pc, #72]	; (8007904 <TIM_OC6_SetConfig+0xa4>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d109      	bne.n	80078d4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	695b      	ldr	r3, [r3, #20]
 80078cc:	029b      	lsls	r3, r3, #10
 80078ce:	697a      	ldr	r2, [r7, #20]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	685a      	ldr	r2, [r3, #4]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	621a      	str	r2, [r3, #32]
}
 80078ee:	bf00      	nop
 80078f0:	371c      	adds	r7, #28
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	feff8fff 	.word	0xfeff8fff
 8007900:	40010000 	.word	0x40010000
 8007904:	40010400 	.word	0x40010400

08007908 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007908:	b480      	push	{r7}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6a1b      	ldr	r3, [r3, #32]
 8007918:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	f023 0201 	bic.w	r2, r3, #1
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	699b      	ldr	r3, [r3, #24]
 800792a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	011b      	lsls	r3, r3, #4
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	4313      	orrs	r3, r2
 800793c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f023 030a 	bic.w	r3, r3, #10
 8007944:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	4313      	orrs	r3, r2
 800794c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	621a      	str	r2, [r3, #32]
}
 800795a:	bf00      	nop
 800795c:	371c      	adds	r7, #28
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007966:	b480      	push	{r7}
 8007968:	b087      	sub	sp, #28
 800796a:	af00      	add	r7, sp, #0
 800796c:	60f8      	str	r0, [r7, #12]
 800796e:	60b9      	str	r1, [r7, #8]
 8007970:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	f023 0210 	bic.w	r2, r3, #16
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6a1b      	ldr	r3, [r3, #32]
 8007988:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007990:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	031b      	lsls	r3, r3, #12
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	4313      	orrs	r3, r2
 800799a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80079a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	011b      	lsls	r3, r3, #4
 80079a8:	693a      	ldr	r2, [r7, #16]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	697a      	ldr	r2, [r7, #20]
 80079b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	621a      	str	r2, [r3, #32]
}
 80079ba:	bf00      	nop
 80079bc:	371c      	adds	r7, #28
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b085      	sub	sp, #20
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	f043 0307 	orr.w	r3, r3, #7
 80079e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	609a      	str	r2, [r3, #8]
}
 80079f0:	bf00      	nop
 80079f2:	3714      	adds	r7, #20
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b087      	sub	sp, #28
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
 8007a08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	021a      	lsls	r2, r3, #8
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	431a      	orrs	r2, r3
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	697a      	ldr	r2, [r7, #20]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	609a      	str	r2, [r3, #8]
}
 8007a30:	bf00      	nop
 8007a32:	371c      	adds	r7, #28
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b087      	sub	sp, #28
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	f003 031f 	and.w	r3, r3, #31
 8007a4e:	2201      	movs	r2, #1
 8007a50:	fa02 f303 	lsl.w	r3, r2, r3
 8007a54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6a1a      	ldr	r2, [r3, #32]
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	43db      	mvns	r3, r3
 8007a5e:	401a      	ands	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6a1a      	ldr	r2, [r3, #32]
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	f003 031f 	and.w	r3, r3, #31
 8007a6e:	6879      	ldr	r1, [r7, #4]
 8007a70:	fa01 f303 	lsl.w	r3, r1, r3
 8007a74:	431a      	orrs	r2, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	621a      	str	r2, [r3, #32]
}
 8007a7a:	bf00      	nop
 8007a7c:	371c      	adds	r7, #28
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
	...

08007a88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d101      	bne.n	8007aa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	e06d      	b.n	8007b7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2202      	movs	r2, #2
 8007aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a30      	ldr	r2, [pc, #192]	; (8007b88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d004      	beq.n	8007ad4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a2f      	ldr	r2, [pc, #188]	; (8007b8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d108      	bne.n	8007ae6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007ada:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a20      	ldr	r2, [pc, #128]	; (8007b88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d022      	beq.n	8007b50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b12:	d01d      	beq.n	8007b50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a1d      	ldr	r2, [pc, #116]	; (8007b90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d018      	beq.n	8007b50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a1c      	ldr	r2, [pc, #112]	; (8007b94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d013      	beq.n	8007b50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a1a      	ldr	r2, [pc, #104]	; (8007b98 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d00e      	beq.n	8007b50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a15      	ldr	r2, [pc, #84]	; (8007b8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d009      	beq.n	8007b50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a16      	ldr	r2, [pc, #88]	; (8007b9c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d004      	beq.n	8007b50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a15      	ldr	r2, [pc, #84]	; (8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d10c      	bne.n	8007b6a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	40010000 	.word	0x40010000
 8007b8c:	40010400 	.word	0x40010400
 8007b90:	40000400 	.word	0x40000400
 8007b94:	40000800 	.word	0x40000800
 8007b98:	40000c00 	.word	0x40000c00
 8007b9c:	40014000 	.word	0x40014000
 8007ba0:	40001800 	.word	0x40001800

08007ba4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d101      	bne.n	8007bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	e065      	b.n	8007c8c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	695b      	ldr	r3, [r3, #20]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c26:	4313      	orrs	r3, r2
 8007c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	041b      	lsls	r3, r3, #16
 8007c36:	4313      	orrs	r3, r2
 8007c38:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a16      	ldr	r2, [pc, #88]	; (8007c98 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d004      	beq.n	8007c4e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a14      	ldr	r2, [pc, #80]	; (8007c9c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d115      	bne.n	8007c7a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c58:	051b      	lsls	r3, r3, #20
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	69db      	ldr	r3, [r3, #28]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	40010000 	.word	0x40010000
 8007c9c:	40010400 	.word	0x40010400

08007ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d101      	bne.n	8007cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e040      	b.n	8007d70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d106      	bne.n	8007d04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7fc f8fa 	bl	8003ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2224      	movs	r2, #36	; 0x24
 8007d08:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f022 0201 	bic.w	r2, r2, #1
 8007d18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fcae 	bl	800867c <UART_SetConfig>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d101      	bne.n	8007d2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e022      	b.n	8007d70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 ff06 	bl	8008b44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	685a      	ldr	r2, [r3, #4]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	689a      	ldr	r2, [r3, #8]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f042 0201 	orr.w	r2, r2, #1
 8007d66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 ff8d 	bl	8008c88 <UART_CheckIdleState>
 8007d6e:	4603      	mov	r3, r0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b08a      	sub	sp, #40	; 0x28
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	4613      	mov	r3, r2
 8007d84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d8a:	2b20      	cmp	r3, #32
 8007d8c:	d165      	bne.n	8007e5a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <HAL_UART_Transmit_DMA+0x22>
 8007d94:	88fb      	ldrh	r3, [r7, #6]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e05e      	b.n	8007e5c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	88fa      	ldrh	r2, [r7, #6]
 8007da8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	88fa      	ldrh	r2, [r7, #6]
 8007db0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2221      	movs	r2, #33	; 0x21
 8007dc0:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d027      	beq.n	8007e1a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dce:	4a25      	ldr	r2, [pc, #148]	; (8007e64 <HAL_UART_Transmit_DMA+0xec>)
 8007dd0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd6:	4a24      	ldr	r2, [pc, #144]	; (8007e68 <HAL_UART_Transmit_DMA+0xf0>)
 8007dd8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dde:	4a23      	ldr	r2, [pc, #140]	; (8007e6c <HAL_UART_Transmit_DMA+0xf4>)
 8007de0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007de6:	2200      	movs	r2, #0
 8007de8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007df2:	4619      	mov	r1, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	3328      	adds	r3, #40	; 0x28
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	88fb      	ldrh	r3, [r7, #6]
 8007dfe:	f7fc fbfd 	bl	80045fc <HAL_DMA_Start_IT>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d008      	beq.n	8007e1a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2210      	movs	r2, #16
 8007e0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2220      	movs	r2, #32
 8007e14:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e020      	b.n	8007e5c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2240      	movs	r2, #64	; 0x40
 8007e20:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	3308      	adds	r3, #8
 8007e28:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	e853 3f00 	ldrex	r3, [r3]
 8007e30:	613b      	str	r3, [r7, #16]
   return(result);
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e38:	627b      	str	r3, [r7, #36]	; 0x24
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	3308      	adds	r3, #8
 8007e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e42:	623a      	str	r2, [r7, #32]
 8007e44:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e46:	69f9      	ldr	r1, [r7, #28]
 8007e48:	6a3a      	ldr	r2, [r7, #32]
 8007e4a:	e841 2300 	strex	r3, r2, [r1]
 8007e4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1e5      	bne.n	8007e22 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	e000      	b.n	8007e5c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8007e5a:	2302      	movs	r3, #2
  }
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3728      	adds	r7, #40	; 0x28
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	08009105 	.word	0x08009105
 8007e68:	0800919b 	.word	0x0800919b
 8007e6c:	0800931d 	.word	0x0800931d

08007e70 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b08a      	sub	sp, #40	; 0x28
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e84:	2b20      	cmp	r3, #32
 8007e86:	d132      	bne.n	8007eee <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d002      	beq.n	8007e94 <HAL_UART_Receive_DMA+0x24>
 8007e8e:	88fb      	ldrh	r3, [r7, #6]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e02b      	b.n	8007ef0 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d018      	beq.n	8007ede <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	e853 3f00 	ldrex	r3, [r3]
 8007eb8:	613b      	str	r3, [r7, #16]
   return(result);
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eca:	623b      	str	r3, [r7, #32]
 8007ecc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ece:	69f9      	ldr	r1, [r7, #28]
 8007ed0:	6a3a      	ldr	r2, [r7, #32]
 8007ed2:	e841 2300 	strex	r3, r2, [r1]
 8007ed6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1e6      	bne.n	8007eac <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007ede:	88fb      	ldrh	r3, [r7, #6]
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	68b9      	ldr	r1, [r7, #8]
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f000 ffe3 	bl	8008eb0 <UART_Start_Receive_DMA>
 8007eea:	4603      	mov	r3, r0
 8007eec:	e000      	b.n	8007ef0 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007eee:	2302      	movs	r3, #2
  }
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3728      	adds	r7, #40	; 0x28
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b090      	sub	sp, #64	; 0x40
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f04:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f0c:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f18:	2b80      	cmp	r3, #128	; 0x80
 8007f1a:	d139      	bne.n	8007f90 <HAL_UART_DMAStop+0x98>
 8007f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f1e:	2b21      	cmp	r3, #33	; 0x21
 8007f20:	d136      	bne.n	8007f90 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	3308      	adds	r3, #8
 8007f28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	e853 3f00 	ldrex	r3, [r3]
 8007f30:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f38:	637b      	str	r3, [r7, #52]	; 0x34
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	3308      	adds	r3, #8
 8007f40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f4a:	e841 2300 	strex	r3, r2, [r1]
 8007f4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1e5      	bne.n	8007f22 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d015      	beq.n	8007f8a <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fc fbaa 	bl	80046bc <HAL_DMA_Abort>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00d      	beq.n	8007f8a <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fc fdbe 	bl	8004af4 <HAL_DMA_GetError>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b20      	cmp	r3, #32
 8007f7c:	d105      	bne.n	8007f8a <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2210      	movs	r2, #16
 8007f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007f86:	2303      	movs	r3, #3
 8007f88:	e044      	b.n	8008014 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f001 f830 	bl	8008ff0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f9a:	2b40      	cmp	r3, #64	; 0x40
 8007f9c:	d139      	bne.n	8008012 <HAL_UART_DMAStop+0x11a>
 8007f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa0:	2b22      	cmp	r3, #34	; 0x22
 8007fa2:	d136      	bne.n	8008012 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	3308      	adds	r3, #8
 8007faa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	e853 3f00 	ldrex	r3, [r3]
 8007fb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fba:	633b      	str	r3, [r7, #48]	; 0x30
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fc4:	61ba      	str	r2, [r7, #24]
 8007fc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc8:	6979      	ldr	r1, [r7, #20]
 8007fca:	69ba      	ldr	r2, [r7, #24]
 8007fcc:	e841 2300 	strex	r3, r2, [r1]
 8007fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1e5      	bne.n	8007fa4 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d015      	beq.n	800800c <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7fc fb69 	bl	80046bc <HAL_DMA_Abort>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00d      	beq.n	800800c <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fc fd7d 	bl	8004af4 <HAL_DMA_GetError>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b20      	cmp	r3, #32
 8007ffe:	d105      	bne.n	800800c <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2210      	movs	r2, #16
 8008004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008008:	2303      	movs	r3, #3
 800800a:	e003      	b.n	8008014 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f001 f815 	bl	800903c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3740      	adds	r7, #64	; 0x40
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b0ba      	sub	sp, #232	; 0xe8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	69db      	ldr	r3, [r3, #28]
 800802a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008042:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008046:	f640 030f 	movw	r3, #2063	; 0x80f
 800804a:	4013      	ands	r3, r2
 800804c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008050:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008054:	2b00      	cmp	r3, #0
 8008056:	d115      	bne.n	8008084 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800805c:	f003 0320 	and.w	r3, r3, #32
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00f      	beq.n	8008084 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008068:	f003 0320 	and.w	r3, r3, #32
 800806c:	2b00      	cmp	r3, #0
 800806e:	d009      	beq.n	8008084 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 82ac 	beq.w	80085d2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	4798      	blx	r3
      }
      return;
 8008082:	e2a6      	b.n	80085d2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008084:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 8117 	beq.w	80082bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800808e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008092:	f003 0301 	and.w	r3, r3, #1
 8008096:	2b00      	cmp	r3, #0
 8008098:	d106      	bne.n	80080a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800809a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800809e:	4b85      	ldr	r3, [pc, #532]	; (80082b4 <HAL_UART_IRQHandler+0x298>)
 80080a0:	4013      	ands	r3, r2
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f000 810a 	beq.w	80082bc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ac:	f003 0301 	and.w	r3, r3, #1
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d011      	beq.n	80080d8 <HAL_UART_IRQHandler+0xbc>
 80080b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00b      	beq.n	80080d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2201      	movs	r2, #1
 80080c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080ce:	f043 0201 	orr.w	r2, r3, #1
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080dc:	f003 0302 	and.w	r3, r3, #2
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d011      	beq.n	8008108 <HAL_UART_IRQHandler+0xec>
 80080e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080e8:	f003 0301 	and.w	r3, r3, #1
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00b      	beq.n	8008108 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2202      	movs	r2, #2
 80080f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080fe:	f043 0204 	orr.w	r2, r3, #4
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800810c:	f003 0304 	and.w	r3, r3, #4
 8008110:	2b00      	cmp	r3, #0
 8008112:	d011      	beq.n	8008138 <HAL_UART_IRQHandler+0x11c>
 8008114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008118:	f003 0301 	and.w	r3, r3, #1
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00b      	beq.n	8008138 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2204      	movs	r2, #4
 8008126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800812e:	f043 0202 	orr.w	r2, r3, #2
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800813c:	f003 0308 	and.w	r3, r3, #8
 8008140:	2b00      	cmp	r3, #0
 8008142:	d017      	beq.n	8008174 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008148:	f003 0320 	and.w	r3, r3, #32
 800814c:	2b00      	cmp	r3, #0
 800814e:	d105      	bne.n	800815c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008154:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00b      	beq.n	8008174 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2208      	movs	r2, #8
 8008162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800816a:	f043 0208 	orr.w	r2, r3, #8
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800817c:	2b00      	cmp	r3, #0
 800817e:	d012      	beq.n	80081a6 <HAL_UART_IRQHandler+0x18a>
 8008180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008184:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00c      	beq.n	80081a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008194:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800819c:	f043 0220 	orr.w	r2, r3, #32
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 8212 	beq.w	80085d6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80081b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081b6:	f003 0320 	and.w	r3, r3, #32
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00d      	beq.n	80081da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80081be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081c2:	f003 0320 	and.w	r3, r3, #32
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d007      	beq.n	80081da <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d003      	beq.n	80081da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ee:	2b40      	cmp	r3, #64	; 0x40
 80081f0:	d005      	beq.n	80081fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80081f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d04f      	beq.n	800829e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 ff1c 	bl	800903c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800820e:	2b40      	cmp	r3, #64	; 0x40
 8008210:	d141      	bne.n	8008296 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3308      	adds	r3, #8
 8008218:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008220:	e853 3f00 	ldrex	r3, [r3]
 8008224:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008228:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800822c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	3308      	adds	r3, #8
 800823a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800823e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008242:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008246:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800824a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800824e:	e841 2300 	strex	r3, r2, [r1]
 8008252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008256:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1d9      	bne.n	8008212 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008262:	2b00      	cmp	r3, #0
 8008264:	d013      	beq.n	800828e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800826a:	4a13      	ldr	r2, [pc, #76]	; (80082b8 <HAL_UART_IRQHandler+0x29c>)
 800826c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008272:	4618      	mov	r0, r3
 8008274:	f7fc fa92 	bl	800479c <HAL_DMA_Abort_IT>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d017      	beq.n	80082ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008288:	4610      	mov	r0, r2
 800828a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800828c:	e00f      	b.n	80082ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f9d4 	bl	800863c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008294:	e00b      	b.n	80082ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f9d0 	bl	800863c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800829c:	e007      	b.n	80082ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f9cc 	bl	800863c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80082ac:	e193      	b.n	80085d6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ae:	bf00      	nop
    return;
 80082b0:	e191      	b.n	80085d6 <HAL_UART_IRQHandler+0x5ba>
 80082b2:	bf00      	nop
 80082b4:	04000120 	.word	0x04000120
 80082b8:	0800939b 	.word	0x0800939b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	f040 814c 	bne.w	800855e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80082c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ca:	f003 0310 	and.w	r3, r3, #16
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f000 8145 	beq.w	800855e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80082d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082d8:	f003 0310 	and.w	r3, r3, #16
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 813e 	beq.w	800855e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2210      	movs	r2, #16
 80082e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f4:	2b40      	cmp	r3, #64	; 0x40
 80082f6:	f040 80b6 	bne.w	8008466 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008306:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800830a:	2b00      	cmp	r3, #0
 800830c:	f000 8165 	beq.w	80085da <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008316:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800831a:	429a      	cmp	r2, r3
 800831c:	f080 815d 	bcs.w	80085da <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008326:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800832e:	69db      	ldr	r3, [r3, #28]
 8008330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008334:	f000 8086 	beq.w	8008444 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008340:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008344:	e853 3f00 	ldrex	r3, [r3]
 8008348:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800834c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008354:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	461a      	mov	r2, r3
 800835e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008362:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008366:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800836e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008372:	e841 2300 	strex	r3, r2, [r1]
 8008376:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800837a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1da      	bne.n	8008338 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3308      	adds	r3, #8
 8008388:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800838c:	e853 3f00 	ldrex	r3, [r3]
 8008390:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008392:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008394:	f023 0301 	bic.w	r3, r3, #1
 8008398:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	3308      	adds	r3, #8
 80083a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80083a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80083aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80083ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80083b2:	e841 2300 	strex	r3, r2, [r1]
 80083b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80083b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1e1      	bne.n	8008382 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3308      	adds	r3, #8
 80083c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083c8:	e853 3f00 	ldrex	r3, [r3]
 80083cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80083ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3308      	adds	r3, #8
 80083de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80083e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80083e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80083e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80083ea:	e841 2300 	strex	r3, r2, [r1]
 80083ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80083f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1e3      	bne.n	80083be <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2220      	movs	r2, #32
 80083fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800840c:	e853 3f00 	ldrex	r3, [r3]
 8008410:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008414:	f023 0310 	bic.w	r3, r3, #16
 8008418:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	461a      	mov	r2, r3
 8008422:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008426:	65bb      	str	r3, [r7, #88]	; 0x58
 8008428:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800842c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800842e:	e841 2300 	strex	r3, r2, [r1]
 8008432:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1e4      	bne.n	8008404 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800843e:	4618      	mov	r0, r3
 8008440:	f7fc f93c 	bl	80046bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2202      	movs	r2, #2
 8008448:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008456:	b29b      	uxth	r3, r3
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	b29b      	uxth	r3, r3
 800845c:	4619      	mov	r1, r3
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f8f6 	bl	8008650 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008464:	e0b9      	b.n	80085da <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008472:	b29b      	uxth	r3, r3
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008480:	b29b      	uxth	r3, r3
 8008482:	2b00      	cmp	r3, #0
 8008484:	f000 80ab 	beq.w	80085de <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8008488:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800848c:	2b00      	cmp	r3, #0
 800848e:	f000 80a6 	beq.w	80085de <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849a:	e853 3f00 	ldrex	r3, [r3]
 800849e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	461a      	mov	r2, r3
 80084b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084b4:	647b      	str	r3, [r7, #68]	; 0x44
 80084b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084bc:	e841 2300 	strex	r3, r2, [r1]
 80084c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d1e4      	bne.n	8008492 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	3308      	adds	r3, #8
 80084ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d2:	e853 3f00 	ldrex	r3, [r3]
 80084d6:	623b      	str	r3, [r7, #32]
   return(result);
 80084d8:	6a3b      	ldr	r3, [r7, #32]
 80084da:	f023 0301 	bic.w	r3, r3, #1
 80084de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	3308      	adds	r3, #8
 80084e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80084ec:	633a      	str	r2, [r7, #48]	; 0x30
 80084ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084f4:	e841 2300 	strex	r3, r2, [r1]
 80084f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1e3      	bne.n	80084c8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2220      	movs	r2, #32
 8008504:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	e853 3f00 	ldrex	r3, [r3]
 8008520:	60fb      	str	r3, [r7, #12]
   return(result);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f023 0310 	bic.w	r3, r3, #16
 8008528:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	461a      	mov	r2, r3
 8008532:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008536:	61fb      	str	r3, [r7, #28]
 8008538:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853a:	69b9      	ldr	r1, [r7, #24]
 800853c:	69fa      	ldr	r2, [r7, #28]
 800853e:	e841 2300 	strex	r3, r2, [r1]
 8008542:	617b      	str	r3, [r7, #20]
   return(result);
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1e4      	bne.n	8008514 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2202      	movs	r2, #2
 800854e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008550:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008554:	4619      	mov	r1, r3
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 f87a 	bl	8008650 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800855c:	e03f      	b.n	80085de <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800855e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00e      	beq.n	8008588 <HAL_UART_IRQHandler+0x56c>
 800856a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800856e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d008      	beq.n	8008588 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800857e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f871 	bl	8008668 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008586:	e02d      	b.n	80085e4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800858c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00e      	beq.n	80085b2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800859c:	2b00      	cmp	r3, #0
 800859e:	d008      	beq.n	80085b2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d01c      	beq.n	80085e2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	4798      	blx	r3
    }
    return;
 80085b0:	e017      	b.n	80085e2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80085b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d012      	beq.n	80085e4 <HAL_UART_IRQHandler+0x5c8>
 80085be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00c      	beq.n	80085e4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fefb 	bl	80093c6 <UART_EndTransmit_IT>
    return;
 80085d0:	e008      	b.n	80085e4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80085d2:	bf00      	nop
 80085d4:	e006      	b.n	80085e4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80085d6:	bf00      	nop
 80085d8:	e004      	b.n	80085e4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80085da:	bf00      	nop
 80085dc:	e002      	b.n	80085e4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80085de:	bf00      	nop
 80085e0:	e000      	b.n	80085e4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80085e2:	bf00      	nop
  }

}
 80085e4:	37e8      	adds	r7, #232	; 0xe8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop

080085ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	460b      	mov	r3, r1
 800865a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800865c:	bf00      	nop
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b088      	sub	sp, #32
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008684:	2300      	movs	r3, #0
 8008686:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	689a      	ldr	r2, [r3, #8]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	431a      	orrs	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	695b      	ldr	r3, [r3, #20]
 8008696:	431a      	orrs	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	69db      	ldr	r3, [r3, #28]
 800869c:	4313      	orrs	r3, r2
 800869e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	4ba6      	ldr	r3, [pc, #664]	; (8008940 <UART_SetConfig+0x2c4>)
 80086a8:	4013      	ands	r3, r2
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	6812      	ldr	r2, [r2, #0]
 80086ae:	6979      	ldr	r1, [r7, #20]
 80086b0:	430b      	orrs	r3, r1
 80086b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	68da      	ldr	r2, [r3, #12]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	430a      	orrs	r2, r1
 80086c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a1b      	ldr	r3, [r3, #32]
 80086d4:	697a      	ldr	r2, [r7, #20]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	430a      	orrs	r2, r1
 80086ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a94      	ldr	r2, [pc, #592]	; (8008944 <UART_SetConfig+0x2c8>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d120      	bne.n	800873a <UART_SetConfig+0xbe>
 80086f8:	4b93      	ldr	r3, [pc, #588]	; (8008948 <UART_SetConfig+0x2cc>)
 80086fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086fe:	f003 0303 	and.w	r3, r3, #3
 8008702:	2b03      	cmp	r3, #3
 8008704:	d816      	bhi.n	8008734 <UART_SetConfig+0xb8>
 8008706:	a201      	add	r2, pc, #4	; (adr r2, 800870c <UART_SetConfig+0x90>)
 8008708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800870c:	0800871d 	.word	0x0800871d
 8008710:	08008729 	.word	0x08008729
 8008714:	08008723 	.word	0x08008723
 8008718:	0800872f 	.word	0x0800872f
 800871c:	2301      	movs	r3, #1
 800871e:	77fb      	strb	r3, [r7, #31]
 8008720:	e150      	b.n	80089c4 <UART_SetConfig+0x348>
 8008722:	2302      	movs	r3, #2
 8008724:	77fb      	strb	r3, [r7, #31]
 8008726:	e14d      	b.n	80089c4 <UART_SetConfig+0x348>
 8008728:	2304      	movs	r3, #4
 800872a:	77fb      	strb	r3, [r7, #31]
 800872c:	e14a      	b.n	80089c4 <UART_SetConfig+0x348>
 800872e:	2308      	movs	r3, #8
 8008730:	77fb      	strb	r3, [r7, #31]
 8008732:	e147      	b.n	80089c4 <UART_SetConfig+0x348>
 8008734:	2310      	movs	r3, #16
 8008736:	77fb      	strb	r3, [r7, #31]
 8008738:	e144      	b.n	80089c4 <UART_SetConfig+0x348>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a83      	ldr	r2, [pc, #524]	; (800894c <UART_SetConfig+0x2d0>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d132      	bne.n	80087aa <UART_SetConfig+0x12e>
 8008744:	4b80      	ldr	r3, [pc, #512]	; (8008948 <UART_SetConfig+0x2cc>)
 8008746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800874a:	f003 030c 	and.w	r3, r3, #12
 800874e:	2b0c      	cmp	r3, #12
 8008750:	d828      	bhi.n	80087a4 <UART_SetConfig+0x128>
 8008752:	a201      	add	r2, pc, #4	; (adr r2, 8008758 <UART_SetConfig+0xdc>)
 8008754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008758:	0800878d 	.word	0x0800878d
 800875c:	080087a5 	.word	0x080087a5
 8008760:	080087a5 	.word	0x080087a5
 8008764:	080087a5 	.word	0x080087a5
 8008768:	08008799 	.word	0x08008799
 800876c:	080087a5 	.word	0x080087a5
 8008770:	080087a5 	.word	0x080087a5
 8008774:	080087a5 	.word	0x080087a5
 8008778:	08008793 	.word	0x08008793
 800877c:	080087a5 	.word	0x080087a5
 8008780:	080087a5 	.word	0x080087a5
 8008784:	080087a5 	.word	0x080087a5
 8008788:	0800879f 	.word	0x0800879f
 800878c:	2300      	movs	r3, #0
 800878e:	77fb      	strb	r3, [r7, #31]
 8008790:	e118      	b.n	80089c4 <UART_SetConfig+0x348>
 8008792:	2302      	movs	r3, #2
 8008794:	77fb      	strb	r3, [r7, #31]
 8008796:	e115      	b.n	80089c4 <UART_SetConfig+0x348>
 8008798:	2304      	movs	r3, #4
 800879a:	77fb      	strb	r3, [r7, #31]
 800879c:	e112      	b.n	80089c4 <UART_SetConfig+0x348>
 800879e:	2308      	movs	r3, #8
 80087a0:	77fb      	strb	r3, [r7, #31]
 80087a2:	e10f      	b.n	80089c4 <UART_SetConfig+0x348>
 80087a4:	2310      	movs	r3, #16
 80087a6:	77fb      	strb	r3, [r7, #31]
 80087a8:	e10c      	b.n	80089c4 <UART_SetConfig+0x348>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a68      	ldr	r2, [pc, #416]	; (8008950 <UART_SetConfig+0x2d4>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d120      	bne.n	80087f6 <UART_SetConfig+0x17a>
 80087b4:	4b64      	ldr	r3, [pc, #400]	; (8008948 <UART_SetConfig+0x2cc>)
 80087b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80087be:	2b30      	cmp	r3, #48	; 0x30
 80087c0:	d013      	beq.n	80087ea <UART_SetConfig+0x16e>
 80087c2:	2b30      	cmp	r3, #48	; 0x30
 80087c4:	d814      	bhi.n	80087f0 <UART_SetConfig+0x174>
 80087c6:	2b20      	cmp	r3, #32
 80087c8:	d009      	beq.n	80087de <UART_SetConfig+0x162>
 80087ca:	2b20      	cmp	r3, #32
 80087cc:	d810      	bhi.n	80087f0 <UART_SetConfig+0x174>
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d002      	beq.n	80087d8 <UART_SetConfig+0x15c>
 80087d2:	2b10      	cmp	r3, #16
 80087d4:	d006      	beq.n	80087e4 <UART_SetConfig+0x168>
 80087d6:	e00b      	b.n	80087f0 <UART_SetConfig+0x174>
 80087d8:	2300      	movs	r3, #0
 80087da:	77fb      	strb	r3, [r7, #31]
 80087dc:	e0f2      	b.n	80089c4 <UART_SetConfig+0x348>
 80087de:	2302      	movs	r3, #2
 80087e0:	77fb      	strb	r3, [r7, #31]
 80087e2:	e0ef      	b.n	80089c4 <UART_SetConfig+0x348>
 80087e4:	2304      	movs	r3, #4
 80087e6:	77fb      	strb	r3, [r7, #31]
 80087e8:	e0ec      	b.n	80089c4 <UART_SetConfig+0x348>
 80087ea:	2308      	movs	r3, #8
 80087ec:	77fb      	strb	r3, [r7, #31]
 80087ee:	e0e9      	b.n	80089c4 <UART_SetConfig+0x348>
 80087f0:	2310      	movs	r3, #16
 80087f2:	77fb      	strb	r3, [r7, #31]
 80087f4:	e0e6      	b.n	80089c4 <UART_SetConfig+0x348>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a56      	ldr	r2, [pc, #344]	; (8008954 <UART_SetConfig+0x2d8>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d120      	bne.n	8008842 <UART_SetConfig+0x1c6>
 8008800:	4b51      	ldr	r3, [pc, #324]	; (8008948 <UART_SetConfig+0x2cc>)
 8008802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008806:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800880a:	2bc0      	cmp	r3, #192	; 0xc0
 800880c:	d013      	beq.n	8008836 <UART_SetConfig+0x1ba>
 800880e:	2bc0      	cmp	r3, #192	; 0xc0
 8008810:	d814      	bhi.n	800883c <UART_SetConfig+0x1c0>
 8008812:	2b80      	cmp	r3, #128	; 0x80
 8008814:	d009      	beq.n	800882a <UART_SetConfig+0x1ae>
 8008816:	2b80      	cmp	r3, #128	; 0x80
 8008818:	d810      	bhi.n	800883c <UART_SetConfig+0x1c0>
 800881a:	2b00      	cmp	r3, #0
 800881c:	d002      	beq.n	8008824 <UART_SetConfig+0x1a8>
 800881e:	2b40      	cmp	r3, #64	; 0x40
 8008820:	d006      	beq.n	8008830 <UART_SetConfig+0x1b4>
 8008822:	e00b      	b.n	800883c <UART_SetConfig+0x1c0>
 8008824:	2300      	movs	r3, #0
 8008826:	77fb      	strb	r3, [r7, #31]
 8008828:	e0cc      	b.n	80089c4 <UART_SetConfig+0x348>
 800882a:	2302      	movs	r3, #2
 800882c:	77fb      	strb	r3, [r7, #31]
 800882e:	e0c9      	b.n	80089c4 <UART_SetConfig+0x348>
 8008830:	2304      	movs	r3, #4
 8008832:	77fb      	strb	r3, [r7, #31]
 8008834:	e0c6      	b.n	80089c4 <UART_SetConfig+0x348>
 8008836:	2308      	movs	r3, #8
 8008838:	77fb      	strb	r3, [r7, #31]
 800883a:	e0c3      	b.n	80089c4 <UART_SetConfig+0x348>
 800883c:	2310      	movs	r3, #16
 800883e:	77fb      	strb	r3, [r7, #31]
 8008840:	e0c0      	b.n	80089c4 <UART_SetConfig+0x348>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a44      	ldr	r2, [pc, #272]	; (8008958 <UART_SetConfig+0x2dc>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d125      	bne.n	8008898 <UART_SetConfig+0x21c>
 800884c:	4b3e      	ldr	r3, [pc, #248]	; (8008948 <UART_SetConfig+0x2cc>)
 800884e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800885a:	d017      	beq.n	800888c <UART_SetConfig+0x210>
 800885c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008860:	d817      	bhi.n	8008892 <UART_SetConfig+0x216>
 8008862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008866:	d00b      	beq.n	8008880 <UART_SetConfig+0x204>
 8008868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800886c:	d811      	bhi.n	8008892 <UART_SetConfig+0x216>
 800886e:	2b00      	cmp	r3, #0
 8008870:	d003      	beq.n	800887a <UART_SetConfig+0x1fe>
 8008872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008876:	d006      	beq.n	8008886 <UART_SetConfig+0x20a>
 8008878:	e00b      	b.n	8008892 <UART_SetConfig+0x216>
 800887a:	2300      	movs	r3, #0
 800887c:	77fb      	strb	r3, [r7, #31]
 800887e:	e0a1      	b.n	80089c4 <UART_SetConfig+0x348>
 8008880:	2302      	movs	r3, #2
 8008882:	77fb      	strb	r3, [r7, #31]
 8008884:	e09e      	b.n	80089c4 <UART_SetConfig+0x348>
 8008886:	2304      	movs	r3, #4
 8008888:	77fb      	strb	r3, [r7, #31]
 800888a:	e09b      	b.n	80089c4 <UART_SetConfig+0x348>
 800888c:	2308      	movs	r3, #8
 800888e:	77fb      	strb	r3, [r7, #31]
 8008890:	e098      	b.n	80089c4 <UART_SetConfig+0x348>
 8008892:	2310      	movs	r3, #16
 8008894:	77fb      	strb	r3, [r7, #31]
 8008896:	e095      	b.n	80089c4 <UART_SetConfig+0x348>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a2f      	ldr	r2, [pc, #188]	; (800895c <UART_SetConfig+0x2e0>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d125      	bne.n	80088ee <UART_SetConfig+0x272>
 80088a2:	4b29      	ldr	r3, [pc, #164]	; (8008948 <UART_SetConfig+0x2cc>)
 80088a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80088ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80088b0:	d017      	beq.n	80088e2 <UART_SetConfig+0x266>
 80088b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80088b6:	d817      	bhi.n	80088e8 <UART_SetConfig+0x26c>
 80088b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088bc:	d00b      	beq.n	80088d6 <UART_SetConfig+0x25a>
 80088be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088c2:	d811      	bhi.n	80088e8 <UART_SetConfig+0x26c>
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d003      	beq.n	80088d0 <UART_SetConfig+0x254>
 80088c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088cc:	d006      	beq.n	80088dc <UART_SetConfig+0x260>
 80088ce:	e00b      	b.n	80088e8 <UART_SetConfig+0x26c>
 80088d0:	2301      	movs	r3, #1
 80088d2:	77fb      	strb	r3, [r7, #31]
 80088d4:	e076      	b.n	80089c4 <UART_SetConfig+0x348>
 80088d6:	2302      	movs	r3, #2
 80088d8:	77fb      	strb	r3, [r7, #31]
 80088da:	e073      	b.n	80089c4 <UART_SetConfig+0x348>
 80088dc:	2304      	movs	r3, #4
 80088de:	77fb      	strb	r3, [r7, #31]
 80088e0:	e070      	b.n	80089c4 <UART_SetConfig+0x348>
 80088e2:	2308      	movs	r3, #8
 80088e4:	77fb      	strb	r3, [r7, #31]
 80088e6:	e06d      	b.n	80089c4 <UART_SetConfig+0x348>
 80088e8:	2310      	movs	r3, #16
 80088ea:	77fb      	strb	r3, [r7, #31]
 80088ec:	e06a      	b.n	80089c4 <UART_SetConfig+0x348>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a1b      	ldr	r2, [pc, #108]	; (8008960 <UART_SetConfig+0x2e4>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d138      	bne.n	800896a <UART_SetConfig+0x2ee>
 80088f8:	4b13      	ldr	r3, [pc, #76]	; (8008948 <UART_SetConfig+0x2cc>)
 80088fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008902:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008906:	d017      	beq.n	8008938 <UART_SetConfig+0x2bc>
 8008908:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800890c:	d82a      	bhi.n	8008964 <UART_SetConfig+0x2e8>
 800890e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008912:	d00b      	beq.n	800892c <UART_SetConfig+0x2b0>
 8008914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008918:	d824      	bhi.n	8008964 <UART_SetConfig+0x2e8>
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <UART_SetConfig+0x2aa>
 800891e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008922:	d006      	beq.n	8008932 <UART_SetConfig+0x2b6>
 8008924:	e01e      	b.n	8008964 <UART_SetConfig+0x2e8>
 8008926:	2300      	movs	r3, #0
 8008928:	77fb      	strb	r3, [r7, #31]
 800892a:	e04b      	b.n	80089c4 <UART_SetConfig+0x348>
 800892c:	2302      	movs	r3, #2
 800892e:	77fb      	strb	r3, [r7, #31]
 8008930:	e048      	b.n	80089c4 <UART_SetConfig+0x348>
 8008932:	2304      	movs	r3, #4
 8008934:	77fb      	strb	r3, [r7, #31]
 8008936:	e045      	b.n	80089c4 <UART_SetConfig+0x348>
 8008938:	2308      	movs	r3, #8
 800893a:	77fb      	strb	r3, [r7, #31]
 800893c:	e042      	b.n	80089c4 <UART_SetConfig+0x348>
 800893e:	bf00      	nop
 8008940:	efff69f3 	.word	0xefff69f3
 8008944:	40011000 	.word	0x40011000
 8008948:	40023800 	.word	0x40023800
 800894c:	40004400 	.word	0x40004400
 8008950:	40004800 	.word	0x40004800
 8008954:	40004c00 	.word	0x40004c00
 8008958:	40005000 	.word	0x40005000
 800895c:	40011400 	.word	0x40011400
 8008960:	40007800 	.word	0x40007800
 8008964:	2310      	movs	r3, #16
 8008966:	77fb      	strb	r3, [r7, #31]
 8008968:	e02c      	b.n	80089c4 <UART_SetConfig+0x348>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a72      	ldr	r2, [pc, #456]	; (8008b38 <UART_SetConfig+0x4bc>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d125      	bne.n	80089c0 <UART_SetConfig+0x344>
 8008974:	4b71      	ldr	r3, [pc, #452]	; (8008b3c <UART_SetConfig+0x4c0>)
 8008976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800897a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800897e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008982:	d017      	beq.n	80089b4 <UART_SetConfig+0x338>
 8008984:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008988:	d817      	bhi.n	80089ba <UART_SetConfig+0x33e>
 800898a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800898e:	d00b      	beq.n	80089a8 <UART_SetConfig+0x32c>
 8008990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008994:	d811      	bhi.n	80089ba <UART_SetConfig+0x33e>
 8008996:	2b00      	cmp	r3, #0
 8008998:	d003      	beq.n	80089a2 <UART_SetConfig+0x326>
 800899a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800899e:	d006      	beq.n	80089ae <UART_SetConfig+0x332>
 80089a0:	e00b      	b.n	80089ba <UART_SetConfig+0x33e>
 80089a2:	2300      	movs	r3, #0
 80089a4:	77fb      	strb	r3, [r7, #31]
 80089a6:	e00d      	b.n	80089c4 <UART_SetConfig+0x348>
 80089a8:	2302      	movs	r3, #2
 80089aa:	77fb      	strb	r3, [r7, #31]
 80089ac:	e00a      	b.n	80089c4 <UART_SetConfig+0x348>
 80089ae:	2304      	movs	r3, #4
 80089b0:	77fb      	strb	r3, [r7, #31]
 80089b2:	e007      	b.n	80089c4 <UART_SetConfig+0x348>
 80089b4:	2308      	movs	r3, #8
 80089b6:	77fb      	strb	r3, [r7, #31]
 80089b8:	e004      	b.n	80089c4 <UART_SetConfig+0x348>
 80089ba:	2310      	movs	r3, #16
 80089bc:	77fb      	strb	r3, [r7, #31]
 80089be:	e001      	b.n	80089c4 <UART_SetConfig+0x348>
 80089c0:	2310      	movs	r3, #16
 80089c2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	69db      	ldr	r3, [r3, #28]
 80089c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089cc:	d15b      	bne.n	8008a86 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80089ce:	7ffb      	ldrb	r3, [r7, #31]
 80089d0:	2b08      	cmp	r3, #8
 80089d2:	d828      	bhi.n	8008a26 <UART_SetConfig+0x3aa>
 80089d4:	a201      	add	r2, pc, #4	; (adr r2, 80089dc <UART_SetConfig+0x360>)
 80089d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089da:	bf00      	nop
 80089dc:	08008a01 	.word	0x08008a01
 80089e0:	08008a09 	.word	0x08008a09
 80089e4:	08008a11 	.word	0x08008a11
 80089e8:	08008a27 	.word	0x08008a27
 80089ec:	08008a17 	.word	0x08008a17
 80089f0:	08008a27 	.word	0x08008a27
 80089f4:	08008a27 	.word	0x08008a27
 80089f8:	08008a27 	.word	0x08008a27
 80089fc:	08008a1f 	.word	0x08008a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a00:	f7fd f986 	bl	8005d10 <HAL_RCC_GetPCLK1Freq>
 8008a04:	61b8      	str	r0, [r7, #24]
        break;
 8008a06:	e013      	b.n	8008a30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a08:	f7fd f996 	bl	8005d38 <HAL_RCC_GetPCLK2Freq>
 8008a0c:	61b8      	str	r0, [r7, #24]
        break;
 8008a0e:	e00f      	b.n	8008a30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a10:	4b4b      	ldr	r3, [pc, #300]	; (8008b40 <UART_SetConfig+0x4c4>)
 8008a12:	61bb      	str	r3, [r7, #24]
        break;
 8008a14:	e00c      	b.n	8008a30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a16:	f7fd f869 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8008a1a:	61b8      	str	r0, [r7, #24]
        break;
 8008a1c:	e008      	b.n	8008a30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a22:	61bb      	str	r3, [r7, #24]
        break;
 8008a24:	e004      	b.n	8008a30 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008a26:	2300      	movs	r3, #0
 8008a28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	77bb      	strb	r3, [r7, #30]
        break;
 8008a2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d074      	beq.n	8008b20 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	005a      	lsls	r2, r3, #1
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	085b      	lsrs	r3, r3, #1
 8008a40:	441a      	add	r2, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	2b0f      	cmp	r3, #15
 8008a50:	d916      	bls.n	8008a80 <UART_SetConfig+0x404>
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a58:	d212      	bcs.n	8008a80 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	f023 030f 	bic.w	r3, r3, #15
 8008a62:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	085b      	lsrs	r3, r3, #1
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	f003 0307 	and.w	r3, r3, #7
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	89fb      	ldrh	r3, [r7, #14]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	89fa      	ldrh	r2, [r7, #14]
 8008a7c:	60da      	str	r2, [r3, #12]
 8008a7e:	e04f      	b.n	8008b20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	77bb      	strb	r3, [r7, #30]
 8008a84:	e04c      	b.n	8008b20 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a86:	7ffb      	ldrb	r3, [r7, #31]
 8008a88:	2b08      	cmp	r3, #8
 8008a8a:	d828      	bhi.n	8008ade <UART_SetConfig+0x462>
 8008a8c:	a201      	add	r2, pc, #4	; (adr r2, 8008a94 <UART_SetConfig+0x418>)
 8008a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a92:	bf00      	nop
 8008a94:	08008ab9 	.word	0x08008ab9
 8008a98:	08008ac1 	.word	0x08008ac1
 8008a9c:	08008ac9 	.word	0x08008ac9
 8008aa0:	08008adf 	.word	0x08008adf
 8008aa4:	08008acf 	.word	0x08008acf
 8008aa8:	08008adf 	.word	0x08008adf
 8008aac:	08008adf 	.word	0x08008adf
 8008ab0:	08008adf 	.word	0x08008adf
 8008ab4:	08008ad7 	.word	0x08008ad7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ab8:	f7fd f92a 	bl	8005d10 <HAL_RCC_GetPCLK1Freq>
 8008abc:	61b8      	str	r0, [r7, #24]
        break;
 8008abe:	e013      	b.n	8008ae8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ac0:	f7fd f93a 	bl	8005d38 <HAL_RCC_GetPCLK2Freq>
 8008ac4:	61b8      	str	r0, [r7, #24]
        break;
 8008ac6:	e00f      	b.n	8008ae8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ac8:	4b1d      	ldr	r3, [pc, #116]	; (8008b40 <UART_SetConfig+0x4c4>)
 8008aca:	61bb      	str	r3, [r7, #24]
        break;
 8008acc:	e00c      	b.n	8008ae8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ace:	f7fd f80d 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8008ad2:	61b8      	str	r0, [r7, #24]
        break;
 8008ad4:	e008      	b.n	8008ae8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ada:	61bb      	str	r3, [r7, #24]
        break;
 8008adc:	e004      	b.n	8008ae8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	77bb      	strb	r3, [r7, #30]
        break;
 8008ae6:	bf00      	nop
    }

    if (pclk != 0U)
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d018      	beq.n	8008b20 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	085a      	lsrs	r2, r3, #1
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	441a      	add	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	2b0f      	cmp	r3, #15
 8008b06:	d909      	bls.n	8008b1c <UART_SetConfig+0x4a0>
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b0e:	d205      	bcs.n	8008b1c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	60da      	str	r2, [r3, #12]
 8008b1a:	e001      	b.n	8008b20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008b2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3720      	adds	r7, #32
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	40007c00 	.word	0x40007c00
 8008b3c:	40023800 	.word	0x40023800
 8008b40:	00f42400 	.word	0x00f42400

08008b44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00a      	beq.n	8008b6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	430a      	orrs	r2, r1
 8008b6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b72:	f003 0302 	and.w	r3, r3, #2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00a      	beq.n	8008b90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	430a      	orrs	r2, r1
 8008b8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b94:	f003 0304 	and.w	r3, r3, #4
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00a      	beq.n	8008bb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	430a      	orrs	r2, r1
 8008bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb6:	f003 0308 	and.w	r3, r3, #8
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00a      	beq.n	8008bd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	430a      	orrs	r2, r1
 8008bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd8:	f003 0310 	and.w	r3, r3, #16
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00a      	beq.n	8008bf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfa:	f003 0320 	and.w	r3, r3, #32
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00a      	beq.n	8008c18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	430a      	orrs	r2, r1
 8008c16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d01a      	beq.n	8008c5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	430a      	orrs	r2, r1
 8008c38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c42:	d10a      	bne.n	8008c5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	430a      	orrs	r2, r1
 8008c58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00a      	beq.n	8008c7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	430a      	orrs	r2, r1
 8008c7a:	605a      	str	r2, [r3, #4]
  }
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b086      	sub	sp, #24
 8008c8c:	af02      	add	r7, sp, #8
 8008c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c98:	f7fb faf0 	bl	800427c <HAL_GetTick>
 8008c9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 0308 	and.w	r3, r3, #8
 8008ca8:	2b08      	cmp	r3, #8
 8008caa:	d10e      	bne.n	8008cca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cb0:	9300      	str	r3, [sp, #0]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 f831 	bl	8008d22 <UART_WaitOnFlagUntilTimeout>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d001      	beq.n	8008cca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e027      	b.n	8008d1a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 0304 	and.w	r3, r3, #4
 8008cd4:	2b04      	cmp	r3, #4
 8008cd6:	d10e      	bne.n	8008cf6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cdc:	9300      	str	r3, [sp, #0]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 f81b 	bl	8008d22 <UART_WaitOnFlagUntilTimeout>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d001      	beq.n	8008cf6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e011      	b.n	8008d1a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2220      	movs	r2, #32
 8008cfa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2220      	movs	r2, #32
 8008d00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b09c      	sub	sp, #112	; 0x70
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	60f8      	str	r0, [r7, #12]
 8008d2a:	60b9      	str	r1, [r7, #8]
 8008d2c:	603b      	str	r3, [r7, #0]
 8008d2e:	4613      	mov	r3, r2
 8008d30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d32:	e0a7      	b.n	8008e84 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d3a:	f000 80a3 	beq.w	8008e84 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d3e:	f7fb fa9d 	bl	800427c <HAL_GetTick>
 8008d42:	4602      	mov	r2, r0
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d302      	bcc.n	8008d54 <UART_WaitOnFlagUntilTimeout+0x32>
 8008d4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d13f      	bne.n	8008dd4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d5c:	e853 3f00 	ldrex	r3, [r3]
 8008d60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d68:	667b      	str	r3, [r7, #100]	; 0x64
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	461a      	mov	r2, r3
 8008d70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d74:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d7a:	e841 2300 	strex	r3, r2, [r1]
 8008d7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1e6      	bne.n	8008d54 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	3308      	adds	r3, #8
 8008d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d90:	e853 3f00 	ldrex	r3, [r3]
 8008d94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d98:	f023 0301 	bic.w	r3, r3, #1
 8008d9c:	663b      	str	r3, [r7, #96]	; 0x60
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	3308      	adds	r3, #8
 8008da4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008da6:	64ba      	str	r2, [r7, #72]	; 0x48
 8008da8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008daa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008dac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dae:	e841 2300 	strex	r3, r2, [r1]
 8008db2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1e5      	bne.n	8008d86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2220      	movs	r2, #32
 8008dbe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e068      	b.n	8008ea6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f003 0304 	and.w	r3, r3, #4
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d050      	beq.n	8008e84 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	69db      	ldr	r3, [r3, #28]
 8008de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008df0:	d148      	bne.n	8008e84 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008dfa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e04:	e853 3f00 	ldrex	r3, [r3]
 8008e08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	461a      	mov	r2, r3
 8008e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8008e1c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e22:	e841 2300 	strex	r3, r2, [r1]
 8008e26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d1e6      	bne.n	8008dfc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	3308      	adds	r3, #8
 8008e34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	e853 3f00 	ldrex	r3, [r3]
 8008e3c:	613b      	str	r3, [r7, #16]
   return(result);
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	f023 0301 	bic.w	r3, r3, #1
 8008e44:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	3308      	adds	r3, #8
 8008e4c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e4e:	623a      	str	r2, [r7, #32]
 8008e50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e52:	69f9      	ldr	r1, [r7, #28]
 8008e54:	6a3a      	ldr	r2, [r7, #32]
 8008e56:	e841 2300 	strex	r3, r2, [r1]
 8008e5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d1e5      	bne.n	8008e2e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2220      	movs	r2, #32
 8008e66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2220      	movs	r2, #32
 8008e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2220      	movs	r2, #32
 8008e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008e80:	2303      	movs	r3, #3
 8008e82:	e010      	b.n	8008ea6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	69da      	ldr	r2, [r3, #28]
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	68ba      	ldr	r2, [r7, #8]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	bf0c      	ite	eq
 8008e94:	2301      	moveq	r3, #1
 8008e96:	2300      	movne	r3, #0
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	79fb      	ldrb	r3, [r7, #7]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	f43f af48 	beq.w	8008d34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3770      	adds	r7, #112	; 0x70
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
	...

08008eb0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b096      	sub	sp, #88	; 0x58
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	68ba      	ldr	r2, [r7, #8]
 8008ec2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	88fa      	ldrh	r2, [r7, #6]
 8008ec8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2222      	movs	r2, #34	; 0x22
 8008ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d028      	beq.n	8008f36 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ee8:	4a3e      	ldr	r2, [pc, #248]	; (8008fe4 <UART_Start_Receive_DMA+0x134>)
 8008eea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ef0:	4a3d      	ldr	r2, [pc, #244]	; (8008fe8 <UART_Start_Receive_DMA+0x138>)
 8008ef2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ef8:	4a3c      	ldr	r2, [pc, #240]	; (8008fec <UART_Start_Receive_DMA+0x13c>)
 8008efa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f00:	2200      	movs	r2, #0
 8008f02:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	3324      	adds	r3, #36	; 0x24
 8008f0e:	4619      	mov	r1, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f14:	461a      	mov	r2, r3
 8008f16:	88fb      	ldrh	r3, [r7, #6]
 8008f18:	f7fb fb70 	bl	80045fc <HAL_DMA_Start_IT>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d009      	beq.n	8008f36 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2210      	movs	r2, #16
 8008f26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2220      	movs	r2, #32
 8008f2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	e051      	b.n	8008fda <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d018      	beq.n	8008f70 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f46:	e853 3f00 	ldrex	r3, [r3]
 8008f4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f52:	657b      	str	r3, [r7, #84]	; 0x54
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f5e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f60:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f64:	e841 2300 	strex	r3, r2, [r1]
 8008f68:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1e6      	bne.n	8008f3e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	3308      	adds	r3, #8
 8008f76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7a:	e853 3f00 	ldrex	r3, [r3]
 8008f7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f82:	f043 0301 	orr.w	r3, r3, #1
 8008f86:	653b      	str	r3, [r7, #80]	; 0x50
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	3308      	adds	r3, #8
 8008f8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f90:	637a      	str	r2, [r7, #52]	; 0x34
 8008f92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f98:	e841 2300 	strex	r3, r2, [r1]
 8008f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d1e5      	bne.n	8008f70 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	3308      	adds	r3, #8
 8008faa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	e853 3f00 	ldrex	r3, [r3]
 8008fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	3308      	adds	r3, #8
 8008fc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fc4:	623a      	str	r2, [r7, #32]
 8008fc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc8:	69f9      	ldr	r1, [r7, #28]
 8008fca:	6a3a      	ldr	r2, [r7, #32]
 8008fcc:	e841 2300 	strex	r3, r2, [r1]
 8008fd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d1e5      	bne.n	8008fa4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3758      	adds	r7, #88	; 0x58
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	080091b7 	.word	0x080091b7
 8008fe8:	080092df 	.word	0x080092df
 8008fec:	0800931d 	.word	0x0800931d

08008ff0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b089      	sub	sp, #36	; 0x24
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	e853 3f00 	ldrex	r3, [r3]
 8009004:	60bb      	str	r3, [r7, #8]
   return(result);
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800900c:	61fb      	str	r3, [r7, #28]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	461a      	mov	r2, r3
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	61bb      	str	r3, [r7, #24]
 8009018:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901a:	6979      	ldr	r1, [r7, #20]
 800901c:	69ba      	ldr	r2, [r7, #24]
 800901e:	e841 2300 	strex	r3, r2, [r1]
 8009022:	613b      	str	r3, [r7, #16]
   return(result);
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1e6      	bne.n	8008ff8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2220      	movs	r2, #32
 800902e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8009030:	bf00      	nop
 8009032:	3724      	adds	r7, #36	; 0x24
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800903c:	b480      	push	{r7}
 800903e:	b095      	sub	sp, #84	; 0x54
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800904c:	e853 3f00 	ldrex	r3, [r3]
 8009050:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009054:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009058:	64fb      	str	r3, [r7, #76]	; 0x4c
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	461a      	mov	r2, r3
 8009060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009062:	643b      	str	r3, [r7, #64]	; 0x40
 8009064:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009066:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009068:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800906a:	e841 2300 	strex	r3, r2, [r1]
 800906e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1e6      	bne.n	8009044 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	3308      	adds	r3, #8
 800907c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907e:	6a3b      	ldr	r3, [r7, #32]
 8009080:	e853 3f00 	ldrex	r3, [r3]
 8009084:	61fb      	str	r3, [r7, #28]
   return(result);
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	f023 0301 	bic.w	r3, r3, #1
 800908c:	64bb      	str	r3, [r7, #72]	; 0x48
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	3308      	adds	r3, #8
 8009094:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009096:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009098:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800909c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800909e:	e841 2300 	strex	r3, r2, [r1]
 80090a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1e5      	bne.n	8009076 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d118      	bne.n	80090e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	e853 3f00 	ldrex	r3, [r3]
 80090be:	60bb      	str	r3, [r7, #8]
   return(result);
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	f023 0310 	bic.w	r3, r3, #16
 80090c6:	647b      	str	r3, [r7, #68]	; 0x44
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	461a      	mov	r2, r3
 80090ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090d0:	61bb      	str	r3, [r7, #24]
 80090d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d4:	6979      	ldr	r1, [r7, #20]
 80090d6:	69ba      	ldr	r2, [r7, #24]
 80090d8:	e841 2300 	strex	r3, r2, [r1]
 80090dc:	613b      	str	r3, [r7, #16]
   return(result);
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1e6      	bne.n	80090b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2220      	movs	r2, #32
 80090e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80090f8:	bf00      	nop
 80090fa:	3754      	adds	r7, #84	; 0x54
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b090      	sub	sp, #64	; 0x40
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009110:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	69db      	ldr	r3, [r3, #28]
 8009116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800911a:	d037      	beq.n	800918c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800911c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800911e:	2200      	movs	r2, #0
 8009120:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	3308      	adds	r3, #8
 800912a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912e:	e853 3f00 	ldrex	r3, [r3]
 8009132:	623b      	str	r3, [r7, #32]
   return(result);
 8009134:	6a3b      	ldr	r3, [r7, #32]
 8009136:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800913a:	63bb      	str	r3, [r7, #56]	; 0x38
 800913c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	3308      	adds	r3, #8
 8009142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009144:	633a      	str	r2, [r7, #48]	; 0x30
 8009146:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009148:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800914a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800914c:	e841 2300 	strex	r3, r2, [r1]
 8009150:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009154:	2b00      	cmp	r3, #0
 8009156:	d1e5      	bne.n	8009124 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	e853 3f00 	ldrex	r3, [r3]
 8009164:	60fb      	str	r3, [r7, #12]
   return(result);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800916c:	637b      	str	r3, [r7, #52]	; 0x34
 800916e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	461a      	mov	r2, r3
 8009174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009176:	61fb      	str	r3, [r7, #28]
 8009178:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917a:	69b9      	ldr	r1, [r7, #24]
 800917c:	69fa      	ldr	r2, [r7, #28]
 800917e:	e841 2300 	strex	r3, r2, [r1]
 8009182:	617b      	str	r3, [r7, #20]
   return(result);
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1e6      	bne.n	8009158 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800918a:	e002      	b.n	8009192 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800918c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800918e:	f7ff fa2d 	bl	80085ec <HAL_UART_TxCpltCallback>
}
 8009192:	bf00      	nop
 8009194:	3740      	adds	r7, #64	; 0x40
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b084      	sub	sp, #16
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80091a8:	68f8      	ldr	r0, [r7, #12]
 80091aa:	f7ff fa29 	bl	8008600 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091ae:	bf00      	nop
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b09c      	sub	sp, #112	; 0x70
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	69db      	ldr	r3, [r3, #28]
 80091c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091cc:	d071      	beq.n	80092b2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80091ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091d0:	2200      	movs	r2, #0
 80091d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091de:	e853 3f00 	ldrex	r3, [r3]
 80091e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80091e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80091ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	461a      	mov	r2, r3
 80091f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80091f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80091f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80091fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80091fc:	e841 2300 	strex	r3, r2, [r1]
 8009200:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009204:	2b00      	cmp	r3, #0
 8009206:	d1e6      	bne.n	80091d6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	3308      	adds	r3, #8
 800920e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009212:	e853 3f00 	ldrex	r3, [r3]
 8009216:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800921a:	f023 0301 	bic.w	r3, r3, #1
 800921e:	667b      	str	r3, [r7, #100]	; 0x64
 8009220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	3308      	adds	r3, #8
 8009226:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009228:	647a      	str	r2, [r7, #68]	; 0x44
 800922a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800922e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009230:	e841 2300 	strex	r3, r2, [r1]
 8009234:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009238:	2b00      	cmp	r3, #0
 800923a:	d1e5      	bne.n	8009208 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800923c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3308      	adds	r3, #8
 8009242:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009246:	e853 3f00 	ldrex	r3, [r3]
 800924a:	623b      	str	r3, [r7, #32]
   return(result);
 800924c:	6a3b      	ldr	r3, [r7, #32]
 800924e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009252:	663b      	str	r3, [r7, #96]	; 0x60
 8009254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	3308      	adds	r3, #8
 800925a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800925c:	633a      	str	r2, [r7, #48]	; 0x30
 800925e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009260:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009264:	e841 2300 	strex	r3, r2, [r1]
 8009268:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800926a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1e5      	bne.n	800923c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009272:	2220      	movs	r2, #32
 8009274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800927a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800927c:	2b01      	cmp	r3, #1
 800927e:	d118      	bne.n	80092b2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	e853 3f00 	ldrex	r3, [r3]
 800928c:	60fb      	str	r3, [r7, #12]
   return(result);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f023 0310 	bic.w	r3, r3, #16
 8009294:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	461a      	mov	r2, r3
 800929c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800929e:	61fb      	str	r3, [r7, #28]
 80092a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a2:	69b9      	ldr	r1, [r7, #24]
 80092a4:	69fa      	ldr	r2, [r7, #28]
 80092a6:	e841 2300 	strex	r3, r2, [r1]
 80092aa:	617b      	str	r3, [r7, #20]
   return(result);
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1e6      	bne.n	8009280 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092b4:	2200      	movs	r2, #0
 80092b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d107      	bne.n	80092d0 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80092c6:	4619      	mov	r1, r3
 80092c8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80092ca:	f7ff f9c1 	bl	8008650 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80092ce:	e002      	b.n	80092d6 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80092d0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80092d2:	f7ff f99f 	bl	8008614 <HAL_UART_RxCpltCallback>
}
 80092d6:	bf00      	nop
 80092d8:	3770      	adds	r7, #112	; 0x70
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b084      	sub	sp, #16
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ea:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2201      	movs	r2, #1
 80092f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d109      	bne.n	800930e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009300:	085b      	lsrs	r3, r3, #1
 8009302:	b29b      	uxth	r3, r3
 8009304:	4619      	mov	r1, r3
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	f7ff f9a2 	bl	8008650 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800930c:	e002      	b.n	8009314 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f7ff f98a 	bl	8008628 <HAL_UART_RxHalfCpltCallback>
}
 8009314:	bf00      	nop
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009328:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800932e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009336:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009342:	2b80      	cmp	r3, #128	; 0x80
 8009344:	d109      	bne.n	800935a <UART_DMAError+0x3e>
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	2b21      	cmp	r3, #33	; 0x21
 800934a:	d106      	bne.n	800935a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	2200      	movs	r2, #0
 8009350:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8009354:	6978      	ldr	r0, [r7, #20]
 8009356:	f7ff fe4b 	bl	8008ff0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009364:	2b40      	cmp	r3, #64	; 0x40
 8009366:	d109      	bne.n	800937c <UART_DMAError+0x60>
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2b22      	cmp	r3, #34	; 0x22
 800936c:	d106      	bne.n	800937c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	2200      	movs	r2, #0
 8009372:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8009376:	6978      	ldr	r0, [r7, #20]
 8009378:	f7ff fe60 	bl	800903c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009382:	f043 0210 	orr.w	r2, r3, #16
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800938c:	6978      	ldr	r0, [r7, #20]
 800938e:	f7ff f955 	bl	800863c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009392:	bf00      	nop
 8009394:	3718      	adds	r7, #24
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b084      	sub	sp, #16
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f7ff f93f 	bl	800863c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093be:	bf00      	nop
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093c6:	b580      	push	{r7, lr}
 80093c8:	b088      	sub	sp, #32
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	e853 3f00 	ldrex	r3, [r3]
 80093da:	60bb      	str	r3, [r7, #8]
   return(result);
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093e2:	61fb      	str	r3, [r7, #28]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	461a      	mov	r2, r3
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	61bb      	str	r3, [r7, #24]
 80093ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f0:	6979      	ldr	r1, [r7, #20]
 80093f2:	69ba      	ldr	r2, [r7, #24]
 80093f4:	e841 2300 	strex	r3, r2, [r1]
 80093f8:	613b      	str	r3, [r7, #16]
   return(result);
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1e6      	bne.n	80093ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2220      	movs	r2, #32
 8009404:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f7ff f8ed 	bl	80085ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009412:	bf00      	nop
 8009414:	3720      	adds	r7, #32
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
	...

0800941c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800941c:	b084      	sub	sp, #16
 800941e:	b580      	push	{r7, lr}
 8009420:	b084      	sub	sp, #16
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
 8009426:	f107 001c 	add.w	r0, r7, #28
 800942a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800942e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009430:	2b01      	cmp	r3, #1
 8009432:	d120      	bne.n	8009476 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009438:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	68da      	ldr	r2, [r3, #12]
 8009444:	4b20      	ldr	r3, [pc, #128]	; (80094c8 <USB_CoreInit+0xac>)
 8009446:	4013      	ands	r3, r2
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800945a:	2b01      	cmp	r3, #1
 800945c:	d105      	bne.n	800946a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fa96 	bl	800999c <USB_CoreReset>
 8009470:	4603      	mov	r3, r0
 8009472:	73fb      	strb	r3, [r7, #15]
 8009474:	e010      	b.n	8009498 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fa8a 	bl	800999c <USB_CoreReset>
 8009488:	4603      	mov	r3, r0
 800948a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009490:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8009498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949a:	2b01      	cmp	r3, #1
 800949c:	d10b      	bne.n	80094b6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	f043 0206 	orr.w	r2, r3, #6
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	f043 0220 	orr.w	r2, r3, #32
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80094b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3710      	adds	r7, #16
 80094bc:	46bd      	mov	sp, r7
 80094be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094c2:	b004      	add	sp, #16
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop
 80094c8:	ffbdffbf 	.word	0xffbdffbf

080094cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	f023 0201 	bic.w	r2, r3, #1
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	370c      	adds	r7, #12
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr

080094ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b084      	sub	sp, #16
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	460b      	mov	r3, r1
 80094f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80094fa:	2300      	movs	r3, #0
 80094fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	68db      	ldr	r3, [r3, #12]
 8009502:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800950a:	78fb      	ldrb	r3, [r7, #3]
 800950c:	2b01      	cmp	r3, #1
 800950e:	d115      	bne.n	800953c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800951c:	2001      	movs	r0, #1
 800951e:	f7fa feb9 	bl	8004294 <HAL_Delay>
      ms++;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	3301      	adds	r3, #1
 8009526:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fa29 	bl	8009980 <USB_GetMode>
 800952e:	4603      	mov	r3, r0
 8009530:	2b01      	cmp	r3, #1
 8009532:	d01e      	beq.n	8009572 <USB_SetCurrentMode+0x84>
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2b31      	cmp	r3, #49	; 0x31
 8009538:	d9f0      	bls.n	800951c <USB_SetCurrentMode+0x2e>
 800953a:	e01a      	b.n	8009572 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800953c:	78fb      	ldrb	r3, [r7, #3]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d115      	bne.n	800956e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800954e:	2001      	movs	r0, #1
 8009550:	f7fa fea0 	bl	8004294 <HAL_Delay>
      ms++;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	3301      	adds	r3, #1
 8009558:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 fa10 	bl	8009980 <USB_GetMode>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d005      	beq.n	8009572 <USB_SetCurrentMode+0x84>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2b31      	cmp	r3, #49	; 0x31
 800956a:	d9f0      	bls.n	800954e <USB_SetCurrentMode+0x60>
 800956c:	e001      	b.n	8009572 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e005      	b.n	800957e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2b32      	cmp	r3, #50	; 0x32
 8009576:	d101      	bne.n	800957c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	e000      	b.n	800957e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
	...

08009588 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009588:	b084      	sub	sp, #16
 800958a:	b580      	push	{r7, lr}
 800958c:	b086      	sub	sp, #24
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009596:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800959a:	2300      	movs	r3, #0
 800959c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80095a2:	2300      	movs	r3, #0
 80095a4:	613b      	str	r3, [r7, #16]
 80095a6:	e009      	b.n	80095bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	3340      	adds	r3, #64	; 0x40
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	4413      	add	r3, r2
 80095b2:	2200      	movs	r2, #0
 80095b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	3301      	adds	r3, #1
 80095ba:	613b      	str	r3, [r7, #16]
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	2b0e      	cmp	r3, #14
 80095c0:	d9f2      	bls.n	80095a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80095c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d11c      	bne.n	8009602 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	68fa      	ldr	r2, [r7, #12]
 80095d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095d6:	f043 0302 	orr.w	r3, r3, #2
 80095da:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	601a      	str	r2, [r3, #0]
 8009600:	e005      	b.n	800960e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009606:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009614:	461a      	mov	r2, r3
 8009616:	2300      	movs	r3, #0
 8009618:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009620:	4619      	mov	r1, r3
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009628:	461a      	mov	r2, r3
 800962a:	680b      	ldr	r3, [r1, #0]
 800962c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800962e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009630:	2b01      	cmp	r3, #1
 8009632:	d10c      	bne.n	800964e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009636:	2b00      	cmp	r3, #0
 8009638:	d104      	bne.n	8009644 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800963a:	2100      	movs	r1, #0
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 f965 	bl	800990c <USB_SetDevSpeed>
 8009642:	e008      	b.n	8009656 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009644:	2101      	movs	r1, #1
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 f960 	bl	800990c <USB_SetDevSpeed>
 800964c:	e003      	b.n	8009656 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800964e:	2103      	movs	r1, #3
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 f95b 	bl	800990c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009656:	2110      	movs	r1, #16
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 f8f3 	bl	8009844 <USB_FlushTxFifo>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d001      	beq.n	8009668 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 f91f 	bl	80098ac <USB_FlushRxFifo>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800967e:	461a      	mov	r2, r3
 8009680:	2300      	movs	r3, #0
 8009682:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800968a:	461a      	mov	r2, r3
 800968c:	2300      	movs	r3, #0
 800968e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009696:	461a      	mov	r2, r3
 8009698:	2300      	movs	r3, #0
 800969a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800969c:	2300      	movs	r3, #0
 800969e:	613b      	str	r3, [r7, #16]
 80096a0:	e043      	b.n	800972a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	015a      	lsls	r2, r3, #5
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	4413      	add	r3, r2
 80096aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096b8:	d118      	bne.n	80096ec <USB_DevInit+0x164>
    {
      if (i == 0U)
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10a      	bne.n	80096d6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	015a      	lsls	r2, r3, #5
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	4413      	add	r3, r2
 80096c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096cc:	461a      	mov	r2, r3
 80096ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80096d2:	6013      	str	r3, [r2, #0]
 80096d4:	e013      	b.n	80096fe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	015a      	lsls	r2, r3, #5
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	4413      	add	r3, r2
 80096de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096e2:	461a      	mov	r2, r3
 80096e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80096e8:	6013      	str	r3, [r2, #0]
 80096ea:	e008      	b.n	80096fe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	015a      	lsls	r2, r3, #5
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	4413      	add	r3, r2
 80096f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096f8:	461a      	mov	r2, r3
 80096fa:	2300      	movs	r3, #0
 80096fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	015a      	lsls	r2, r3, #5
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	4413      	add	r3, r2
 8009706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800970a:	461a      	mov	r2, r3
 800970c:	2300      	movs	r3, #0
 800970e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	015a      	lsls	r2, r3, #5
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	4413      	add	r3, r2
 8009718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800971c:	461a      	mov	r2, r3
 800971e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009722:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	3301      	adds	r3, #1
 8009728:	613b      	str	r3, [r7, #16]
 800972a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972c:	693a      	ldr	r2, [r7, #16]
 800972e:	429a      	cmp	r2, r3
 8009730:	d3b7      	bcc.n	80096a2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009732:	2300      	movs	r3, #0
 8009734:	613b      	str	r3, [r7, #16]
 8009736:	e043      	b.n	80097c0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	015a      	lsls	r2, r3, #5
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	4413      	add	r3, r2
 8009740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800974a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800974e:	d118      	bne.n	8009782 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10a      	bne.n	800976c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	015a      	lsls	r2, r3, #5
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	4413      	add	r3, r2
 800975e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009762:	461a      	mov	r2, r3
 8009764:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009768:	6013      	str	r3, [r2, #0]
 800976a:	e013      	b.n	8009794 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	015a      	lsls	r2, r3, #5
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	4413      	add	r3, r2
 8009774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009778:	461a      	mov	r2, r3
 800977a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800977e:	6013      	str	r3, [r2, #0]
 8009780:	e008      	b.n	8009794 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	015a      	lsls	r2, r3, #5
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	4413      	add	r3, r2
 800978a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800978e:	461a      	mov	r2, r3
 8009790:	2300      	movs	r3, #0
 8009792:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	015a      	lsls	r2, r3, #5
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	4413      	add	r3, r2
 800979c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a0:	461a      	mov	r2, r3
 80097a2:	2300      	movs	r3, #0
 80097a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	015a      	lsls	r2, r3, #5
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	4413      	add	r3, r2
 80097ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097b2:	461a      	mov	r2, r3
 80097b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80097b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	3301      	adds	r3, #1
 80097be:	613b      	str	r3, [r7, #16]
 80097c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c2:	693a      	ldr	r2, [r7, #16]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d3b7      	bcc.n	8009738 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80097e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80097ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d105      	bne.n	80097fc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	699b      	ldr	r3, [r3, #24]
 80097f4:	f043 0210 	orr.w	r2, r3, #16
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	699a      	ldr	r2, [r3, #24]
 8009800:	4b0e      	ldr	r3, [pc, #56]	; (800983c <USB_DevInit+0x2b4>)
 8009802:	4313      	orrs	r3, r2
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800980a:	2b00      	cmp	r3, #0
 800980c:	d005      	beq.n	800981a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	699b      	ldr	r3, [r3, #24]
 8009812:	f043 0208 	orr.w	r2, r3, #8
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800981a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800981c:	2b01      	cmp	r3, #1
 800981e:	d105      	bne.n	800982c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	699a      	ldr	r2, [r3, #24]
 8009824:	4b06      	ldr	r3, [pc, #24]	; (8009840 <USB_DevInit+0x2b8>)
 8009826:	4313      	orrs	r3, r2
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800982c:	7dfb      	ldrb	r3, [r7, #23]
}
 800982e:	4618      	mov	r0, r3
 8009830:	3718      	adds	r7, #24
 8009832:	46bd      	mov	sp, r7
 8009834:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009838:	b004      	add	sp, #16
 800983a:	4770      	bx	lr
 800983c:	803c3800 	.word	0x803c3800
 8009840:	40000004 	.word	0x40000004

08009844 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800984e:	2300      	movs	r3, #0
 8009850:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	3301      	adds	r3, #1
 8009856:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	4a13      	ldr	r2, [pc, #76]	; (80098a8 <USB_FlushTxFifo+0x64>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d901      	bls.n	8009864 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009860:	2303      	movs	r3, #3
 8009862:	e01b      	b.n	800989c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	2b00      	cmp	r3, #0
 800986a:	daf2      	bge.n	8009852 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800986c:	2300      	movs	r3, #0
 800986e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	019b      	lsls	r3, r3, #6
 8009874:	f043 0220 	orr.w	r2, r3, #32
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	3301      	adds	r3, #1
 8009880:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	4a08      	ldr	r2, [pc, #32]	; (80098a8 <USB_FlushTxFifo+0x64>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d901      	bls.n	800988e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800988a:	2303      	movs	r3, #3
 800988c:	e006      	b.n	800989c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	f003 0320 	and.w	r3, r3, #32
 8009896:	2b20      	cmp	r3, #32
 8009898:	d0f0      	beq.n	800987c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	3714      	adds	r7, #20
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr
 80098a8:	00030d40 	.word	0x00030d40

080098ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098b4:	2300      	movs	r3, #0
 80098b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	3301      	adds	r3, #1
 80098bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	4a11      	ldr	r2, [pc, #68]	; (8009908 <USB_FlushRxFifo+0x5c>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d901      	bls.n	80098ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80098c6:	2303      	movs	r3, #3
 80098c8:	e018      	b.n	80098fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	691b      	ldr	r3, [r3, #16]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	daf2      	bge.n	80098b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80098d2:	2300      	movs	r3, #0
 80098d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2210      	movs	r2, #16
 80098da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	3301      	adds	r3, #1
 80098e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	4a08      	ldr	r2, [pc, #32]	; (8009908 <USB_FlushRxFifo+0x5c>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d901      	bls.n	80098ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80098ea:	2303      	movs	r3, #3
 80098ec:	e006      	b.n	80098fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	f003 0310 	and.w	r3, r3, #16
 80098f6:	2b10      	cmp	r3, #16
 80098f8:	d0f0      	beq.n	80098dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80098fa:	2300      	movs	r3, #0
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3714      	adds	r7, #20
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr
 8009908:	00030d40 	.word	0x00030d40

0800990c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	460b      	mov	r3, r1
 8009916:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	78fb      	ldrb	r3, [r7, #3]
 8009926:	68f9      	ldr	r1, [r7, #12]
 8009928:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800992c:	4313      	orrs	r3, r2
 800992e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3714      	adds	r7, #20
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr

0800993e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800993e:	b480      	push	{r7}
 8009940:	b085      	sub	sp, #20
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009958:	f023 0303 	bic.w	r3, r3, #3
 800995c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800996c:	f043 0302 	orr.w	r3, r3, #2
 8009970:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3714      	adds	r7, #20
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	695b      	ldr	r3, [r3, #20]
 800998c:	f003 0301 	and.w	r3, r3, #1
}
 8009990:	4618      	mov	r0, r3
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80099a4:	2300      	movs	r3, #0
 80099a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	3301      	adds	r3, #1
 80099ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	4a13      	ldr	r2, [pc, #76]	; (8009a00 <USB_CoreReset+0x64>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d901      	bls.n	80099ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80099b6:	2303      	movs	r3, #3
 80099b8:	e01b      	b.n	80099f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	daf2      	bge.n	80099a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80099c2:	2300      	movs	r3, #0
 80099c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	f043 0201 	orr.w	r2, r3, #1
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	3301      	adds	r3, #1
 80099d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	4a09      	ldr	r2, [pc, #36]	; (8009a00 <USB_CoreReset+0x64>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d901      	bls.n	80099e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80099e0:	2303      	movs	r3, #3
 80099e2:	e006      	b.n	80099f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	f003 0301 	and.w	r3, r3, #1
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d0f0      	beq.n	80099d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	00030d40 	.word	0x00030d40

08009a04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009a04:	b480      	push	{r7}
 8009a06:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009a08:	bf00      	nop
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
	...

08009a14 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a1a:	f3ef 8305 	mrs	r3, IPSR
 8009a1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d10f      	bne.n	8009a46 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a26:	f3ef 8310 	mrs	r3, PRIMASK
 8009a2a:	607b      	str	r3, [r7, #4]
  return(result);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d105      	bne.n	8009a3e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009a32:	f3ef 8311 	mrs	r3, BASEPRI
 8009a36:	603b      	str	r3, [r7, #0]
  return(result);
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d007      	beq.n	8009a4e <osKernelInitialize+0x3a>
 8009a3e:	4b0e      	ldr	r3, [pc, #56]	; (8009a78 <osKernelInitialize+0x64>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2b02      	cmp	r3, #2
 8009a44:	d103      	bne.n	8009a4e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009a46:	f06f 0305 	mvn.w	r3, #5
 8009a4a:	60fb      	str	r3, [r7, #12]
 8009a4c:	e00c      	b.n	8009a68 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009a4e:	4b0a      	ldr	r3, [pc, #40]	; (8009a78 <osKernelInitialize+0x64>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d105      	bne.n	8009a62 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009a56:	4b08      	ldr	r3, [pc, #32]	; (8009a78 <osKernelInitialize+0x64>)
 8009a58:	2201      	movs	r2, #1
 8009a5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	60fb      	str	r3, [r7, #12]
 8009a60:	e002      	b.n	8009a68 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009a62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a66:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009a68:	68fb      	ldr	r3, [r7, #12]
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3714      	adds	r7, #20
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	200071d0 	.word	0x200071d0

08009a7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a82:	f3ef 8305 	mrs	r3, IPSR
 8009a86:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d10f      	bne.n	8009aae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8009a92:	607b      	str	r3, [r7, #4]
  return(result);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d105      	bne.n	8009aa6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009a9a:	f3ef 8311 	mrs	r3, BASEPRI
 8009a9e:	603b      	str	r3, [r7, #0]
  return(result);
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d007      	beq.n	8009ab6 <osKernelStart+0x3a>
 8009aa6:	4b0f      	ldr	r3, [pc, #60]	; (8009ae4 <osKernelStart+0x68>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2b02      	cmp	r3, #2
 8009aac:	d103      	bne.n	8009ab6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8009aae:	f06f 0305 	mvn.w	r3, #5
 8009ab2:	60fb      	str	r3, [r7, #12]
 8009ab4:	e010      	b.n	8009ad8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009ab6:	4b0b      	ldr	r3, [pc, #44]	; (8009ae4 <osKernelStart+0x68>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d109      	bne.n	8009ad2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009abe:	f7ff ffa1 	bl	8009a04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009ac2:	4b08      	ldr	r3, [pc, #32]	; (8009ae4 <osKernelStart+0x68>)
 8009ac4:	2202      	movs	r2, #2
 8009ac6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009ac8:	f001 f8ca 	bl	800ac60 <vTaskStartScheduler>
      stat = osOK;
 8009acc:	2300      	movs	r3, #0
 8009ace:	60fb      	str	r3, [r7, #12]
 8009ad0:	e002      	b.n	8009ad8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8009ad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ad6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	200071d0 	.word	0x200071d0

08009ae8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b090      	sub	sp, #64	; 0x40
 8009aec:	af04      	add	r7, sp, #16
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009af4:	2300      	movs	r3, #0
 8009af6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009af8:	f3ef 8305 	mrs	r3, IPSR
 8009afc:	61fb      	str	r3, [r7, #28]
  return(result);
 8009afe:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f040 808f 	bne.w	8009c24 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b06:	f3ef 8310 	mrs	r3, PRIMASK
 8009b0a:	61bb      	str	r3, [r7, #24]
  return(result);
 8009b0c:	69bb      	ldr	r3, [r7, #24]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d105      	bne.n	8009b1e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009b12:	f3ef 8311 	mrs	r3, BASEPRI
 8009b16:	617b      	str	r3, [r7, #20]
  return(result);
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d003      	beq.n	8009b26 <osThreadNew+0x3e>
 8009b1e:	4b44      	ldr	r3, [pc, #272]	; (8009c30 <osThreadNew+0x148>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2b02      	cmp	r3, #2
 8009b24:	d07e      	beq.n	8009c24 <osThreadNew+0x13c>
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d07b      	beq.n	8009c24 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009b2c:	2380      	movs	r3, #128	; 0x80
 8009b2e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009b30:	2318      	movs	r3, #24
 8009b32:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009b34:	2300      	movs	r3, #0
 8009b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009b38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b3c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d045      	beq.n	8009bd0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d002      	beq.n	8009b52 <osThreadNew+0x6a>
        name = attr->name;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	699b      	ldr	r3, [r3, #24]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d002      	beq.n	8009b60 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	699b      	ldr	r3, [r3, #24]
 8009b5e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d008      	beq.n	8009b78 <osThreadNew+0x90>
 8009b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b68:	2b38      	cmp	r3, #56	; 0x38
 8009b6a:	d805      	bhi.n	8009b78 <osThreadNew+0x90>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	f003 0301 	and.w	r3, r3, #1
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d001      	beq.n	8009b7c <osThreadNew+0x94>
        return (NULL);
 8009b78:	2300      	movs	r3, #0
 8009b7a:	e054      	b.n	8009c26 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	695b      	ldr	r3, [r3, #20]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d003      	beq.n	8009b8c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	695b      	ldr	r3, [r3, #20]
 8009b88:	089b      	lsrs	r3, r3, #2
 8009b8a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00e      	beq.n	8009bb2 <osThreadNew+0xca>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	2ba7      	cmp	r3, #167	; 0xa7
 8009b9a:	d90a      	bls.n	8009bb2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d006      	beq.n	8009bb2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	695b      	ldr	r3, [r3, #20]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d002      	beq.n	8009bb2 <osThreadNew+0xca>
        mem = 1;
 8009bac:	2301      	movs	r3, #1
 8009bae:	623b      	str	r3, [r7, #32]
 8009bb0:	e010      	b.n	8009bd4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10c      	bne.n	8009bd4 <osThreadNew+0xec>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d108      	bne.n	8009bd4 <osThreadNew+0xec>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d104      	bne.n	8009bd4 <osThreadNew+0xec>
          mem = 0;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	623b      	str	r3, [r7, #32]
 8009bce:	e001      	b.n	8009bd4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009bd4:	6a3b      	ldr	r3, [r7, #32]
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d110      	bne.n	8009bfc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009be2:	9202      	str	r2, [sp, #8]
 8009be4:	9301      	str	r3, [sp, #4]
 8009be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be8:	9300      	str	r3, [sp, #0]
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f000 fe3f 	bl	800a874 <xTaskCreateStatic>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	613b      	str	r3, [r7, #16]
 8009bfa:	e013      	b.n	8009c24 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009bfc:	6a3b      	ldr	r3, [r7, #32]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d110      	bne.n	8009c24 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c04:	b29a      	uxth	r2, r3
 8009c06:	f107 0310 	add.w	r3, r7, #16
 8009c0a:	9301      	str	r3, [sp, #4]
 8009c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f000 fe90 	bl	800a93a <xTaskCreate>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d001      	beq.n	8009c24 <osThreadNew+0x13c>
          hTask = NULL;
 8009c20:	2300      	movs	r3, #0
 8009c22:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009c24:	693b      	ldr	r3, [r7, #16]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3730      	adds	r7, #48	; 0x30
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	200071d0 	.word	0x200071d0

08009c34 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b086      	sub	sp, #24
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c3c:	f3ef 8305 	mrs	r3, IPSR
 8009c40:	613b      	str	r3, [r7, #16]
  return(result);
 8009c42:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d10f      	bne.n	8009c68 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c48:	f3ef 8310 	mrs	r3, PRIMASK
 8009c4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d105      	bne.n	8009c60 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009c54:	f3ef 8311 	mrs	r3, BASEPRI
 8009c58:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d007      	beq.n	8009c70 <osDelay+0x3c>
 8009c60:	4b0a      	ldr	r3, [pc, #40]	; (8009c8c <osDelay+0x58>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d103      	bne.n	8009c70 <osDelay+0x3c>
    stat = osErrorISR;
 8009c68:	f06f 0305 	mvn.w	r3, #5
 8009c6c:	617b      	str	r3, [r7, #20]
 8009c6e:	e007      	b.n	8009c80 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009c70:	2300      	movs	r3, #0
 8009c72:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d002      	beq.n	8009c80 <osDelay+0x4c>
      vTaskDelay(ticks);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 ffba 	bl	800abf4 <vTaskDelay>
    }
  }

  return (stat);
 8009c80:	697b      	ldr	r3, [r7, #20]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3718      	adds	r7, #24
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	200071d0 	.word	0x200071d0

08009c90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009c90:	b480      	push	{r7}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	4a07      	ldr	r2, [pc, #28]	; (8009cbc <vApplicationGetIdleTaskMemory+0x2c>)
 8009ca0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	4a06      	ldr	r2, [pc, #24]	; (8009cc0 <vApplicationGetIdleTaskMemory+0x30>)
 8009ca6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2280      	movs	r2, #128	; 0x80
 8009cac:	601a      	str	r2, [r3, #0]
}
 8009cae:	bf00      	nop
 8009cb0:	3714      	adds	r7, #20
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop
 8009cbc:	200071d4 	.word	0x200071d4
 8009cc0:	2000727c 	.word	0x2000727c

08009cc4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	4a07      	ldr	r2, [pc, #28]	; (8009cf0 <vApplicationGetTimerTaskMemory+0x2c>)
 8009cd4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	4a06      	ldr	r2, [pc, #24]	; (8009cf4 <vApplicationGetTimerTaskMemory+0x30>)
 8009cda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ce2:	601a      	str	r2, [r3, #0]
}
 8009ce4:	bf00      	nop
 8009ce6:	3714      	adds	r7, #20
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr
 8009cf0:	2000747c 	.word	0x2000747c
 8009cf4:	20007524 	.word	0x20007524

08009cf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f103 0208 	add.w	r2, r3, #8
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f103 0208 	add.w	r2, r3, #8
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f103 0208 	add.w	r2, r3, #8
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009d2c:	bf00      	nop
 8009d2e:	370c      	adds	r7, #12
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009d46:	bf00      	nop
 8009d48:	370c      	adds	r7, #12
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr

08009d52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d52:	b480      	push	{r7}
 8009d54:	b085      	sub	sp, #20
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
 8009d5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	689a      	ldr	r2, [r3, #8]
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	683a      	ldr	r2, [r7, #0]
 8009d76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	1c5a      	adds	r2, r3, #1
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	601a      	str	r2, [r3, #0]
}
 8009d8e:	bf00      	nop
 8009d90:	3714      	adds	r7, #20
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr

08009d9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d9a:	b480      	push	{r7}
 8009d9c:	b085      	sub	sp, #20
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
 8009da2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009db0:	d103      	bne.n	8009dba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	60fb      	str	r3, [r7, #12]
 8009db8:	e00c      	b.n	8009dd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	3308      	adds	r3, #8
 8009dbe:	60fb      	str	r3, [r7, #12]
 8009dc0:	e002      	b.n	8009dc8 <vListInsert+0x2e>
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	60fb      	str	r3, [r7, #12]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	68ba      	ldr	r2, [r7, #8]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d2f6      	bcs.n	8009dc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	685a      	ldr	r2, [r3, #4]
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	683a      	ldr	r2, [r7, #0]
 8009de2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	683a      	ldr	r2, [r7, #0]
 8009dee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	1c5a      	adds	r2, r3, #1
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	601a      	str	r2, [r3, #0]
}
 8009e00:	bf00      	nop
 8009e02:	3714      	adds	r7, #20
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	6892      	ldr	r2, [r2, #8]
 8009e22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	6852      	ldr	r2, [r2, #4]
 8009e2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d103      	bne.n	8009e40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	689a      	ldr	r2, [r3, #8]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	1e5a      	subs	r2, r3, #1
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3714      	adds	r7, #20
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d10c      	bne.n	8009e8e <xQueueGenericReset+0x2e>
	__asm volatile
 8009e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e78:	b672      	cpsid	i
 8009e7a:	f383 8811 	msr	BASEPRI, r3
 8009e7e:	f3bf 8f6f 	isb	sy
 8009e82:	f3bf 8f4f 	dsb	sy
 8009e86:	b662      	cpsie	i
 8009e88:	60bb      	str	r3, [r7, #8]
}
 8009e8a:	bf00      	nop
 8009e8c:	e7fe      	b.n	8009e8c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8009e8e:	f002 f8cd 	bl	800c02c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e9a:	68f9      	ldr	r1, [r7, #12]
 8009e9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e9e:	fb01 f303 	mul.w	r3, r1, r3
 8009ea2:	441a      	add	r2, r3
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	68f9      	ldr	r1, [r7, #12]
 8009ec2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ec4:	fb01 f303 	mul.w	r3, r1, r3
 8009ec8:	441a      	add	r2, r3
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	22ff      	movs	r2, #255	; 0xff
 8009ed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	22ff      	movs	r2, #255	; 0xff
 8009eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d114      	bne.n	8009f0e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d01a      	beq.n	8009f22 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	3310      	adds	r3, #16
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f001 f95d 	bl	800b1b0 <xTaskRemoveFromEventList>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d012      	beq.n	8009f22 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009efc:	4b0c      	ldr	r3, [pc, #48]	; (8009f30 <xQueueGenericReset+0xd0>)
 8009efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f02:	601a      	str	r2, [r3, #0]
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	f3bf 8f6f 	isb	sy
 8009f0c:	e009      	b.n	8009f22 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	3310      	adds	r3, #16
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7ff fef0 	bl	8009cf8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	3324      	adds	r3, #36	; 0x24
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7ff feeb 	bl	8009cf8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009f22:	f002 f8b7 	bl	800c094 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009f26:	2301      	movs	r3, #1
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	e000ed04 	.word	0xe000ed04

08009f34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b08e      	sub	sp, #56	; 0x38
 8009f38:	af02      	add	r7, sp, #8
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]
 8009f40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d10c      	bne.n	8009f62 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8009f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4c:	b672      	cpsid	i
 8009f4e:	f383 8811 	msr	BASEPRI, r3
 8009f52:	f3bf 8f6f 	isb	sy
 8009f56:	f3bf 8f4f 	dsb	sy
 8009f5a:	b662      	cpsie	i
 8009f5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f5e:	bf00      	nop
 8009f60:	e7fe      	b.n	8009f60 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d10c      	bne.n	8009f82 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8009f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6c:	b672      	cpsid	i
 8009f6e:	f383 8811 	msr	BASEPRI, r3
 8009f72:	f3bf 8f6f 	isb	sy
 8009f76:	f3bf 8f4f 	dsb	sy
 8009f7a:	b662      	cpsie	i
 8009f7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f7e:	bf00      	nop
 8009f80:	e7fe      	b.n	8009f80 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d002      	beq.n	8009f8e <xQueueGenericCreateStatic+0x5a>
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d001      	beq.n	8009f92 <xQueueGenericCreateStatic+0x5e>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e000      	b.n	8009f94 <xQueueGenericCreateStatic+0x60>
 8009f92:	2300      	movs	r3, #0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10c      	bne.n	8009fb2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9c:	b672      	cpsid	i
 8009f9e:	f383 8811 	msr	BASEPRI, r3
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	f3bf 8f4f 	dsb	sy
 8009faa:	b662      	cpsie	i
 8009fac:	623b      	str	r3, [r7, #32]
}
 8009fae:	bf00      	nop
 8009fb0:	e7fe      	b.n	8009fb0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d102      	bne.n	8009fbe <xQueueGenericCreateStatic+0x8a>
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d101      	bne.n	8009fc2 <xQueueGenericCreateStatic+0x8e>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e000      	b.n	8009fc4 <xQueueGenericCreateStatic+0x90>
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10c      	bne.n	8009fe2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8009fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fcc:	b672      	cpsid	i
 8009fce:	f383 8811 	msr	BASEPRI, r3
 8009fd2:	f3bf 8f6f 	isb	sy
 8009fd6:	f3bf 8f4f 	dsb	sy
 8009fda:	b662      	cpsie	i
 8009fdc:	61fb      	str	r3, [r7, #28]
}
 8009fde:	bf00      	nop
 8009fe0:	e7fe      	b.n	8009fe0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009fe2:	2350      	movs	r3, #80	; 0x50
 8009fe4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	2b50      	cmp	r3, #80	; 0x50
 8009fea:	d00c      	beq.n	800a006 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8009fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff0:	b672      	cpsid	i
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	b662      	cpsie	i
 800a000:	61bb      	str	r3, [r7, #24]
}
 800a002:	bf00      	nop
 800a004:	e7fe      	b.n	800a004 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a006:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d00d      	beq.n	800a02e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a014:	2201      	movs	r2, #1
 800a016:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a01a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a020:	9300      	str	r3, [sp, #0]
 800a022:	4613      	mov	r3, r2
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	68b9      	ldr	r1, [r7, #8]
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f000 f805 	bl	800a038 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a030:	4618      	mov	r0, r3
 800a032:	3730      	adds	r7, #48	; 0x30
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	607a      	str	r2, [r7, #4]
 800a044:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d103      	bne.n	800a054 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	69ba      	ldr	r2, [r7, #24]
 800a050:	601a      	str	r2, [r3, #0]
 800a052:	e002      	b.n	800a05a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	68ba      	ldr	r2, [r7, #8]
 800a064:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a066:	2101      	movs	r1, #1
 800a068:	69b8      	ldr	r0, [r7, #24]
 800a06a:	f7ff fef9 	bl	8009e60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	78fa      	ldrb	r2, [r7, #3]
 800a072:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a076:	bf00      	nop
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
	...

0800a080 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b08e      	sub	sp, #56	; 0x38
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	607a      	str	r2, [r7, #4]
 800a08c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a08e:	2300      	movs	r3, #0
 800a090:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d10c      	bne.n	800a0b6 <xQueueGenericSend+0x36>
	__asm volatile
 800a09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a0:	b672      	cpsid	i
 800a0a2:	f383 8811 	msr	BASEPRI, r3
 800a0a6:	f3bf 8f6f 	isb	sy
 800a0aa:	f3bf 8f4f 	dsb	sy
 800a0ae:	b662      	cpsie	i
 800a0b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a0b2:	bf00      	nop
 800a0b4:	e7fe      	b.n	800a0b4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d103      	bne.n	800a0c4 <xQueueGenericSend+0x44>
 800a0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d101      	bne.n	800a0c8 <xQueueGenericSend+0x48>
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e000      	b.n	800a0ca <xQueueGenericSend+0x4a>
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d10c      	bne.n	800a0e8 <xQueueGenericSend+0x68>
	__asm volatile
 800a0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d2:	b672      	cpsid	i
 800a0d4:	f383 8811 	msr	BASEPRI, r3
 800a0d8:	f3bf 8f6f 	isb	sy
 800a0dc:	f3bf 8f4f 	dsb	sy
 800a0e0:	b662      	cpsie	i
 800a0e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a0e4:	bf00      	nop
 800a0e6:	e7fe      	b.n	800a0e6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d103      	bne.n	800a0f6 <xQueueGenericSend+0x76>
 800a0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d101      	bne.n	800a0fa <xQueueGenericSend+0x7a>
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e000      	b.n	800a0fc <xQueueGenericSend+0x7c>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d10c      	bne.n	800a11a <xQueueGenericSend+0x9a>
	__asm volatile
 800a100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a104:	b672      	cpsid	i
 800a106:	f383 8811 	msr	BASEPRI, r3
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	b662      	cpsie	i
 800a114:	623b      	str	r3, [r7, #32]
}
 800a116:	bf00      	nop
 800a118:	e7fe      	b.n	800a118 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a11a:	f001 fa3b 	bl	800b594 <xTaskGetSchedulerState>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d102      	bne.n	800a12a <xQueueGenericSend+0xaa>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d101      	bne.n	800a12e <xQueueGenericSend+0xae>
 800a12a:	2301      	movs	r3, #1
 800a12c:	e000      	b.n	800a130 <xQueueGenericSend+0xb0>
 800a12e:	2300      	movs	r3, #0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10c      	bne.n	800a14e <xQueueGenericSend+0xce>
	__asm volatile
 800a134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a138:	b672      	cpsid	i
 800a13a:	f383 8811 	msr	BASEPRI, r3
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	b662      	cpsie	i
 800a148:	61fb      	str	r3, [r7, #28]
}
 800a14a:	bf00      	nop
 800a14c:	e7fe      	b.n	800a14c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a14e:	f001 ff6d 	bl	800c02c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d302      	bcc.n	800a164 <xQueueGenericSend+0xe4>
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	2b02      	cmp	r3, #2
 800a162:	d129      	bne.n	800a1b8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	68b9      	ldr	r1, [r7, #8]
 800a168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a16a:	f000 fa15 	bl	800a598 <prvCopyDataToQueue>
 800a16e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a174:	2b00      	cmp	r3, #0
 800a176:	d010      	beq.n	800a19a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17a:	3324      	adds	r3, #36	; 0x24
 800a17c:	4618      	mov	r0, r3
 800a17e:	f001 f817 	bl	800b1b0 <xTaskRemoveFromEventList>
 800a182:	4603      	mov	r3, r0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d013      	beq.n	800a1b0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a188:	4b3f      	ldr	r3, [pc, #252]	; (800a288 <xQueueGenericSend+0x208>)
 800a18a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a18e:	601a      	str	r2, [r3, #0]
 800a190:	f3bf 8f4f 	dsb	sy
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	e00a      	b.n	800a1b0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d007      	beq.n	800a1b0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a1a0:	4b39      	ldr	r3, [pc, #228]	; (800a288 <xQueueGenericSend+0x208>)
 800a1a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1a6:	601a      	str	r2, [r3, #0]
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a1b0:	f001 ff70 	bl	800c094 <vPortExitCritical>
				return pdPASS;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e063      	b.n	800a280 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d103      	bne.n	800a1c6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1be:	f001 ff69 	bl	800c094 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	e05c      	b.n	800a280 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d106      	bne.n	800a1da <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a1cc:	f107 0314 	add.w	r3, r7, #20
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f001 f87b 	bl	800b2cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a1da:	f001 ff5b 	bl	800c094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a1de:	f000 fdb3 	bl	800ad48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1e2:	f001 ff23 	bl	800c02c <vPortEnterCritical>
 800a1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1ec:	b25b      	sxtb	r3, r3
 800a1ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1f2:	d103      	bne.n	800a1fc <xQueueGenericSend+0x17c>
 800a1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a202:	b25b      	sxtb	r3, r3
 800a204:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a208:	d103      	bne.n	800a212 <xQueueGenericSend+0x192>
 800a20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a212:	f001 ff3f 	bl	800c094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a216:	1d3a      	adds	r2, r7, #4
 800a218:	f107 0314 	add.w	r3, r7, #20
 800a21c:	4611      	mov	r1, r2
 800a21e:	4618      	mov	r0, r3
 800a220:	f001 f86a 	bl	800b2f8 <xTaskCheckForTimeOut>
 800a224:	4603      	mov	r3, r0
 800a226:	2b00      	cmp	r3, #0
 800a228:	d124      	bne.n	800a274 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a22a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a22c:	f000 faac 	bl	800a788 <prvIsQueueFull>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d018      	beq.n	800a268 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a238:	3310      	adds	r3, #16
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	4611      	mov	r1, r2
 800a23e:	4618      	mov	r0, r3
 800a240:	f000 ff62 	bl	800b108 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a246:	f000 fa37 	bl	800a6b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a24a:	f000 fd8b 	bl	800ad64 <xTaskResumeAll>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	f47f af7c 	bne.w	800a14e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800a256:	4b0c      	ldr	r3, [pc, #48]	; (800a288 <xQueueGenericSend+0x208>)
 800a258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a25c:	601a      	str	r2, [r3, #0]
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	f3bf 8f6f 	isb	sy
 800a266:	e772      	b.n	800a14e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a26a:	f000 fa25 	bl	800a6b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a26e:	f000 fd79 	bl	800ad64 <xTaskResumeAll>
 800a272:	e76c      	b.n	800a14e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a276:	f000 fa1f 	bl	800a6b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a27a:	f000 fd73 	bl	800ad64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a27e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a280:	4618      	mov	r0, r3
 800a282:	3738      	adds	r7, #56	; 0x38
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	e000ed04 	.word	0xe000ed04

0800a28c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b08e      	sub	sp, #56	; 0x38
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
 800a298:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d10c      	bne.n	800a2be <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800a2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a8:	b672      	cpsid	i
 800a2aa:	f383 8811 	msr	BASEPRI, r3
 800a2ae:	f3bf 8f6f 	isb	sy
 800a2b2:	f3bf 8f4f 	dsb	sy
 800a2b6:	b662      	cpsie	i
 800a2b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a2ba:	bf00      	nop
 800a2bc:	e7fe      	b.n	800a2bc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d103      	bne.n	800a2cc <xQueueGenericSendFromISR+0x40>
 800a2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d101      	bne.n	800a2d0 <xQueueGenericSendFromISR+0x44>
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e000      	b.n	800a2d2 <xQueueGenericSendFromISR+0x46>
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d10c      	bne.n	800a2f0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800a2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2da:	b672      	cpsid	i
 800a2dc:	f383 8811 	msr	BASEPRI, r3
 800a2e0:	f3bf 8f6f 	isb	sy
 800a2e4:	f3bf 8f4f 	dsb	sy
 800a2e8:	b662      	cpsie	i
 800a2ea:	623b      	str	r3, [r7, #32]
}
 800a2ec:	bf00      	nop
 800a2ee:	e7fe      	b.n	800a2ee <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	2b02      	cmp	r3, #2
 800a2f4:	d103      	bne.n	800a2fe <xQueueGenericSendFromISR+0x72>
 800a2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d101      	bne.n	800a302 <xQueueGenericSendFromISR+0x76>
 800a2fe:	2301      	movs	r3, #1
 800a300:	e000      	b.n	800a304 <xQueueGenericSendFromISR+0x78>
 800a302:	2300      	movs	r3, #0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10c      	bne.n	800a322 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800a308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30c:	b672      	cpsid	i
 800a30e:	f383 8811 	msr	BASEPRI, r3
 800a312:	f3bf 8f6f 	isb	sy
 800a316:	f3bf 8f4f 	dsb	sy
 800a31a:	b662      	cpsie	i
 800a31c:	61fb      	str	r3, [r7, #28]
}
 800a31e:	bf00      	nop
 800a320:	e7fe      	b.n	800a320 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a322:	f001 ff6b 	bl	800c1fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a326:	f3ef 8211 	mrs	r2, BASEPRI
 800a32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32e:	b672      	cpsid	i
 800a330:	f383 8811 	msr	BASEPRI, r3
 800a334:	f3bf 8f6f 	isb	sy
 800a338:	f3bf 8f4f 	dsb	sy
 800a33c:	b662      	cpsie	i
 800a33e:	61ba      	str	r2, [r7, #24]
 800a340:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a342:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a344:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a34e:	429a      	cmp	r2, r3
 800a350:	d302      	bcc.n	800a358 <xQueueGenericSendFromISR+0xcc>
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	2b02      	cmp	r3, #2
 800a356:	d12c      	bne.n	800a3b2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a35e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a362:	683a      	ldr	r2, [r7, #0]
 800a364:	68b9      	ldr	r1, [r7, #8]
 800a366:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a368:	f000 f916 	bl	800a598 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a36c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a374:	d112      	bne.n	800a39c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d016      	beq.n	800a3ac <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a380:	3324      	adds	r3, #36	; 0x24
 800a382:	4618      	mov	r0, r3
 800a384:	f000 ff14 	bl	800b1b0 <xTaskRemoveFromEventList>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00e      	beq.n	800a3ac <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d00b      	beq.n	800a3ac <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	601a      	str	r2, [r3, #0]
 800a39a:	e007      	b.n	800a3ac <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a39c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	b25a      	sxtb	r2, r3
 800a3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a3b0:	e001      	b.n	800a3b6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	637b      	str	r3, [r7, #52]	; 0x34
 800a3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a3c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a3c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3738      	adds	r7, #56	; 0x38
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b08c      	sub	sp, #48	; 0x30
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d10c      	bne.n	800a400 <xQueueReceive+0x34>
	__asm volatile
 800a3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ea:	b672      	cpsid	i
 800a3ec:	f383 8811 	msr	BASEPRI, r3
 800a3f0:	f3bf 8f6f 	isb	sy
 800a3f4:	f3bf 8f4f 	dsb	sy
 800a3f8:	b662      	cpsie	i
 800a3fa:	623b      	str	r3, [r7, #32]
}
 800a3fc:	bf00      	nop
 800a3fe:	e7fe      	b.n	800a3fe <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d103      	bne.n	800a40e <xQueueReceive+0x42>
 800a406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d101      	bne.n	800a412 <xQueueReceive+0x46>
 800a40e:	2301      	movs	r3, #1
 800a410:	e000      	b.n	800a414 <xQueueReceive+0x48>
 800a412:	2300      	movs	r3, #0
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10c      	bne.n	800a432 <xQueueReceive+0x66>
	__asm volatile
 800a418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41c:	b672      	cpsid	i
 800a41e:	f383 8811 	msr	BASEPRI, r3
 800a422:	f3bf 8f6f 	isb	sy
 800a426:	f3bf 8f4f 	dsb	sy
 800a42a:	b662      	cpsie	i
 800a42c:	61fb      	str	r3, [r7, #28]
}
 800a42e:	bf00      	nop
 800a430:	e7fe      	b.n	800a430 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a432:	f001 f8af 	bl	800b594 <xTaskGetSchedulerState>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d102      	bne.n	800a442 <xQueueReceive+0x76>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d101      	bne.n	800a446 <xQueueReceive+0x7a>
 800a442:	2301      	movs	r3, #1
 800a444:	e000      	b.n	800a448 <xQueueReceive+0x7c>
 800a446:	2300      	movs	r3, #0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d10c      	bne.n	800a466 <xQueueReceive+0x9a>
	__asm volatile
 800a44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a450:	b672      	cpsid	i
 800a452:	f383 8811 	msr	BASEPRI, r3
 800a456:	f3bf 8f6f 	isb	sy
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	b662      	cpsie	i
 800a460:	61bb      	str	r3, [r7, #24]
}
 800a462:	bf00      	nop
 800a464:	e7fe      	b.n	800a464 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a466:	f001 fde1 	bl	800c02c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a46e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a472:	2b00      	cmp	r3, #0
 800a474:	d01f      	beq.n	800a4b6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a476:	68b9      	ldr	r1, [r7, #8]
 800a478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a47a:	f000 f8f7 	bl	800a66c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a480:	1e5a      	subs	r2, r3, #1
 800a482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a484:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d00f      	beq.n	800a4ae <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a490:	3310      	adds	r3, #16
 800a492:	4618      	mov	r0, r3
 800a494:	f000 fe8c 	bl	800b1b0 <xTaskRemoveFromEventList>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d007      	beq.n	800a4ae <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a49e:	4b3d      	ldr	r3, [pc, #244]	; (800a594 <xQueueReceive+0x1c8>)
 800a4a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4a4:	601a      	str	r2, [r3, #0]
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a4ae:	f001 fdf1 	bl	800c094 <vPortExitCritical>
				return pdPASS;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e069      	b.n	800a58a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d103      	bne.n	800a4c4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a4bc:	f001 fdea 	bl	800c094 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	e062      	b.n	800a58a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d106      	bne.n	800a4d8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4ca:	f107 0310 	add.w	r3, r7, #16
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f000 fefc 	bl	800b2cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4d8:	f001 fddc 	bl	800c094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4dc:	f000 fc34 	bl	800ad48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4e0:	f001 fda4 	bl	800c02c <vPortEnterCritical>
 800a4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4ea:	b25b      	sxtb	r3, r3
 800a4ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4f0:	d103      	bne.n	800a4fa <xQueueReceive+0x12e>
 800a4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a500:	b25b      	sxtb	r3, r3
 800a502:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a506:	d103      	bne.n	800a510 <xQueueReceive+0x144>
 800a508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50a:	2200      	movs	r2, #0
 800a50c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a510:	f001 fdc0 	bl	800c094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a514:	1d3a      	adds	r2, r7, #4
 800a516:	f107 0310 	add.w	r3, r7, #16
 800a51a:	4611      	mov	r1, r2
 800a51c:	4618      	mov	r0, r3
 800a51e:	f000 feeb 	bl	800b2f8 <xTaskCheckForTimeOut>
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d123      	bne.n	800a570 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a52a:	f000 f917 	bl	800a75c <prvIsQueueEmpty>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d017      	beq.n	800a564 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a536:	3324      	adds	r3, #36	; 0x24
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	4611      	mov	r1, r2
 800a53c:	4618      	mov	r0, r3
 800a53e:	f000 fde3 	bl	800b108 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a542:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a544:	f000 f8b8 	bl	800a6b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a548:	f000 fc0c 	bl	800ad64 <xTaskResumeAll>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d189      	bne.n	800a466 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800a552:	4b10      	ldr	r3, [pc, #64]	; (800a594 <xQueueReceive+0x1c8>)
 800a554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a558:	601a      	str	r2, [r3, #0]
 800a55a:	f3bf 8f4f 	dsb	sy
 800a55e:	f3bf 8f6f 	isb	sy
 800a562:	e780      	b.n	800a466 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a566:	f000 f8a7 	bl	800a6b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a56a:	f000 fbfb 	bl	800ad64 <xTaskResumeAll>
 800a56e:	e77a      	b.n	800a466 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a572:	f000 f8a1 	bl	800a6b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a576:	f000 fbf5 	bl	800ad64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a57a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a57c:	f000 f8ee 	bl	800a75c <prvIsQueueEmpty>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	f43f af6f 	beq.w	800a466 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a588:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3730      	adds	r7, #48	; 0x30
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	e000ed04 	.word	0xe000ed04

0800a598 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b086      	sub	sp, #24
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d10d      	bne.n	800a5d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d14d      	bne.n	800a65a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f001 f804 	bl	800b5d0 <xTaskPriorityDisinherit>
 800a5c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	609a      	str	r2, [r3, #8]
 800a5d0:	e043      	b.n	800a65a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d119      	bne.n	800a60c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	6858      	ldr	r0, [r3, #4]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	68b9      	ldr	r1, [r7, #8]
 800a5e4:	f013 fa4b 	bl	801da7e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	685a      	ldr	r2, [r3, #4]
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f0:	441a      	add	r2, r3
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	685a      	ldr	r2, [r3, #4]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	689b      	ldr	r3, [r3, #8]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d32b      	bcc.n	800a65a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	605a      	str	r2, [r3, #4]
 800a60a:	e026      	b.n	800a65a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	68d8      	ldr	r0, [r3, #12]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a614:	461a      	mov	r2, r3
 800a616:	68b9      	ldr	r1, [r7, #8]
 800a618:	f013 fa31 	bl	801da7e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	68da      	ldr	r2, [r3, #12]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a624:	425b      	negs	r3, r3
 800a626:	441a      	add	r2, r3
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	68da      	ldr	r2, [r3, #12]
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	429a      	cmp	r2, r3
 800a636:	d207      	bcs.n	800a648 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	689a      	ldr	r2, [r3, #8]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a640:	425b      	negs	r3, r3
 800a642:	441a      	add	r2, r3
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2b02      	cmp	r3, #2
 800a64c:	d105      	bne.n	800a65a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d002      	beq.n	800a65a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	3b01      	subs	r3, #1
 800a658:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	1c5a      	adds	r2, r3, #1
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a662:	697b      	ldr	r3, [r7, #20]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3718      	adds	r7, #24
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d018      	beq.n	800a6b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	68da      	ldr	r2, [r3, #12]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a686:	441a      	add	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	68da      	ldr	r2, [r3, #12]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	429a      	cmp	r2, r3
 800a696:	d303      	bcc.n	800a6a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	68d9      	ldr	r1, [r3, #12]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	6838      	ldr	r0, [r7, #0]
 800a6ac:	f013 f9e7 	bl	801da7e <memcpy>
	}
}
 800a6b0:	bf00      	nop
 800a6b2:	3708      	adds	r7, #8
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a6c0:	f001 fcb4 	bl	800c02c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6cc:	e011      	b.n	800a6f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d012      	beq.n	800a6fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	3324      	adds	r3, #36	; 0x24
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f000 fd68 	bl	800b1b0 <xTaskRemoveFromEventList>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d001      	beq.n	800a6ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a6e6:	f000 fe6d 	bl	800b3c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a6ea:	7bfb      	ldrb	r3, [r7, #15]
 800a6ec:	3b01      	subs	r3, #1
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	dce9      	bgt.n	800a6ce <prvUnlockQueue+0x16>
 800a6fa:	e000      	b.n	800a6fe <prvUnlockQueue+0x46>
					break;
 800a6fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	22ff      	movs	r2, #255	; 0xff
 800a702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a706:	f001 fcc5 	bl	800c094 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a70a:	f001 fc8f 	bl	800c02c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a714:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a716:	e011      	b.n	800a73c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	691b      	ldr	r3, [r3, #16]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d012      	beq.n	800a746 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	3310      	adds	r3, #16
 800a724:	4618      	mov	r0, r3
 800a726:	f000 fd43 	bl	800b1b0 <xTaskRemoveFromEventList>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d001      	beq.n	800a734 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a730:	f000 fe48 	bl	800b3c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a734:	7bbb      	ldrb	r3, [r7, #14]
 800a736:	3b01      	subs	r3, #1
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a73c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a740:	2b00      	cmp	r3, #0
 800a742:	dce9      	bgt.n	800a718 <prvUnlockQueue+0x60>
 800a744:	e000      	b.n	800a748 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a746:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	22ff      	movs	r2, #255	; 0xff
 800a74c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a750:	f001 fca0 	bl	800c094 <vPortExitCritical>
}
 800a754:	bf00      	nop
 800a756:	3710      	adds	r7, #16
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a764:	f001 fc62 	bl	800c02c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d102      	bne.n	800a776 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a770:	2301      	movs	r3, #1
 800a772:	60fb      	str	r3, [r7, #12]
 800a774:	e001      	b.n	800a77a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a776:	2300      	movs	r3, #0
 800a778:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a77a:	f001 fc8b 	bl	800c094 <vPortExitCritical>

	return xReturn;
 800a77e:	68fb      	ldr	r3, [r7, #12]
}
 800a780:	4618      	mov	r0, r3
 800a782:	3710      	adds	r7, #16
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a790:	f001 fc4c 	bl	800c02c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d102      	bne.n	800a7a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	60fb      	str	r3, [r7, #12]
 800a7a4:	e001      	b.n	800a7aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7aa:	f001 fc73 	bl	800c094 <vPortExitCritical>

	return xReturn;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	60fb      	str	r3, [r7, #12]
 800a7c6:	e014      	b.n	800a7f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a7c8:	4a0f      	ldr	r2, [pc, #60]	; (800a808 <vQueueAddToRegistry+0x50>)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d10b      	bne.n	800a7ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a7d4:	490c      	ldr	r1, [pc, #48]	; (800a808 <vQueueAddToRegistry+0x50>)
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	683a      	ldr	r2, [r7, #0]
 800a7da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a7de:	4a0a      	ldr	r2, [pc, #40]	; (800a808 <vQueueAddToRegistry+0x50>)
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	00db      	lsls	r3, r3, #3
 800a7e4:	4413      	add	r3, r2
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a7ea:	e006      	b.n	800a7fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	60fb      	str	r3, [r7, #12]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2b07      	cmp	r3, #7
 800a7f6:	d9e7      	bls.n	800a7c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a7f8:	bf00      	nop
 800a7fa:	bf00      	nop
 800a7fc:	3714      	adds	r7, #20
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr
 800a806:	bf00      	nop
 800a808:	20007924 	.word	0x20007924

0800a80c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b086      	sub	sp, #24
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a81c:	f001 fc06 	bl	800c02c <vPortEnterCritical>
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a826:	b25b      	sxtb	r3, r3
 800a828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a82c:	d103      	bne.n	800a836 <vQueueWaitForMessageRestricted+0x2a>
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	2200      	movs	r2, #0
 800a832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a83c:	b25b      	sxtb	r3, r3
 800a83e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a842:	d103      	bne.n	800a84c <vQueueWaitForMessageRestricted+0x40>
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	2200      	movs	r2, #0
 800a848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a84c:	f001 fc22 	bl	800c094 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a854:	2b00      	cmp	r3, #0
 800a856:	d106      	bne.n	800a866 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	3324      	adds	r3, #36	; 0x24
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	68b9      	ldr	r1, [r7, #8]
 800a860:	4618      	mov	r0, r3
 800a862:	f000 fc77 	bl	800b154 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a866:	6978      	ldr	r0, [r7, #20]
 800a868:	f7ff ff26 	bl	800a6b8 <prvUnlockQueue>
	}
 800a86c:	bf00      	nop
 800a86e:	3718      	adds	r7, #24
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a874:	b580      	push	{r7, lr}
 800a876:	b08e      	sub	sp, #56	; 0x38
 800a878:	af04      	add	r7, sp, #16
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]
 800a880:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a884:	2b00      	cmp	r3, #0
 800a886:	d10c      	bne.n	800a8a2 <xTaskCreateStatic+0x2e>
	__asm volatile
 800a888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88c:	b672      	cpsid	i
 800a88e:	f383 8811 	msr	BASEPRI, r3
 800a892:	f3bf 8f6f 	isb	sy
 800a896:	f3bf 8f4f 	dsb	sy
 800a89a:	b662      	cpsie	i
 800a89c:	623b      	str	r3, [r7, #32]
}
 800a89e:	bf00      	nop
 800a8a0:	e7fe      	b.n	800a8a0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800a8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d10c      	bne.n	800a8c2 <xTaskCreateStatic+0x4e>
	__asm volatile
 800a8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ac:	b672      	cpsid	i
 800a8ae:	f383 8811 	msr	BASEPRI, r3
 800a8b2:	f3bf 8f6f 	isb	sy
 800a8b6:	f3bf 8f4f 	dsb	sy
 800a8ba:	b662      	cpsie	i
 800a8bc:	61fb      	str	r3, [r7, #28]
}
 800a8be:	bf00      	nop
 800a8c0:	e7fe      	b.n	800a8c0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a8c2:	23a8      	movs	r3, #168	; 0xa8
 800a8c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	2ba8      	cmp	r3, #168	; 0xa8
 800a8ca:	d00c      	beq.n	800a8e6 <xTaskCreateStatic+0x72>
	__asm volatile
 800a8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d0:	b672      	cpsid	i
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	b662      	cpsie	i
 800a8e0:	61bb      	str	r3, [r7, #24]
}
 800a8e2:	bf00      	nop
 800a8e4:	e7fe      	b.n	800a8e4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a8e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d01e      	beq.n	800a92c <xTaskCreateStatic+0xb8>
 800a8ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d01b      	beq.n	800a92c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a900:	2202      	movs	r2, #2
 800a902:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a906:	2300      	movs	r3, #0
 800a908:	9303      	str	r3, [sp, #12]
 800a90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90c:	9302      	str	r3, [sp, #8]
 800a90e:	f107 0314 	add.w	r3, r7, #20
 800a912:	9301      	str	r3, [sp, #4]
 800a914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a916:	9300      	str	r3, [sp, #0]
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	68b9      	ldr	r1, [r7, #8]
 800a91e:	68f8      	ldr	r0, [r7, #12]
 800a920:	f000 f850 	bl	800a9c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a924:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a926:	f000 f8f5 	bl	800ab14 <prvAddNewTaskToReadyList>
 800a92a:	e001      	b.n	800a930 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800a92c:	2300      	movs	r3, #0
 800a92e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a930:	697b      	ldr	r3, [r7, #20]
	}
 800a932:	4618      	mov	r0, r3
 800a934:	3728      	adds	r7, #40	; 0x28
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b08c      	sub	sp, #48	; 0x30
 800a93e:	af04      	add	r7, sp, #16
 800a940:	60f8      	str	r0, [r7, #12]
 800a942:	60b9      	str	r1, [r7, #8]
 800a944:	603b      	str	r3, [r7, #0]
 800a946:	4613      	mov	r3, r2
 800a948:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a94a:	88fb      	ldrh	r3, [r7, #6]
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	4618      	mov	r0, r3
 800a950:	f001 fc98 	bl	800c284 <pvPortMalloc>
 800a954:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00e      	beq.n	800a97a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a95c:	20a8      	movs	r0, #168	; 0xa8
 800a95e:	f001 fc91 	bl	800c284 <pvPortMalloc>
 800a962:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a964:	69fb      	ldr	r3, [r7, #28]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d003      	beq.n	800a972 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a96a:	69fb      	ldr	r3, [r7, #28]
 800a96c:	697a      	ldr	r2, [r7, #20]
 800a96e:	631a      	str	r2, [r3, #48]	; 0x30
 800a970:	e005      	b.n	800a97e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a972:	6978      	ldr	r0, [r7, #20]
 800a974:	f001 fd50 	bl	800c418 <vPortFree>
 800a978:	e001      	b.n	800a97e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a97a:	2300      	movs	r3, #0
 800a97c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a97e:	69fb      	ldr	r3, [r7, #28]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d017      	beq.n	800a9b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	2200      	movs	r2, #0
 800a988:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a98c:	88fa      	ldrh	r2, [r7, #6]
 800a98e:	2300      	movs	r3, #0
 800a990:	9303      	str	r3, [sp, #12]
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	9302      	str	r3, [sp, #8]
 800a996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a998:	9301      	str	r3, [sp, #4]
 800a99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99c:	9300      	str	r3, [sp, #0]
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	68b9      	ldr	r1, [r7, #8]
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f000 f80e 	bl	800a9c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9a8:	69f8      	ldr	r0, [r7, #28]
 800a9aa:	f000 f8b3 	bl	800ab14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	61bb      	str	r3, [r7, #24]
 800a9b2:	e002      	b.n	800a9ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a9b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a9ba:	69bb      	ldr	r3, [r7, #24]
	}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3720      	adds	r7, #32
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b088      	sub	sp, #32
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	60f8      	str	r0, [r7, #12]
 800a9cc:	60b9      	str	r1, [r7, #8]
 800a9ce:	607a      	str	r2, [r7, #4]
 800a9d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	461a      	mov	r2, r3
 800a9dc:	21a5      	movs	r1, #165	; 0xa5
 800a9de:	f012 ff1d 	bl	801d81c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9e6:	6879      	ldr	r1, [r7, #4]
 800a9e8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a9ec:	440b      	add	r3, r1
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	4413      	add	r3, r2
 800a9f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a9f4:	69bb      	ldr	r3, [r7, #24]
 800a9f6:	f023 0307 	bic.w	r3, r3, #7
 800a9fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a9fc:	69bb      	ldr	r3, [r7, #24]
 800a9fe:	f003 0307 	and.w	r3, r3, #7
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d00c      	beq.n	800aa20 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800aa06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0a:	b672      	cpsid	i
 800aa0c:	f383 8811 	msr	BASEPRI, r3
 800aa10:	f3bf 8f6f 	isb	sy
 800aa14:	f3bf 8f4f 	dsb	sy
 800aa18:	b662      	cpsie	i
 800aa1a:	617b      	str	r3, [r7, #20]
}
 800aa1c:	bf00      	nop
 800aa1e:	e7fe      	b.n	800aa1e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d01f      	beq.n	800aa66 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa26:	2300      	movs	r3, #0
 800aa28:	61fb      	str	r3, [r7, #28]
 800aa2a:	e012      	b.n	800aa52 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aa2c:	68ba      	ldr	r2, [r7, #8]
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	4413      	add	r3, r2
 800aa32:	7819      	ldrb	r1, [r3, #0]
 800aa34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa36:	69fb      	ldr	r3, [r7, #28]
 800aa38:	4413      	add	r3, r2
 800aa3a:	3334      	adds	r3, #52	; 0x34
 800aa3c:	460a      	mov	r2, r1
 800aa3e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aa40:	68ba      	ldr	r2, [r7, #8]
 800aa42:	69fb      	ldr	r3, [r7, #28]
 800aa44:	4413      	add	r3, r2
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d006      	beq.n	800aa5a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	3301      	adds	r3, #1
 800aa50:	61fb      	str	r3, [r7, #28]
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	2b0f      	cmp	r3, #15
 800aa56:	d9e9      	bls.n	800aa2c <prvInitialiseNewTask+0x68>
 800aa58:	e000      	b.n	800aa5c <prvInitialiseNewTask+0x98>
			{
				break;
 800aa5a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aa5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5e:	2200      	movs	r2, #0
 800aa60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa64:	e003      	b.n	800aa6e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aa66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa68:	2200      	movs	r2, #0
 800aa6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa70:	2b37      	cmp	r3, #55	; 0x37
 800aa72:	d901      	bls.n	800aa78 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa74:	2337      	movs	r3, #55	; 0x37
 800aa76:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aa78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa7c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aa7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa82:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aa84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa86:	2200      	movs	r2, #0
 800aa88:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aa8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8c:	3304      	adds	r3, #4
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7ff f952 	bl	8009d38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aa94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa96:	3318      	adds	r3, #24
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7ff f94d 	bl	8009d38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aa9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaa2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aab2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab6:	2200      	movs	r2, #0
 800aab8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabe:	2200      	movs	r2, #0
 800aac0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac6:	3354      	adds	r3, #84	; 0x54
 800aac8:	224c      	movs	r2, #76	; 0x4c
 800aaca:	2100      	movs	r1, #0
 800aacc:	4618      	mov	r0, r3
 800aace:	f012 fea5 	bl	801d81c <memset>
 800aad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad4:	4a0c      	ldr	r2, [pc, #48]	; (800ab08 <prvInitialiseNewTask+0x144>)
 800aad6:	659a      	str	r2, [r3, #88]	; 0x58
 800aad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aada:	4a0c      	ldr	r2, [pc, #48]	; (800ab0c <prvInitialiseNewTask+0x148>)
 800aadc:	65da      	str	r2, [r3, #92]	; 0x5c
 800aade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae0:	4a0b      	ldr	r2, [pc, #44]	; (800ab10 <prvInitialiseNewTask+0x14c>)
 800aae2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aae4:	683a      	ldr	r2, [r7, #0]
 800aae6:	68f9      	ldr	r1, [r7, #12]
 800aae8:	69b8      	ldr	r0, [r7, #24]
 800aaea:	f001 f993 	bl	800be14 <pxPortInitialiseStack>
 800aaee:	4602      	mov	r2, r0
 800aaf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aaf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d002      	beq.n	800ab00 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aafe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab00:	bf00      	nop
 800ab02:	3720      	adds	r7, #32
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	20010e90 	.word	0x20010e90
 800ab0c:	20010ef8 	.word	0x20010ef8
 800ab10:	20010f60 	.word	0x20010f60

0800ab14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ab1c:	f001 fa86 	bl	800c02c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ab20:	4b2d      	ldr	r3, [pc, #180]	; (800abd8 <prvAddNewTaskToReadyList+0xc4>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	3301      	adds	r3, #1
 800ab26:	4a2c      	ldr	r2, [pc, #176]	; (800abd8 <prvAddNewTaskToReadyList+0xc4>)
 800ab28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ab2a:	4b2c      	ldr	r3, [pc, #176]	; (800abdc <prvAddNewTaskToReadyList+0xc8>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d109      	bne.n	800ab46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ab32:	4a2a      	ldr	r2, [pc, #168]	; (800abdc <prvAddNewTaskToReadyList+0xc8>)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ab38:	4b27      	ldr	r3, [pc, #156]	; (800abd8 <prvAddNewTaskToReadyList+0xc4>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d110      	bne.n	800ab62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ab40:	f000 fc64 	bl	800b40c <prvInitialiseTaskLists>
 800ab44:	e00d      	b.n	800ab62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ab46:	4b26      	ldr	r3, [pc, #152]	; (800abe0 <prvAddNewTaskToReadyList+0xcc>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d109      	bne.n	800ab62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ab4e:	4b23      	ldr	r3, [pc, #140]	; (800abdc <prvAddNewTaskToReadyList+0xc8>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d802      	bhi.n	800ab62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ab5c:	4a1f      	ldr	r2, [pc, #124]	; (800abdc <prvAddNewTaskToReadyList+0xc8>)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ab62:	4b20      	ldr	r3, [pc, #128]	; (800abe4 <prvAddNewTaskToReadyList+0xd0>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	3301      	adds	r3, #1
 800ab68:	4a1e      	ldr	r2, [pc, #120]	; (800abe4 <prvAddNewTaskToReadyList+0xd0>)
 800ab6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ab6c:	4b1d      	ldr	r3, [pc, #116]	; (800abe4 <prvAddNewTaskToReadyList+0xd0>)
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab78:	4b1b      	ldr	r3, [pc, #108]	; (800abe8 <prvAddNewTaskToReadyList+0xd4>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d903      	bls.n	800ab88 <prvAddNewTaskToReadyList+0x74>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab84:	4a18      	ldr	r2, [pc, #96]	; (800abe8 <prvAddNewTaskToReadyList+0xd4>)
 800ab86:	6013      	str	r3, [r2, #0]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab8c:	4613      	mov	r3, r2
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	4413      	add	r3, r2
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	4a15      	ldr	r2, [pc, #84]	; (800abec <prvAddNewTaskToReadyList+0xd8>)
 800ab96:	441a      	add	r2, r3
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	3304      	adds	r3, #4
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	4610      	mov	r0, r2
 800aba0:	f7ff f8d7 	bl	8009d52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aba4:	f001 fa76 	bl	800c094 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aba8:	4b0d      	ldr	r3, [pc, #52]	; (800abe0 <prvAddNewTaskToReadyList+0xcc>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d00e      	beq.n	800abce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800abb0:	4b0a      	ldr	r3, [pc, #40]	; (800abdc <prvAddNewTaskToReadyList+0xc8>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abba:	429a      	cmp	r2, r3
 800abbc:	d207      	bcs.n	800abce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800abbe:	4b0c      	ldr	r3, [pc, #48]	; (800abf0 <prvAddNewTaskToReadyList+0xdc>)
 800abc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abc4:	601a      	str	r2, [r3, #0]
 800abc6:	f3bf 8f4f 	dsb	sy
 800abca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abce:	bf00      	nop
 800abd0:	3708      	adds	r7, #8
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	20007e38 	.word	0x20007e38
 800abdc:	20007964 	.word	0x20007964
 800abe0:	20007e44 	.word	0x20007e44
 800abe4:	20007e54 	.word	0x20007e54
 800abe8:	20007e40 	.word	0x20007e40
 800abec:	20007968 	.word	0x20007968
 800abf0:	e000ed04 	.word	0xe000ed04

0800abf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800abfc:	2300      	movs	r3, #0
 800abfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d019      	beq.n	800ac3a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ac06:	4b14      	ldr	r3, [pc, #80]	; (800ac58 <vTaskDelay+0x64>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00c      	beq.n	800ac28 <vTaskDelay+0x34>
	__asm volatile
 800ac0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac12:	b672      	cpsid	i
 800ac14:	f383 8811 	msr	BASEPRI, r3
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	b662      	cpsie	i
 800ac22:	60bb      	str	r3, [r7, #8]
}
 800ac24:	bf00      	nop
 800ac26:	e7fe      	b.n	800ac26 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800ac28:	f000 f88e 	bl	800ad48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ac2c:	2100      	movs	r1, #0
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 fd40 	bl	800b6b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ac34:	f000 f896 	bl	800ad64 <xTaskResumeAll>
 800ac38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d107      	bne.n	800ac50 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800ac40:	4b06      	ldr	r3, [pc, #24]	; (800ac5c <vTaskDelay+0x68>)
 800ac42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac46:	601a      	str	r2, [r3, #0]
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac50:	bf00      	nop
 800ac52:	3710      	adds	r7, #16
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	20007e60 	.word	0x20007e60
 800ac5c:	e000ed04 	.word	0xe000ed04

0800ac60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b08a      	sub	sp, #40	; 0x28
 800ac64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ac66:	2300      	movs	r3, #0
 800ac68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ac6e:	463a      	mov	r2, r7
 800ac70:	1d39      	adds	r1, r7, #4
 800ac72:	f107 0308 	add.w	r3, r7, #8
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7ff f80a 	bl	8009c90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ac7c:	6839      	ldr	r1, [r7, #0]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	68ba      	ldr	r2, [r7, #8]
 800ac82:	9202      	str	r2, [sp, #8]
 800ac84:	9301      	str	r3, [sp, #4]
 800ac86:	2300      	movs	r3, #0
 800ac88:	9300      	str	r3, [sp, #0]
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	460a      	mov	r2, r1
 800ac8e:	4926      	ldr	r1, [pc, #152]	; (800ad28 <vTaskStartScheduler+0xc8>)
 800ac90:	4826      	ldr	r0, [pc, #152]	; (800ad2c <vTaskStartScheduler+0xcc>)
 800ac92:	f7ff fdef 	bl	800a874 <xTaskCreateStatic>
 800ac96:	4603      	mov	r3, r0
 800ac98:	4a25      	ldr	r2, [pc, #148]	; (800ad30 <vTaskStartScheduler+0xd0>)
 800ac9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ac9c:	4b24      	ldr	r3, [pc, #144]	; (800ad30 <vTaskStartScheduler+0xd0>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d002      	beq.n	800acaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aca4:	2301      	movs	r3, #1
 800aca6:	617b      	str	r3, [r7, #20]
 800aca8:	e001      	b.n	800acae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800acaa:	2300      	movs	r3, #0
 800acac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d102      	bne.n	800acba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800acb4:	f000 fd52 	bl	800b75c <xTimerCreateTimerTask>
 800acb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d11d      	bne.n	800acfc <vTaskStartScheduler+0x9c>
	__asm volatile
 800acc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc4:	b672      	cpsid	i
 800acc6:	f383 8811 	msr	BASEPRI, r3
 800acca:	f3bf 8f6f 	isb	sy
 800acce:	f3bf 8f4f 	dsb	sy
 800acd2:	b662      	cpsie	i
 800acd4:	613b      	str	r3, [r7, #16]
}
 800acd6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800acd8:	4b16      	ldr	r3, [pc, #88]	; (800ad34 <vTaskStartScheduler+0xd4>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	3354      	adds	r3, #84	; 0x54
 800acde:	4a16      	ldr	r2, [pc, #88]	; (800ad38 <vTaskStartScheduler+0xd8>)
 800ace0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ace2:	4b16      	ldr	r3, [pc, #88]	; (800ad3c <vTaskStartScheduler+0xdc>)
 800ace4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ace8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800acea:	4b15      	ldr	r3, [pc, #84]	; (800ad40 <vTaskStartScheduler+0xe0>)
 800acec:	2201      	movs	r2, #1
 800acee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800acf0:	4b14      	ldr	r3, [pc, #80]	; (800ad44 <vTaskStartScheduler+0xe4>)
 800acf2:	2200      	movs	r2, #0
 800acf4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800acf6:	f001 f91b 	bl	800bf30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800acfa:	e010      	b.n	800ad1e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad02:	d10c      	bne.n	800ad1e <vTaskStartScheduler+0xbe>
	__asm volatile
 800ad04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad08:	b672      	cpsid	i
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	b662      	cpsie	i
 800ad18:	60fb      	str	r3, [r7, #12]
}
 800ad1a:	bf00      	nop
 800ad1c:	e7fe      	b.n	800ad1c <vTaskStartScheduler+0xbc>
}
 800ad1e:	bf00      	nop
 800ad20:	3718      	adds	r7, #24
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	0801e8a8 	.word	0x0801e8a8
 800ad2c:	0800b3dd 	.word	0x0800b3dd
 800ad30:	20007e5c 	.word	0x20007e5c
 800ad34:	20007964 	.word	0x20007964
 800ad38:	20002478 	.word	0x20002478
 800ad3c:	20007e58 	.word	0x20007e58
 800ad40:	20007e44 	.word	0x20007e44
 800ad44:	20007e3c 	.word	0x20007e3c

0800ad48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ad48:	b480      	push	{r7}
 800ad4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ad4c:	4b04      	ldr	r3, [pc, #16]	; (800ad60 <vTaskSuspendAll+0x18>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	3301      	adds	r3, #1
 800ad52:	4a03      	ldr	r2, [pc, #12]	; (800ad60 <vTaskSuspendAll+0x18>)
 800ad54:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ad56:	bf00      	nop
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr
 800ad60:	20007e60 	.word	0x20007e60

0800ad64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ad72:	4b43      	ldr	r3, [pc, #268]	; (800ae80 <xTaskResumeAll+0x11c>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d10c      	bne.n	800ad94 <xTaskResumeAll+0x30>
	__asm volatile
 800ad7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7e:	b672      	cpsid	i
 800ad80:	f383 8811 	msr	BASEPRI, r3
 800ad84:	f3bf 8f6f 	isb	sy
 800ad88:	f3bf 8f4f 	dsb	sy
 800ad8c:	b662      	cpsie	i
 800ad8e:	603b      	str	r3, [r7, #0]
}
 800ad90:	bf00      	nop
 800ad92:	e7fe      	b.n	800ad92 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ad94:	f001 f94a 	bl	800c02c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ad98:	4b39      	ldr	r3, [pc, #228]	; (800ae80 <xTaskResumeAll+0x11c>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	4a38      	ldr	r2, [pc, #224]	; (800ae80 <xTaskResumeAll+0x11c>)
 800ada0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ada2:	4b37      	ldr	r3, [pc, #220]	; (800ae80 <xTaskResumeAll+0x11c>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d162      	bne.n	800ae70 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800adaa:	4b36      	ldr	r3, [pc, #216]	; (800ae84 <xTaskResumeAll+0x120>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d05e      	beq.n	800ae70 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800adb2:	e02f      	b.n	800ae14 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adb4:	4b34      	ldr	r3, [pc, #208]	; (800ae88 <xTaskResumeAll+0x124>)
 800adb6:	68db      	ldr	r3, [r3, #12]
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	3318      	adds	r3, #24
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7ff f823 	bl	8009e0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	3304      	adds	r3, #4
 800adca:	4618      	mov	r0, r3
 800adcc:	f7ff f81e 	bl	8009e0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800add4:	4b2d      	ldr	r3, [pc, #180]	; (800ae8c <xTaskResumeAll+0x128>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	429a      	cmp	r2, r3
 800adda:	d903      	bls.n	800ade4 <xTaskResumeAll+0x80>
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade0:	4a2a      	ldr	r2, [pc, #168]	; (800ae8c <xTaskResumeAll+0x128>)
 800ade2:	6013      	str	r3, [r2, #0]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade8:	4613      	mov	r3, r2
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	4413      	add	r3, r2
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	4a27      	ldr	r2, [pc, #156]	; (800ae90 <xTaskResumeAll+0x12c>)
 800adf2:	441a      	add	r2, r3
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	3304      	adds	r3, #4
 800adf8:	4619      	mov	r1, r3
 800adfa:	4610      	mov	r0, r2
 800adfc:	f7fe ffa9 	bl	8009d52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae04:	4b23      	ldr	r3, [pc, #140]	; (800ae94 <xTaskResumeAll+0x130>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d302      	bcc.n	800ae14 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800ae0e:	4b22      	ldr	r3, [pc, #136]	; (800ae98 <xTaskResumeAll+0x134>)
 800ae10:	2201      	movs	r2, #1
 800ae12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae14:	4b1c      	ldr	r3, [pc, #112]	; (800ae88 <xTaskResumeAll+0x124>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d1cb      	bne.n	800adb4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d001      	beq.n	800ae26 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ae22:	f000 fb97 	bl	800b554 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ae26:	4b1d      	ldr	r3, [pc, #116]	; (800ae9c <xTaskResumeAll+0x138>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d010      	beq.n	800ae54 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ae32:	f000 f847 	bl	800aec4 <xTaskIncrementTick>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d002      	beq.n	800ae42 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800ae3c:	4b16      	ldr	r3, [pc, #88]	; (800ae98 <xTaskResumeAll+0x134>)
 800ae3e:	2201      	movs	r2, #1
 800ae40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	3b01      	subs	r3, #1
 800ae46:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d1f1      	bne.n	800ae32 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800ae4e:	4b13      	ldr	r3, [pc, #76]	; (800ae9c <xTaskResumeAll+0x138>)
 800ae50:	2200      	movs	r2, #0
 800ae52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ae54:	4b10      	ldr	r3, [pc, #64]	; (800ae98 <xTaskResumeAll+0x134>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d009      	beq.n	800ae70 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ae60:	4b0f      	ldr	r3, [pc, #60]	; (800aea0 <xTaskResumeAll+0x13c>)
 800ae62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae66:	601a      	str	r2, [r3, #0]
 800ae68:	f3bf 8f4f 	dsb	sy
 800ae6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae70:	f001 f910 	bl	800c094 <vPortExitCritical>

	return xAlreadyYielded;
 800ae74:	68bb      	ldr	r3, [r7, #8]
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	20007e60 	.word	0x20007e60
 800ae84:	20007e38 	.word	0x20007e38
 800ae88:	20007df8 	.word	0x20007df8
 800ae8c:	20007e40 	.word	0x20007e40
 800ae90:	20007968 	.word	0x20007968
 800ae94:	20007964 	.word	0x20007964
 800ae98:	20007e4c 	.word	0x20007e4c
 800ae9c:	20007e48 	.word	0x20007e48
 800aea0:	e000ed04 	.word	0xe000ed04

0800aea4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aeaa:	4b05      	ldr	r3, [pc, #20]	; (800aec0 <xTaskGetTickCount+0x1c>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aeb0:	687b      	ldr	r3, [r7, #4]
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	370c      	adds	r7, #12
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	20007e3c 	.word	0x20007e3c

0800aec4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b086      	sub	sp, #24
 800aec8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aeca:	2300      	movs	r3, #0
 800aecc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aece:	4b50      	ldr	r3, [pc, #320]	; (800b010 <xTaskIncrementTick+0x14c>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	f040 808b 	bne.w	800afee <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aed8:	4b4e      	ldr	r3, [pc, #312]	; (800b014 <xTaskIncrementTick+0x150>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	3301      	adds	r3, #1
 800aede:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aee0:	4a4c      	ldr	r2, [pc, #304]	; (800b014 <xTaskIncrementTick+0x150>)
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d122      	bne.n	800af32 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800aeec:	4b4a      	ldr	r3, [pc, #296]	; (800b018 <xTaskIncrementTick+0x154>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00c      	beq.n	800af10 <xTaskIncrementTick+0x4c>
	__asm volatile
 800aef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefa:	b672      	cpsid	i
 800aefc:	f383 8811 	msr	BASEPRI, r3
 800af00:	f3bf 8f6f 	isb	sy
 800af04:	f3bf 8f4f 	dsb	sy
 800af08:	b662      	cpsie	i
 800af0a:	603b      	str	r3, [r7, #0]
}
 800af0c:	bf00      	nop
 800af0e:	e7fe      	b.n	800af0e <xTaskIncrementTick+0x4a>
 800af10:	4b41      	ldr	r3, [pc, #260]	; (800b018 <xTaskIncrementTick+0x154>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	60fb      	str	r3, [r7, #12]
 800af16:	4b41      	ldr	r3, [pc, #260]	; (800b01c <xTaskIncrementTick+0x158>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a3f      	ldr	r2, [pc, #252]	; (800b018 <xTaskIncrementTick+0x154>)
 800af1c:	6013      	str	r3, [r2, #0]
 800af1e:	4a3f      	ldr	r2, [pc, #252]	; (800b01c <xTaskIncrementTick+0x158>)
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6013      	str	r3, [r2, #0]
 800af24:	4b3e      	ldr	r3, [pc, #248]	; (800b020 <xTaskIncrementTick+0x15c>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	3301      	adds	r3, #1
 800af2a:	4a3d      	ldr	r2, [pc, #244]	; (800b020 <xTaskIncrementTick+0x15c>)
 800af2c:	6013      	str	r3, [r2, #0]
 800af2e:	f000 fb11 	bl	800b554 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800af32:	4b3c      	ldr	r3, [pc, #240]	; (800b024 <xTaskIncrementTick+0x160>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	693a      	ldr	r2, [r7, #16]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d349      	bcc.n	800afd0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af3c:	4b36      	ldr	r3, [pc, #216]	; (800b018 <xTaskIncrementTick+0x154>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d104      	bne.n	800af50 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af46:	4b37      	ldr	r3, [pc, #220]	; (800b024 <xTaskIncrementTick+0x160>)
 800af48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af4c:	601a      	str	r2, [r3, #0]
					break;
 800af4e:	e03f      	b.n	800afd0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af50:	4b31      	ldr	r3, [pc, #196]	; (800b018 <xTaskIncrementTick+0x154>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800af60:	693a      	ldr	r2, [r7, #16]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	429a      	cmp	r2, r3
 800af66:	d203      	bcs.n	800af70 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800af68:	4a2e      	ldr	r2, [pc, #184]	; (800b024 <xTaskIncrementTick+0x160>)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800af6e:	e02f      	b.n	800afd0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	3304      	adds	r3, #4
 800af74:	4618      	mov	r0, r3
 800af76:	f7fe ff49 	bl	8009e0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d004      	beq.n	800af8c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	3318      	adds	r3, #24
 800af86:	4618      	mov	r0, r3
 800af88:	f7fe ff40 	bl	8009e0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af90:	4b25      	ldr	r3, [pc, #148]	; (800b028 <xTaskIncrementTick+0x164>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	429a      	cmp	r2, r3
 800af96:	d903      	bls.n	800afa0 <xTaskIncrementTick+0xdc>
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af9c:	4a22      	ldr	r2, [pc, #136]	; (800b028 <xTaskIncrementTick+0x164>)
 800af9e:	6013      	str	r3, [r2, #0]
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afa4:	4613      	mov	r3, r2
 800afa6:	009b      	lsls	r3, r3, #2
 800afa8:	4413      	add	r3, r2
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	4a1f      	ldr	r2, [pc, #124]	; (800b02c <xTaskIncrementTick+0x168>)
 800afae:	441a      	add	r2, r3
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	3304      	adds	r3, #4
 800afb4:	4619      	mov	r1, r3
 800afb6:	4610      	mov	r0, r2
 800afb8:	f7fe fecb 	bl	8009d52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afc0:	4b1b      	ldr	r3, [pc, #108]	; (800b030 <xTaskIncrementTick+0x16c>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d3b8      	bcc.n	800af3c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800afca:	2301      	movs	r3, #1
 800afcc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afce:	e7b5      	b.n	800af3c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800afd0:	4b17      	ldr	r3, [pc, #92]	; (800b030 <xTaskIncrementTick+0x16c>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afd6:	4915      	ldr	r1, [pc, #84]	; (800b02c <xTaskIncrementTick+0x168>)
 800afd8:	4613      	mov	r3, r2
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	4413      	add	r3, r2
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	440b      	add	r3, r1
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d907      	bls.n	800aff8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800afe8:	2301      	movs	r3, #1
 800afea:	617b      	str	r3, [r7, #20]
 800afec:	e004      	b.n	800aff8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800afee:	4b11      	ldr	r3, [pc, #68]	; (800b034 <xTaskIncrementTick+0x170>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	3301      	adds	r3, #1
 800aff4:	4a0f      	ldr	r2, [pc, #60]	; (800b034 <xTaskIncrementTick+0x170>)
 800aff6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800aff8:	4b0f      	ldr	r3, [pc, #60]	; (800b038 <xTaskIncrementTick+0x174>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d001      	beq.n	800b004 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800b000:	2301      	movs	r3, #1
 800b002:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b004:	697b      	ldr	r3, [r7, #20]
}
 800b006:	4618      	mov	r0, r3
 800b008:	3718      	adds	r7, #24
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	20007e60 	.word	0x20007e60
 800b014:	20007e3c 	.word	0x20007e3c
 800b018:	20007df0 	.word	0x20007df0
 800b01c:	20007df4 	.word	0x20007df4
 800b020:	20007e50 	.word	0x20007e50
 800b024:	20007e58 	.word	0x20007e58
 800b028:	20007e40 	.word	0x20007e40
 800b02c:	20007968 	.word	0x20007968
 800b030:	20007964 	.word	0x20007964
 800b034:	20007e48 	.word	0x20007e48
 800b038:	20007e4c 	.word	0x20007e4c

0800b03c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b03c:	b480      	push	{r7}
 800b03e:	b085      	sub	sp, #20
 800b040:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b042:	4b2b      	ldr	r3, [pc, #172]	; (800b0f0 <vTaskSwitchContext+0xb4>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d003      	beq.n	800b052 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b04a:	4b2a      	ldr	r3, [pc, #168]	; (800b0f4 <vTaskSwitchContext+0xb8>)
 800b04c:	2201      	movs	r2, #1
 800b04e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b050:	e048      	b.n	800b0e4 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800b052:	4b28      	ldr	r3, [pc, #160]	; (800b0f4 <vTaskSwitchContext+0xb8>)
 800b054:	2200      	movs	r2, #0
 800b056:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b058:	4b27      	ldr	r3, [pc, #156]	; (800b0f8 <vTaskSwitchContext+0xbc>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	60fb      	str	r3, [r7, #12]
 800b05e:	e012      	b.n	800b086 <vTaskSwitchContext+0x4a>
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d10c      	bne.n	800b080 <vTaskSwitchContext+0x44>
	__asm volatile
 800b066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06a:	b672      	cpsid	i
 800b06c:	f383 8811 	msr	BASEPRI, r3
 800b070:	f3bf 8f6f 	isb	sy
 800b074:	f3bf 8f4f 	dsb	sy
 800b078:	b662      	cpsie	i
 800b07a:	607b      	str	r3, [r7, #4]
}
 800b07c:	bf00      	nop
 800b07e:	e7fe      	b.n	800b07e <vTaskSwitchContext+0x42>
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	3b01      	subs	r3, #1
 800b084:	60fb      	str	r3, [r7, #12]
 800b086:	491d      	ldr	r1, [pc, #116]	; (800b0fc <vTaskSwitchContext+0xc0>)
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	4613      	mov	r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	4413      	add	r3, r2
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	440b      	add	r3, r1
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d0e2      	beq.n	800b060 <vTaskSwitchContext+0x24>
 800b09a:	68fa      	ldr	r2, [r7, #12]
 800b09c:	4613      	mov	r3, r2
 800b09e:	009b      	lsls	r3, r3, #2
 800b0a0:	4413      	add	r3, r2
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	4a15      	ldr	r2, [pc, #84]	; (800b0fc <vTaskSwitchContext+0xc0>)
 800b0a6:	4413      	add	r3, r2
 800b0a8:	60bb      	str	r3, [r7, #8]
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	685a      	ldr	r2, [r3, #4]
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	605a      	str	r2, [r3, #4]
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	685a      	ldr	r2, [r3, #4]
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	3308      	adds	r3, #8
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d104      	bne.n	800b0ca <vTaskSwitchContext+0x8e>
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	685a      	ldr	r2, [r3, #4]
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	605a      	str	r2, [r3, #4]
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	4a0b      	ldr	r2, [pc, #44]	; (800b100 <vTaskSwitchContext+0xc4>)
 800b0d2:	6013      	str	r3, [r2, #0]
 800b0d4:	4a08      	ldr	r2, [pc, #32]	; (800b0f8 <vTaskSwitchContext+0xbc>)
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b0da:	4b09      	ldr	r3, [pc, #36]	; (800b100 <vTaskSwitchContext+0xc4>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	3354      	adds	r3, #84	; 0x54
 800b0e0:	4a08      	ldr	r2, [pc, #32]	; (800b104 <vTaskSwitchContext+0xc8>)
 800b0e2:	6013      	str	r3, [r2, #0]
}
 800b0e4:	bf00      	nop
 800b0e6:	3714      	adds	r7, #20
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr
 800b0f0:	20007e60 	.word	0x20007e60
 800b0f4:	20007e4c 	.word	0x20007e4c
 800b0f8:	20007e40 	.word	0x20007e40
 800b0fc:	20007968 	.word	0x20007968
 800b100:	20007964 	.word	0x20007964
 800b104:	20002478 	.word	0x20002478

0800b108 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d10c      	bne.n	800b132 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800b118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11c:	b672      	cpsid	i
 800b11e:	f383 8811 	msr	BASEPRI, r3
 800b122:	f3bf 8f6f 	isb	sy
 800b126:	f3bf 8f4f 	dsb	sy
 800b12a:	b662      	cpsie	i
 800b12c:	60fb      	str	r3, [r7, #12]
}
 800b12e:	bf00      	nop
 800b130:	e7fe      	b.n	800b130 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b132:	4b07      	ldr	r3, [pc, #28]	; (800b150 <vTaskPlaceOnEventList+0x48>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	3318      	adds	r3, #24
 800b138:	4619      	mov	r1, r3
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f7fe fe2d 	bl	8009d9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b140:	2101      	movs	r1, #1
 800b142:	6838      	ldr	r0, [r7, #0]
 800b144:	f000 fab6 	bl	800b6b4 <prvAddCurrentTaskToDelayedList>
}
 800b148:	bf00      	nop
 800b14a:	3710      	adds	r7, #16
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	20007964 	.word	0x20007964

0800b154 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b154:	b580      	push	{r7, lr}
 800b156:	b086      	sub	sp, #24
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d10c      	bne.n	800b180 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800b166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16a:	b672      	cpsid	i
 800b16c:	f383 8811 	msr	BASEPRI, r3
 800b170:	f3bf 8f6f 	isb	sy
 800b174:	f3bf 8f4f 	dsb	sy
 800b178:	b662      	cpsie	i
 800b17a:	617b      	str	r3, [r7, #20]
}
 800b17c:	bf00      	nop
 800b17e:	e7fe      	b.n	800b17e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b180:	4b0a      	ldr	r3, [pc, #40]	; (800b1ac <vTaskPlaceOnEventListRestricted+0x58>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	3318      	adds	r3, #24
 800b186:	4619      	mov	r1, r3
 800b188:	68f8      	ldr	r0, [r7, #12]
 800b18a:	f7fe fde2 	bl	8009d52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d002      	beq.n	800b19a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800b194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b198:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b19a:	6879      	ldr	r1, [r7, #4]
 800b19c:	68b8      	ldr	r0, [r7, #8]
 800b19e:	f000 fa89 	bl	800b6b4 <prvAddCurrentTaskToDelayedList>
	}
 800b1a2:	bf00      	nop
 800b1a4:	3718      	adds	r7, #24
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	20007964 	.word	0x20007964

0800b1b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b086      	sub	sp, #24
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	68db      	ldr	r3, [r3, #12]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d10c      	bne.n	800b1e0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800b1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ca:	b672      	cpsid	i
 800b1cc:	f383 8811 	msr	BASEPRI, r3
 800b1d0:	f3bf 8f6f 	isb	sy
 800b1d4:	f3bf 8f4f 	dsb	sy
 800b1d8:	b662      	cpsie	i
 800b1da:	60fb      	str	r3, [r7, #12]
}
 800b1dc:	bf00      	nop
 800b1de:	e7fe      	b.n	800b1de <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	3318      	adds	r3, #24
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7fe fe11 	bl	8009e0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1ea:	4b1e      	ldr	r3, [pc, #120]	; (800b264 <xTaskRemoveFromEventList+0xb4>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d11d      	bne.n	800b22e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	3304      	adds	r3, #4
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7fe fe08 	bl	8009e0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b200:	4b19      	ldr	r3, [pc, #100]	; (800b268 <xTaskRemoveFromEventList+0xb8>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	429a      	cmp	r2, r3
 800b206:	d903      	bls.n	800b210 <xTaskRemoveFromEventList+0x60>
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b20c:	4a16      	ldr	r2, [pc, #88]	; (800b268 <xTaskRemoveFromEventList+0xb8>)
 800b20e:	6013      	str	r3, [r2, #0]
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b214:	4613      	mov	r3, r2
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	4413      	add	r3, r2
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	4a13      	ldr	r2, [pc, #76]	; (800b26c <xTaskRemoveFromEventList+0xbc>)
 800b21e:	441a      	add	r2, r3
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	3304      	adds	r3, #4
 800b224:	4619      	mov	r1, r3
 800b226:	4610      	mov	r0, r2
 800b228:	f7fe fd93 	bl	8009d52 <vListInsertEnd>
 800b22c:	e005      	b.n	800b23a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	3318      	adds	r3, #24
 800b232:	4619      	mov	r1, r3
 800b234:	480e      	ldr	r0, [pc, #56]	; (800b270 <xTaskRemoveFromEventList+0xc0>)
 800b236:	f7fe fd8c 	bl	8009d52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b23e:	4b0d      	ldr	r3, [pc, #52]	; (800b274 <xTaskRemoveFromEventList+0xc4>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b244:	429a      	cmp	r2, r3
 800b246:	d905      	bls.n	800b254 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b248:	2301      	movs	r3, #1
 800b24a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b24c:	4b0a      	ldr	r3, [pc, #40]	; (800b278 <xTaskRemoveFromEventList+0xc8>)
 800b24e:	2201      	movs	r2, #1
 800b250:	601a      	str	r2, [r3, #0]
 800b252:	e001      	b.n	800b258 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800b254:	2300      	movs	r3, #0
 800b256:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b258:	697b      	ldr	r3, [r7, #20]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3718      	adds	r7, #24
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
 800b262:	bf00      	nop
 800b264:	20007e60 	.word	0x20007e60
 800b268:	20007e40 	.word	0x20007e40
 800b26c:	20007968 	.word	0x20007968
 800b270:	20007df8 	.word	0x20007df8
 800b274:	20007964 	.word	0x20007964
 800b278:	20007e4c 	.word	0x20007e4c

0800b27c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d10c      	bne.n	800b2a4 <vTaskSetTimeOutState+0x28>
	__asm volatile
 800b28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28e:	b672      	cpsid	i
 800b290:	f383 8811 	msr	BASEPRI, r3
 800b294:	f3bf 8f6f 	isb	sy
 800b298:	f3bf 8f4f 	dsb	sy
 800b29c:	b662      	cpsie	i
 800b29e:	60fb      	str	r3, [r7, #12]
}
 800b2a0:	bf00      	nop
 800b2a2:	e7fe      	b.n	800b2a2 <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 800b2a4:	f000 fec2 	bl	800c02c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b2a8:	4b06      	ldr	r3, [pc, #24]	; (800b2c4 <vTaskSetTimeOutState+0x48>)
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800b2b0:	4b05      	ldr	r3, [pc, #20]	; (800b2c8 <vTaskSetTimeOutState+0x4c>)
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800b2b8:	f000 feec 	bl	800c094 <vPortExitCritical>
}
 800b2bc:	bf00      	nop
 800b2be:	3710      	adds	r7, #16
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}
 800b2c4:	20007e50 	.word	0x20007e50
 800b2c8:	20007e3c 	.word	0x20007e3c

0800b2cc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b2d4:	4b06      	ldr	r3, [pc, #24]	; (800b2f0 <vTaskInternalSetTimeOutState+0x24>)
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b2dc:	4b05      	ldr	r3, [pc, #20]	; (800b2f4 <vTaskInternalSetTimeOutState+0x28>)
 800b2de:	681a      	ldr	r2, [r3, #0]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	605a      	str	r2, [r3, #4]
}
 800b2e4:	bf00      	nop
 800b2e6:	370c      	adds	r7, #12
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr
 800b2f0:	20007e50 	.word	0x20007e50
 800b2f4:	20007e3c 	.word	0x20007e3c

0800b2f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b088      	sub	sp, #32
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d10c      	bne.n	800b322 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800b308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b30c:	b672      	cpsid	i
 800b30e:	f383 8811 	msr	BASEPRI, r3
 800b312:	f3bf 8f6f 	isb	sy
 800b316:	f3bf 8f4f 	dsb	sy
 800b31a:	b662      	cpsie	i
 800b31c:	613b      	str	r3, [r7, #16]
}
 800b31e:	bf00      	nop
 800b320:	e7fe      	b.n	800b320 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d10c      	bne.n	800b342 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800b328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32c:	b672      	cpsid	i
 800b32e:	f383 8811 	msr	BASEPRI, r3
 800b332:	f3bf 8f6f 	isb	sy
 800b336:	f3bf 8f4f 	dsb	sy
 800b33a:	b662      	cpsie	i
 800b33c:	60fb      	str	r3, [r7, #12]
}
 800b33e:	bf00      	nop
 800b340:	e7fe      	b.n	800b340 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800b342:	f000 fe73 	bl	800c02c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b346:	4b1d      	ldr	r3, [pc, #116]	; (800b3bc <xTaskCheckForTimeOut+0xc4>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	69ba      	ldr	r2, [r7, #24]
 800b352:	1ad3      	subs	r3, r2, r3
 800b354:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b35e:	d102      	bne.n	800b366 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b360:	2300      	movs	r3, #0
 800b362:	61fb      	str	r3, [r7, #28]
 800b364:	e023      	b.n	800b3ae <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	4b15      	ldr	r3, [pc, #84]	; (800b3c0 <xTaskCheckForTimeOut+0xc8>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	429a      	cmp	r2, r3
 800b370:	d007      	beq.n	800b382 <xTaskCheckForTimeOut+0x8a>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	69ba      	ldr	r2, [r7, #24]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d302      	bcc.n	800b382 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b37c:	2301      	movs	r3, #1
 800b37e:	61fb      	str	r3, [r7, #28]
 800b380:	e015      	b.n	800b3ae <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	697a      	ldr	r2, [r7, #20]
 800b388:	429a      	cmp	r2, r3
 800b38a:	d20b      	bcs.n	800b3a4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	1ad2      	subs	r2, r2, r3
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f7ff ff97 	bl	800b2cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	61fb      	str	r3, [r7, #28]
 800b3a2:	e004      	b.n	800b3ae <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b3ae:	f000 fe71 	bl	800c094 <vPortExitCritical>

	return xReturn;
 800b3b2:	69fb      	ldr	r3, [r7, #28]
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3720      	adds	r7, #32
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}
 800b3bc:	20007e3c 	.word	0x20007e3c
 800b3c0:	20007e50 	.word	0x20007e50

0800b3c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b3c8:	4b03      	ldr	r3, [pc, #12]	; (800b3d8 <vTaskMissedYield+0x14>)
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	601a      	str	r2, [r3, #0]
}
 800b3ce:	bf00      	nop
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr
 800b3d8:	20007e4c 	.word	0x20007e4c

0800b3dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b3e4:	f000 f852 	bl	800b48c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b3e8:	4b06      	ldr	r3, [pc, #24]	; (800b404 <prvIdleTask+0x28>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d9f9      	bls.n	800b3e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b3f0:	4b05      	ldr	r3, [pc, #20]	; (800b408 <prvIdleTask+0x2c>)
 800b3f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3f6:	601a      	str	r2, [r3, #0]
 800b3f8:	f3bf 8f4f 	dsb	sy
 800b3fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b400:	e7f0      	b.n	800b3e4 <prvIdleTask+0x8>
 800b402:	bf00      	nop
 800b404:	20007968 	.word	0x20007968
 800b408:	e000ed04 	.word	0xe000ed04

0800b40c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b412:	2300      	movs	r3, #0
 800b414:	607b      	str	r3, [r7, #4]
 800b416:	e00c      	b.n	800b432 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	4613      	mov	r3, r2
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	4413      	add	r3, r2
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	4a12      	ldr	r2, [pc, #72]	; (800b46c <prvInitialiseTaskLists+0x60>)
 800b424:	4413      	add	r3, r2
 800b426:	4618      	mov	r0, r3
 800b428:	f7fe fc66 	bl	8009cf8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	3301      	adds	r3, #1
 800b430:	607b      	str	r3, [r7, #4]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2b37      	cmp	r3, #55	; 0x37
 800b436:	d9ef      	bls.n	800b418 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b438:	480d      	ldr	r0, [pc, #52]	; (800b470 <prvInitialiseTaskLists+0x64>)
 800b43a:	f7fe fc5d 	bl	8009cf8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b43e:	480d      	ldr	r0, [pc, #52]	; (800b474 <prvInitialiseTaskLists+0x68>)
 800b440:	f7fe fc5a 	bl	8009cf8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b444:	480c      	ldr	r0, [pc, #48]	; (800b478 <prvInitialiseTaskLists+0x6c>)
 800b446:	f7fe fc57 	bl	8009cf8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b44a:	480c      	ldr	r0, [pc, #48]	; (800b47c <prvInitialiseTaskLists+0x70>)
 800b44c:	f7fe fc54 	bl	8009cf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b450:	480b      	ldr	r0, [pc, #44]	; (800b480 <prvInitialiseTaskLists+0x74>)
 800b452:	f7fe fc51 	bl	8009cf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b456:	4b0b      	ldr	r3, [pc, #44]	; (800b484 <prvInitialiseTaskLists+0x78>)
 800b458:	4a05      	ldr	r2, [pc, #20]	; (800b470 <prvInitialiseTaskLists+0x64>)
 800b45a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b45c:	4b0a      	ldr	r3, [pc, #40]	; (800b488 <prvInitialiseTaskLists+0x7c>)
 800b45e:	4a05      	ldr	r2, [pc, #20]	; (800b474 <prvInitialiseTaskLists+0x68>)
 800b460:	601a      	str	r2, [r3, #0]
}
 800b462:	bf00      	nop
 800b464:	3708      	adds	r7, #8
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
 800b46a:	bf00      	nop
 800b46c:	20007968 	.word	0x20007968
 800b470:	20007dc8 	.word	0x20007dc8
 800b474:	20007ddc 	.word	0x20007ddc
 800b478:	20007df8 	.word	0x20007df8
 800b47c:	20007e0c 	.word	0x20007e0c
 800b480:	20007e24 	.word	0x20007e24
 800b484:	20007df0 	.word	0x20007df0
 800b488:	20007df4 	.word	0x20007df4

0800b48c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b492:	e019      	b.n	800b4c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b494:	f000 fdca 	bl	800c02c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b498:	4b10      	ldr	r3, [pc, #64]	; (800b4dc <prvCheckTasksWaitingTermination+0x50>)
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	3304      	adds	r3, #4
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7fe fcb1 	bl	8009e0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b4aa:	4b0d      	ldr	r3, [pc, #52]	; (800b4e0 <prvCheckTasksWaitingTermination+0x54>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	4a0b      	ldr	r2, [pc, #44]	; (800b4e0 <prvCheckTasksWaitingTermination+0x54>)
 800b4b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b4b4:	4b0b      	ldr	r3, [pc, #44]	; (800b4e4 <prvCheckTasksWaitingTermination+0x58>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	4a0a      	ldr	r2, [pc, #40]	; (800b4e4 <prvCheckTasksWaitingTermination+0x58>)
 800b4bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b4be:	f000 fde9 	bl	800c094 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f810 	bl	800b4e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b4c8:	4b06      	ldr	r3, [pc, #24]	; (800b4e4 <prvCheckTasksWaitingTermination+0x58>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d1e1      	bne.n	800b494 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b4d0:	bf00      	nop
 800b4d2:	bf00      	nop
 800b4d4:	3708      	adds	r7, #8
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	20007e0c 	.word	0x20007e0c
 800b4e0:	20007e38 	.word	0x20007e38
 800b4e4:	20007e20 	.word	0x20007e20

0800b4e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	3354      	adds	r3, #84	; 0x54
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f012 f9f1 	bl	801d8dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b500:	2b00      	cmp	r3, #0
 800b502:	d108      	bne.n	800b516 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b508:	4618      	mov	r0, r3
 800b50a:	f000 ff85 	bl	800c418 <vPortFree>
				vPortFree( pxTCB );
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 ff82 	bl	800c418 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b514:	e01a      	b.n	800b54c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d103      	bne.n	800b528 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f000 ff79 	bl	800c418 <vPortFree>
	}
 800b526:	e011      	b.n	800b54c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b52e:	2b02      	cmp	r3, #2
 800b530:	d00c      	beq.n	800b54c <prvDeleteTCB+0x64>
	__asm volatile
 800b532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b536:	b672      	cpsid	i
 800b538:	f383 8811 	msr	BASEPRI, r3
 800b53c:	f3bf 8f6f 	isb	sy
 800b540:	f3bf 8f4f 	dsb	sy
 800b544:	b662      	cpsie	i
 800b546:	60fb      	str	r3, [r7, #12]
}
 800b548:	bf00      	nop
 800b54a:	e7fe      	b.n	800b54a <prvDeleteTCB+0x62>
	}
 800b54c:	bf00      	nop
 800b54e:	3710      	adds	r7, #16
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b554:	b480      	push	{r7}
 800b556:	b083      	sub	sp, #12
 800b558:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b55a:	4b0c      	ldr	r3, [pc, #48]	; (800b58c <prvResetNextTaskUnblockTime+0x38>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d104      	bne.n	800b56e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b564:	4b0a      	ldr	r3, [pc, #40]	; (800b590 <prvResetNextTaskUnblockTime+0x3c>)
 800b566:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b56a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b56c:	e008      	b.n	800b580 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b56e:	4b07      	ldr	r3, [pc, #28]	; (800b58c <prvResetNextTaskUnblockTime+0x38>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	4a04      	ldr	r2, [pc, #16]	; (800b590 <prvResetNextTaskUnblockTime+0x3c>)
 800b57e:	6013      	str	r3, [r2, #0]
}
 800b580:	bf00      	nop
 800b582:	370c      	adds	r7, #12
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr
 800b58c:	20007df0 	.word	0x20007df0
 800b590:	20007e58 	.word	0x20007e58

0800b594 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b59a:	4b0b      	ldr	r3, [pc, #44]	; (800b5c8 <xTaskGetSchedulerState+0x34>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d102      	bne.n	800b5a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	607b      	str	r3, [r7, #4]
 800b5a6:	e008      	b.n	800b5ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5a8:	4b08      	ldr	r3, [pc, #32]	; (800b5cc <xTaskGetSchedulerState+0x38>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d102      	bne.n	800b5b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b5b0:	2302      	movs	r3, #2
 800b5b2:	607b      	str	r3, [r7, #4]
 800b5b4:	e001      	b.n	800b5ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b5ba:	687b      	ldr	r3, [r7, #4]
	}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr
 800b5c8:	20007e44 	.word	0x20007e44
 800b5cc:	20007e60 	.word	0x20007e60

0800b5d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b086      	sub	sp, #24
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d05a      	beq.n	800b69c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b5e6:	4b30      	ldr	r3, [pc, #192]	; (800b6a8 <xTaskPriorityDisinherit+0xd8>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	693a      	ldr	r2, [r7, #16]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d00c      	beq.n	800b60a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800b5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f4:	b672      	cpsid	i
 800b5f6:	f383 8811 	msr	BASEPRI, r3
 800b5fa:	f3bf 8f6f 	isb	sy
 800b5fe:	f3bf 8f4f 	dsb	sy
 800b602:	b662      	cpsie	i
 800b604:	60fb      	str	r3, [r7, #12]
}
 800b606:	bf00      	nop
 800b608:	e7fe      	b.n	800b608 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d10c      	bne.n	800b62c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800b612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b616:	b672      	cpsid	i
 800b618:	f383 8811 	msr	BASEPRI, r3
 800b61c:	f3bf 8f6f 	isb	sy
 800b620:	f3bf 8f4f 	dsb	sy
 800b624:	b662      	cpsie	i
 800b626:	60bb      	str	r3, [r7, #8]
}
 800b628:	bf00      	nop
 800b62a:	e7fe      	b.n	800b62a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b630:	1e5a      	subs	r2, r3, #1
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b63e:	429a      	cmp	r2, r3
 800b640:	d02c      	beq.n	800b69c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b646:	2b00      	cmp	r3, #0
 800b648:	d128      	bne.n	800b69c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	3304      	adds	r3, #4
 800b64e:	4618      	mov	r0, r3
 800b650:	f7fe fbdc 	bl	8009e0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b660:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b66c:	4b0f      	ldr	r3, [pc, #60]	; (800b6ac <xTaskPriorityDisinherit+0xdc>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	429a      	cmp	r2, r3
 800b672:	d903      	bls.n	800b67c <xTaskPriorityDisinherit+0xac>
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b678:	4a0c      	ldr	r2, [pc, #48]	; (800b6ac <xTaskPriorityDisinherit+0xdc>)
 800b67a:	6013      	str	r3, [r2, #0]
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b680:	4613      	mov	r3, r2
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	4413      	add	r3, r2
 800b686:	009b      	lsls	r3, r3, #2
 800b688:	4a09      	ldr	r2, [pc, #36]	; (800b6b0 <xTaskPriorityDisinherit+0xe0>)
 800b68a:	441a      	add	r2, r3
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	3304      	adds	r3, #4
 800b690:	4619      	mov	r1, r3
 800b692:	4610      	mov	r0, r2
 800b694:	f7fe fb5d 	bl	8009d52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b698:	2301      	movs	r3, #1
 800b69a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b69c:	697b      	ldr	r3, [r7, #20]
	}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3718      	adds	r7, #24
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	20007964 	.word	0x20007964
 800b6ac:	20007e40 	.word	0x20007e40
 800b6b0:	20007968 	.word	0x20007968

0800b6b4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b6be:	4b21      	ldr	r3, [pc, #132]	; (800b744 <prvAddCurrentTaskToDelayedList+0x90>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6c4:	4b20      	ldr	r3, [pc, #128]	; (800b748 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	3304      	adds	r3, #4
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7fe fb9e 	bl	8009e0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6d6:	d10a      	bne.n	800b6ee <prvAddCurrentTaskToDelayedList+0x3a>
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d007      	beq.n	800b6ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6de:	4b1a      	ldr	r3, [pc, #104]	; (800b748 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	3304      	adds	r3, #4
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	4819      	ldr	r0, [pc, #100]	; (800b74c <prvAddCurrentTaskToDelayedList+0x98>)
 800b6e8:	f7fe fb33 	bl	8009d52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b6ec:	e026      	b.n	800b73c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b6ee:	68fa      	ldr	r2, [r7, #12]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	4413      	add	r3, r2
 800b6f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b6f6:	4b14      	ldr	r3, [pc, #80]	; (800b748 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	68ba      	ldr	r2, [r7, #8]
 800b6fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b6fe:	68ba      	ldr	r2, [r7, #8]
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	429a      	cmp	r2, r3
 800b704:	d209      	bcs.n	800b71a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b706:	4b12      	ldr	r3, [pc, #72]	; (800b750 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	4b0f      	ldr	r3, [pc, #60]	; (800b748 <prvAddCurrentTaskToDelayedList+0x94>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	3304      	adds	r3, #4
 800b710:	4619      	mov	r1, r3
 800b712:	4610      	mov	r0, r2
 800b714:	f7fe fb41 	bl	8009d9a <vListInsert>
}
 800b718:	e010      	b.n	800b73c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b71a:	4b0e      	ldr	r3, [pc, #56]	; (800b754 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	4b0a      	ldr	r3, [pc, #40]	; (800b748 <prvAddCurrentTaskToDelayedList+0x94>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	3304      	adds	r3, #4
 800b724:	4619      	mov	r1, r3
 800b726:	4610      	mov	r0, r2
 800b728:	f7fe fb37 	bl	8009d9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b72c:	4b0a      	ldr	r3, [pc, #40]	; (800b758 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	68ba      	ldr	r2, [r7, #8]
 800b732:	429a      	cmp	r2, r3
 800b734:	d202      	bcs.n	800b73c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b736:	4a08      	ldr	r2, [pc, #32]	; (800b758 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	6013      	str	r3, [r2, #0]
}
 800b73c:	bf00      	nop
 800b73e:	3710      	adds	r7, #16
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	20007e3c 	.word	0x20007e3c
 800b748:	20007964 	.word	0x20007964
 800b74c:	20007e24 	.word	0x20007e24
 800b750:	20007df4 	.word	0x20007df4
 800b754:	20007df0 	.word	0x20007df0
 800b758:	20007e58 	.word	0x20007e58

0800b75c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b08a      	sub	sp, #40	; 0x28
 800b760:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b762:	2300      	movs	r3, #0
 800b764:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b766:	f000 fb15 	bl	800bd94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b76a:	4b1d      	ldr	r3, [pc, #116]	; (800b7e0 <xTimerCreateTimerTask+0x84>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d021      	beq.n	800b7b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b772:	2300      	movs	r3, #0
 800b774:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b776:	2300      	movs	r3, #0
 800b778:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b77a:	1d3a      	adds	r2, r7, #4
 800b77c:	f107 0108 	add.w	r1, r7, #8
 800b780:	f107 030c 	add.w	r3, r7, #12
 800b784:	4618      	mov	r0, r3
 800b786:	f7fe fa9d 	bl	8009cc4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b78a:	6879      	ldr	r1, [r7, #4]
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	68fa      	ldr	r2, [r7, #12]
 800b790:	9202      	str	r2, [sp, #8]
 800b792:	9301      	str	r3, [sp, #4]
 800b794:	2302      	movs	r3, #2
 800b796:	9300      	str	r3, [sp, #0]
 800b798:	2300      	movs	r3, #0
 800b79a:	460a      	mov	r2, r1
 800b79c:	4911      	ldr	r1, [pc, #68]	; (800b7e4 <xTimerCreateTimerTask+0x88>)
 800b79e:	4812      	ldr	r0, [pc, #72]	; (800b7e8 <xTimerCreateTimerTask+0x8c>)
 800b7a0:	f7ff f868 	bl	800a874 <xTaskCreateStatic>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	4a11      	ldr	r2, [pc, #68]	; (800b7ec <xTimerCreateTimerTask+0x90>)
 800b7a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b7aa:	4b10      	ldr	r3, [pc, #64]	; (800b7ec <xTimerCreateTimerTask+0x90>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d001      	beq.n	800b7b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d10c      	bne.n	800b7d6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800b7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c0:	b672      	cpsid	i
 800b7c2:	f383 8811 	msr	BASEPRI, r3
 800b7c6:	f3bf 8f6f 	isb	sy
 800b7ca:	f3bf 8f4f 	dsb	sy
 800b7ce:	b662      	cpsie	i
 800b7d0:	613b      	str	r3, [r7, #16]
}
 800b7d2:	bf00      	nop
 800b7d4:	e7fe      	b.n	800b7d4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800b7d6:	697b      	ldr	r3, [r7, #20]
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3718      	adds	r7, #24
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	20007e94 	.word	0x20007e94
 800b7e4:	0801e8b0 	.word	0x0801e8b0
 800b7e8:	0800b92d 	.word	0x0800b92d
 800b7ec:	20007e98 	.word	0x20007e98

0800b7f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b08a      	sub	sp, #40	; 0x28
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	607a      	str	r2, [r7, #4]
 800b7fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b7fe:	2300      	movs	r3, #0
 800b800:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d10c      	bne.n	800b822 <xTimerGenericCommand+0x32>
	__asm volatile
 800b808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80c:	b672      	cpsid	i
 800b80e:	f383 8811 	msr	BASEPRI, r3
 800b812:	f3bf 8f6f 	isb	sy
 800b816:	f3bf 8f4f 	dsb	sy
 800b81a:	b662      	cpsie	i
 800b81c:	623b      	str	r3, [r7, #32]
}
 800b81e:	bf00      	nop
 800b820:	e7fe      	b.n	800b820 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b822:	4b1a      	ldr	r3, [pc, #104]	; (800b88c <xTimerGenericCommand+0x9c>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d02a      	beq.n	800b880 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	2b05      	cmp	r3, #5
 800b83a:	dc18      	bgt.n	800b86e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b83c:	f7ff feaa 	bl	800b594 <xTaskGetSchedulerState>
 800b840:	4603      	mov	r3, r0
 800b842:	2b02      	cmp	r3, #2
 800b844:	d109      	bne.n	800b85a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b846:	4b11      	ldr	r3, [pc, #68]	; (800b88c <xTimerGenericCommand+0x9c>)
 800b848:	6818      	ldr	r0, [r3, #0]
 800b84a:	f107 0110 	add.w	r1, r7, #16
 800b84e:	2300      	movs	r3, #0
 800b850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b852:	f7fe fc15 	bl	800a080 <xQueueGenericSend>
 800b856:	6278      	str	r0, [r7, #36]	; 0x24
 800b858:	e012      	b.n	800b880 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b85a:	4b0c      	ldr	r3, [pc, #48]	; (800b88c <xTimerGenericCommand+0x9c>)
 800b85c:	6818      	ldr	r0, [r3, #0]
 800b85e:	f107 0110 	add.w	r1, r7, #16
 800b862:	2300      	movs	r3, #0
 800b864:	2200      	movs	r2, #0
 800b866:	f7fe fc0b 	bl	800a080 <xQueueGenericSend>
 800b86a:	6278      	str	r0, [r7, #36]	; 0x24
 800b86c:	e008      	b.n	800b880 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b86e:	4b07      	ldr	r3, [pc, #28]	; (800b88c <xTimerGenericCommand+0x9c>)
 800b870:	6818      	ldr	r0, [r3, #0]
 800b872:	f107 0110 	add.w	r1, r7, #16
 800b876:	2300      	movs	r3, #0
 800b878:	683a      	ldr	r2, [r7, #0]
 800b87a:	f7fe fd07 	bl	800a28c <xQueueGenericSendFromISR>
 800b87e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b882:	4618      	mov	r0, r3
 800b884:	3728      	adds	r7, #40	; 0x28
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	20007e94 	.word	0x20007e94

0800b890 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b088      	sub	sp, #32
 800b894:	af02      	add	r7, sp, #8
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b89a:	4b23      	ldr	r3, [pc, #140]	; (800b928 <prvProcessExpiredTimer+0x98>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	68db      	ldr	r3, [r3, #12]
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	3304      	adds	r3, #4
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7fe faaf 	bl	8009e0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8b4:	f003 0304 	and.w	r3, r3, #4
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d024      	beq.n	800b906 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	699a      	ldr	r2, [r3, #24]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	18d1      	adds	r1, r2, r3
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	683a      	ldr	r2, [r7, #0]
 800b8c8:	6978      	ldr	r0, [r7, #20]
 800b8ca:	f000 f8d3 	bl	800ba74 <prvInsertTimerInActiveList>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d021      	beq.n	800b918 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	9300      	str	r3, [sp, #0]
 800b8d8:	2300      	movs	r3, #0
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	2100      	movs	r1, #0
 800b8de:	6978      	ldr	r0, [r7, #20]
 800b8e0:	f7ff ff86 	bl	800b7f0 <xTimerGenericCommand>
 800b8e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d115      	bne.n	800b918 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800b8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f0:	b672      	cpsid	i
 800b8f2:	f383 8811 	msr	BASEPRI, r3
 800b8f6:	f3bf 8f6f 	isb	sy
 800b8fa:	f3bf 8f4f 	dsb	sy
 800b8fe:	b662      	cpsie	i
 800b900:	60fb      	str	r3, [r7, #12]
}
 800b902:	bf00      	nop
 800b904:	e7fe      	b.n	800b904 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b90c:	f023 0301 	bic.w	r3, r3, #1
 800b910:	b2da      	uxtb	r2, r3
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	6a1b      	ldr	r3, [r3, #32]
 800b91c:	6978      	ldr	r0, [r7, #20]
 800b91e:	4798      	blx	r3
}
 800b920:	bf00      	nop
 800b922:	3718      	adds	r7, #24
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	20007e8c 	.word	0x20007e8c

0800b92c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b934:	f107 0308 	add.w	r3, r7, #8
 800b938:	4618      	mov	r0, r3
 800b93a:	f000 f857 	bl	800b9ec <prvGetNextExpireTime>
 800b93e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	4619      	mov	r1, r3
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	f000 f803 	bl	800b950 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b94a:	f000 f8d5 	bl	800baf8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b94e:	e7f1      	b.n	800b934 <prvTimerTask+0x8>

0800b950 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b95a:	f7ff f9f5 	bl	800ad48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b95e:	f107 0308 	add.w	r3, r7, #8
 800b962:	4618      	mov	r0, r3
 800b964:	f000 f866 	bl	800ba34 <prvSampleTimeNow>
 800b968:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d130      	bne.n	800b9d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d10a      	bne.n	800b98c <prvProcessTimerOrBlockTask+0x3c>
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d806      	bhi.n	800b98c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b97e:	f7ff f9f1 	bl	800ad64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b982:	68f9      	ldr	r1, [r7, #12]
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f7ff ff83 	bl	800b890 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b98a:	e024      	b.n	800b9d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d008      	beq.n	800b9a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b992:	4b13      	ldr	r3, [pc, #76]	; (800b9e0 <prvProcessTimerOrBlockTask+0x90>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d101      	bne.n	800b9a0 <prvProcessTimerOrBlockTask+0x50>
 800b99c:	2301      	movs	r3, #1
 800b99e:	e000      	b.n	800b9a2 <prvProcessTimerOrBlockTask+0x52>
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b9a4:	4b0f      	ldr	r3, [pc, #60]	; (800b9e4 <prvProcessTimerOrBlockTask+0x94>)
 800b9a6:	6818      	ldr	r0, [r3, #0]
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	1ad3      	subs	r3, r2, r3
 800b9ae:	683a      	ldr	r2, [r7, #0]
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	f7fe ff2b 	bl	800a80c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b9b6:	f7ff f9d5 	bl	800ad64 <xTaskResumeAll>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d10a      	bne.n	800b9d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b9c0:	4b09      	ldr	r3, [pc, #36]	; (800b9e8 <prvProcessTimerOrBlockTask+0x98>)
 800b9c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9c6:	601a      	str	r2, [r3, #0]
 800b9c8:	f3bf 8f4f 	dsb	sy
 800b9cc:	f3bf 8f6f 	isb	sy
}
 800b9d0:	e001      	b.n	800b9d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b9d2:	f7ff f9c7 	bl	800ad64 <xTaskResumeAll>
}
 800b9d6:	bf00      	nop
 800b9d8:	3710      	adds	r7, #16
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
 800b9de:	bf00      	nop
 800b9e0:	20007e90 	.word	0x20007e90
 800b9e4:	20007e94 	.word	0x20007e94
 800b9e8:	e000ed04 	.word	0xe000ed04

0800b9ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b085      	sub	sp, #20
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b9f4:	4b0e      	ldr	r3, [pc, #56]	; (800ba30 <prvGetNextExpireTime+0x44>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d101      	bne.n	800ba02 <prvGetNextExpireTime+0x16>
 800b9fe:	2201      	movs	r2, #1
 800ba00:	e000      	b.n	800ba04 <prvGetNextExpireTime+0x18>
 800ba02:	2200      	movs	r2, #0
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d105      	bne.n	800ba1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba10:	4b07      	ldr	r3, [pc, #28]	; (800ba30 <prvGetNextExpireTime+0x44>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	68db      	ldr	r3, [r3, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	60fb      	str	r3, [r7, #12]
 800ba1a:	e001      	b.n	800ba20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ba20:	68fb      	ldr	r3, [r7, #12]
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3714      	adds	r7, #20
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr
 800ba2e:	bf00      	nop
 800ba30:	20007e8c 	.word	0x20007e8c

0800ba34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ba3c:	f7ff fa32 	bl	800aea4 <xTaskGetTickCount>
 800ba40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ba42:	4b0b      	ldr	r3, [pc, #44]	; (800ba70 <prvSampleTimeNow+0x3c>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	68fa      	ldr	r2, [r7, #12]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d205      	bcs.n	800ba58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ba4c:	f000 f93c 	bl	800bcc8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2201      	movs	r2, #1
 800ba54:	601a      	str	r2, [r3, #0]
 800ba56:	e002      	b.n	800ba5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ba5e:	4a04      	ldr	r2, [pc, #16]	; (800ba70 <prvSampleTimeNow+0x3c>)
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ba64:	68fb      	ldr	r3, [r7, #12]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3710      	adds	r7, #16
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	20007e9c 	.word	0x20007e9c

0800ba74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b086      	sub	sp, #24
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	60b9      	str	r1, [r7, #8]
 800ba7e:	607a      	str	r2, [r7, #4]
 800ba80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ba82:	2300      	movs	r3, #0
 800ba84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	68ba      	ldr	r2, [r7, #8]
 800ba8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	68fa      	ldr	r2, [r7, #12]
 800ba90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ba92:	68ba      	ldr	r2, [r7, #8]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d812      	bhi.n	800bac0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba9a:	687a      	ldr	r2, [r7, #4]
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	1ad2      	subs	r2, r2, r3
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	699b      	ldr	r3, [r3, #24]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d302      	bcc.n	800baae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800baa8:	2301      	movs	r3, #1
 800baaa:	617b      	str	r3, [r7, #20]
 800baac:	e01b      	b.n	800bae6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800baae:	4b10      	ldr	r3, [pc, #64]	; (800baf0 <prvInsertTimerInActiveList+0x7c>)
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	3304      	adds	r3, #4
 800bab6:	4619      	mov	r1, r3
 800bab8:	4610      	mov	r0, r2
 800baba:	f7fe f96e 	bl	8009d9a <vListInsert>
 800babe:	e012      	b.n	800bae6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d206      	bcs.n	800bad6 <prvInsertTimerInActiveList+0x62>
 800bac8:	68ba      	ldr	r2, [r7, #8]
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d302      	bcc.n	800bad6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bad0:	2301      	movs	r3, #1
 800bad2:	617b      	str	r3, [r7, #20]
 800bad4:	e007      	b.n	800bae6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bad6:	4b07      	ldr	r3, [pc, #28]	; (800baf4 <prvInsertTimerInActiveList+0x80>)
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	3304      	adds	r3, #4
 800bade:	4619      	mov	r1, r3
 800bae0:	4610      	mov	r0, r2
 800bae2:	f7fe f95a 	bl	8009d9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bae6:	697b      	ldr	r3, [r7, #20]
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3718      	adds	r7, #24
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}
 800baf0:	20007e90 	.word	0x20007e90
 800baf4:	20007e8c 	.word	0x20007e8c

0800baf8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b08e      	sub	sp, #56	; 0x38
 800bafc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bafe:	e0d0      	b.n	800bca2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	da1a      	bge.n	800bb3c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bb06:	1d3b      	adds	r3, r7, #4
 800bb08:	3304      	adds	r3, #4
 800bb0a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d10c      	bne.n	800bb2c <prvProcessReceivedCommands+0x34>
	__asm volatile
 800bb12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb16:	b672      	cpsid	i
 800bb18:	f383 8811 	msr	BASEPRI, r3
 800bb1c:	f3bf 8f6f 	isb	sy
 800bb20:	f3bf 8f4f 	dsb	sy
 800bb24:	b662      	cpsie	i
 800bb26:	61fb      	str	r3, [r7, #28]
}
 800bb28:	bf00      	nop
 800bb2a:	e7fe      	b.n	800bb2a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb32:	6850      	ldr	r0, [r2, #4]
 800bb34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb36:	6892      	ldr	r2, [r2, #8]
 800bb38:	4611      	mov	r1, r2
 800bb3a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	f2c0 80af 	blt.w	800bca2 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4a:	695b      	ldr	r3, [r3, #20]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d004      	beq.n	800bb5a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb52:	3304      	adds	r3, #4
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7fe f959 	bl	8009e0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bb5a:	463b      	mov	r3, r7
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7ff ff69 	bl	800ba34 <prvSampleTimeNow>
 800bb62:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2b09      	cmp	r3, #9
 800bb68:	f200 809a 	bhi.w	800bca0 <prvProcessReceivedCommands+0x1a8>
 800bb6c:	a201      	add	r2, pc, #4	; (adr r2, 800bb74 <prvProcessReceivedCommands+0x7c>)
 800bb6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb72:	bf00      	nop
 800bb74:	0800bb9d 	.word	0x0800bb9d
 800bb78:	0800bb9d 	.word	0x0800bb9d
 800bb7c:	0800bb9d 	.word	0x0800bb9d
 800bb80:	0800bc15 	.word	0x0800bc15
 800bb84:	0800bc29 	.word	0x0800bc29
 800bb88:	0800bc77 	.word	0x0800bc77
 800bb8c:	0800bb9d 	.word	0x0800bb9d
 800bb90:	0800bb9d 	.word	0x0800bb9d
 800bb94:	0800bc15 	.word	0x0800bc15
 800bb98:	0800bc29 	.word	0x0800bc29
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bba2:	f043 0301 	orr.w	r3, r3, #1
 800bba6:	b2da      	uxtb	r2, r3
 800bba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bbae:	68ba      	ldr	r2, [r7, #8]
 800bbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb2:	699b      	ldr	r3, [r3, #24]
 800bbb4:	18d1      	adds	r1, r2, r3
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbbc:	f7ff ff5a 	bl	800ba74 <prvInsertTimerInActiveList>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d06d      	beq.n	800bca2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc8:	6a1b      	ldr	r3, [r3, #32]
 800bbca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbcc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbd4:	f003 0304 	and.w	r3, r3, #4
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d062      	beq.n	800bca2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bbdc:	68ba      	ldr	r2, [r7, #8]
 800bbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe0:	699b      	ldr	r3, [r3, #24]
 800bbe2:	441a      	add	r2, r3
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	9300      	str	r3, [sp, #0]
 800bbe8:	2300      	movs	r3, #0
 800bbea:	2100      	movs	r1, #0
 800bbec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbee:	f7ff fdff 	bl	800b7f0 <xTimerGenericCommand>
 800bbf2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bbf4:	6a3b      	ldr	r3, [r7, #32]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d153      	bne.n	800bca2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800bbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfe:	b672      	cpsid	i
 800bc00:	f383 8811 	msr	BASEPRI, r3
 800bc04:	f3bf 8f6f 	isb	sy
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	b662      	cpsie	i
 800bc0e:	61bb      	str	r3, [r7, #24]
}
 800bc10:	bf00      	nop
 800bc12:	e7fe      	b.n	800bc12 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc1a:	f023 0301 	bic.w	r3, r3, #1
 800bc1e:	b2da      	uxtb	r2, r3
 800bc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bc26:	e03c      	b.n	800bca2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc2e:	f043 0301 	orr.w	r3, r3, #1
 800bc32:	b2da      	uxtb	r2, r3
 800bc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bc3a:	68ba      	ldr	r2, [r7, #8]
 800bc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc42:	699b      	ldr	r3, [r3, #24]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d10c      	bne.n	800bc62 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800bc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4c:	b672      	cpsid	i
 800bc4e:	f383 8811 	msr	BASEPRI, r3
 800bc52:	f3bf 8f6f 	isb	sy
 800bc56:	f3bf 8f4f 	dsb	sy
 800bc5a:	b662      	cpsie	i
 800bc5c:	617b      	str	r3, [r7, #20]
}
 800bc5e:	bf00      	nop
 800bc60:	e7fe      	b.n	800bc60 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc64:	699a      	ldr	r2, [r3, #24]
 800bc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc68:	18d1      	adds	r1, r2, r3
 800bc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc70:	f7ff ff00 	bl	800ba74 <prvInsertTimerInActiveList>
					break;
 800bc74:	e015      	b.n	800bca2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc7c:	f003 0302 	and.w	r3, r3, #2
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d103      	bne.n	800bc8c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800bc84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc86:	f000 fbc7 	bl	800c418 <vPortFree>
 800bc8a:	e00a      	b.n	800bca2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc92:	f023 0301 	bic.w	r3, r3, #1
 800bc96:	b2da      	uxtb	r2, r3
 800bc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bc9e:	e000      	b.n	800bca2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800bca0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bca2:	4b08      	ldr	r3, [pc, #32]	; (800bcc4 <prvProcessReceivedCommands+0x1cc>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	1d39      	adds	r1, r7, #4
 800bca8:	2200      	movs	r2, #0
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f7fe fb8e 	bl	800a3cc <xQueueReceive>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	f47f af24 	bne.w	800bb00 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bcb8:	bf00      	nop
 800bcba:	bf00      	nop
 800bcbc:	3730      	adds	r7, #48	; 0x30
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	20007e94 	.word	0x20007e94

0800bcc8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b088      	sub	sp, #32
 800bccc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bcce:	e04a      	b.n	800bd66 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bcd0:	4b2e      	ldr	r3, [pc, #184]	; (800bd8c <prvSwitchTimerLists+0xc4>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	68db      	ldr	r3, [r3, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcda:	4b2c      	ldr	r3, [pc, #176]	; (800bd8c <prvSwitchTimerLists+0xc4>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	68db      	ldr	r3, [r3, #12]
 800bce2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	3304      	adds	r3, #4
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7fe f88f 	bl	8009e0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	6a1b      	ldr	r3, [r3, #32]
 800bcf2:	68f8      	ldr	r0, [r7, #12]
 800bcf4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcfc:	f003 0304 	and.w	r3, r3, #4
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d030      	beq.n	800bd66 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	699b      	ldr	r3, [r3, #24]
 800bd08:	693a      	ldr	r2, [r7, #16]
 800bd0a:	4413      	add	r3, r2
 800bd0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bd0e:	68ba      	ldr	r2, [r7, #8]
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d90e      	bls.n	800bd34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	68ba      	ldr	r2, [r7, #8]
 800bd1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	68fa      	ldr	r2, [r7, #12]
 800bd20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd22:	4b1a      	ldr	r3, [pc, #104]	; (800bd8c <prvSwitchTimerLists+0xc4>)
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	3304      	adds	r3, #4
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	4610      	mov	r0, r2
 800bd2e:	f7fe f834 	bl	8009d9a <vListInsert>
 800bd32:	e018      	b.n	800bd66 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd34:	2300      	movs	r3, #0
 800bd36:	9300      	str	r3, [sp, #0]
 800bd38:	2300      	movs	r3, #0
 800bd3a:	693a      	ldr	r2, [r7, #16]
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	68f8      	ldr	r0, [r7, #12]
 800bd40:	f7ff fd56 	bl	800b7f0 <xTimerGenericCommand>
 800bd44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d10c      	bne.n	800bd66 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800bd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd50:	b672      	cpsid	i
 800bd52:	f383 8811 	msr	BASEPRI, r3
 800bd56:	f3bf 8f6f 	isb	sy
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	b662      	cpsie	i
 800bd60:	603b      	str	r3, [r7, #0]
}
 800bd62:	bf00      	nop
 800bd64:	e7fe      	b.n	800bd64 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bd66:	4b09      	ldr	r3, [pc, #36]	; (800bd8c <prvSwitchTimerLists+0xc4>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d1af      	bne.n	800bcd0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bd70:	4b06      	ldr	r3, [pc, #24]	; (800bd8c <prvSwitchTimerLists+0xc4>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bd76:	4b06      	ldr	r3, [pc, #24]	; (800bd90 <prvSwitchTimerLists+0xc8>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4a04      	ldr	r2, [pc, #16]	; (800bd8c <prvSwitchTimerLists+0xc4>)
 800bd7c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bd7e:	4a04      	ldr	r2, [pc, #16]	; (800bd90 <prvSwitchTimerLists+0xc8>)
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	6013      	str	r3, [r2, #0]
}
 800bd84:	bf00      	nop
 800bd86:	3718      	adds	r7, #24
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	20007e8c 	.word	0x20007e8c
 800bd90:	20007e90 	.word	0x20007e90

0800bd94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b082      	sub	sp, #8
 800bd98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bd9a:	f000 f947 	bl	800c02c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bd9e:	4b15      	ldr	r3, [pc, #84]	; (800bdf4 <prvCheckForValidListAndQueue+0x60>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d120      	bne.n	800bde8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bda6:	4814      	ldr	r0, [pc, #80]	; (800bdf8 <prvCheckForValidListAndQueue+0x64>)
 800bda8:	f7fd ffa6 	bl	8009cf8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bdac:	4813      	ldr	r0, [pc, #76]	; (800bdfc <prvCheckForValidListAndQueue+0x68>)
 800bdae:	f7fd ffa3 	bl	8009cf8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bdb2:	4b13      	ldr	r3, [pc, #76]	; (800be00 <prvCheckForValidListAndQueue+0x6c>)
 800bdb4:	4a10      	ldr	r2, [pc, #64]	; (800bdf8 <prvCheckForValidListAndQueue+0x64>)
 800bdb6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bdb8:	4b12      	ldr	r3, [pc, #72]	; (800be04 <prvCheckForValidListAndQueue+0x70>)
 800bdba:	4a10      	ldr	r2, [pc, #64]	; (800bdfc <prvCheckForValidListAndQueue+0x68>)
 800bdbc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	9300      	str	r3, [sp, #0]
 800bdc2:	4b11      	ldr	r3, [pc, #68]	; (800be08 <prvCheckForValidListAndQueue+0x74>)
 800bdc4:	4a11      	ldr	r2, [pc, #68]	; (800be0c <prvCheckForValidListAndQueue+0x78>)
 800bdc6:	2110      	movs	r1, #16
 800bdc8:	200a      	movs	r0, #10
 800bdca:	f7fe f8b3 	bl	8009f34 <xQueueGenericCreateStatic>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	4a08      	ldr	r2, [pc, #32]	; (800bdf4 <prvCheckForValidListAndQueue+0x60>)
 800bdd2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bdd4:	4b07      	ldr	r3, [pc, #28]	; (800bdf4 <prvCheckForValidListAndQueue+0x60>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d005      	beq.n	800bde8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bddc:	4b05      	ldr	r3, [pc, #20]	; (800bdf4 <prvCheckForValidListAndQueue+0x60>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	490b      	ldr	r1, [pc, #44]	; (800be10 <prvCheckForValidListAndQueue+0x7c>)
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7fe fce8 	bl	800a7b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bde8:	f000 f954 	bl	800c094 <vPortExitCritical>
}
 800bdec:	bf00      	nop
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	20007e94 	.word	0x20007e94
 800bdf8:	20007e64 	.word	0x20007e64
 800bdfc:	20007e78 	.word	0x20007e78
 800be00:	20007e8c 	.word	0x20007e8c
 800be04:	20007e90 	.word	0x20007e90
 800be08:	20007f40 	.word	0x20007f40
 800be0c:	20007ea0 	.word	0x20007ea0
 800be10:	0801e8b8 	.word	0x0801e8b8

0800be14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	3b04      	subs	r3, #4
 800be24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800be2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	3b04      	subs	r3, #4
 800be32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	f023 0201 	bic.w	r2, r3, #1
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	3b04      	subs	r3, #4
 800be42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800be44:	4a0c      	ldr	r2, [pc, #48]	; (800be78 <pxPortInitialiseStack+0x64>)
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	3b14      	subs	r3, #20
 800be4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	3b04      	subs	r3, #4
 800be5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f06f 0202 	mvn.w	r2, #2
 800be62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	3b20      	subs	r3, #32
 800be68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800be6a:	68fb      	ldr	r3, [r7, #12]
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3714      	adds	r7, #20
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr
 800be78:	0800be7d 	.word	0x0800be7d

0800be7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800be7c:	b480      	push	{r7}
 800be7e:	b085      	sub	sp, #20
 800be80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800be82:	2300      	movs	r3, #0
 800be84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800be86:	4b14      	ldr	r3, [pc, #80]	; (800bed8 <prvTaskExitError+0x5c>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be8e:	d00c      	beq.n	800beaa <prvTaskExitError+0x2e>
	__asm volatile
 800be90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be94:	b672      	cpsid	i
 800be96:	f383 8811 	msr	BASEPRI, r3
 800be9a:	f3bf 8f6f 	isb	sy
 800be9e:	f3bf 8f4f 	dsb	sy
 800bea2:	b662      	cpsie	i
 800bea4:	60fb      	str	r3, [r7, #12]
}
 800bea6:	bf00      	nop
 800bea8:	e7fe      	b.n	800bea8 <prvTaskExitError+0x2c>
	__asm volatile
 800beaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beae:	b672      	cpsid	i
 800beb0:	f383 8811 	msr	BASEPRI, r3
 800beb4:	f3bf 8f6f 	isb	sy
 800beb8:	f3bf 8f4f 	dsb	sy
 800bebc:	b662      	cpsie	i
 800bebe:	60bb      	str	r3, [r7, #8]
}
 800bec0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bec2:	bf00      	nop
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d0fc      	beq.n	800bec4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800beca:	bf00      	nop
 800becc:	bf00      	nop
 800bece:	3714      	adds	r7, #20
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr
 800bed8:	20000010 	.word	0x20000010
 800bedc:	00000000 	.word	0x00000000

0800bee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bee0:	4b07      	ldr	r3, [pc, #28]	; (800bf00 <pxCurrentTCBConst2>)
 800bee2:	6819      	ldr	r1, [r3, #0]
 800bee4:	6808      	ldr	r0, [r1, #0]
 800bee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beea:	f380 8809 	msr	PSP, r0
 800beee:	f3bf 8f6f 	isb	sy
 800bef2:	f04f 0000 	mov.w	r0, #0
 800bef6:	f380 8811 	msr	BASEPRI, r0
 800befa:	4770      	bx	lr
 800befc:	f3af 8000 	nop.w

0800bf00 <pxCurrentTCBConst2>:
 800bf00:	20007964 	.word	0x20007964
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bf04:	bf00      	nop
 800bf06:	bf00      	nop

0800bf08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bf08:	4808      	ldr	r0, [pc, #32]	; (800bf2c <prvPortStartFirstTask+0x24>)
 800bf0a:	6800      	ldr	r0, [r0, #0]
 800bf0c:	6800      	ldr	r0, [r0, #0]
 800bf0e:	f380 8808 	msr	MSP, r0
 800bf12:	f04f 0000 	mov.w	r0, #0
 800bf16:	f380 8814 	msr	CONTROL, r0
 800bf1a:	b662      	cpsie	i
 800bf1c:	b661      	cpsie	f
 800bf1e:	f3bf 8f4f 	dsb	sy
 800bf22:	f3bf 8f6f 	isb	sy
 800bf26:	df00      	svc	0
 800bf28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bf2a:	bf00      	nop
 800bf2c:	e000ed08 	.word	0xe000ed08

0800bf30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bf36:	4b37      	ldr	r3, [pc, #220]	; (800c014 <xPortStartScheduler+0xe4>)
 800bf38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	22ff      	movs	r2, #255	; 0xff
 800bf46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	b2db      	uxtb	r3, r3
 800bf4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bf50:	78fb      	ldrb	r3, [r7, #3]
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bf58:	b2da      	uxtb	r2, r3
 800bf5a:	4b2f      	ldr	r3, [pc, #188]	; (800c018 <xPortStartScheduler+0xe8>)
 800bf5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bf5e:	4b2f      	ldr	r3, [pc, #188]	; (800c01c <xPortStartScheduler+0xec>)
 800bf60:	2207      	movs	r2, #7
 800bf62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf64:	e009      	b.n	800bf7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800bf66:	4b2d      	ldr	r3, [pc, #180]	; (800c01c <xPortStartScheduler+0xec>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	3b01      	subs	r3, #1
 800bf6c:	4a2b      	ldr	r2, [pc, #172]	; (800c01c <xPortStartScheduler+0xec>)
 800bf6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bf70:	78fb      	ldrb	r3, [r7, #3]
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	005b      	lsls	r3, r3, #1
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf7a:	78fb      	ldrb	r3, [r7, #3]
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf82:	2b80      	cmp	r3, #128	; 0x80
 800bf84:	d0ef      	beq.n	800bf66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bf86:	4b25      	ldr	r3, [pc, #148]	; (800c01c <xPortStartScheduler+0xec>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f1c3 0307 	rsb	r3, r3, #7
 800bf8e:	2b04      	cmp	r3, #4
 800bf90:	d00c      	beq.n	800bfac <xPortStartScheduler+0x7c>
	__asm volatile
 800bf92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf96:	b672      	cpsid	i
 800bf98:	f383 8811 	msr	BASEPRI, r3
 800bf9c:	f3bf 8f6f 	isb	sy
 800bfa0:	f3bf 8f4f 	dsb	sy
 800bfa4:	b662      	cpsie	i
 800bfa6:	60bb      	str	r3, [r7, #8]
}
 800bfa8:	bf00      	nop
 800bfaa:	e7fe      	b.n	800bfaa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bfac:	4b1b      	ldr	r3, [pc, #108]	; (800c01c <xPortStartScheduler+0xec>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	021b      	lsls	r3, r3, #8
 800bfb2:	4a1a      	ldr	r2, [pc, #104]	; (800c01c <xPortStartScheduler+0xec>)
 800bfb4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bfb6:	4b19      	ldr	r3, [pc, #100]	; (800c01c <xPortStartScheduler+0xec>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bfbe:	4a17      	ldr	r2, [pc, #92]	; (800c01c <xPortStartScheduler+0xec>)
 800bfc0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	b2da      	uxtb	r2, r3
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bfca:	4b15      	ldr	r3, [pc, #84]	; (800c020 <xPortStartScheduler+0xf0>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	4a14      	ldr	r2, [pc, #80]	; (800c020 <xPortStartScheduler+0xf0>)
 800bfd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bfd4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bfd6:	4b12      	ldr	r3, [pc, #72]	; (800c020 <xPortStartScheduler+0xf0>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4a11      	ldr	r2, [pc, #68]	; (800c020 <xPortStartScheduler+0xf0>)
 800bfdc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bfe0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bfe2:	f000 f8dd 	bl	800c1a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bfe6:	4b0f      	ldr	r3, [pc, #60]	; (800c024 <xPortStartScheduler+0xf4>)
 800bfe8:	2200      	movs	r2, #0
 800bfea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bfec:	f000 f8fc 	bl	800c1e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bff0:	4b0d      	ldr	r3, [pc, #52]	; (800c028 <xPortStartScheduler+0xf8>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	4a0c      	ldr	r2, [pc, #48]	; (800c028 <xPortStartScheduler+0xf8>)
 800bff6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bffa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bffc:	f7ff ff84 	bl	800bf08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c000:	f7ff f81c 	bl	800b03c <vTaskSwitchContext>
	prvTaskExitError();
 800c004:	f7ff ff3a 	bl	800be7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c008:	2300      	movs	r3, #0
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3710      	adds	r7, #16
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	e000e400 	.word	0xe000e400
 800c018:	20007f90 	.word	0x20007f90
 800c01c:	20007f94 	.word	0x20007f94
 800c020:	e000ed20 	.word	0xe000ed20
 800c024:	20000010 	.word	0x20000010
 800c028:	e000ef34 	.word	0xe000ef34

0800c02c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c02c:	b480      	push	{r7}
 800c02e:	b083      	sub	sp, #12
 800c030:	af00      	add	r7, sp, #0
	__asm volatile
 800c032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c036:	b672      	cpsid	i
 800c038:	f383 8811 	msr	BASEPRI, r3
 800c03c:	f3bf 8f6f 	isb	sy
 800c040:	f3bf 8f4f 	dsb	sy
 800c044:	b662      	cpsie	i
 800c046:	607b      	str	r3, [r7, #4]
}
 800c048:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c04a:	4b10      	ldr	r3, [pc, #64]	; (800c08c <vPortEnterCritical+0x60>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	3301      	adds	r3, #1
 800c050:	4a0e      	ldr	r2, [pc, #56]	; (800c08c <vPortEnterCritical+0x60>)
 800c052:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c054:	4b0d      	ldr	r3, [pc, #52]	; (800c08c <vPortEnterCritical+0x60>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d111      	bne.n	800c080 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c05c:	4b0c      	ldr	r3, [pc, #48]	; (800c090 <vPortEnterCritical+0x64>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	b2db      	uxtb	r3, r3
 800c062:	2b00      	cmp	r3, #0
 800c064:	d00c      	beq.n	800c080 <vPortEnterCritical+0x54>
	__asm volatile
 800c066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c06a:	b672      	cpsid	i
 800c06c:	f383 8811 	msr	BASEPRI, r3
 800c070:	f3bf 8f6f 	isb	sy
 800c074:	f3bf 8f4f 	dsb	sy
 800c078:	b662      	cpsie	i
 800c07a:	603b      	str	r3, [r7, #0]
}
 800c07c:	bf00      	nop
 800c07e:	e7fe      	b.n	800c07e <vPortEnterCritical+0x52>
	}
}
 800c080:	bf00      	nop
 800c082:	370c      	adds	r7, #12
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr
 800c08c:	20000010 	.word	0x20000010
 800c090:	e000ed04 	.word	0xe000ed04

0800c094 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c094:	b480      	push	{r7}
 800c096:	b083      	sub	sp, #12
 800c098:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c09a:	4b13      	ldr	r3, [pc, #76]	; (800c0e8 <vPortExitCritical+0x54>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d10c      	bne.n	800c0bc <vPortExitCritical+0x28>
	__asm volatile
 800c0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a6:	b672      	cpsid	i
 800c0a8:	f383 8811 	msr	BASEPRI, r3
 800c0ac:	f3bf 8f6f 	isb	sy
 800c0b0:	f3bf 8f4f 	dsb	sy
 800c0b4:	b662      	cpsie	i
 800c0b6:	607b      	str	r3, [r7, #4]
}
 800c0b8:	bf00      	nop
 800c0ba:	e7fe      	b.n	800c0ba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c0bc:	4b0a      	ldr	r3, [pc, #40]	; (800c0e8 <vPortExitCritical+0x54>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	3b01      	subs	r3, #1
 800c0c2:	4a09      	ldr	r2, [pc, #36]	; (800c0e8 <vPortExitCritical+0x54>)
 800c0c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c0c6:	4b08      	ldr	r3, [pc, #32]	; (800c0e8 <vPortExitCritical+0x54>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d105      	bne.n	800c0da <vPortExitCritical+0x46>
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	f383 8811 	msr	BASEPRI, r3
}
 800c0d8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c0da:	bf00      	nop
 800c0dc:	370c      	adds	r7, #12
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr
 800c0e6:	bf00      	nop
 800c0e8:	20000010 	.word	0x20000010
 800c0ec:	00000000 	.word	0x00000000

0800c0f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c0f0:	f3ef 8009 	mrs	r0, PSP
 800c0f4:	f3bf 8f6f 	isb	sy
 800c0f8:	4b15      	ldr	r3, [pc, #84]	; (800c150 <pxCurrentTCBConst>)
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	f01e 0f10 	tst.w	lr, #16
 800c100:	bf08      	it	eq
 800c102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c10a:	6010      	str	r0, [r2, #0]
 800c10c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c110:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c114:	b672      	cpsid	i
 800c116:	f380 8811 	msr	BASEPRI, r0
 800c11a:	f3bf 8f4f 	dsb	sy
 800c11e:	f3bf 8f6f 	isb	sy
 800c122:	b662      	cpsie	i
 800c124:	f7fe ff8a 	bl	800b03c <vTaskSwitchContext>
 800c128:	f04f 0000 	mov.w	r0, #0
 800c12c:	f380 8811 	msr	BASEPRI, r0
 800c130:	bc09      	pop	{r0, r3}
 800c132:	6819      	ldr	r1, [r3, #0]
 800c134:	6808      	ldr	r0, [r1, #0]
 800c136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c13a:	f01e 0f10 	tst.w	lr, #16
 800c13e:	bf08      	it	eq
 800c140:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c144:	f380 8809 	msr	PSP, r0
 800c148:	f3bf 8f6f 	isb	sy
 800c14c:	4770      	bx	lr
 800c14e:	bf00      	nop

0800c150 <pxCurrentTCBConst>:
 800c150:	20007964 	.word	0x20007964
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c154:	bf00      	nop
 800c156:	bf00      	nop

0800c158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
	__asm volatile
 800c15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c162:	b672      	cpsid	i
 800c164:	f383 8811 	msr	BASEPRI, r3
 800c168:	f3bf 8f6f 	isb	sy
 800c16c:	f3bf 8f4f 	dsb	sy
 800c170:	b662      	cpsie	i
 800c172:	607b      	str	r3, [r7, #4]
}
 800c174:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c176:	f7fe fea5 	bl	800aec4 <xTaskIncrementTick>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d003      	beq.n	800c188 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c180:	4b06      	ldr	r3, [pc, #24]	; (800c19c <SysTick_Handler+0x44>)
 800c182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c186:	601a      	str	r2, [r3, #0]
 800c188:	2300      	movs	r3, #0
 800c18a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	f383 8811 	msr	BASEPRI, r3
}
 800c192:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c194:	bf00      	nop
 800c196:	3708      	adds	r7, #8
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	e000ed04 	.word	0xe000ed04

0800c1a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c1a4:	4b0b      	ldr	r3, [pc, #44]	; (800c1d4 <vPortSetupTimerInterrupt+0x34>)
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c1aa:	4b0b      	ldr	r3, [pc, #44]	; (800c1d8 <vPortSetupTimerInterrupt+0x38>)
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c1b0:	4b0a      	ldr	r3, [pc, #40]	; (800c1dc <vPortSetupTimerInterrupt+0x3c>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4a0a      	ldr	r2, [pc, #40]	; (800c1e0 <vPortSetupTimerInterrupt+0x40>)
 800c1b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c1ba:	099b      	lsrs	r3, r3, #6
 800c1bc:	4a09      	ldr	r2, [pc, #36]	; (800c1e4 <vPortSetupTimerInterrupt+0x44>)
 800c1be:	3b01      	subs	r3, #1
 800c1c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c1c2:	4b04      	ldr	r3, [pc, #16]	; (800c1d4 <vPortSetupTimerInterrupt+0x34>)
 800c1c4:	2207      	movs	r2, #7
 800c1c6:	601a      	str	r2, [r3, #0]
}
 800c1c8:	bf00      	nop
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d0:	4770      	bx	lr
 800c1d2:	bf00      	nop
 800c1d4:	e000e010 	.word	0xe000e010
 800c1d8:	e000e018 	.word	0xe000e018
 800c1dc:	20000004 	.word	0x20000004
 800c1e0:	10624dd3 	.word	0x10624dd3
 800c1e4:	e000e014 	.word	0xe000e014

0800c1e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c1e8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c1f8 <vPortEnableVFP+0x10>
 800c1ec:	6801      	ldr	r1, [r0, #0]
 800c1ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c1f2:	6001      	str	r1, [r0, #0]
 800c1f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c1f6:	bf00      	nop
 800c1f8:	e000ed88 	.word	0xe000ed88

0800c1fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b085      	sub	sp, #20
 800c200:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c202:	f3ef 8305 	mrs	r3, IPSR
 800c206:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2b0f      	cmp	r3, #15
 800c20c:	d916      	bls.n	800c23c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c20e:	4a19      	ldr	r2, [pc, #100]	; (800c274 <vPortValidateInterruptPriority+0x78>)
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	4413      	add	r3, r2
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c218:	4b17      	ldr	r3, [pc, #92]	; (800c278 <vPortValidateInterruptPriority+0x7c>)
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	7afa      	ldrb	r2, [r7, #11]
 800c21e:	429a      	cmp	r2, r3
 800c220:	d20c      	bcs.n	800c23c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800c222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c226:	b672      	cpsid	i
 800c228:	f383 8811 	msr	BASEPRI, r3
 800c22c:	f3bf 8f6f 	isb	sy
 800c230:	f3bf 8f4f 	dsb	sy
 800c234:	b662      	cpsie	i
 800c236:	607b      	str	r3, [r7, #4]
}
 800c238:	bf00      	nop
 800c23a:	e7fe      	b.n	800c23a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c23c:	4b0f      	ldr	r3, [pc, #60]	; (800c27c <vPortValidateInterruptPriority+0x80>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c244:	4b0e      	ldr	r3, [pc, #56]	; (800c280 <vPortValidateInterruptPriority+0x84>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	429a      	cmp	r2, r3
 800c24a:	d90c      	bls.n	800c266 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800c24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c250:	b672      	cpsid	i
 800c252:	f383 8811 	msr	BASEPRI, r3
 800c256:	f3bf 8f6f 	isb	sy
 800c25a:	f3bf 8f4f 	dsb	sy
 800c25e:	b662      	cpsie	i
 800c260:	603b      	str	r3, [r7, #0]
}
 800c262:	bf00      	nop
 800c264:	e7fe      	b.n	800c264 <vPortValidateInterruptPriority+0x68>
	}
 800c266:	bf00      	nop
 800c268:	3714      	adds	r7, #20
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop
 800c274:	e000e3f0 	.word	0xe000e3f0
 800c278:	20007f90 	.word	0x20007f90
 800c27c:	e000ed0c 	.word	0xe000ed0c
 800c280:	20007f94 	.word	0x20007f94

0800c284 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b08a      	sub	sp, #40	; 0x28
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c28c:	2300      	movs	r3, #0
 800c28e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c290:	f7fe fd5a 	bl	800ad48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c294:	4b5b      	ldr	r3, [pc, #364]	; (800c404 <pvPortMalloc+0x180>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d101      	bne.n	800c2a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c29c:	f000 f91a 	bl	800c4d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c2a0:	4b59      	ldr	r3, [pc, #356]	; (800c408 <pvPortMalloc+0x184>)
 800c2a2:	681a      	ldr	r2, [r3, #0]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	4013      	ands	r3, r2
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	f040 8092 	bne.w	800c3d2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d01f      	beq.n	800c2f4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800c2b4:	2208      	movs	r2, #8
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	4413      	add	r3, r2
 800c2ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f003 0307 	and.w	r3, r3, #7
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d016      	beq.n	800c2f4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f023 0307 	bic.w	r3, r3, #7
 800c2cc:	3308      	adds	r3, #8
 800c2ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f003 0307 	and.w	r3, r3, #7
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d00c      	beq.n	800c2f4 <pvPortMalloc+0x70>
	__asm volatile
 800c2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2de:	b672      	cpsid	i
 800c2e0:	f383 8811 	msr	BASEPRI, r3
 800c2e4:	f3bf 8f6f 	isb	sy
 800c2e8:	f3bf 8f4f 	dsb	sy
 800c2ec:	b662      	cpsie	i
 800c2ee:	617b      	str	r3, [r7, #20]
}
 800c2f0:	bf00      	nop
 800c2f2:	e7fe      	b.n	800c2f2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d06b      	beq.n	800c3d2 <pvPortMalloc+0x14e>
 800c2fa:	4b44      	ldr	r3, [pc, #272]	; (800c40c <pvPortMalloc+0x188>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	687a      	ldr	r2, [r7, #4]
 800c300:	429a      	cmp	r2, r3
 800c302:	d866      	bhi.n	800c3d2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c304:	4b42      	ldr	r3, [pc, #264]	; (800c410 <pvPortMalloc+0x18c>)
 800c306:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c308:	4b41      	ldr	r3, [pc, #260]	; (800c410 <pvPortMalloc+0x18c>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c30e:	e004      	b.n	800c31a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800c310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c312:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	429a      	cmp	r2, r3
 800c322:	d903      	bls.n	800c32c <pvPortMalloc+0xa8>
 800c324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d1f1      	bne.n	800c310 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c32c:	4b35      	ldr	r3, [pc, #212]	; (800c404 <pvPortMalloc+0x180>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c332:	429a      	cmp	r2, r3
 800c334:	d04d      	beq.n	800c3d2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c336:	6a3b      	ldr	r3, [r7, #32]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2208      	movs	r2, #8
 800c33c:	4413      	add	r3, r2
 800c33e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	6a3b      	ldr	r3, [r7, #32]
 800c346:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34a:	685a      	ldr	r2, [r3, #4]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	1ad2      	subs	r2, r2, r3
 800c350:	2308      	movs	r3, #8
 800c352:	005b      	lsls	r3, r3, #1
 800c354:	429a      	cmp	r2, r3
 800c356:	d921      	bls.n	800c39c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	4413      	add	r3, r2
 800c35e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	f003 0307 	and.w	r3, r3, #7
 800c366:	2b00      	cmp	r3, #0
 800c368:	d00c      	beq.n	800c384 <pvPortMalloc+0x100>
	__asm volatile
 800c36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36e:	b672      	cpsid	i
 800c370:	f383 8811 	msr	BASEPRI, r3
 800c374:	f3bf 8f6f 	isb	sy
 800c378:	f3bf 8f4f 	dsb	sy
 800c37c:	b662      	cpsie	i
 800c37e:	613b      	str	r3, [r7, #16]
}
 800c380:	bf00      	nop
 800c382:	e7fe      	b.n	800c382 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c386:	685a      	ldr	r2, [r3, #4]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	1ad2      	subs	r2, r2, r3
 800c38c:	69bb      	ldr	r3, [r7, #24]
 800c38e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c392:	687a      	ldr	r2, [r7, #4]
 800c394:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c396:	69b8      	ldr	r0, [r7, #24]
 800c398:	f000 f8fe 	bl	800c598 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c39c:	4b1b      	ldr	r3, [pc, #108]	; (800c40c <pvPortMalloc+0x188>)
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	1ad3      	subs	r3, r2, r3
 800c3a6:	4a19      	ldr	r2, [pc, #100]	; (800c40c <pvPortMalloc+0x188>)
 800c3a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c3aa:	4b18      	ldr	r3, [pc, #96]	; (800c40c <pvPortMalloc+0x188>)
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	4b19      	ldr	r3, [pc, #100]	; (800c414 <pvPortMalloc+0x190>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d203      	bcs.n	800c3be <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c3b6:	4b15      	ldr	r3, [pc, #84]	; (800c40c <pvPortMalloc+0x188>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a16      	ldr	r2, [pc, #88]	; (800c414 <pvPortMalloc+0x190>)
 800c3bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c0:	685a      	ldr	r2, [r3, #4]
 800c3c2:	4b11      	ldr	r3, [pc, #68]	; (800c408 <pvPortMalloc+0x184>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	431a      	orrs	r2, r3
 800c3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c3d2:	f7fe fcc7 	bl	800ad64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3d6:	69fb      	ldr	r3, [r7, #28]
 800c3d8:	f003 0307 	and.w	r3, r3, #7
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d00c      	beq.n	800c3fa <pvPortMalloc+0x176>
	__asm volatile
 800c3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e4:	b672      	cpsid	i
 800c3e6:	f383 8811 	msr	BASEPRI, r3
 800c3ea:	f3bf 8f6f 	isb	sy
 800c3ee:	f3bf 8f4f 	dsb	sy
 800c3f2:	b662      	cpsie	i
 800c3f4:	60fb      	str	r3, [r7, #12]
}
 800c3f6:	bf00      	nop
 800c3f8:	e7fe      	b.n	800c3f8 <pvPortMalloc+0x174>
	return pvReturn;
 800c3fa:	69fb      	ldr	r3, [r7, #28]
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3728      	adds	r7, #40	; 0x28
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}
 800c404:	2000bba0 	.word	0x2000bba0
 800c408:	2000bbac 	.word	0x2000bbac
 800c40c:	2000bba4 	.word	0x2000bba4
 800c410:	2000bb98 	.word	0x2000bb98
 800c414:	2000bba8 	.word	0x2000bba8

0800c418 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b086      	sub	sp, #24
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d04c      	beq.n	800c4c4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c42a:	2308      	movs	r3, #8
 800c42c:	425b      	negs	r3, r3
 800c42e:	697a      	ldr	r2, [r7, #20]
 800c430:	4413      	add	r3, r2
 800c432:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	685a      	ldr	r2, [r3, #4]
 800c43c:	4b23      	ldr	r3, [pc, #140]	; (800c4cc <vPortFree+0xb4>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4013      	ands	r3, r2
 800c442:	2b00      	cmp	r3, #0
 800c444:	d10c      	bne.n	800c460 <vPortFree+0x48>
	__asm volatile
 800c446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44a:	b672      	cpsid	i
 800c44c:	f383 8811 	msr	BASEPRI, r3
 800c450:	f3bf 8f6f 	isb	sy
 800c454:	f3bf 8f4f 	dsb	sy
 800c458:	b662      	cpsie	i
 800c45a:	60fb      	str	r3, [r7, #12]
}
 800c45c:	bf00      	nop
 800c45e:	e7fe      	b.n	800c45e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d00c      	beq.n	800c482 <vPortFree+0x6a>
	__asm volatile
 800c468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46c:	b672      	cpsid	i
 800c46e:	f383 8811 	msr	BASEPRI, r3
 800c472:	f3bf 8f6f 	isb	sy
 800c476:	f3bf 8f4f 	dsb	sy
 800c47a:	b662      	cpsie	i
 800c47c:	60bb      	str	r3, [r7, #8]
}
 800c47e:	bf00      	nop
 800c480:	e7fe      	b.n	800c480 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	685a      	ldr	r2, [r3, #4]
 800c486:	4b11      	ldr	r3, [pc, #68]	; (800c4cc <vPortFree+0xb4>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4013      	ands	r3, r2
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d019      	beq.n	800c4c4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d115      	bne.n	800c4c4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	685a      	ldr	r2, [r3, #4]
 800c49c:	4b0b      	ldr	r3, [pc, #44]	; (800c4cc <vPortFree+0xb4>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	43db      	mvns	r3, r3
 800c4a2:	401a      	ands	r2, r3
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c4a8:	f7fe fc4e 	bl	800ad48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	685a      	ldr	r2, [r3, #4]
 800c4b0:	4b07      	ldr	r3, [pc, #28]	; (800c4d0 <vPortFree+0xb8>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	4413      	add	r3, r2
 800c4b6:	4a06      	ldr	r2, [pc, #24]	; (800c4d0 <vPortFree+0xb8>)
 800c4b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c4ba:	6938      	ldr	r0, [r7, #16]
 800c4bc:	f000 f86c 	bl	800c598 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c4c0:	f7fe fc50 	bl	800ad64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c4c4:	bf00      	nop
 800c4c6:	3718      	adds	r7, #24
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	2000bbac 	.word	0x2000bbac
 800c4d0:	2000bba4 	.word	0x2000bba4

0800c4d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b085      	sub	sp, #20
 800c4d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c4da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c4de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c4e0:	4b27      	ldr	r3, [pc, #156]	; (800c580 <prvHeapInit+0xac>)
 800c4e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f003 0307 	and.w	r3, r3, #7
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d00c      	beq.n	800c508 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	3307      	adds	r3, #7
 800c4f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f023 0307 	bic.w	r3, r3, #7
 800c4fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c4fc:	68ba      	ldr	r2, [r7, #8]
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	1ad3      	subs	r3, r2, r3
 800c502:	4a1f      	ldr	r2, [pc, #124]	; (800c580 <prvHeapInit+0xac>)
 800c504:	4413      	add	r3, r2
 800c506:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c50c:	4a1d      	ldr	r2, [pc, #116]	; (800c584 <prvHeapInit+0xb0>)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c512:	4b1c      	ldr	r3, [pc, #112]	; (800c584 <prvHeapInit+0xb0>)
 800c514:	2200      	movs	r2, #0
 800c516:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	68ba      	ldr	r2, [r7, #8]
 800c51c:	4413      	add	r3, r2
 800c51e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c520:	2208      	movs	r2, #8
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	1a9b      	subs	r3, r3, r2
 800c526:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f023 0307 	bic.w	r3, r3, #7
 800c52e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	4a15      	ldr	r2, [pc, #84]	; (800c588 <prvHeapInit+0xb4>)
 800c534:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c536:	4b14      	ldr	r3, [pc, #80]	; (800c588 <prvHeapInit+0xb4>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	2200      	movs	r2, #0
 800c53c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c53e:	4b12      	ldr	r3, [pc, #72]	; (800c588 <prvHeapInit+0xb4>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	2200      	movs	r2, #0
 800c544:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	68fa      	ldr	r2, [r7, #12]
 800c54e:	1ad2      	subs	r2, r2, r3
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c554:	4b0c      	ldr	r3, [pc, #48]	; (800c588 <prvHeapInit+0xb4>)
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	4a0a      	ldr	r2, [pc, #40]	; (800c58c <prvHeapInit+0xb8>)
 800c562:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	4a09      	ldr	r2, [pc, #36]	; (800c590 <prvHeapInit+0xbc>)
 800c56a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c56c:	4b09      	ldr	r3, [pc, #36]	; (800c594 <prvHeapInit+0xc0>)
 800c56e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c572:	601a      	str	r2, [r3, #0]
}
 800c574:	bf00      	nop
 800c576:	3714      	adds	r7, #20
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr
 800c580:	20007f98 	.word	0x20007f98
 800c584:	2000bb98 	.word	0x2000bb98
 800c588:	2000bba0 	.word	0x2000bba0
 800c58c:	2000bba8 	.word	0x2000bba8
 800c590:	2000bba4 	.word	0x2000bba4
 800c594:	2000bbac 	.word	0x2000bbac

0800c598 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c598:	b480      	push	{r7}
 800c59a:	b085      	sub	sp, #20
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c5a0:	4b28      	ldr	r3, [pc, #160]	; (800c644 <prvInsertBlockIntoFreeList+0xac>)
 800c5a2:	60fb      	str	r3, [r7, #12]
 800c5a4:	e002      	b.n	800c5ac <prvInsertBlockIntoFreeList+0x14>
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	60fb      	str	r3, [r7, #12]
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	687a      	ldr	r2, [r7, #4]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d8f7      	bhi.n	800c5a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	68ba      	ldr	r2, [r7, #8]
 800c5c0:	4413      	add	r3, r2
 800c5c2:	687a      	ldr	r2, [r7, #4]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d108      	bne.n	800c5da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	685a      	ldr	r2, [r3, #4]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	441a      	add	r2, r3
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	685b      	ldr	r3, [r3, #4]
 800c5e2:	68ba      	ldr	r2, [r7, #8]
 800c5e4:	441a      	add	r2, r3
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d118      	bne.n	800c620 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	4b15      	ldr	r3, [pc, #84]	; (800c648 <prvInsertBlockIntoFreeList+0xb0>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d00d      	beq.n	800c616 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	685a      	ldr	r2, [r3, #4]
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	685b      	ldr	r3, [r3, #4]
 800c604:	441a      	add	r2, r3
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	681a      	ldr	r2, [r3, #0]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	601a      	str	r2, [r3, #0]
 800c614:	e008      	b.n	800c628 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c616:	4b0c      	ldr	r3, [pc, #48]	; (800c648 <prvInsertBlockIntoFreeList+0xb0>)
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	601a      	str	r2, [r3, #0]
 800c61e:	e003      	b.n	800c628 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c628:	68fa      	ldr	r2, [r7, #12]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d002      	beq.n	800c636 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c636:	bf00      	nop
 800c638:	3714      	adds	r7, #20
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr
 800c642:	bf00      	nop
 800c644:	2000bb98 	.word	0x2000bb98
 800c648:	2000bba0 	.word	0x2000bba0

0800c64c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control>:
 800c64c:	4b04      	ldr	r3, [pc, #16]	; (800c660 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800c64e:	681a      	ldr	r2, [r3, #0]
 800c650:	b10a      	cbz	r2, 800c656 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0xa>
 800c652:	4803      	ldr	r0, [pc, #12]	; (800c660 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800c654:	4770      	bx	lr
 800c656:	4a03      	ldr	r2, [pc, #12]	; (800c664 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x18>)
 800c658:	4801      	ldr	r0, [pc, #4]	; (800c660 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800c65a:	6812      	ldr	r2, [r2, #0]
 800c65c:	601a      	str	r2, [r3, #0]
 800c65e:	4770      	bx	lr
 800c660:	2000001c 	.word	0x2000001c
 800c664:	20000b60 	.word	0x20000b60

0800c668 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800c668:	4b06      	ldr	r3, [pc, #24]	; (800c684 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x1c>)
 800c66a:	4807      	ldr	r0, [pc, #28]	; (800c688 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x20>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	4907      	ldr	r1, [pc, #28]	; (800c68c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x24>)
 800c670:	4a07      	ldr	r2, [pc, #28]	; (800c690 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x28>)
 800c672:	b410      	push	{r4}
 800c674:	4c07      	ldr	r4, [pc, #28]	; (800c694 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x2c>)
 800c676:	6003      	str	r3, [r0, #0]
 800c678:	6023      	str	r3, [r4, #0]
 800c67a:	600b      	str	r3, [r1, #0]
 800c67c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c680:	6013      	str	r3, [r2, #0]
 800c682:	4770      	bx	lr
 800c684:	20000b60 	.word	0x20000b60
 800c688:	20000090 	.word	0x20000090
 800c68c:	20000050 	.word	0x20000050
 800c690:	2000001c 	.word	0x2000001c
 800c694:	20000078 	.word	0x20000078

0800c698 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug>:
 800c698:	4b04      	ldr	r3, [pc, #16]	; (800c6ac <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0x14>)
 800c69a:	681a      	ldr	r2, [r3, #0]
 800c69c:	b10a      	cbz	r2, 800c6a2 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0xa>
 800c69e:	4803      	ldr	r0, [pc, #12]	; (800c6ac <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0x14>)
 800c6a0:	4770      	bx	lr
 800c6a2:	4a03      	ldr	r2, [pc, #12]	; (800c6b0 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0x18>)
 800c6a4:	4801      	ldr	r0, [pc, #4]	; (800c6ac <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0x14>)
 800c6a6:	6812      	ldr	r2, [r2, #0]
 800c6a8:	601a      	str	r2, [r3, #0]
 800c6aa:	4770      	bx	lr
 800c6ac:	200000b0 	.word	0x200000b0
 800c6b0:	20000b60 	.word	0x20000b60

0800c6b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug>:
 800c6b4:	4a02      	ldr	r2, [pc, #8]	; (800c6c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0xc>)
 800c6b6:	4b03      	ldr	r3, [pc, #12]	; (800c6c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0x10>)
 800c6b8:	6812      	ldr	r2, [r2, #0]
 800c6ba:	601a      	str	r2, [r3, #0]
 800c6bc:	4770      	bx	lr
 800c6be:	bf00      	nop
 800c6c0:	20000b60 	.word	0x20000b60
 800c6c4:	200000b0 	.word	0x200000b0

0800c6c8 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800c6c8:	4b04      	ldr	r3, [pc, #16]	; (800c6dc <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800c6ca:	681a      	ldr	r2, [r3, #0]
 800c6cc:	b10a      	cbz	r2, 800c6d2 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0xa>
 800c6ce:	4803      	ldr	r0, [pc, #12]	; (800c6dc <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800c6d0:	4770      	bx	lr
 800c6d2:	4a03      	ldr	r2, [pc, #12]	; (800c6e0 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x18>)
 800c6d4:	4801      	ldr	r0, [pc, #4]	; (800c6dc <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800c6d6:	6812      	ldr	r2, [r2, #0]
 800c6d8:	601a      	str	r2, [r3, #0]
 800c6da:	4770      	bx	lr
 800c6dc:	200000d0 	.word	0x200000d0
 800c6e0:	20000b60 	.word	0x20000b60

0800c6e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800c6e4:	4a02      	ldr	r2, [pc, #8]	; (800c6f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0xc>)
 800c6e6:	4b03      	ldr	r3, [pc, #12]	; (800c6f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x10>)
 800c6e8:	6812      	ldr	r2, [r2, #0]
 800c6ea:	601a      	str	r2, [r3, #0]
 800c6ec:	4770      	bx	lr
 800c6ee:	bf00      	nop
 800c6f0:	20000b60 	.word	0x20000b60
 800c6f4:	200000d0 	.word	0x200000d0

0800c6f8 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder>:
 800c6f8:	4b04      	ldr	r3, [pc, #16]	; (800c70c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0x14>)
 800c6fa:	681a      	ldr	r2, [r3, #0]
 800c6fc:	b10a      	cbz	r2, 800c702 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0xa>
 800c6fe:	4803      	ldr	r0, [pc, #12]	; (800c70c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0x14>)
 800c700:	4770      	bx	lr
 800c702:	4a03      	ldr	r2, [pc, #12]	; (800c710 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0x18>)
 800c704:	4801      	ldr	r0, [pc, #4]	; (800c70c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0x14>)
 800c706:	6812      	ldr	r2, [r2, #0]
 800c708:	601a      	str	r2, [r3, #0]
 800c70a:	4770      	bx	lr
 800c70c:	200000f0 	.word	0x200000f0
 800c710:	20000b60 	.word	0x20000b60

0800c714 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder>:
 800c714:	4a02      	ldr	r2, [pc, #8]	; (800c720 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0xc>)
 800c716:	4b03      	ldr	r3, [pc, #12]	; (800c724 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0x10>)
 800c718:	6812      	ldr	r2, [r2, #0]
 800c71a:	601a      	str	r2, [r3, #0]
 800c71c:	4770      	bx	lr
 800c71e:	bf00      	nop
 800c720:	20000b60 	.word	0x20000b60
 800c724:	200000f0 	.word	0x200000f0

0800c728 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800c728:	4b04      	ldr	r3, [pc, #16]	; (800c73c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800c72a:	681a      	ldr	r2, [r3, #0]
 800c72c:	b10a      	cbz	r2, 800c732 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0xa>
 800c72e:	4803      	ldr	r0, [pc, #12]	; (800c73c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800c730:	4770      	bx	lr
 800c732:	4a03      	ldr	r2, [pc, #12]	; (800c740 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x18>)
 800c734:	4801      	ldr	r0, [pc, #4]	; (800c73c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800c736:	6812      	ldr	r2, [r2, #0]
 800c738:	601a      	str	r2, [r3, #0]
 800c73a:	4770      	bx	lr
 800c73c:	20000110 	.word	0x20000110
 800c740:	20000b60 	.word	0x20000b60

0800c744 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800c744:	4a02      	ldr	r2, [pc, #8]	; (800c750 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0xc>)
 800c746:	4b03      	ldr	r3, [pc, #12]	; (800c754 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x10>)
 800c748:	6812      	ldr	r2, [r2, #0]
 800c74a:	601a      	str	r2, [r3, #0]
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop
 800c750:	20000b60 	.word	0x20000b60
 800c754:	20000110 	.word	0x20000110

0800c758 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800c758:	4b04      	ldr	r3, [pc, #16]	; (800c76c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	b10a      	cbz	r2, 800c762 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0xa>
 800c75e:	4803      	ldr	r0, [pc, #12]	; (800c76c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800c760:	4770      	bx	lr
 800c762:	4a03      	ldr	r2, [pc, #12]	; (800c770 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x18>)
 800c764:	4801      	ldr	r0, [pc, #4]	; (800c76c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800c766:	6812      	ldr	r2, [r2, #0]
 800c768:	601a      	str	r2, [r3, #0]
 800c76a:	4770      	bx	lr
 800c76c:	20000130 	.word	0x20000130
 800c770:	20000b60 	.word	0x20000b60

0800c774 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800c774:	4b06      	ldr	r3, [pc, #24]	; (800c790 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x1c>)
 800c776:	4807      	ldr	r0, [pc, #28]	; (800c794 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x20>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4907      	ldr	r1, [pc, #28]	; (800c798 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x24>)
 800c77c:	4a07      	ldr	r2, [pc, #28]	; (800c79c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x28>)
 800c77e:	b410      	push	{r4}
 800c780:	4c07      	ldr	r4, [pc, #28]	; (800c7a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x2c>)
 800c782:	6003      	str	r3, [r0, #0]
 800c784:	6023      	str	r3, [r4, #0]
 800c786:	600b      	str	r3, [r1, #0]
 800c788:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c78c:	6013      	str	r3, [r2, #0]
 800c78e:	4770      	bx	lr
 800c790:	20000b60 	.word	0x20000b60
 800c794:	200001a4 	.word	0x200001a4
 800c798:	20000164 	.word	0x20000164
 800c79c:	20000130 	.word	0x20000130
 800c7a0:	2000018c 	.word	0x2000018c

0800c7a4 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__size_function__Control_Request__encoders>:
 800c7a4:	2006      	movs	r0, #6
 800c7a6:	4770      	bx	lr

0800c7a8 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__get_const_function__Control_Request__encoders>:
 800c7a8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800c7ac:	4770      	bx	lr
 800c7ae:	bf00      	nop

0800c7b0 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__fetch_function__Control_Request__encoders>:
 800c7b0:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800c7b4:	8013      	strh	r3, [r2, #0]
 800c7b6:	4770      	bx	lr

0800c7b8 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__assign_function__Control_Request__encoders>:
 800c7b8:	f9b2 3000 	ldrsh.w	r3, [r2]
 800c7bc:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop

0800c7c4 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__size_function__Control_Event__request>:
 800c7c4:	6840      	ldr	r0, [r0, #4]
 800c7c6:	4770      	bx	lr

0800c7c8 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_const_function__Control_Event__request>:
 800c7c8:	6800      	ldr	r0, [r0, #0]
 800c7ca:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800c7ce:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800c7d2:	4770      	bx	lr

0800c7d4 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__fetch_function__Control_Event__request>:
 800c7d4:	6800      	ldr	r0, [r0, #0]
 800c7d6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800c7da:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 800c7de:	f850 c011 	ldr.w	ip, [r0, r1, lsl #1]
 800c7e2:	6858      	ldr	r0, [r3, #4]
 800c7e4:	6899      	ldr	r1, [r3, #8]
 800c7e6:	f8c2 c000 	str.w	ip, [r2]
 800c7ea:	6050      	str	r0, [r2, #4]
 800c7ec:	6091      	str	r1, [r2, #8]
 800c7ee:	899b      	ldrh	r3, [r3, #12]
 800c7f0:	8193      	strh	r3, [r2, #12]
 800c7f2:	4770      	bx	lr

0800c7f4 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__assign_function__Control_Event__request>:
 800c7f4:	6800      	ldr	r0, [r0, #0]
 800c7f6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800c7fa:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800c7fe:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 800c802:	b510      	push	{r4, lr}
 800c804:	6814      	ldr	r4, [r2, #0]
 800c806:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800c80a:	f840 4011 	str.w	r4, [r0, r1, lsl #1]
 800c80e:	f8c3 e004 	str.w	lr, [r3, #4]
 800c812:	f8c3 c008 	str.w	ip, [r3, #8]
 800c816:	8992      	ldrh	r2, [r2, #12]
 800c818:	819a      	strh	r2, [r3, #12]
 800c81a:	bd10      	pop	{r4, pc}

0800c81c <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__size_function__Control_Event__response>:
 800c81c:	6840      	ldr	r0, [r0, #4]
 800c81e:	4770      	bx	lr

0800c820 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_const_function__Control_Event__response>:
 800c820:	6800      	ldr	r0, [r0, #0]
 800c822:	4408      	add	r0, r1
 800c824:	4770      	bx	lr
 800c826:	bf00      	nop

0800c828 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__fetch_function__Control_Event__response>:
 800c828:	6803      	ldr	r3, [r0, #0]
 800c82a:	5c5b      	ldrb	r3, [r3, r1]
 800c82c:	7013      	strb	r3, [r2, #0]
 800c82e:	4770      	bx	lr

0800c830 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__assign_function__Control_Event__response>:
 800c830:	6803      	ldr	r3, [r0, #0]
 800c832:	7812      	ldrb	r2, [r2, #0]
 800c834:	545a      	strb	r2, [r3, r1]
 800c836:	4770      	bx	lr

0800c838 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__Control_Request_init_function>:
 800c838:	f008 b9aa 	b.w	8014b90 <racs_services__srv__Control_Request__init>

0800c83c <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__Control_Request_fini_function>:
 800c83c:	f008 b9ac 	b.w	8014b98 <racs_services__srv__Control_Request__fini>

0800c840 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__Control_Response_init_function>:
 800c840:	f008 b9ec 	b.w	8014c1c <racs_services__srv__Control_Response__init>

0800c844 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__Control_Response_fini_function>:
 800c844:	f008 b9ee 	b.w	8014c24 <racs_services__srv__Control_Response__fini>

0800c848 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__Control_Event_init_function>:
 800c848:	f008 ba24 	b.w	8014c94 <racs_services__srv__Control_Event__init>

0800c84c <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__Control_Event_fini_function>:
 800c84c:	f008 ba44 	b.w	8014cd8 <racs_services__srv__Control_Event__fini>

0800c850 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__resize_function__Control_Event__request>:
 800c850:	b510      	push	{r4, lr}
 800c852:	4604      	mov	r4, r0
 800c854:	b082      	sub	sp, #8
 800c856:	9101      	str	r1, [sp, #4]
 800c858:	f008 f9cc 	bl	8014bf4 <racs_services__srv__Control_Request__Sequence__fini>
 800c85c:	9901      	ldr	r1, [sp, #4]
 800c85e:	4620      	mov	r0, r4
 800c860:	b002      	add	sp, #8
 800c862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c866:	f008 b9ab 	b.w	8014bc0 <racs_services__srv__Control_Request__Sequence__init>
 800c86a:	bf00      	nop

0800c86c <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__resize_function__Control_Event__response>:
 800c86c:	b510      	push	{r4, lr}
 800c86e:	4604      	mov	r4, r0
 800c870:	b082      	sub	sp, #8
 800c872:	9101      	str	r1, [sp, #4]
 800c874:	f008 f9fa 	bl	8014c6c <racs_services__srv__Control_Response__Sequence__fini>
 800c878:	9901      	ldr	r1, [sp, #4]
 800c87a:	4620      	mov	r0, r4
 800c87c:	b002      	add	sp, #8
 800c87e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c882:	f008 b9d9 	b.w	8014c38 <racs_services__srv__Control_Response__Sequence__init>
 800c886:	bf00      	nop

0800c888 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_function__Control_Event__response>:
 800c888:	6800      	ldr	r0, [r0, #0]
 800c88a:	4408      	add	r0, r1
 800c88c:	4770      	bx	lr
 800c88e:	bf00      	nop

0800c890 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__get_function__Control_Request__encoders>:
 800c890:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800c894:	4770      	bx	lr
 800c896:	bf00      	nop

0800c898 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_function__Control_Event__request>:
 800c898:	6800      	ldr	r0, [r0, #0]
 800c89a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800c89e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800c8a2:	4770      	bx	lr

0800c8a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800c8a4:	4b04      	ldr	r3, [pc, #16]	; (800c8b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800c8a6:	681a      	ldr	r2, [r3, #0]
 800c8a8:	b10a      	cbz	r2, 800c8ae <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0xa>
 800c8aa:	4803      	ldr	r0, [pc, #12]	; (800c8b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800c8ac:	4770      	bx	lr
 800c8ae:	4a03      	ldr	r2, [pc, #12]	; (800c8bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x18>)
 800c8b0:	4801      	ldr	r0, [pc, #4]	; (800c8b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800c8b2:	6812      	ldr	r2, [r2, #0]
 800c8b4:	601a      	str	r2, [r3, #0]
 800c8b6:	4770      	bx	lr
 800c8b8:	2000033c 	.word	0x2000033c
 800c8bc:	20000b64 	.word	0x20000b64

0800c8c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response>:
 800c8c0:	4b04      	ldr	r3, [pc, #16]	; (800c8d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	b10a      	cbz	r2, 800c8ca <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0xa>
 800c8c6:	4803      	ldr	r0, [pc, #12]	; (800c8d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800c8c8:	4770      	bx	lr
 800c8ca:	4a03      	ldr	r2, [pc, #12]	; (800c8d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x18>)
 800c8cc:	4801      	ldr	r0, [pc, #4]	; (800c8d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800c8ce:	6812      	ldr	r2, [r2, #0]
 800c8d0:	601a      	str	r2, [r3, #0]
 800c8d2:	4770      	bx	lr
 800c8d4:	20000390 	.word	0x20000390
 800c8d8:	20000b64 	.word	0x20000b64

0800c8dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event>:
 800c8dc:	b508      	push	{r3, lr}
 800c8de:	f002 ff6b 	bl	800f7b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c8e2:	4913      	ldr	r1, [pc, #76]	; (800c930 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x54>)
 800c8e4:	4b13      	ldr	r3, [pc, #76]	; (800c934 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x58>)
 800c8e6:	680a      	ldr	r2, [r1, #0]
 800c8e8:	60d8      	str	r0, [r3, #12]
 800c8ea:	b152      	cbz	r2, 800c902 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x26>
 800c8ec:	4a12      	ldr	r2, [pc, #72]	; (800c938 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x5c>)
 800c8ee:	6499      	str	r1, [r3, #72]	; 0x48
 800c8f0:	6811      	ldr	r1, [r2, #0]
 800c8f2:	b171      	cbz	r1, 800c912 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x36>
 800c8f4:	4911      	ldr	r1, [pc, #68]	; (800c93c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800c8f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c8fa:	680b      	ldr	r3, [r1, #0]
 800c8fc:	b193      	cbz	r3, 800c924 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x48>
 800c8fe:	480f      	ldr	r0, [pc, #60]	; (800c93c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800c900:	bd08      	pop	{r3, pc}
 800c902:	4a0f      	ldr	r2, [pc, #60]	; (800c940 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800c904:	6499      	str	r1, [r3, #72]	; 0x48
 800c906:	6812      	ldr	r2, [r2, #0]
 800c908:	600a      	str	r2, [r1, #0]
 800c90a:	4a0b      	ldr	r2, [pc, #44]	; (800c938 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x5c>)
 800c90c:	6811      	ldr	r1, [r2, #0]
 800c90e:	2900      	cmp	r1, #0
 800c910:	d1f0      	bne.n	800c8f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x18>
 800c912:	490b      	ldr	r1, [pc, #44]	; (800c940 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800c914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c918:	6809      	ldr	r1, [r1, #0]
 800c91a:	6011      	str	r1, [r2, #0]
 800c91c:	4907      	ldr	r1, [pc, #28]	; (800c93c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800c91e:	680b      	ldr	r3, [r1, #0]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d1ec      	bne.n	800c8fe <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x22>
 800c924:	4b06      	ldr	r3, [pc, #24]	; (800c940 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800c926:	4805      	ldr	r0, [pc, #20]	; (800c93c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	600b      	str	r3, [r1, #0]
 800c92c:	bd08      	pop	{r3, pc}
 800c92e:	bf00      	nop
 800c930:	2000033c 	.word	0x2000033c
 800c934:	200001bc 	.word	0x200001bc
 800c938:	20000390 	.word	0x20000390
 800c93c:	20000270 	.word	0x20000270
 800c940:	20000b64 	.word	0x20000b64

0800c944 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control>:
 800c944:	4b25      	ldr	r3, [pc, #148]	; (800c9dc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800c946:	681a      	ldr	r2, [r3, #0]
 800c948:	b510      	push	{r4, lr}
 800c94a:	b142      	cbz	r2, 800c95e <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x1a>
 800c94c:	685c      	ldr	r4, [r3, #4]
 800c94e:	68a3      	ldr	r3, [r4, #8]
 800c950:	b163      	cbz	r3, 800c96c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x28>
 800c952:	68e3      	ldr	r3, [r4, #12]
 800c954:	b193      	cbz	r3, 800c97c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x38>
 800c956:	6923      	ldr	r3, [r4, #16]
 800c958:	b1c3      	cbz	r3, 800c98c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x48>
 800c95a:	4820      	ldr	r0, [pc, #128]	; (800c9dc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800c95c:	bd10      	pop	{r4, pc}
 800c95e:	4a20      	ldr	r2, [pc, #128]	; (800c9e0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800c960:	685c      	ldr	r4, [r3, #4]
 800c962:	6812      	ldr	r2, [r2, #0]
 800c964:	601a      	str	r2, [r3, #0]
 800c966:	68a3      	ldr	r3, [r4, #8]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d1f2      	bne.n	800c952 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xe>
 800c96c:	4a1d      	ldr	r2, [pc, #116]	; (800c9e4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa0>)
 800c96e:	6813      	ldr	r3, [r2, #0]
 800c970:	b303      	cbz	r3, 800c9b4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x70>
 800c972:	6853      	ldr	r3, [r2, #4]
 800c974:	60a3      	str	r3, [r4, #8]
 800c976:	68e3      	ldr	r3, [r4, #12]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d1ec      	bne.n	800c956 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x12>
 800c97c:	4b1a      	ldr	r3, [pc, #104]	; (800c9e8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa4>)
 800c97e:	681a      	ldr	r2, [r3, #0]
 800c980:	b1e2      	cbz	r2, 800c9bc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x78>
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	60e3      	str	r3, [r4, #12]
 800c986:	6923      	ldr	r3, [r4, #16]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d1e6      	bne.n	800c95a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x16>
 800c98c:	f002 ff14 	bl	800f7b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c990:	4a14      	ldr	r2, [pc, #80]	; (800c9e4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa0>)
 800c992:	4916      	ldr	r1, [pc, #88]	; (800c9ec <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa8>)
 800c994:	6813      	ldr	r3, [r2, #0]
 800c996:	60c8      	str	r0, [r1, #12]
 800c998:	b1e3      	cbz	r3, 800c9d4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x90>
 800c99a:	4b13      	ldr	r3, [pc, #76]	; (800c9e8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa4>)
 800c99c:	648a      	str	r2, [r1, #72]	; 0x48
 800c99e:	681a      	ldr	r2, [r3, #0]
 800c9a0:	b1a2      	cbz	r2, 800c9cc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x88>
 800c9a2:	4a13      	ldr	r2, [pc, #76]	; (800c9f0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xac>)
 800c9a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800c9a8:	6813      	ldr	r3, [r2, #0]
 800c9aa:	b15b      	cbz	r3, 800c9c4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x80>
 800c9ac:	6853      	ldr	r3, [r2, #4]
 800c9ae:	480b      	ldr	r0, [pc, #44]	; (800c9dc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800c9b0:	6123      	str	r3, [r4, #16]
 800c9b2:	bd10      	pop	{r4, pc}
 800c9b4:	4b0a      	ldr	r3, [pc, #40]	; (800c9e0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	6013      	str	r3, [r2, #0]
 800c9ba:	e7da      	b.n	800c972 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x2e>
 800c9bc:	4a08      	ldr	r2, [pc, #32]	; (800c9e0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800c9be:	6812      	ldr	r2, [r2, #0]
 800c9c0:	601a      	str	r2, [r3, #0]
 800c9c2:	e7de      	b.n	800c982 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x3e>
 800c9c4:	4b06      	ldr	r3, [pc, #24]	; (800c9e0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	6013      	str	r3, [r2, #0]
 800c9ca:	e7ef      	b.n	800c9ac <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x68>
 800c9cc:	4a04      	ldr	r2, [pc, #16]	; (800c9e0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800c9ce:	6812      	ldr	r2, [r2, #0]
 800c9d0:	601a      	str	r2, [r3, #0]
 800c9d2:	e7e6      	b.n	800c9a2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x5e>
 800c9d4:	4b02      	ldr	r3, [pc, #8]	; (800c9e0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	6013      	str	r3, [r2, #0]
 800c9da:	e7de      	b.n	800c99a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x56>
 800c9dc:	200003bc 	.word	0x200003bc
 800c9e0:	20000b64 	.word	0x20000b64
 800c9e4:	2000033c 	.word	0x2000033c
 800c9e8:	20000390 	.word	0x20000390
 800c9ec:	200001bc 	.word	0x200001bc
 800c9f0:	20000270 	.word	0x20000270

0800c9f4 <racs_services__msg__Debug__rosidl_typesupport_introspection_c__size_function__Debug__data>:
 800c9f4:	2006      	movs	r0, #6
 800c9f6:	4770      	bx	lr

0800c9f8 <racs_services__msg__Debug__rosidl_typesupport_introspection_c__get_const_function__Debug__data>:
 800c9f8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800c9fc:	4770      	bx	lr
 800c9fe:	bf00      	nop

0800ca00 <racs_services__msg__Debug__rosidl_typesupport_introspection_c__fetch_function__Debug__data>:
 800ca00:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ca04:	680b      	ldr	r3, [r1, #0]
 800ca06:	6013      	str	r3, [r2, #0]
 800ca08:	4770      	bx	lr
 800ca0a:	bf00      	nop

0800ca0c <racs_services__msg__Debug__rosidl_typesupport_introspection_c__assign_function__Debug__data>:
 800ca0c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ca10:	6813      	ldr	r3, [r2, #0]
 800ca12:	600b      	str	r3, [r1, #0]
 800ca14:	4770      	bx	lr
 800ca16:	bf00      	nop

0800ca18 <racs_services__msg__Debug__rosidl_typesupport_introspection_c__Debug_init_function>:
 800ca18:	f008 ba1e 	b.w	8014e58 <racs_services__msg__Debug__init>

0800ca1c <racs_services__msg__Debug__rosidl_typesupport_introspection_c__Debug_fini_function>:
 800ca1c:	f008 ba20 	b.w	8014e60 <racs_services__msg__Debug__fini>

0800ca20 <racs_services__msg__Debug__rosidl_typesupport_introspection_c__get_function__Debug__data>:
 800ca20:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800ca24:	4770      	bx	lr
 800ca26:	bf00      	nop

0800ca28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Debug>:
 800ca28:	4b04      	ldr	r3, [pc, #16]	; (800ca3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Debug+0x14>)
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	b10a      	cbz	r2, 800ca32 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Debug+0xa>
 800ca2e:	4803      	ldr	r0, [pc, #12]	; (800ca3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Debug+0x14>)
 800ca30:	4770      	bx	lr
 800ca32:	4a03      	ldr	r2, [pc, #12]	; (800ca40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Debug+0x18>)
 800ca34:	4801      	ldr	r0, [pc, #4]	; (800ca3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Debug+0x14>)
 800ca36:	6812      	ldr	r2, [r2, #0]
 800ca38:	601a      	str	r2, [r3, #0]
 800ca3a:	4770      	bx	lr
 800ca3c:	20000424 	.word	0x20000424
 800ca40:	20000b64 	.word	0x20000b64

0800ca44 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__size_function__DirectAccess__pwms>:
 800ca44:	2006      	movs	r0, #6
 800ca46:	4770      	bx	lr

0800ca48 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__get_const_function__DirectAccess__pwms>:
 800ca48:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop

0800ca50 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__fetch_function__DirectAccess__pwms>:
 800ca50:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800ca54:	8013      	strh	r3, [r2, #0]
 800ca56:	4770      	bx	lr

0800ca58 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__assign_function__DirectAccess__pwms>:
 800ca58:	f9b2 3000 	ldrsh.w	r3, [r2]
 800ca5c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800ca60:	4770      	bx	lr
 800ca62:	bf00      	nop

0800ca64 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__DirectAccess_init_function>:
 800ca64:	f008 ba2a 	b.w	8014ebc <racs_services__msg__DirectAccess__init>

0800ca68 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__DirectAccess_fini_function>:
 800ca68:	f008 ba2c 	b.w	8014ec4 <racs_services__msg__DirectAccess__fini>

0800ca6c <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__get_function__DirectAccess__pwms>:
 800ca6c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800ca70:	4770      	bx	lr
 800ca72:	bf00      	nop

0800ca74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800ca74:	4b04      	ldr	r3, [pc, #16]	; (800ca88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800ca76:	681a      	ldr	r2, [r3, #0]
 800ca78:	b10a      	cbz	r2, 800ca7e <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0xa>
 800ca7a:	4803      	ldr	r0, [pc, #12]	; (800ca88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800ca7c:	4770      	bx	lr
 800ca7e:	4a03      	ldr	r2, [pc, #12]	; (800ca8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x18>)
 800ca80:	4801      	ldr	r0, [pc, #4]	; (800ca88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800ca82:	6812      	ldr	r2, [r2, #0]
 800ca84:	601a      	str	r2, [r3, #0]
 800ca86:	4770      	bx	lr
 800ca88:	200004b4 	.word	0x200004b4
 800ca8c:	20000b64 	.word	0x20000b64

0800ca90 <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__size_function__Encoder__encoders>:
 800ca90:	2005      	movs	r0, #5
 800ca92:	4770      	bx	lr

0800ca94 <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__get_const_function__Encoder__encoders>:
 800ca94:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800ca98:	4770      	bx	lr
 800ca9a:	bf00      	nop

0800ca9c <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__fetch_function__Encoder__encoders>:
 800ca9c:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800caa0:	8013      	strh	r3, [r2, #0]
 800caa2:	4770      	bx	lr

0800caa4 <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__assign_function__Encoder__encoders>:
 800caa4:	f9b2 3000 	ldrsh.w	r3, [r2]
 800caa8:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800caac:	4770      	bx	lr
 800caae:	bf00      	nop

0800cab0 <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__Encoder_init_function>:
 800cab0:	f008 ba36 	b.w	8014f20 <racs_services__msg__Encoder__init>

0800cab4 <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__Encoder_fini_function>:
 800cab4:	f008 ba38 	b.w	8014f28 <racs_services__msg__Encoder__fini>

0800cab8 <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__get_function__Encoder__encoders>:
 800cab8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800cabc:	4770      	bx	lr
 800cabe:	bf00      	nop

0800cac0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Encoder>:
 800cac0:	4b04      	ldr	r3, [pc, #16]	; (800cad4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Encoder+0x14>)
 800cac2:	681a      	ldr	r2, [r3, #0]
 800cac4:	b10a      	cbz	r2, 800caca <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Encoder+0xa>
 800cac6:	4803      	ldr	r0, [pc, #12]	; (800cad4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Encoder+0x14>)
 800cac8:	4770      	bx	lr
 800caca:	4a03      	ldr	r2, [pc, #12]	; (800cad8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Encoder+0x18>)
 800cacc:	4801      	ldr	r0, [pc, #4]	; (800cad4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Encoder+0x14>)
 800cace:	6812      	ldr	r2, [r2, #0]
 800cad0:	601a      	str	r2, [r3, #0]
 800cad2:	4770      	bx	lr
 800cad4:	20000508 	.word	0x20000508
 800cad8:	20000b64 	.word	0x20000b64

0800cadc <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__size_function__Feedback__encoders>:
 800cadc:	2006      	movs	r0, #6
 800cade:	4770      	bx	lr

0800cae0 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__get_const_function__Feedback__encoders>:
 800cae0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800cae4:	4770      	bx	lr
 800cae6:	bf00      	nop

0800cae8 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__fetch_function__Feedback__encoders>:
 800cae8:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800caec:	8013      	strh	r3, [r2, #0]
 800caee:	4770      	bx	lr

0800caf0 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__assign_function__Feedback__encoders>:
 800caf0:	f9b2 3000 	ldrsh.w	r3, [r2]
 800caf4:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800caf8:	4770      	bx	lr
 800cafa:	bf00      	nop

0800cafc <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__Feedback_init_function>:
 800cafc:	f008 ba42 	b.w	8014f84 <racs_services__msg__Feedback__init>

0800cb00 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__Feedback_fini_function>:
 800cb00:	f008 ba44 	b.w	8014f8c <racs_services__msg__Feedback__fini>

0800cb04 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__get_function__Feedback__encoders>:
 800cb04:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800cb08:	4770      	bx	lr
 800cb0a:	bf00      	nop

0800cb0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800cb0c:	4b04      	ldr	r3, [pc, #16]	; (800cb20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800cb0e:	681a      	ldr	r2, [r3, #0]
 800cb10:	b10a      	cbz	r2, 800cb16 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0xa>
 800cb12:	4803      	ldr	r0, [pc, #12]	; (800cb20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800cb14:	4770      	bx	lr
 800cb16:	4a03      	ldr	r2, [pc, #12]	; (800cb24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x18>)
 800cb18:	4801      	ldr	r0, [pc, #4]	; (800cb20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800cb1a:	6812      	ldr	r2, [r2, #0]
 800cb1c:	601a      	str	r2, [r3, #0]
 800cb1e:	4770      	bx	lr
 800cb20:	20000598 	.word	0x20000598
 800cb24:	20000b64 	.word	0x20000b64

0800cb28 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__size_function__Setup_Event__request>:
 800cb28:	6840      	ldr	r0, [r0, #4]
 800cb2a:	4770      	bx	lr

0800cb2c <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_const_function__Setup_Event__request>:
 800cb2c:	6800      	ldr	r0, [r0, #0]
 800cb2e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800cb32:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800cb36:	4770      	bx	lr

0800cb38 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__fetch_function__Setup_Event__request>:
 800cb38:	6803      	ldr	r3, [r0, #0]
 800cb3a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800cb3e:	4694      	mov	ip, r2
 800cb40:	b500      	push	{lr}
 800cb42:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800cb46:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cb4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cb4e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800cb52:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800cb56:	f85d fb04 	ldr.w	pc, [sp], #4
 800cb5a:	bf00      	nop

0800cb5c <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__assign_function__Setup_Event__request>:
 800cb5c:	6803      	ldr	r3, [r0, #0]
 800cb5e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800cb62:	b500      	push	{lr}
 800cb64:	4696      	mov	lr, r2
 800cb66:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800cb6a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cb6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cb72:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800cb76:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800cb7a:	f85d fb04 	ldr.w	pc, [sp], #4
 800cb7e:	bf00      	nop

0800cb80 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__size_function__Setup_Event__response>:
 800cb80:	6840      	ldr	r0, [r0, #4]
 800cb82:	4770      	bx	lr

0800cb84 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_const_function__Setup_Event__response>:
 800cb84:	6800      	ldr	r0, [r0, #0]
 800cb86:	4408      	add	r0, r1
 800cb88:	4770      	bx	lr
 800cb8a:	bf00      	nop

0800cb8c <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__fetch_function__Setup_Event__response>:
 800cb8c:	6803      	ldr	r3, [r0, #0]
 800cb8e:	5c5b      	ldrb	r3, [r3, r1]
 800cb90:	7013      	strb	r3, [r2, #0]
 800cb92:	4770      	bx	lr

0800cb94 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__assign_function__Setup_Event__response>:
 800cb94:	6803      	ldr	r3, [r0, #0]
 800cb96:	7812      	ldrb	r2, [r2, #0]
 800cb98:	545a      	strb	r2, [r3, r1]
 800cb9a:	4770      	bx	lr

0800cb9c <racs_services__srv__Setup_Request__rosidl_typesupport_introspection_c__Setup_Request_init_function>:
 800cb9c:	f008 bbda 	b.w	8015354 <racs_services__srv__Setup_Request__init>

0800cba0 <racs_services__srv__Setup_Request__rosidl_typesupport_introspection_c__Setup_Request_fini_function>:
 800cba0:	f008 bbdc 	b.w	801535c <racs_services__srv__Setup_Request__fini>

0800cba4 <racs_services__srv__Setup_Response__rosidl_typesupport_introspection_c__Setup_Response_init_function>:
 800cba4:	f008 bc24 	b.w	80153f0 <racs_services__srv__Setup_Response__init>

0800cba8 <racs_services__srv__Setup_Response__rosidl_typesupport_introspection_c__Setup_Response_fini_function>:
 800cba8:	f008 bc26 	b.w	80153f8 <racs_services__srv__Setup_Response__fini>

0800cbac <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__Setup_Event_init_function>:
 800cbac:	f008 bc5c 	b.w	8015468 <racs_services__srv__Setup_Event__init>

0800cbb0 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__Setup_Event_fini_function>:
 800cbb0:	f008 bc7c 	b.w	80154ac <racs_services__srv__Setup_Event__fini>

0800cbb4 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__resize_function__Setup_Event__request>:
 800cbb4:	b510      	push	{r4, lr}
 800cbb6:	4604      	mov	r4, r0
 800cbb8:	b082      	sub	sp, #8
 800cbba:	9101      	str	r1, [sp, #4]
 800cbbc:	f008 fc04 	bl	80153c8 <racs_services__srv__Setup_Request__Sequence__fini>
 800cbc0:	9901      	ldr	r1, [sp, #4]
 800cbc2:	4620      	mov	r0, r4
 800cbc4:	b002      	add	sp, #8
 800cbc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbca:	f008 bbe3 	b.w	8015394 <racs_services__srv__Setup_Request__Sequence__init>
 800cbce:	bf00      	nop

0800cbd0 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__resize_function__Setup_Event__response>:
 800cbd0:	b510      	push	{r4, lr}
 800cbd2:	4604      	mov	r4, r0
 800cbd4:	b082      	sub	sp, #8
 800cbd6:	9101      	str	r1, [sp, #4]
 800cbd8:	f008 fc32 	bl	8015440 <racs_services__srv__Setup_Response__Sequence__fini>
 800cbdc:	9901      	ldr	r1, [sp, #4]
 800cbde:	4620      	mov	r0, r4
 800cbe0:	b002      	add	sp, #8
 800cbe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbe6:	f008 bc11 	b.w	801540c <racs_services__srv__Setup_Response__Sequence__init>
 800cbea:	bf00      	nop

0800cbec <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_function__Setup_Event__response>:
 800cbec:	6800      	ldr	r0, [r0, #0]
 800cbee:	4408      	add	r0, r1
 800cbf0:	4770      	bx	lr
 800cbf2:	bf00      	nop

0800cbf4 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_function__Setup_Event__request>:
 800cbf4:	6800      	ldr	r0, [r0, #0]
 800cbf6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800cbfa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800cbfe:	4770      	bx	lr

0800cc00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800cc00:	4b04      	ldr	r3, [pc, #16]	; (800cc14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800cc02:	681a      	ldr	r2, [r3, #0]
 800cc04:	b10a      	cbz	r2, 800cc0a <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0xa>
 800cc06:	4803      	ldr	r0, [pc, #12]	; (800cc14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800cc08:	4770      	bx	lr
 800cc0a:	4a03      	ldr	r2, [pc, #12]	; (800cc18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x18>)
 800cc0c:	4801      	ldr	r0, [pc, #4]	; (800cc14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800cc0e:	6812      	ldr	r2, [r2, #0]
 800cc10:	601a      	str	r2, [r3, #0]
 800cc12:	4770      	bx	lr
 800cc14:	20000820 	.word	0x20000820
 800cc18:	20000b64 	.word	0x20000b64

0800cc1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response>:
 800cc1c:	4b04      	ldr	r3, [pc, #16]	; (800cc30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800cc1e:	681a      	ldr	r2, [r3, #0]
 800cc20:	b10a      	cbz	r2, 800cc26 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0xa>
 800cc22:	4803      	ldr	r0, [pc, #12]	; (800cc30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800cc24:	4770      	bx	lr
 800cc26:	4a03      	ldr	r2, [pc, #12]	; (800cc34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x18>)
 800cc28:	4801      	ldr	r0, [pc, #4]	; (800cc30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800cc2a:	6812      	ldr	r2, [r2, #0]
 800cc2c:	601a      	str	r2, [r3, #0]
 800cc2e:	4770      	bx	lr
 800cc30:	20000874 	.word	0x20000874
 800cc34:	20000b64 	.word	0x20000b64

0800cc38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event>:
 800cc38:	b508      	push	{r3, lr}
 800cc3a:	f002 fdbd 	bl	800f7b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800cc3e:	4913      	ldr	r1, [pc, #76]	; (800cc8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x54>)
 800cc40:	4b13      	ldr	r3, [pc, #76]	; (800cc90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x58>)
 800cc42:	680a      	ldr	r2, [r1, #0]
 800cc44:	60d8      	str	r0, [r3, #12]
 800cc46:	b152      	cbz	r2, 800cc5e <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x26>
 800cc48:	4a12      	ldr	r2, [pc, #72]	; (800cc94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x5c>)
 800cc4a:	6499      	str	r1, [r3, #72]	; 0x48
 800cc4c:	6811      	ldr	r1, [r2, #0]
 800cc4e:	b171      	cbz	r1, 800cc6e <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x36>
 800cc50:	4911      	ldr	r1, [pc, #68]	; (800cc98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800cc52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800cc56:	680b      	ldr	r3, [r1, #0]
 800cc58:	b193      	cbz	r3, 800cc80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x48>
 800cc5a:	480f      	ldr	r0, [pc, #60]	; (800cc98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800cc5c:	bd08      	pop	{r3, pc}
 800cc5e:	4a0f      	ldr	r2, [pc, #60]	; (800cc9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800cc60:	6499      	str	r1, [r3, #72]	; 0x48
 800cc62:	6812      	ldr	r2, [r2, #0]
 800cc64:	600a      	str	r2, [r1, #0]
 800cc66:	4a0b      	ldr	r2, [pc, #44]	; (800cc94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x5c>)
 800cc68:	6811      	ldr	r1, [r2, #0]
 800cc6a:	2900      	cmp	r1, #0
 800cc6c:	d1f0      	bne.n	800cc50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x18>
 800cc6e:	490b      	ldr	r1, [pc, #44]	; (800cc9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800cc70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800cc74:	6809      	ldr	r1, [r1, #0]
 800cc76:	6011      	str	r1, [r2, #0]
 800cc78:	4907      	ldr	r1, [pc, #28]	; (800cc98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800cc7a:	680b      	ldr	r3, [r1, #0]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d1ec      	bne.n	800cc5a <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x22>
 800cc80:	4b06      	ldr	r3, [pc, #24]	; (800cc9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800cc82:	4805      	ldr	r0, [pc, #20]	; (800cc98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	600b      	str	r3, [r1, #0]
 800cc88:	bd08      	pop	{r3, pc}
 800cc8a:	bf00      	nop
 800cc8c:	20000820 	.word	0x20000820
 800cc90:	200005b0 	.word	0x200005b0
 800cc94:	20000874 	.word	0x20000874
 800cc98:	20000664 	.word	0x20000664
 800cc9c:	20000b64 	.word	0x20000b64

0800cca0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800cca0:	4b25      	ldr	r3, [pc, #148]	; (800cd38 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800cca2:	681a      	ldr	r2, [r3, #0]
 800cca4:	b510      	push	{r4, lr}
 800cca6:	b142      	cbz	r2, 800ccba <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x1a>
 800cca8:	685c      	ldr	r4, [r3, #4]
 800ccaa:	68a3      	ldr	r3, [r4, #8]
 800ccac:	b163      	cbz	r3, 800ccc8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x28>
 800ccae:	68e3      	ldr	r3, [r4, #12]
 800ccb0:	b193      	cbz	r3, 800ccd8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x38>
 800ccb2:	6923      	ldr	r3, [r4, #16]
 800ccb4:	b1c3      	cbz	r3, 800cce8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x48>
 800ccb6:	4820      	ldr	r0, [pc, #128]	; (800cd38 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800ccb8:	bd10      	pop	{r4, pc}
 800ccba:	4a20      	ldr	r2, [pc, #128]	; (800cd3c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800ccbc:	685c      	ldr	r4, [r3, #4]
 800ccbe:	6812      	ldr	r2, [r2, #0]
 800ccc0:	601a      	str	r2, [r3, #0]
 800ccc2:	68a3      	ldr	r3, [r4, #8]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d1f2      	bne.n	800ccae <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xe>
 800ccc8:	4a1d      	ldr	r2, [pc, #116]	; (800cd40 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa0>)
 800ccca:	6813      	ldr	r3, [r2, #0]
 800cccc:	b303      	cbz	r3, 800cd10 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x70>
 800ccce:	6853      	ldr	r3, [r2, #4]
 800ccd0:	60a3      	str	r3, [r4, #8]
 800ccd2:	68e3      	ldr	r3, [r4, #12]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d1ec      	bne.n	800ccb2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x12>
 800ccd8:	4b1a      	ldr	r3, [pc, #104]	; (800cd44 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa4>)
 800ccda:	681a      	ldr	r2, [r3, #0]
 800ccdc:	b1e2      	cbz	r2, 800cd18 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x78>
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	60e3      	str	r3, [r4, #12]
 800cce2:	6923      	ldr	r3, [r4, #16]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d1e6      	bne.n	800ccb6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x16>
 800cce8:	f002 fd66 	bl	800f7b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800ccec:	4a14      	ldr	r2, [pc, #80]	; (800cd40 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa0>)
 800ccee:	4916      	ldr	r1, [pc, #88]	; (800cd48 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa8>)
 800ccf0:	6813      	ldr	r3, [r2, #0]
 800ccf2:	60c8      	str	r0, [r1, #12]
 800ccf4:	b1e3      	cbz	r3, 800cd30 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x90>
 800ccf6:	4b13      	ldr	r3, [pc, #76]	; (800cd44 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa4>)
 800ccf8:	648a      	str	r2, [r1, #72]	; 0x48
 800ccfa:	681a      	ldr	r2, [r3, #0]
 800ccfc:	b1a2      	cbz	r2, 800cd28 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x88>
 800ccfe:	4a13      	ldr	r2, [pc, #76]	; (800cd4c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xac>)
 800cd00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800cd04:	6813      	ldr	r3, [r2, #0]
 800cd06:	b15b      	cbz	r3, 800cd20 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x80>
 800cd08:	6853      	ldr	r3, [r2, #4]
 800cd0a:	480b      	ldr	r0, [pc, #44]	; (800cd38 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800cd0c:	6123      	str	r3, [r4, #16]
 800cd0e:	bd10      	pop	{r4, pc}
 800cd10:	4b0a      	ldr	r3, [pc, #40]	; (800cd3c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	6013      	str	r3, [r2, #0]
 800cd16:	e7da      	b.n	800ccce <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x2e>
 800cd18:	4a08      	ldr	r2, [pc, #32]	; (800cd3c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800cd1a:	6812      	ldr	r2, [r2, #0]
 800cd1c:	601a      	str	r2, [r3, #0]
 800cd1e:	e7de      	b.n	800ccde <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x3e>
 800cd20:	4b06      	ldr	r3, [pc, #24]	; (800cd3c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	6013      	str	r3, [r2, #0]
 800cd26:	e7ef      	b.n	800cd08 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x68>
 800cd28:	4a04      	ldr	r2, [pc, #16]	; (800cd3c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800cd2a:	6812      	ldr	r2, [r2, #0]
 800cd2c:	601a      	str	r2, [r3, #0]
 800cd2e:	e7e6      	b.n	800ccfe <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x5e>
 800cd30:	4b02      	ldr	r3, [pc, #8]	; (800cd3c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	6013      	str	r3, [r2, #0]
 800cd36:	e7de      	b.n	800ccf6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x56>
 800cd38:	200008a0 	.word	0x200008a0
 800cd3c:	20000b64 	.word	0x20000b64
 800cd40:	20000820 	.word	0x20000820
 800cd44:	20000874 	.word	0x20000874
 800cd48:	200005b0 	.word	0x200005b0
 800cd4c:	20000664 	.word	0x20000664

0800cd50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800cd50:	4800      	ldr	r0, [pc, #0]	; (800cd54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x4>)
 800cd52:	4770      	bx	lr
 800cd54:	20000920 	.word	0x20000920

0800cd58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Response>:
 800cd58:	4800      	ldr	r0, [pc, #0]	; (800cd5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x4>)
 800cd5a:	4770      	bx	lr
 800cd5c:	20000938 	.word	0x20000938

0800cd60 <_Control_Response__max_serialized_size>:
 800cd60:	2101      	movs	r1, #1
 800cd62:	2000      	movs	r0, #0
 800cd64:	b508      	push	{r3, lr}
 800cd66:	f004 fdc1 	bl	80118ec <ucdr_alignment>
 800cd6a:	3001      	adds	r0, #1
 800cd6c:	bd08      	pop	{r3, pc}
 800cd6e:	bf00      	nop

0800cd70 <_Control_Response__cdr_deserialize>:
 800cd70:	b109      	cbz	r1, 800cd76 <_Control_Response__cdr_deserialize+0x6>
 800cd72:	f003 b93d 	b.w	800fff0 <ucdr_deserialize_uint8_t>
 800cd76:	4608      	mov	r0, r1
 800cd78:	4770      	bx	lr
 800cd7a:	bf00      	nop

0800cd7c <_Control_Event__max_serialized_size>:
 800cd7c:	b500      	push	{lr}
 800cd7e:	b083      	sub	sp, #12
 800cd80:	2301      	movs	r3, #1
 800cd82:	2100      	movs	r1, #0
 800cd84:	f10d 0007 	add.w	r0, sp, #7
 800cd88:	f88d 3007 	strb.w	r3, [sp, #7]
 800cd8c:	f002 fdc4 	bl	800f918 <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800cd90:	b003      	add	sp, #12
 800cd92:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd96:	bf00      	nop

0800cd98 <get_serialized_size_racs_services__srv__Control_Request>:
 800cd98:	b1b0      	cbz	r0, 800cdc8 <get_serialized_size_racs_services__srv__Control_Request+0x30>
 800cd9a:	b538      	push	{r3, r4, r5, lr}
 800cd9c:	460d      	mov	r5, r1
 800cd9e:	2101      	movs	r1, #1
 800cda0:	4628      	mov	r0, r5
 800cda2:	f004 fda3 	bl	80118ec <ucdr_alignment>
 800cda6:	1c6b      	adds	r3, r5, #1
 800cda8:	2101      	movs	r1, #1
 800cdaa:	f1c5 050c 	rsb	r5, r5, #12
 800cdae:	181c      	adds	r4, r3, r0
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	f004 fd9b 	bl	80118ec <ucdr_alignment>
 800cdb6:	3001      	adds	r0, #1
 800cdb8:	2102      	movs	r1, #2
 800cdba:	4404      	add	r4, r0
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	f004 fd95 	bl	80118ec <ucdr_alignment>
 800cdc2:	4428      	add	r0, r5
 800cdc4:	4420      	add	r0, r4
 800cdc6:	bd38      	pop	{r3, r4, r5, pc}
 800cdc8:	4770      	bx	lr
 800cdca:	bf00      	nop

0800cdcc <get_serialized_size_racs_services__srv__Control_Response>:
 800cdcc:	b138      	cbz	r0, 800cdde <get_serialized_size_racs_services__srv__Control_Response+0x12>
 800cdce:	b508      	push	{r3, lr}
 800cdd0:	460b      	mov	r3, r1
 800cdd2:	2101      	movs	r1, #1
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f004 fd89 	bl	80118ec <ucdr_alignment>
 800cdda:	3001      	adds	r0, #1
 800cddc:	bd08      	pop	{r3, pc}
 800cdde:	4770      	bx	lr

0800cde0 <_Control_Request__cdr_deserialize>:
 800cde0:	b538      	push	{r3, r4, r5, lr}
 800cde2:	460c      	mov	r4, r1
 800cde4:	b169      	cbz	r1, 800ce02 <_Control_Request__cdr_deserialize+0x22>
 800cde6:	4605      	mov	r5, r0
 800cde8:	f003 f902 	bl	800fff0 <ucdr_deserialize_uint8_t>
 800cdec:	1c61      	adds	r1, r4, #1
 800cdee:	4628      	mov	r0, r5
 800cdf0:	f003 f8fe 	bl	800fff0 <ucdr_deserialize_uint8_t>
 800cdf4:	1ca1      	adds	r1, r4, #2
 800cdf6:	4628      	mov	r0, r5
 800cdf8:	2206      	movs	r2, #6
 800cdfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdfe:	f002 bfb7 	b.w	800fd70 <ucdr_deserialize_array_int16_t>
 800ce02:	4608      	mov	r0, r1
 800ce04:	bd38      	pop	{r3, r4, r5, pc}
 800ce06:	bf00      	nop

0800ce08 <_Control_Response__cdr_serialize>:
 800ce08:	460a      	mov	r2, r1
 800ce0a:	b118      	cbz	r0, 800ce14 <_Control_Response__cdr_serialize+0xc>
 800ce0c:	7801      	ldrb	r1, [r0, #0]
 800ce0e:	4610      	mov	r0, r2
 800ce10:	f003 b8d8 	b.w	800ffc4 <ucdr_serialize_uint8_t>
 800ce14:	4770      	bx	lr
 800ce16:	bf00      	nop

0800ce18 <_Control_Request__cdr_serialize>:
 800ce18:	b188      	cbz	r0, 800ce3e <_Control_Request__cdr_serialize+0x26>
 800ce1a:	b538      	push	{r3, r4, r5, lr}
 800ce1c:	460d      	mov	r5, r1
 800ce1e:	4604      	mov	r4, r0
 800ce20:	7801      	ldrb	r1, [r0, #0]
 800ce22:	4628      	mov	r0, r5
 800ce24:	f003 f8ce 	bl	800ffc4 <ucdr_serialize_uint8_t>
 800ce28:	7861      	ldrb	r1, [r4, #1]
 800ce2a:	4628      	mov	r0, r5
 800ce2c:	f003 f8ca 	bl	800ffc4 <ucdr_serialize_uint8_t>
 800ce30:	1ca1      	adds	r1, r4, #2
 800ce32:	4628      	mov	r0, r5
 800ce34:	2206      	movs	r2, #6
 800ce36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce3a:	f002 bf43 	b.w	800fcc4 <ucdr_serialize_array_int16_t>
 800ce3e:	4770      	bx	lr

0800ce40 <get_serialized_size_racs_services__srv__Control_Event.part.0>:
 800ce40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce44:	460e      	mov	r6, r1
 800ce46:	4605      	mov	r5, r0
 800ce48:	f002 fccc 	bl	800f7e4 <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800ce4c:	2104      	movs	r1, #4
 800ce4e:	eb06 0800 	add.w	r8, r6, r0
 800ce52:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
 800ce56:	4640      	mov	r0, r8
 800ce58:	f004 fd48 	bl	80118ec <ucdr_alignment>
 800ce5c:	3004      	adds	r0, #4
 800ce5e:	4480      	add	r8, r0
 800ce60:	f1b9 0f00 	cmp.w	r9, #0
 800ce64:	d019      	beq.n	800ce9a <get_serialized_size_racs_services__srv__Control_Event.part.0+0x5a>
 800ce66:	2700      	movs	r7, #0
 800ce68:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800cee8 <get_serialized_size_racs_services__srv__Control_Event.part.0+0xa8>
 800ce6c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800ce6e:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
 800ce72:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ce76:	4641      	mov	r1, r8
 800ce78:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800ce7c:	3701      	adds	r7, #1
 800ce7e:	695b      	ldr	r3, [r3, #20]
 800ce80:	4798      	blx	r3
 800ce82:	4604      	mov	r4, r0
 800ce84:	4640      	mov	r0, r8
 800ce86:	2c04      	cmp	r4, #4
 800ce88:	4621      	mov	r1, r4
 800ce8a:	bf28      	it	cs
 800ce8c:	2104      	movcs	r1, #4
 800ce8e:	f004 fd2d 	bl	80118ec <ucdr_alignment>
 800ce92:	45b9      	cmp	r9, r7
 800ce94:	4420      	add	r0, r4
 800ce96:	4480      	add	r8, r0
 800ce98:	d1e8      	bne.n	800ce6c <get_serialized_size_racs_services__srv__Control_Event.part.0+0x2c>
 800ce9a:	4640      	mov	r0, r8
 800ce9c:	2104      	movs	r1, #4
 800ce9e:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800cea0:	f004 fd24 	bl	80118ec <ucdr_alignment>
 800cea4:	4480      	add	r8, r0
 800cea6:	f108 0804 	add.w	r8, r8, #4
 800ceaa:	b1c7      	cbz	r7, 800cede <get_serialized_size_racs_services__srv__Control_Event.part.0+0x9e>
 800ceac:	f04f 0900 	mov.w	r9, #0
 800ceb0:	f8df a038 	ldr.w	sl, [pc, #56]	; 800ceec <get_serialized_size_racs_services__srv__Control_Event.part.0+0xac>
 800ceb4:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800ceb6:	4641      	mov	r1, r8
 800ceb8:	f8da 3004 	ldr.w	r3, [sl, #4]
 800cebc:	4448      	add	r0, r9
 800cebe:	f109 0901 	add.w	r9, r9, #1
 800cec2:	695b      	ldr	r3, [r3, #20]
 800cec4:	4798      	blx	r3
 800cec6:	4604      	mov	r4, r0
 800cec8:	4640      	mov	r0, r8
 800ceca:	2c04      	cmp	r4, #4
 800cecc:	4621      	mov	r1, r4
 800cece:	bf28      	it	cs
 800ced0:	2104      	movcs	r1, #4
 800ced2:	f004 fd0b 	bl	80118ec <ucdr_alignment>
 800ced6:	454f      	cmp	r7, r9
 800ced8:	4420      	add	r0, r4
 800ceda:	4480      	add	r8, r0
 800cedc:	d1ea      	bne.n	800ceb4 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x74>
 800cede:	eba8 0006 	sub.w	r0, r8, r6
 800cee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cee6:	bf00      	nop
 800cee8:	20000920 	.word	0x20000920
 800ceec:	20000938 	.word	0x20000938

0800cef0 <get_serialized_size_racs_services__srv__Control_Event>:
 800cef0:	b108      	cbz	r0, 800cef6 <get_serialized_size_racs_services__srv__Control_Event+0x6>
 800cef2:	f7ff bfa5 	b.w	800ce40 <get_serialized_size_racs_services__srv__Control_Event.part.0>
 800cef6:	4770      	bx	lr

0800cef8 <_Control_Event__get_serialized_size>:
 800cef8:	b110      	cbz	r0, 800cf00 <_Control_Event__get_serialized_size+0x8>
 800cefa:	2100      	movs	r1, #0
 800cefc:	f7ff bfa0 	b.w	800ce40 <get_serialized_size_racs_services__srv__Control_Event.part.0>
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop

0800cf04 <_Control_Event__cdr_deserialize>:
 800cf04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf08:	460c      	mov	r4, r1
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	2900      	cmp	r1, #0
 800cf0e:	d045      	beq.n	800cf9c <_Control_Event__cdr_deserialize+0x98>
 800cf10:	4607      	mov	r7, r0
 800cf12:	f002 fd27 	bl	800f964 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800cf16:	4603      	mov	r3, r0
 800cf18:	4621      	mov	r1, r4
 800cf1a:	4638      	mov	r0, r7
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	68db      	ldr	r3, [r3, #12]
 800cf20:	4798      	blx	r3
 800cf22:	4638      	mov	r0, r7
 800cf24:	a901      	add	r1, sp, #4
 800cf26:	f003 fb93 	bl	8010650 <ucdr_deserialize_uint32_t>
 800cf2a:	9b01      	ldr	r3, [sp, #4]
 800cf2c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d330      	bcc.n	800cf94 <_Control_Event__cdr_deserialize+0x90>
 800cf32:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf34:	b193      	cbz	r3, 800cf5c <_Control_Event__cdr_deserialize+0x58>
 800cf36:	2500      	movs	r5, #0
 800cf38:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800cfa8 <_Control_Event__cdr_deserialize+0xa4>
 800cf3c:	462e      	mov	r6, r5
 800cf3e:	e002      	b.n	800cf46 <_Control_Event__cdr_deserialize+0x42>
 800cf40:	9b01      	ldr	r3, [sp, #4]
 800cf42:	429e      	cmp	r6, r3
 800cf44:	d20a      	bcs.n	800cf5c <_Control_Event__cdr_deserialize+0x58>
 800cf46:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800cf48:	4638      	mov	r0, r7
 800cf4a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cf4e:	3601      	adds	r6, #1
 800cf50:	4429      	add	r1, r5
 800cf52:	350e      	adds	r5, #14
 800cf54:	68db      	ldr	r3, [r3, #12]
 800cf56:	4798      	blx	r3
 800cf58:	2800      	cmp	r0, #0
 800cf5a:	d1f1      	bne.n	800cf40 <_Control_Event__cdr_deserialize+0x3c>
 800cf5c:	a901      	add	r1, sp, #4
 800cf5e:	4638      	mov	r0, r7
 800cf60:	f003 fb76 	bl	8010650 <ucdr_deserialize_uint32_t>
 800cf64:	9b01      	ldr	r3, [sp, #4]
 800cf66:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d313      	bcc.n	800cf94 <_Control_Event__cdr_deserialize+0x90>
 800cf6c:	63a3      	str	r3, [r4, #56]	; 0x38
 800cf6e:	b193      	cbz	r3, 800cf96 <_Control_Event__cdr_deserialize+0x92>
 800cf70:	2500      	movs	r5, #0
 800cf72:	4e0c      	ldr	r6, [pc, #48]	; (800cfa4 <_Control_Event__cdr_deserialize+0xa0>)
 800cf74:	e002      	b.n	800cf7c <_Control_Event__cdr_deserialize+0x78>
 800cf76:	9b01      	ldr	r3, [sp, #4]
 800cf78:	429d      	cmp	r5, r3
 800cf7a:	d20c      	bcs.n	800cf96 <_Control_Event__cdr_deserialize+0x92>
 800cf7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf7e:	4638      	mov	r0, r7
 800cf80:	6873      	ldr	r3, [r6, #4]
 800cf82:	4429      	add	r1, r5
 800cf84:	3501      	adds	r5, #1
 800cf86:	68db      	ldr	r3, [r3, #12]
 800cf88:	4798      	blx	r3
 800cf8a:	2800      	cmp	r0, #0
 800cf8c:	d1f3      	bne.n	800cf76 <_Control_Event__cdr_deserialize+0x72>
 800cf8e:	b002      	add	sp, #8
 800cf90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf94:	2000      	movs	r0, #0
 800cf96:	b002      	add	sp, #8
 800cf98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf9c:	4608      	mov	r0, r1
 800cf9e:	b002      	add	sp, #8
 800cfa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfa4:	20000938 	.word	0x20000938
 800cfa8:	20000920 	.word	0x20000920

0800cfac <_Control_Event__cdr_serialize>:
 800cfac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	d03b      	beq.n	800d02c <_Control_Event__cdr_serialize+0x80>
 800cfb4:	4605      	mov	r5, r0
 800cfb6:	460e      	mov	r6, r1
 800cfb8:	f002 fcd4 	bl	800f964 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	4631      	mov	r1, r6
 800cfc0:	4628      	mov	r0, r5
 800cfc2:	685b      	ldr	r3, [r3, #4]
 800cfc4:	689b      	ldr	r3, [r3, #8]
 800cfc6:	4798      	blx	r3
 800cfc8:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800cfca:	4630      	mov	r0, r6
 800cfcc:	4639      	mov	r1, r7
 800cfce:	f003 fa0f 	bl	80103f0 <ucdr_serialize_uint32_t>
 800cfd2:	b198      	cbz	r0, 800cffc <_Control_Event__cdr_serialize+0x50>
 800cfd4:	b197      	cbz	r7, 800cffc <_Control_Event__cdr_serialize+0x50>
 800cfd6:	2400      	movs	r4, #0
 800cfd8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800d038 <_Control_Event__cdr_serialize+0x8c>
 800cfdc:	e001      	b.n	800cfe2 <_Control_Event__cdr_serialize+0x36>
 800cfde:	42a7      	cmp	r7, r4
 800cfe0:	d00c      	beq.n	800cffc <_Control_Event__cdr_serialize+0x50>
 800cfe2:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800cfe6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800cfe8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cfec:	4631      	mov	r1, r6
 800cfee:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800cff2:	3401      	adds	r4, #1
 800cff4:	689b      	ldr	r3, [r3, #8]
 800cff6:	4798      	blx	r3
 800cff8:	2800      	cmp	r0, #0
 800cffa:	d1f0      	bne.n	800cfde <_Control_Event__cdr_serialize+0x32>
 800cffc:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800cffe:	4630      	mov	r0, r6
 800d000:	4639      	mov	r1, r7
 800d002:	f003 f9f5 	bl	80103f0 <ucdr_serialize_uint32_t>
 800d006:	4680      	mov	r8, r0
 800d008:	b180      	cbz	r0, 800d02c <_Control_Event__cdr_serialize+0x80>
 800d00a:	b18f      	cbz	r7, 800d030 <_Control_Event__cdr_serialize+0x84>
 800d00c:	2400      	movs	r4, #0
 800d00e:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800d03c <_Control_Event__cdr_serialize+0x90>
 800d012:	e001      	b.n	800d018 <_Control_Event__cdr_serialize+0x6c>
 800d014:	42a7      	cmp	r7, r4
 800d016:	d00b      	beq.n	800d030 <_Control_Event__cdr_serialize+0x84>
 800d018:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800d01a:	4631      	mov	r1, r6
 800d01c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d020:	4420      	add	r0, r4
 800d022:	3401      	adds	r4, #1
 800d024:	689b      	ldr	r3, [r3, #8]
 800d026:	4798      	blx	r3
 800d028:	2800      	cmp	r0, #0
 800d02a:	d1f3      	bne.n	800d014 <_Control_Event__cdr_serialize+0x68>
 800d02c:	f04f 0800 	mov.w	r8, #0
 800d030:	4640      	mov	r0, r8
 800d032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d036:	bf00      	nop
 800d038:	20000920 	.word	0x20000920
 800d03c:	20000938 	.word	0x20000938

0800d040 <_Control_Response__get_serialized_size>:
 800d040:	b130      	cbz	r0, 800d050 <_Control_Response__get_serialized_size+0x10>
 800d042:	2101      	movs	r1, #1
 800d044:	2000      	movs	r0, #0
 800d046:	b508      	push	{r3, lr}
 800d048:	f004 fc50 	bl	80118ec <ucdr_alignment>
 800d04c:	3001      	adds	r0, #1
 800d04e:	bd08      	pop	{r3, pc}
 800d050:	4770      	bx	lr
 800d052:	bf00      	nop

0800d054 <_Control_Request__get_serialized_size>:
 800d054:	b190      	cbz	r0, 800d07c <_Control_Request__get_serialized_size+0x28>
 800d056:	2101      	movs	r1, #1
 800d058:	2000      	movs	r0, #0
 800d05a:	b510      	push	{r4, lr}
 800d05c:	f004 fc46 	bl	80118ec <ucdr_alignment>
 800d060:	2101      	movs	r1, #1
 800d062:	1844      	adds	r4, r0, r1
 800d064:	4620      	mov	r0, r4
 800d066:	f004 fc41 	bl	80118ec <ucdr_alignment>
 800d06a:	3001      	adds	r0, #1
 800d06c:	2102      	movs	r1, #2
 800d06e:	4404      	add	r4, r0
 800d070:	4620      	mov	r0, r4
 800d072:	f004 fc3b 	bl	80118ec <ucdr_alignment>
 800d076:	300c      	adds	r0, #12
 800d078:	4420      	add	r0, r4
 800d07a:	bd10      	pop	{r4, pc}
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop

0800d080 <_Control_Request__max_serialized_size>:
 800d080:	b538      	push	{r3, r4, r5, lr}
 800d082:	2101      	movs	r1, #1
 800d084:	2000      	movs	r0, #0
 800d086:	f004 fc31 	bl	80118ec <ucdr_alignment>
 800d08a:	2101      	movs	r1, #1
 800d08c:	1845      	adds	r5, r0, r1
 800d08e:	4628      	mov	r0, r5
 800d090:	f004 fc2c 	bl	80118ec <ucdr_alignment>
 800d094:	1c44      	adds	r4, r0, #1
 800d096:	2102      	movs	r1, #2
 800d098:	442c      	add	r4, r5
 800d09a:	4620      	mov	r0, r4
 800d09c:	f004 fc26 	bl	80118ec <ucdr_alignment>
 800d0a0:	300c      	adds	r0, #12
 800d0a2:	4420      	add	r0, r4
 800d0a4:	bd38      	pop	{r3, r4, r5, pc}
 800d0a6:	bf00      	nop

0800d0a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Event>:
 800d0a8:	4800      	ldr	r0, [pc, #0]	; (800d0ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x4>)
 800d0aa:	4770      	bx	lr
 800d0ac:	20000908 	.word	0x20000908

0800d0b0 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Control>:
 800d0b0:	4800      	ldr	r0, [pc, #0]	; (800d0b4 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Control+0x4>)
 800d0b2:	4770      	bx	lr
 800d0b4:	200008dc 	.word	0x200008dc

0800d0b8 <_Debug__max_serialized_size>:
 800d0b8:	2104      	movs	r1, #4
 800d0ba:	2000      	movs	r0, #0
 800d0bc:	b508      	push	{r3, lr}
 800d0be:	f004 fc15 	bl	80118ec <ucdr_alignment>
 800d0c2:	3018      	adds	r0, #24
 800d0c4:	bd08      	pop	{r3, pc}
 800d0c6:	bf00      	nop

0800d0c8 <get_serialized_size_racs_services__msg__Debug>:
 800d0c8:	b138      	cbz	r0, 800d0da <get_serialized_size_racs_services__msg__Debug+0x12>
 800d0ca:	b508      	push	{r3, lr}
 800d0cc:	460b      	mov	r3, r1
 800d0ce:	2104      	movs	r1, #4
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f004 fc0b 	bl	80118ec <ucdr_alignment>
 800d0d6:	3018      	adds	r0, #24
 800d0d8:	bd08      	pop	{r3, pc}
 800d0da:	4770      	bx	lr

0800d0dc <_Debug__cdr_deserialize>:
 800d0dc:	b111      	cbz	r1, 800d0e4 <_Debug__cdr_deserialize+0x8>
 800d0de:	2206      	movs	r2, #6
 800d0e0:	f002 beee 	b.w	800fec0 <ucdr_deserialize_array_float>
 800d0e4:	4608      	mov	r0, r1
 800d0e6:	4770      	bx	lr

0800d0e8 <_Debug__cdr_serialize>:
 800d0e8:	468c      	mov	ip, r1
 800d0ea:	b120      	cbz	r0, 800d0f6 <_Debug__cdr_serialize+0xe>
 800d0ec:	4601      	mov	r1, r0
 800d0ee:	2206      	movs	r2, #6
 800d0f0:	4660      	mov	r0, ip
 800d0f2:	f002 be91 	b.w	800fe18 <ucdr_serialize_array_float>
 800d0f6:	4770      	bx	lr

0800d0f8 <_Debug__get_serialized_size>:
 800d0f8:	b130      	cbz	r0, 800d108 <_Debug__get_serialized_size+0x10>
 800d0fa:	2104      	movs	r1, #4
 800d0fc:	2000      	movs	r0, #0
 800d0fe:	b508      	push	{r3, lr}
 800d100:	f004 fbf4 	bl	80118ec <ucdr_alignment>
 800d104:	3018      	adds	r0, #24
 800d106:	bd08      	pop	{r3, pc}
 800d108:	4770      	bx	lr
 800d10a:	bf00      	nop

0800d10c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Debug>:
 800d10c:	4800      	ldr	r0, [pc, #0]	; (800d110 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Debug+0x4>)
 800d10e:	4770      	bx	lr
 800d110:	200009a4 	.word	0x200009a4

0800d114 <get_serialized_size_racs_services__msg__DirectAccess>:
 800d114:	b180      	cbz	r0, 800d138 <get_serialized_size_racs_services__msg__DirectAccess+0x24>
 800d116:	b538      	push	{r3, r4, r5, lr}
 800d118:	460d      	mov	r5, r1
 800d11a:	2101      	movs	r1, #1
 800d11c:	4628      	mov	r0, r5
 800d11e:	f004 fbe5 	bl	80118ec <ucdr_alignment>
 800d122:	1c6b      	adds	r3, r5, #1
 800d124:	f1c5 050c 	rsb	r5, r5, #12
 800d128:	2102      	movs	r1, #2
 800d12a:	181c      	adds	r4, r3, r0
 800d12c:	4620      	mov	r0, r4
 800d12e:	f004 fbdd 	bl	80118ec <ucdr_alignment>
 800d132:	4428      	add	r0, r5
 800d134:	4420      	add	r0, r4
 800d136:	bd38      	pop	{r3, r4, r5, pc}
 800d138:	4770      	bx	lr
 800d13a:	bf00      	nop

0800d13c <_DirectAccess__cdr_deserialize>:
 800d13c:	b538      	push	{r3, r4, r5, lr}
 800d13e:	460c      	mov	r4, r1
 800d140:	b149      	cbz	r1, 800d156 <_DirectAccess__cdr_deserialize+0x1a>
 800d142:	4605      	mov	r5, r0
 800d144:	f002 ff54 	bl	800fff0 <ucdr_deserialize_uint8_t>
 800d148:	1ca1      	adds	r1, r4, #2
 800d14a:	2206      	movs	r2, #6
 800d14c:	4628      	mov	r0, r5
 800d14e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d152:	f002 be0d 	b.w	800fd70 <ucdr_deserialize_array_int16_t>
 800d156:	4608      	mov	r0, r1
 800d158:	bd38      	pop	{r3, r4, r5, pc}
 800d15a:	bf00      	nop

0800d15c <_DirectAccess__cdr_serialize>:
 800d15c:	b170      	cbz	r0, 800d17c <_DirectAccess__cdr_serialize+0x20>
 800d15e:	b538      	push	{r3, r4, r5, lr}
 800d160:	4604      	mov	r4, r0
 800d162:	460d      	mov	r5, r1
 800d164:	4608      	mov	r0, r1
 800d166:	f814 1b02 	ldrb.w	r1, [r4], #2
 800d16a:	f002 ff2b 	bl	800ffc4 <ucdr_serialize_uint8_t>
 800d16e:	4628      	mov	r0, r5
 800d170:	4621      	mov	r1, r4
 800d172:	2206      	movs	r2, #6
 800d174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d178:	f002 bda4 	b.w	800fcc4 <ucdr_serialize_array_int16_t>
 800d17c:	4770      	bx	lr
 800d17e:	bf00      	nop

0800d180 <_DirectAccess__get_serialized_size>:
 800d180:	b160      	cbz	r0, 800d19c <_DirectAccess__get_serialized_size+0x1c>
 800d182:	2101      	movs	r1, #1
 800d184:	2000      	movs	r0, #0
 800d186:	b510      	push	{r4, lr}
 800d188:	f004 fbb0 	bl	80118ec <ucdr_alignment>
 800d18c:	1c44      	adds	r4, r0, #1
 800d18e:	2102      	movs	r1, #2
 800d190:	4620      	mov	r0, r4
 800d192:	f004 fbab 	bl	80118ec <ucdr_alignment>
 800d196:	300c      	adds	r0, #12
 800d198:	4420      	add	r0, r4
 800d19a:	bd10      	pop	{r4, pc}
 800d19c:	4770      	bx	lr
 800d19e:	bf00      	nop

0800d1a0 <_DirectAccess__max_serialized_size>:
 800d1a0:	b510      	push	{r4, lr}
 800d1a2:	2101      	movs	r1, #1
 800d1a4:	2000      	movs	r0, #0
 800d1a6:	f004 fba1 	bl	80118ec <ucdr_alignment>
 800d1aa:	1c44      	adds	r4, r0, #1
 800d1ac:	2102      	movs	r1, #2
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	f004 fb9c 	bl	80118ec <ucdr_alignment>
 800d1b4:	300c      	adds	r0, #12
 800d1b6:	4420      	add	r0, r4
 800d1b8:	bd10      	pop	{r4, pc}
 800d1ba:	bf00      	nop

0800d1bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800d1bc:	4800      	ldr	r0, [pc, #0]	; (800d1c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x4>)
 800d1be:	4770      	bx	lr
 800d1c0:	200009d8 	.word	0x200009d8

0800d1c4 <_Encoder__max_serialized_size>:
 800d1c4:	2102      	movs	r1, #2
 800d1c6:	2000      	movs	r0, #0
 800d1c8:	b508      	push	{r3, lr}
 800d1ca:	f004 fb8f 	bl	80118ec <ucdr_alignment>
 800d1ce:	300a      	adds	r0, #10
 800d1d0:	bd08      	pop	{r3, pc}
 800d1d2:	bf00      	nop

0800d1d4 <get_serialized_size_racs_services__msg__Encoder>:
 800d1d4:	b138      	cbz	r0, 800d1e6 <get_serialized_size_racs_services__msg__Encoder+0x12>
 800d1d6:	b508      	push	{r3, lr}
 800d1d8:	460b      	mov	r3, r1
 800d1da:	2102      	movs	r1, #2
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f004 fb85 	bl	80118ec <ucdr_alignment>
 800d1e2:	300a      	adds	r0, #10
 800d1e4:	bd08      	pop	{r3, pc}
 800d1e6:	4770      	bx	lr

0800d1e8 <_Encoder__cdr_deserialize>:
 800d1e8:	b111      	cbz	r1, 800d1f0 <_Encoder__cdr_deserialize+0x8>
 800d1ea:	2205      	movs	r2, #5
 800d1ec:	f002 bdc0 	b.w	800fd70 <ucdr_deserialize_array_int16_t>
 800d1f0:	4608      	mov	r0, r1
 800d1f2:	4770      	bx	lr

0800d1f4 <_Encoder__cdr_serialize>:
 800d1f4:	468c      	mov	ip, r1
 800d1f6:	b120      	cbz	r0, 800d202 <_Encoder__cdr_serialize+0xe>
 800d1f8:	4601      	mov	r1, r0
 800d1fa:	2205      	movs	r2, #5
 800d1fc:	4660      	mov	r0, ip
 800d1fe:	f002 bd61 	b.w	800fcc4 <ucdr_serialize_array_int16_t>
 800d202:	4770      	bx	lr

0800d204 <_Encoder__get_serialized_size>:
 800d204:	b130      	cbz	r0, 800d214 <_Encoder__get_serialized_size+0x10>
 800d206:	2102      	movs	r1, #2
 800d208:	2000      	movs	r0, #0
 800d20a:	b508      	push	{r3, lr}
 800d20c:	f004 fb6e 	bl	80118ec <ucdr_alignment>
 800d210:	300a      	adds	r0, #10
 800d212:	bd08      	pop	{r3, pc}
 800d214:	4770      	bx	lr
 800d216:	bf00      	nop

0800d218 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Encoder>:
 800d218:	4800      	ldr	r0, [pc, #0]	; (800d21c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Encoder+0x4>)
 800d21a:	4770      	bx	lr
 800d21c:	20000a0c 	.word	0x20000a0c

0800d220 <get_serialized_size_racs_services__msg__Feedback>:
 800d220:	b180      	cbz	r0, 800d244 <get_serialized_size_racs_services__msg__Feedback+0x24>
 800d222:	b538      	push	{r3, r4, r5, lr}
 800d224:	460d      	mov	r5, r1
 800d226:	2101      	movs	r1, #1
 800d228:	4628      	mov	r0, r5
 800d22a:	f004 fb5f 	bl	80118ec <ucdr_alignment>
 800d22e:	1c6b      	adds	r3, r5, #1
 800d230:	f1c5 050c 	rsb	r5, r5, #12
 800d234:	2102      	movs	r1, #2
 800d236:	181c      	adds	r4, r3, r0
 800d238:	4620      	mov	r0, r4
 800d23a:	f004 fb57 	bl	80118ec <ucdr_alignment>
 800d23e:	4428      	add	r0, r5
 800d240:	4420      	add	r0, r4
 800d242:	bd38      	pop	{r3, r4, r5, pc}
 800d244:	4770      	bx	lr
 800d246:	bf00      	nop

0800d248 <_Feedback__cdr_deserialize>:
 800d248:	b538      	push	{r3, r4, r5, lr}
 800d24a:	460c      	mov	r4, r1
 800d24c:	b149      	cbz	r1, 800d262 <_Feedback__cdr_deserialize+0x1a>
 800d24e:	4605      	mov	r5, r0
 800d250:	f002 fece 	bl	800fff0 <ucdr_deserialize_uint8_t>
 800d254:	1ca1      	adds	r1, r4, #2
 800d256:	2206      	movs	r2, #6
 800d258:	4628      	mov	r0, r5
 800d25a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d25e:	f002 bd87 	b.w	800fd70 <ucdr_deserialize_array_int16_t>
 800d262:	4608      	mov	r0, r1
 800d264:	bd38      	pop	{r3, r4, r5, pc}
 800d266:	bf00      	nop

0800d268 <_Feedback__cdr_serialize>:
 800d268:	b170      	cbz	r0, 800d288 <_Feedback__cdr_serialize+0x20>
 800d26a:	b538      	push	{r3, r4, r5, lr}
 800d26c:	4604      	mov	r4, r0
 800d26e:	460d      	mov	r5, r1
 800d270:	4608      	mov	r0, r1
 800d272:	f814 1b02 	ldrb.w	r1, [r4], #2
 800d276:	f002 fea5 	bl	800ffc4 <ucdr_serialize_uint8_t>
 800d27a:	4628      	mov	r0, r5
 800d27c:	4621      	mov	r1, r4
 800d27e:	2206      	movs	r2, #6
 800d280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d284:	f002 bd1e 	b.w	800fcc4 <ucdr_serialize_array_int16_t>
 800d288:	4770      	bx	lr
 800d28a:	bf00      	nop

0800d28c <_Feedback__get_serialized_size>:
 800d28c:	b160      	cbz	r0, 800d2a8 <_Feedback__get_serialized_size+0x1c>
 800d28e:	2101      	movs	r1, #1
 800d290:	2000      	movs	r0, #0
 800d292:	b510      	push	{r4, lr}
 800d294:	f004 fb2a 	bl	80118ec <ucdr_alignment>
 800d298:	1c44      	adds	r4, r0, #1
 800d29a:	2102      	movs	r1, #2
 800d29c:	4620      	mov	r0, r4
 800d29e:	f004 fb25 	bl	80118ec <ucdr_alignment>
 800d2a2:	300c      	adds	r0, #12
 800d2a4:	4420      	add	r0, r4
 800d2a6:	bd10      	pop	{r4, pc}
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop

0800d2ac <_Feedback__max_serialized_size>:
 800d2ac:	b510      	push	{r4, lr}
 800d2ae:	2101      	movs	r1, #1
 800d2b0:	2000      	movs	r0, #0
 800d2b2:	f004 fb1b 	bl	80118ec <ucdr_alignment>
 800d2b6:	1c44      	adds	r4, r0, #1
 800d2b8:	2102      	movs	r1, #2
 800d2ba:	4620      	mov	r0, r4
 800d2bc:	f004 fb16 	bl	80118ec <ucdr_alignment>
 800d2c0:	300c      	adds	r0, #12
 800d2c2:	4420      	add	r0, r4
 800d2c4:	bd10      	pop	{r4, pc}
 800d2c6:	bf00      	nop

0800d2c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800d2c8:	4800      	ldr	r0, [pc, #0]	; (800d2cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Feedback+0x4>)
 800d2ca:	4770      	bx	lr
 800d2cc:	20000a40 	.word	0x20000a40

0800d2d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800d2d0:	4800      	ldr	r0, [pc, #0]	; (800d2d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x4>)
 800d2d2:	4770      	bx	lr
 800d2d4:	20000ac8 	.word	0x20000ac8

0800d2d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Response>:
 800d2d8:	4800      	ldr	r0, [pc, #0]	; (800d2dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x4>)
 800d2da:	4770      	bx	lr
 800d2dc:	20000ae0 	.word	0x20000ae0

0800d2e0 <_Setup_Response__max_serialized_size>:
 800d2e0:	2101      	movs	r1, #1
 800d2e2:	2000      	movs	r0, #0
 800d2e4:	b508      	push	{r3, lr}
 800d2e6:	f004 fb01 	bl	80118ec <ucdr_alignment>
 800d2ea:	3001      	adds	r0, #1
 800d2ec:	bd08      	pop	{r3, pc}
 800d2ee:	bf00      	nop

0800d2f0 <_Setup_Response__cdr_deserialize>:
 800d2f0:	b109      	cbz	r1, 800d2f6 <_Setup_Response__cdr_deserialize+0x6>
 800d2f2:	f002 be7d 	b.w	800fff0 <ucdr_deserialize_uint8_t>
 800d2f6:	4608      	mov	r0, r1
 800d2f8:	4770      	bx	lr
 800d2fa:	bf00      	nop

0800d2fc <_Setup_Event__max_serialized_size>:
 800d2fc:	b500      	push	{lr}
 800d2fe:	b083      	sub	sp, #12
 800d300:	2301      	movs	r3, #1
 800d302:	2100      	movs	r1, #0
 800d304:	f10d 0007 	add.w	r0, sp, #7
 800d308:	f88d 3007 	strb.w	r3, [sp, #7]
 800d30c:	f002 fb04 	bl	800f918 <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800d310:	b003      	add	sp, #12
 800d312:	f85d fb04 	ldr.w	pc, [sp], #4
 800d316:	bf00      	nop

0800d318 <get_serialized_size_racs_services__srv__Setup_Request.part.0>:
 800d318:	b570      	push	{r4, r5, r6, lr}
 800d31a:	4604      	mov	r4, r0
 800d31c:	2101      	movs	r1, #1
 800d31e:	f004 fae5 	bl	80118ec <ucdr_alignment>
 800d322:	2104      	movs	r1, #4
 800d324:	1c65      	adds	r5, r4, #1
 800d326:	f1c4 0404 	rsb	r4, r4, #4
 800d32a:	4405      	add	r5, r0
 800d32c:	4628      	mov	r0, r5
 800d32e:	f004 fadd 	bl	80118ec <ucdr_alignment>
 800d332:	2104      	movs	r1, #4
 800d334:	1846      	adds	r6, r0, r1
 800d336:	442e      	add	r6, r5
 800d338:	4630      	mov	r0, r6
 800d33a:	f004 fad7 	bl	80118ec <ucdr_alignment>
 800d33e:	2104      	movs	r1, #4
 800d340:	1845      	adds	r5, r0, r1
 800d342:	442e      	add	r6, r5
 800d344:	4630      	mov	r0, r6
 800d346:	f004 fad1 	bl	80118ec <ucdr_alignment>
 800d34a:	2104      	movs	r1, #4
 800d34c:	4408      	add	r0, r1
 800d34e:	4406      	add	r6, r0
 800d350:	4630      	mov	r0, r6
 800d352:	f004 facb 	bl	80118ec <ucdr_alignment>
 800d356:	2104      	movs	r1, #4
 800d358:	1845      	adds	r5, r0, r1
 800d35a:	4435      	add	r5, r6
 800d35c:	4628      	mov	r0, r5
 800d35e:	f004 fac5 	bl	80118ec <ucdr_alignment>
 800d362:	2104      	movs	r1, #4
 800d364:	4408      	add	r0, r1
 800d366:	4405      	add	r5, r0
 800d368:	4628      	mov	r0, r5
 800d36a:	f004 fabf 	bl	80118ec <ucdr_alignment>
 800d36e:	4420      	add	r0, r4
 800d370:	4428      	add	r0, r5
 800d372:	bd70      	pop	{r4, r5, r6, pc}

0800d374 <get_serialized_size_racs_services__srv__Setup_Request>:
 800d374:	b110      	cbz	r0, 800d37c <get_serialized_size_racs_services__srv__Setup_Request+0x8>
 800d376:	4608      	mov	r0, r1
 800d378:	f7ff bfce 	b.w	800d318 <get_serialized_size_racs_services__srv__Setup_Request.part.0>
 800d37c:	4770      	bx	lr
 800d37e:	bf00      	nop

0800d380 <_Setup_Request__get_serialized_size>:
 800d380:	b110      	cbz	r0, 800d388 <_Setup_Request__get_serialized_size+0x8>
 800d382:	2000      	movs	r0, #0
 800d384:	f7ff bfc8 	b.w	800d318 <get_serialized_size_racs_services__srv__Setup_Request.part.0>
 800d388:	4770      	bx	lr
 800d38a:	bf00      	nop

0800d38c <get_serialized_size_racs_services__srv__Setup_Response>:
 800d38c:	b138      	cbz	r0, 800d39e <get_serialized_size_racs_services__srv__Setup_Response+0x12>
 800d38e:	b508      	push	{r3, lr}
 800d390:	460b      	mov	r3, r1
 800d392:	2101      	movs	r1, #1
 800d394:	4618      	mov	r0, r3
 800d396:	f004 faa9 	bl	80118ec <ucdr_alignment>
 800d39a:	3001      	adds	r0, #1
 800d39c:	bd08      	pop	{r3, pc}
 800d39e:	4770      	bx	lr

0800d3a0 <_Setup_Request__cdr_deserialize>:
 800d3a0:	b538      	push	{r3, r4, r5, lr}
 800d3a2:	460c      	mov	r4, r1
 800d3a4:	b309      	cbz	r1, 800d3ea <_Setup_Request__cdr_deserialize+0x4a>
 800d3a6:	4605      	mov	r5, r0
 800d3a8:	f002 fe22 	bl	800fff0 <ucdr_deserialize_uint8_t>
 800d3ac:	1d21      	adds	r1, r4, #4
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	f004 f91e 	bl	80115f0 <ucdr_deserialize_float>
 800d3b4:	f104 0108 	add.w	r1, r4, #8
 800d3b8:	4628      	mov	r0, r5
 800d3ba:	f004 f919 	bl	80115f0 <ucdr_deserialize_float>
 800d3be:	f104 010c 	add.w	r1, r4, #12
 800d3c2:	4628      	mov	r0, r5
 800d3c4:	f004 f914 	bl	80115f0 <ucdr_deserialize_float>
 800d3c8:	f104 0110 	add.w	r1, r4, #16
 800d3cc:	4628      	mov	r0, r5
 800d3ce:	f004 f90f 	bl	80115f0 <ucdr_deserialize_float>
 800d3d2:	f104 0114 	add.w	r1, r4, #20
 800d3d6:	4628      	mov	r0, r5
 800d3d8:	f004 f90a 	bl	80115f0 <ucdr_deserialize_float>
 800d3dc:	f104 0118 	add.w	r1, r4, #24
 800d3e0:	4628      	mov	r0, r5
 800d3e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3e6:	f004 b903 	b.w	80115f0 <ucdr_deserialize_float>
 800d3ea:	4608      	mov	r0, r1
 800d3ec:	bd38      	pop	{r3, r4, r5, pc}
 800d3ee:	bf00      	nop

0800d3f0 <_Setup_Response__cdr_serialize>:
 800d3f0:	460a      	mov	r2, r1
 800d3f2:	b118      	cbz	r0, 800d3fc <_Setup_Response__cdr_serialize+0xc>
 800d3f4:	7801      	ldrb	r1, [r0, #0]
 800d3f6:	4610      	mov	r0, r2
 800d3f8:	f002 bde4 	b.w	800ffc4 <ucdr_serialize_uint8_t>
 800d3fc:	4770      	bx	lr
 800d3fe:	bf00      	nop

0800d400 <_Setup_Request__cdr_serialize>:
 800d400:	b330      	cbz	r0, 800d450 <_Setup_Request__cdr_serialize+0x50>
 800d402:	b538      	push	{r3, r4, r5, lr}
 800d404:	460d      	mov	r5, r1
 800d406:	4604      	mov	r4, r0
 800d408:	7801      	ldrb	r1, [r0, #0]
 800d40a:	4628      	mov	r0, r5
 800d40c:	f002 fdda 	bl	800ffc4 <ucdr_serialize_uint8_t>
 800d410:	ed94 0a01 	vldr	s0, [r4, #4]
 800d414:	4628      	mov	r0, r5
 800d416:	f003 ffb9 	bl	801138c <ucdr_serialize_float>
 800d41a:	ed94 0a02 	vldr	s0, [r4, #8]
 800d41e:	4628      	mov	r0, r5
 800d420:	f003 ffb4 	bl	801138c <ucdr_serialize_float>
 800d424:	ed94 0a03 	vldr	s0, [r4, #12]
 800d428:	4628      	mov	r0, r5
 800d42a:	f003 ffaf 	bl	801138c <ucdr_serialize_float>
 800d42e:	ed94 0a04 	vldr	s0, [r4, #16]
 800d432:	4628      	mov	r0, r5
 800d434:	f003 ffaa 	bl	801138c <ucdr_serialize_float>
 800d438:	ed94 0a05 	vldr	s0, [r4, #20]
 800d43c:	4628      	mov	r0, r5
 800d43e:	f003 ffa5 	bl	801138c <ucdr_serialize_float>
 800d442:	ed94 0a06 	vldr	s0, [r4, #24]
 800d446:	4628      	mov	r0, r5
 800d448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d44c:	f003 bf9e 	b.w	801138c <ucdr_serialize_float>
 800d450:	4770      	bx	lr
 800d452:	bf00      	nop

0800d454 <get_serialized_size_racs_services__srv__Setup_Event.part.0>:
 800d454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d458:	460e      	mov	r6, r1
 800d45a:	4605      	mov	r5, r0
 800d45c:	f002 f9c2 	bl	800f7e4 <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800d460:	2104      	movs	r1, #4
 800d462:	eb06 0800 	add.w	r8, r6, r0
 800d466:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
 800d46a:	4640      	mov	r0, r8
 800d46c:	f004 fa3e 	bl	80118ec <ucdr_alignment>
 800d470:	3004      	adds	r0, #4
 800d472:	4480      	add	r8, r0
 800d474:	f1b9 0f00 	cmp.w	r9, #0
 800d478:	d019      	beq.n	800d4ae <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x5a>
 800d47a:	2700      	movs	r7, #0
 800d47c:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800d4fc <get_serialized_size_racs_services__srv__Setup_Event.part.0+0xa8>
 800d480:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d482:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
 800d486:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d48a:	4641      	mov	r1, r8
 800d48c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800d490:	3701      	adds	r7, #1
 800d492:	695b      	ldr	r3, [r3, #20]
 800d494:	4798      	blx	r3
 800d496:	4604      	mov	r4, r0
 800d498:	4640      	mov	r0, r8
 800d49a:	2c04      	cmp	r4, #4
 800d49c:	4621      	mov	r1, r4
 800d49e:	bf28      	it	cs
 800d4a0:	2104      	movcs	r1, #4
 800d4a2:	f004 fa23 	bl	80118ec <ucdr_alignment>
 800d4a6:	45b9      	cmp	r9, r7
 800d4a8:	4420      	add	r0, r4
 800d4aa:	4480      	add	r8, r0
 800d4ac:	d1e8      	bne.n	800d480 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x2c>
 800d4ae:	4640      	mov	r0, r8
 800d4b0:	2104      	movs	r1, #4
 800d4b2:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800d4b4:	f004 fa1a 	bl	80118ec <ucdr_alignment>
 800d4b8:	4480      	add	r8, r0
 800d4ba:	f108 0804 	add.w	r8, r8, #4
 800d4be:	b1c7      	cbz	r7, 800d4f2 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x9e>
 800d4c0:	f04f 0900 	mov.w	r9, #0
 800d4c4:	f8df a038 	ldr.w	sl, [pc, #56]	; 800d500 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0xac>
 800d4c8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800d4ca:	4641      	mov	r1, r8
 800d4cc:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d4d0:	4448      	add	r0, r9
 800d4d2:	f109 0901 	add.w	r9, r9, #1
 800d4d6:	695b      	ldr	r3, [r3, #20]
 800d4d8:	4798      	blx	r3
 800d4da:	4604      	mov	r4, r0
 800d4dc:	4640      	mov	r0, r8
 800d4de:	2c04      	cmp	r4, #4
 800d4e0:	4621      	mov	r1, r4
 800d4e2:	bf28      	it	cs
 800d4e4:	2104      	movcs	r1, #4
 800d4e6:	f004 fa01 	bl	80118ec <ucdr_alignment>
 800d4ea:	454f      	cmp	r7, r9
 800d4ec:	4420      	add	r0, r4
 800d4ee:	4480      	add	r8, r0
 800d4f0:	d1ea      	bne.n	800d4c8 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x74>
 800d4f2:	eba8 0006 	sub.w	r0, r8, r6
 800d4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4fa:	bf00      	nop
 800d4fc:	20000ac8 	.word	0x20000ac8
 800d500:	20000ae0 	.word	0x20000ae0

0800d504 <get_serialized_size_racs_services__srv__Setup_Event>:
 800d504:	b108      	cbz	r0, 800d50a <get_serialized_size_racs_services__srv__Setup_Event+0x6>
 800d506:	f7ff bfa5 	b.w	800d454 <get_serialized_size_racs_services__srv__Setup_Event.part.0>
 800d50a:	4770      	bx	lr

0800d50c <_Setup_Event__get_serialized_size>:
 800d50c:	b110      	cbz	r0, 800d514 <_Setup_Event__get_serialized_size+0x8>
 800d50e:	2100      	movs	r1, #0
 800d510:	f7ff bfa0 	b.w	800d454 <get_serialized_size_racs_services__srv__Setup_Event.part.0>
 800d514:	4770      	bx	lr
 800d516:	bf00      	nop

0800d518 <_Setup_Event__cdr_deserialize>:
 800d518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d51c:	460c      	mov	r4, r1
 800d51e:	b082      	sub	sp, #8
 800d520:	2900      	cmp	r1, #0
 800d522:	d045      	beq.n	800d5b0 <_Setup_Event__cdr_deserialize+0x98>
 800d524:	4607      	mov	r7, r0
 800d526:	f002 fa1d 	bl	800f964 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800d52a:	4603      	mov	r3, r0
 800d52c:	4621      	mov	r1, r4
 800d52e:	4638      	mov	r0, r7
 800d530:	685b      	ldr	r3, [r3, #4]
 800d532:	68db      	ldr	r3, [r3, #12]
 800d534:	4798      	blx	r3
 800d536:	4638      	mov	r0, r7
 800d538:	a901      	add	r1, sp, #4
 800d53a:	f003 f889 	bl	8010650 <ucdr_deserialize_uint32_t>
 800d53e:	9b01      	ldr	r3, [sp, #4]
 800d540:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d542:	429a      	cmp	r2, r3
 800d544:	d330      	bcc.n	800d5a8 <_Setup_Event__cdr_deserialize+0x90>
 800d546:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d548:	b193      	cbz	r3, 800d570 <_Setup_Event__cdr_deserialize+0x58>
 800d54a:	2500      	movs	r5, #0
 800d54c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800d5bc <_Setup_Event__cdr_deserialize+0xa4>
 800d550:	462e      	mov	r6, r5
 800d552:	e002      	b.n	800d55a <_Setup_Event__cdr_deserialize+0x42>
 800d554:	9b01      	ldr	r3, [sp, #4]
 800d556:	429e      	cmp	r6, r3
 800d558:	d20a      	bcs.n	800d570 <_Setup_Event__cdr_deserialize+0x58>
 800d55a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d55c:	4638      	mov	r0, r7
 800d55e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d562:	3601      	adds	r6, #1
 800d564:	4429      	add	r1, r5
 800d566:	351c      	adds	r5, #28
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	4798      	blx	r3
 800d56c:	2800      	cmp	r0, #0
 800d56e:	d1f1      	bne.n	800d554 <_Setup_Event__cdr_deserialize+0x3c>
 800d570:	a901      	add	r1, sp, #4
 800d572:	4638      	mov	r0, r7
 800d574:	f003 f86c 	bl	8010650 <ucdr_deserialize_uint32_t>
 800d578:	9b01      	ldr	r3, [sp, #4]
 800d57a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d313      	bcc.n	800d5a8 <_Setup_Event__cdr_deserialize+0x90>
 800d580:	63a3      	str	r3, [r4, #56]	; 0x38
 800d582:	b193      	cbz	r3, 800d5aa <_Setup_Event__cdr_deserialize+0x92>
 800d584:	2500      	movs	r5, #0
 800d586:	4e0c      	ldr	r6, [pc, #48]	; (800d5b8 <_Setup_Event__cdr_deserialize+0xa0>)
 800d588:	e002      	b.n	800d590 <_Setup_Event__cdr_deserialize+0x78>
 800d58a:	9b01      	ldr	r3, [sp, #4]
 800d58c:	429d      	cmp	r5, r3
 800d58e:	d20c      	bcs.n	800d5aa <_Setup_Event__cdr_deserialize+0x92>
 800d590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d592:	4638      	mov	r0, r7
 800d594:	6873      	ldr	r3, [r6, #4]
 800d596:	4429      	add	r1, r5
 800d598:	3501      	adds	r5, #1
 800d59a:	68db      	ldr	r3, [r3, #12]
 800d59c:	4798      	blx	r3
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	d1f3      	bne.n	800d58a <_Setup_Event__cdr_deserialize+0x72>
 800d5a2:	b002      	add	sp, #8
 800d5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5a8:	2000      	movs	r0, #0
 800d5aa:	b002      	add	sp, #8
 800d5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5b0:	4608      	mov	r0, r1
 800d5b2:	b002      	add	sp, #8
 800d5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5b8:	20000ae0 	.word	0x20000ae0
 800d5bc:	20000ac8 	.word	0x20000ac8

0800d5c0 <_Setup_Event__cdr_serialize>:
 800d5c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5c4:	2800      	cmp	r0, #0
 800d5c6:	d03b      	beq.n	800d640 <_Setup_Event__cdr_serialize+0x80>
 800d5c8:	4605      	mov	r5, r0
 800d5ca:	460e      	mov	r6, r1
 800d5cc:	f002 f9ca 	bl	800f964 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	4631      	mov	r1, r6
 800d5d4:	4628      	mov	r0, r5
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	689b      	ldr	r3, [r3, #8]
 800d5da:	4798      	blx	r3
 800d5dc:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800d5de:	4630      	mov	r0, r6
 800d5e0:	4639      	mov	r1, r7
 800d5e2:	f002 ff05 	bl	80103f0 <ucdr_serialize_uint32_t>
 800d5e6:	b198      	cbz	r0, 800d610 <_Setup_Event__cdr_serialize+0x50>
 800d5e8:	b197      	cbz	r7, 800d610 <_Setup_Event__cdr_serialize+0x50>
 800d5ea:	2400      	movs	r4, #0
 800d5ec:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800d64c <_Setup_Event__cdr_serialize+0x8c>
 800d5f0:	e001      	b.n	800d5f6 <_Setup_Event__cdr_serialize+0x36>
 800d5f2:	42a7      	cmp	r7, r4
 800d5f4:	d00c      	beq.n	800d610 <_Setup_Event__cdr_serialize+0x50>
 800d5f6:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800d5fa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d5fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d600:	4631      	mov	r1, r6
 800d602:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800d606:	3401      	adds	r4, #1
 800d608:	689b      	ldr	r3, [r3, #8]
 800d60a:	4798      	blx	r3
 800d60c:	2800      	cmp	r0, #0
 800d60e:	d1f0      	bne.n	800d5f2 <_Setup_Event__cdr_serialize+0x32>
 800d610:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800d612:	4630      	mov	r0, r6
 800d614:	4639      	mov	r1, r7
 800d616:	f002 feeb 	bl	80103f0 <ucdr_serialize_uint32_t>
 800d61a:	4680      	mov	r8, r0
 800d61c:	b180      	cbz	r0, 800d640 <_Setup_Event__cdr_serialize+0x80>
 800d61e:	b18f      	cbz	r7, 800d644 <_Setup_Event__cdr_serialize+0x84>
 800d620:	2400      	movs	r4, #0
 800d622:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800d650 <_Setup_Event__cdr_serialize+0x90>
 800d626:	e001      	b.n	800d62c <_Setup_Event__cdr_serialize+0x6c>
 800d628:	42a7      	cmp	r7, r4
 800d62a:	d00b      	beq.n	800d644 <_Setup_Event__cdr_serialize+0x84>
 800d62c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800d62e:	4631      	mov	r1, r6
 800d630:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d634:	4420      	add	r0, r4
 800d636:	3401      	adds	r4, #1
 800d638:	689b      	ldr	r3, [r3, #8]
 800d63a:	4798      	blx	r3
 800d63c:	2800      	cmp	r0, #0
 800d63e:	d1f3      	bne.n	800d628 <_Setup_Event__cdr_serialize+0x68>
 800d640:	f04f 0800 	mov.w	r8, #0
 800d644:	4640      	mov	r0, r8
 800d646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d64a:	bf00      	nop
 800d64c:	20000ac8 	.word	0x20000ac8
 800d650:	20000ae0 	.word	0x20000ae0

0800d654 <_Setup_Response__get_serialized_size>:
 800d654:	b130      	cbz	r0, 800d664 <_Setup_Response__get_serialized_size+0x10>
 800d656:	2101      	movs	r1, #1
 800d658:	2000      	movs	r0, #0
 800d65a:	b508      	push	{r3, lr}
 800d65c:	f004 f946 	bl	80118ec <ucdr_alignment>
 800d660:	3001      	adds	r0, #1
 800d662:	bd08      	pop	{r3, pc}
 800d664:	4770      	bx	lr
 800d666:	bf00      	nop

0800d668 <max_serialized_size_racs_services__srv__Setup_Request>:
 800d668:	b570      	push	{r4, r5, r6, lr}
 800d66a:	460c      	mov	r4, r1
 800d66c:	2301      	movs	r3, #1
 800d66e:	1c65      	adds	r5, r4, #1
 800d670:	4619      	mov	r1, r3
 800d672:	7003      	strb	r3, [r0, #0]
 800d674:	4620      	mov	r0, r4
 800d676:	f004 f939 	bl	80118ec <ucdr_alignment>
 800d67a:	4405      	add	r5, r0
 800d67c:	2104      	movs	r1, #4
 800d67e:	f1c4 0404 	rsb	r4, r4, #4
 800d682:	4628      	mov	r0, r5
 800d684:	f004 f932 	bl	80118ec <ucdr_alignment>
 800d688:	2104      	movs	r1, #4
 800d68a:	1846      	adds	r6, r0, r1
 800d68c:	442e      	add	r6, r5
 800d68e:	4630      	mov	r0, r6
 800d690:	f004 f92c 	bl	80118ec <ucdr_alignment>
 800d694:	2104      	movs	r1, #4
 800d696:	1845      	adds	r5, r0, r1
 800d698:	442e      	add	r6, r5
 800d69a:	4630      	mov	r0, r6
 800d69c:	f004 f926 	bl	80118ec <ucdr_alignment>
 800d6a0:	2104      	movs	r1, #4
 800d6a2:	4408      	add	r0, r1
 800d6a4:	4406      	add	r6, r0
 800d6a6:	4630      	mov	r0, r6
 800d6a8:	f004 f920 	bl	80118ec <ucdr_alignment>
 800d6ac:	2104      	movs	r1, #4
 800d6ae:	1845      	adds	r5, r0, r1
 800d6b0:	4435      	add	r5, r6
 800d6b2:	4628      	mov	r0, r5
 800d6b4:	f004 f91a 	bl	80118ec <ucdr_alignment>
 800d6b8:	2104      	movs	r1, #4
 800d6ba:	4408      	add	r0, r1
 800d6bc:	4405      	add	r5, r0
 800d6be:	4628      	mov	r0, r5
 800d6c0:	f004 f914 	bl	80118ec <ucdr_alignment>
 800d6c4:	4420      	add	r0, r4
 800d6c6:	4428      	add	r0, r5
 800d6c8:	bd70      	pop	{r4, r5, r6, pc}
 800d6ca:	bf00      	nop

0800d6cc <_Setup_Request__max_serialized_size>:
 800d6cc:	b500      	push	{lr}
 800d6ce:	b083      	sub	sp, #12
 800d6d0:	2100      	movs	r1, #0
 800d6d2:	f10d 0007 	add.w	r0, sp, #7
 800d6d6:	f7ff ffc7 	bl	800d668 <max_serialized_size_racs_services__srv__Setup_Request>
 800d6da:	b003      	add	sp, #12
 800d6dc:	f85d fb04 	ldr.w	pc, [sp], #4

0800d6e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Event>:
 800d6e0:	4800      	ldr	r0, [pc, #0]	; (800d6e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x4>)
 800d6e2:	4770      	bx	lr
 800d6e4:	20000ab0 	.word	0x20000ab0

0800d6e8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800d6e8:	4800      	ldr	r0, [pc, #0]	; (800d6ec <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Setup+0x4>)
 800d6ea:	4770      	bx	lr
 800d6ec:	20000a84 	.word	0x20000a84

0800d6f0 <rcl_get_zero_initialized_publisher>:
 800d6f0:	4b01      	ldr	r3, [pc, #4]	; (800d6f8 <rcl_get_zero_initialized_publisher+0x8>)
 800d6f2:	6818      	ldr	r0, [r3, #0]
 800d6f4:	4770      	bx	lr
 800d6f6:	bf00      	nop
 800d6f8:	0801f688 	.word	0x0801f688

0800d6fc <rcl_publisher_init>:
 800d6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d700:	b088      	sub	sp, #32
 800d702:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800d704:	2e00      	cmp	r6, #0
 800d706:	d06c      	beq.n	800d7e2 <rcl_publisher_init+0xe6>
 800d708:	f106 0a50 	add.w	sl, r6, #80	; 0x50
 800d70c:	4605      	mov	r5, r0
 800d70e:	460f      	mov	r7, r1
 800d710:	4690      	mov	r8, r2
 800d712:	4650      	mov	r0, sl
 800d714:	4699      	mov	r9, r3
 800d716:	f001 f96b 	bl	800e9f0 <rcutils_allocator_is_valid>
 800d71a:	f080 0401 	eor.w	r4, r0, #1
 800d71e:	b2e4      	uxtb	r4, r4
 800d720:	2c00      	cmp	r4, #0
 800d722:	d15e      	bne.n	800d7e2 <rcl_publisher_init+0xe6>
 800d724:	2d00      	cmp	r5, #0
 800d726:	d05c      	beq.n	800d7e2 <rcl_publisher_init+0xe6>
 800d728:	682b      	ldr	r3, [r5, #0]
 800d72a:	b123      	cbz	r3, 800d736 <rcl_publisher_init+0x3a>
 800d72c:	2464      	movs	r4, #100	; 0x64
 800d72e:	4620      	mov	r0, r4
 800d730:	b008      	add	sp, #32
 800d732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d736:	4638      	mov	r0, r7
 800d738:	f008 fc32 	bl	8015fa0 <rcl_node_is_valid>
 800d73c:	2800      	cmp	r0, #0
 800d73e:	d055      	beq.n	800d7ec <rcl_publisher_init+0xf0>
 800d740:	f1b8 0f00 	cmp.w	r8, #0
 800d744:	d04d      	beq.n	800d7e2 <rcl_publisher_init+0xe6>
 800d746:	fab9 f389 	clz	r3, r9
 800d74a:	095b      	lsrs	r3, r3, #5
 800d74c:	f1b9 0f00 	cmp.w	r9, #0
 800d750:	d047      	beq.n	800d7e2 <rcl_publisher_init+0xe6>
 800d752:	aa07      	add	r2, sp, #28
 800d754:	9307      	str	r3, [sp, #28]
 800d756:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800d75a:	f106 0358 	add.w	r3, r6, #88	; 0x58
 800d75e:	9205      	str	r2, [sp, #20]
 800d760:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d764:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d768:	4649      	mov	r1, r9
 800d76a:	4638      	mov	r0, r7
 800d76c:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800d770:	f008 fc8e 	bl	8016090 <rcl_node_resolve_name>
 800d774:	2800      	cmp	r0, #0
 800d776:	d150      	bne.n	800d81a <rcl_publisher_init+0x11e>
 800d778:	21c8      	movs	r1, #200	; 0xc8
 800d77a:	2001      	movs	r0, #1
 800d77c:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	; 0x5c
 800d780:	4798      	blx	r3
 800d782:	6028      	str	r0, [r5, #0]
 800d784:	2800      	cmp	r0, #0
 800d786:	d050      	beq.n	800d82a <rcl_publisher_init+0x12e>
 800d788:	4638      	mov	r0, r7
 800d78a:	f008 fc2b 	bl	8015fe4 <rcl_node_get_rmw_handle>
 800d78e:	f106 0364 	add.w	r3, r6, #100	; 0x64
 800d792:	4641      	mov	r1, r8
 800d794:	9a07      	ldr	r2, [sp, #28]
 800d796:	9300      	str	r3, [sp, #0]
 800d798:	4633      	mov	r3, r6
 800d79a:	682c      	ldr	r4, [r5, #0]
 800d79c:	f001 fa36 	bl	800ec0c <rmw_create_publisher>
 800d7a0:	682b      	ldr	r3, [r5, #0]
 800d7a2:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 800d7a6:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800d7aa:	b370      	cbz	r0, 800d80a <rcl_publisher_init+0x10e>
 800d7ac:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800d7b0:	f001 fb10 	bl	800edd4 <rmw_publisher_get_actual_qos>
 800d7b4:	682b      	ldr	r3, [r5, #0]
 800d7b6:	4604      	mov	r4, r0
 800d7b8:	b9d0      	cbnz	r0, 800d7f0 <rcl_publisher_init+0xf4>
 800d7ba:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
 800d7be:	4631      	mov	r1, r6
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800d7c6:	2270      	movs	r2, #112	; 0x70
 800d7c8:	f010 f959 	bl	801da7e <memcpy>
 800d7cc:	683a      	ldr	r2, [r7, #0]
 800d7ce:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800d7d2:	9807      	ldr	r0, [sp, #28]
 800d7d4:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800d7d6:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800d7d8:	4798      	blx	r3
 800d7da:	4620      	mov	r0, r4
 800d7dc:	b008      	add	sp, #32
 800d7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7e2:	240b      	movs	r4, #11
 800d7e4:	4620      	mov	r0, r4
 800d7e6:	b008      	add	sp, #32
 800d7e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7ec:	24c8      	movs	r4, #200	; 0xc8
 800d7ee:	e79e      	b.n	800d72e <rcl_publisher_init+0x32>
 800d7f0:	b1cb      	cbz	r3, 800d826 <rcl_publisher_init+0x12a>
 800d7f2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800d7f6:	b142      	cbz	r2, 800d80a <rcl_publisher_init+0x10e>
 800d7f8:	4638      	mov	r0, r7
 800d7fa:	f008 fbf3 	bl	8015fe4 <rcl_node_get_rmw_handle>
 800d7fe:	682b      	ldr	r3, [r5, #0]
 800d800:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800d804:	f001 fafa 	bl	800edfc <rmw_destroy_publisher>
 800d808:	682b      	ldr	r3, [r5, #0]
 800d80a:	4618      	mov	r0, r3
 800d80c:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800d80e:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800d810:	2401      	movs	r4, #1
 800d812:	4790      	blx	r2
 800d814:	2300      	movs	r3, #0
 800d816:	602b      	str	r3, [r5, #0]
 800d818:	e7db      	b.n	800d7d2 <rcl_publisher_init+0xd6>
 800d81a:	2867      	cmp	r0, #103	; 0x67
 800d81c:	d007      	beq.n	800d82e <rcl_publisher_init+0x132>
 800d81e:	2869      	cmp	r0, #105	; 0x69
 800d820:	d005      	beq.n	800d82e <rcl_publisher_init+0x132>
 800d822:	280a      	cmp	r0, #10
 800d824:	d001      	beq.n	800d82a <rcl_publisher_init+0x12e>
 800d826:	2401      	movs	r4, #1
 800d828:	e7d3      	b.n	800d7d2 <rcl_publisher_init+0xd6>
 800d82a:	240a      	movs	r4, #10
 800d82c:	e7d1      	b.n	800d7d2 <rcl_publisher_init+0xd6>
 800d82e:	2467      	movs	r4, #103	; 0x67
 800d830:	e7cf      	b.n	800d7d2 <rcl_publisher_init+0xd6>
 800d832:	bf00      	nop

0800d834 <rcl_publisher_get_default_options>:
 800d834:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d836:	4d1d      	ldr	r5, [pc, #116]	; (800d8ac <rcl_publisher_get_default_options+0x78>)
 800d838:	b08b      	sub	sp, #44	; 0x2c
 800d83a:	2250      	movs	r2, #80	; 0x50
 800d83c:	491c      	ldr	r1, [pc, #112]	; (800d8b0 <rcl_publisher_get_default_options+0x7c>)
 800d83e:	4604      	mov	r4, r0
 800d840:	4628      	mov	r0, r5
 800d842:	f010 f91c 	bl	801da7e <memcpy>
 800d846:	a802      	add	r0, sp, #8
 800d848:	f001 f8c4 	bl	800e9d4 <rcutils_get_default_allocator>
 800d84c:	f10d 0c08 	add.w	ip, sp, #8
 800d850:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800d854:	466e      	mov	r6, sp
 800d856:	2700      	movs	r7, #0
 800d858:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d85c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d860:	f8dc 3000 	ldr.w	r3, [ip]
 800d864:	4630      	mov	r0, r6
 800d866:	f8ce 3000 	str.w	r3, [lr]
 800d86a:	f001 f951 	bl	800eb10 <rmw_get_default_publisher_options>
 800d86e:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800d872:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 800d876:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d87a:	e883 0003 	stmia.w	r3, {r0, r1}
 800d87e:	f10d 0027 	add.w	r0, sp, #39	; 0x27
 800d882:	f008 fbb5 	bl	8015ff0 <rcl_get_disable_loaned_message>
 800d886:	b958      	cbnz	r0, 800d8a0 <rcl_publisher_get_default_options+0x6c>
 800d888:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800d88c:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
 800d890:	2270      	movs	r2, #112	; 0x70
 800d892:	4906      	ldr	r1, [pc, #24]	; (800d8ac <rcl_publisher_get_default_options+0x78>)
 800d894:	4620      	mov	r0, r4
 800d896:	f010 f8f2 	bl	801da7e <memcpy>
 800d89a:	4620      	mov	r0, r4
 800d89c:	b00b      	add	sp, #44	; 0x2c
 800d89e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8a0:	f001 f8ca 	bl	800ea38 <rcutils_reset_error>
 800d8a4:	f885 706c 	strb.w	r7, [r5, #108]	; 0x6c
 800d8a8:	e7f2      	b.n	800d890 <rcl_publisher_get_default_options+0x5c>
 800d8aa:	bf00      	nop
 800d8ac:	2000bbb0 	.word	0x2000bbb0
 800d8b0:	0801f690 	.word	0x0801f690

0800d8b4 <rcl_publish>:
 800d8b4:	b1f8      	cbz	r0, 800d8f6 <rcl_publish+0x42>
 800d8b6:	6803      	ldr	r3, [r0, #0]
 800d8b8:	b570      	push	{r4, r5, r6, lr}
 800d8ba:	4604      	mov	r4, r0
 800d8bc:	b1b3      	cbz	r3, 800d8ec <rcl_publish+0x38>
 800d8be:	4616      	mov	r6, r2
 800d8c0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800d8c4:	b192      	cbz	r2, 800d8ec <rcl_publish+0x38>
 800d8c6:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800d8ca:	460d      	mov	r5, r1
 800d8cc:	f007 ff6c 	bl	80157a8 <rcl_context_is_valid>
 800d8d0:	b160      	cbz	r0, 800d8ec <rcl_publish+0x38>
 800d8d2:	6823      	ldr	r3, [r4, #0]
 800d8d4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800d8d8:	b140      	cbz	r0, 800d8ec <rcl_publish+0x38>
 800d8da:	b155      	cbz	r5, 800d8f2 <rcl_publish+0x3e>
 800d8dc:	4632      	mov	r2, r6
 800d8de:	4629      	mov	r1, r5
 800d8e0:	f001 f934 	bl	800eb4c <rmw_publish>
 800d8e4:	3800      	subs	r0, #0
 800d8e6:	bf18      	it	ne
 800d8e8:	2001      	movne	r0, #1
 800d8ea:	bd70      	pop	{r4, r5, r6, pc}
 800d8ec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800d8f0:	bd70      	pop	{r4, r5, r6, pc}
 800d8f2:	200b      	movs	r0, #11
 800d8f4:	bd70      	pop	{r4, r5, r6, pc}
 800d8f6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800d8fa:	4770      	bx	lr

0800d8fc <rcl_publisher_is_valid>:
 800d8fc:	b1a0      	cbz	r0, 800d928 <rcl_publisher_is_valid+0x2c>
 800d8fe:	6803      	ldr	r3, [r0, #0]
 800d900:	b510      	push	{r4, lr}
 800d902:	4604      	mov	r4, r0
 800d904:	b173      	cbz	r3, 800d924 <rcl_publisher_is_valid+0x28>
 800d906:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800d90a:	b15a      	cbz	r2, 800d924 <rcl_publisher_is_valid+0x28>
 800d90c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800d910:	f007 ff4a 	bl	80157a8 <rcl_context_is_valid>
 800d914:	b130      	cbz	r0, 800d924 <rcl_publisher_is_valid+0x28>
 800d916:	6823      	ldr	r3, [r4, #0]
 800d918:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800d91c:	3800      	subs	r0, #0
 800d91e:	bf18      	it	ne
 800d920:	2001      	movne	r0, #1
 800d922:	bd10      	pop	{r4, pc}
 800d924:	2000      	movs	r0, #0
 800d926:	bd10      	pop	{r4, pc}
 800d928:	2000      	movs	r0, #0
 800d92a:	4770      	bx	lr

0800d92c <rcl_publisher_is_valid_except_context>:
 800d92c:	b130      	cbz	r0, 800d93c <rcl_publisher_is_valid_except_context+0x10>
 800d92e:	6800      	ldr	r0, [r0, #0]
 800d930:	b120      	cbz	r0, 800d93c <rcl_publisher_is_valid_except_context+0x10>
 800d932:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 800d936:	3800      	subs	r0, #0
 800d938:	bf18      	it	ne
 800d93a:	2001      	movne	r0, #1
 800d93c:	4770      	bx	lr
 800d93e:	bf00      	nop

0800d940 <_rclc_check_for_new_data>:
 800d940:	2800      	cmp	r0, #0
 800d942:	d046      	beq.n	800d9d2 <_rclc_check_for_new_data+0x92>
 800d944:	4603      	mov	r3, r0
 800d946:	b530      	push	{r4, r5, lr}
 800d948:	7802      	ldrb	r2, [r0, #0]
 800d94a:	b085      	sub	sp, #20
 800d94c:	2a0a      	cmp	r2, #10
 800d94e:	d842      	bhi.n	800d9d6 <_rclc_check_for_new_data+0x96>
 800d950:	e8df f002 	tbb	[pc, r2]
 800d954:	14181212 	.word	0x14181212
 800d958:	06060614 	.word	0x06060614
 800d95c:	2e1a      	.short	0x2e1a
 800d95e:	16          	.byte	0x16
 800d95f:	00          	.byte	0x00
 800d960:	6a0a      	ldr	r2, [r1, #32]
 800d962:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d964:	2000      	movs	r0, #0
 800d966:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d96a:	1a12      	subs	r2, r2, r0
 800d96c:	bf18      	it	ne
 800d96e:	2201      	movne	r2, #1
 800d970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800d974:	b005      	add	sp, #20
 800d976:	bd30      	pop	{r4, r5, pc}
 800d978:	680a      	ldr	r2, [r1, #0]
 800d97a:	e7f2      	b.n	800d962 <_rclc_check_for_new_data+0x22>
 800d97c:	698a      	ldr	r2, [r1, #24]
 800d97e:	e7f0      	b.n	800d962 <_rclc_check_for_new_data+0x22>
 800d980:	688a      	ldr	r2, [r1, #8]
 800d982:	e7ee      	b.n	800d962 <_rclc_check_for_new_data+0x22>
 800d984:	690a      	ldr	r2, [r1, #16]
 800d986:	e7ec      	b.n	800d962 <_rclc_check_for_new_data+0x22>
 800d988:	685c      	ldr	r4, [r3, #4]
 800d98a:	4608      	mov	r0, r1
 800d98c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d990:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d998:	f104 0110 	add.w	r1, r4, #16
 800d99c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d9a0:	9500      	str	r5, [sp, #0]
 800d9a2:	f104 0341 	add.w	r3, r4, #65	; 0x41
 800d9a6:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800d9aa:	f00a fc4d 	bl	8018248 <rcl_action_client_wait_set_get_entities_ready>
 800d9ae:	e7e1      	b.n	800d974 <_rclc_check_for_new_data+0x34>
 800d9b0:	685c      	ldr	r4, [r3, #4]
 800d9b2:	4608      	mov	r0, r1
 800d9b4:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800d9b8:	f104 0123 	add.w	r1, r4, #35	; 0x23
 800d9bc:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800d9c0:	e9cd 2100 	strd	r2, r1, [sp]
 800d9c4:	f104 0220 	add.w	r2, r4, #32
 800d9c8:	f104 0110 	add.w	r1, r4, #16
 800d9cc:	f00a fe54 	bl	8018678 <rcl_action_server_wait_set_get_entities_ready>
 800d9d0:	e7d0      	b.n	800d974 <_rclc_check_for_new_data+0x34>
 800d9d2:	200b      	movs	r0, #11
 800d9d4:	4770      	bx	lr
 800d9d6:	2001      	movs	r0, #1
 800d9d8:	e7cc      	b.n	800d974 <_rclc_check_for_new_data+0x34>
 800d9da:	bf00      	nop

0800d9dc <_rclc_take_new_data>:
 800d9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9de:	b099      	sub	sp, #100	; 0x64
 800d9e0:	2800      	cmp	r0, #0
 800d9e2:	f000 8088 	beq.w	800daf6 <_rclc_take_new_data+0x11a>
 800d9e6:	7803      	ldrb	r3, [r0, #0]
 800d9e8:	4604      	mov	r4, r0
 800d9ea:	2b0a      	cmp	r3, #10
 800d9ec:	f200 8167 	bhi.w	800dcbe <_rclc_take_new_data+0x2e2>
 800d9f0:	e8df f003 	tbb	[pc, r3]
 800d9f4:	44152d2d 	.word	0x44152d2d
 800d9f8:	19191944 	.word	0x19191944
 800d9fc:	065a      	.short	0x065a
 800d9fe:	15          	.byte	0x15
 800d9ff:	00          	.byte	0x00
 800da00:	6840      	ldr	r0, [r0, #4]
 800da02:	f890 3020 	ldrb.w	r3, [r0, #32]
 800da06:	2b00      	cmp	r3, #0
 800da08:	f040 80b2 	bne.w	800db70 <_rclc_take_new_data+0x194>
 800da0c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800da10:	2b00      	cmp	r3, #0
 800da12:	f040 80e4 	bne.w	800dbde <_rclc_take_new_data+0x202>
 800da16:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d16f      	bne.n	800dafe <_rclc_take_new_data+0x122>
 800da1e:	2500      	movs	r5, #0
 800da20:	4628      	mov	r0, r5
 800da22:	b019      	add	sp, #100	; 0x64
 800da24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da26:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800da28:	6a0b      	ldr	r3, [r1, #32]
 800da2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d0f5      	beq.n	800da1e <_rclc_take_new_data+0x42>
 800da32:	6882      	ldr	r2, [r0, #8]
 800da34:	f100 0110 	add.w	r1, r0, #16
 800da38:	6840      	ldr	r0, [r0, #4]
 800da3a:	f008 fdd5 	bl	80165e8 <rcl_take_request>
 800da3e:	4605      	mov	r5, r0
 800da40:	2800      	cmp	r0, #0
 800da42:	d0ec      	beq.n	800da1e <_rclc_take_new_data+0x42>
 800da44:	f240 2359 	movw	r3, #601	; 0x259
 800da48:	4298      	cmp	r0, r3
 800da4a:	d013      	beq.n	800da74 <_rclc_take_new_data+0x98>
 800da4c:	e029      	b.n	800daa2 <_rclc_take_new_data+0xc6>
 800da4e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800da50:	680b      	ldr	r3, [r1, #0]
 800da52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d0e1      	beq.n	800da1e <_rclc_take_new_data+0x42>
 800da5a:	2300      	movs	r3, #0
 800da5c:	aa0a      	add	r2, sp, #40	; 0x28
 800da5e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800da62:	f008 ffcf 	bl	8016a04 <rcl_take>
 800da66:	4605      	mov	r5, r0
 800da68:	2800      	cmp	r0, #0
 800da6a:	d0d9      	beq.n	800da20 <_rclc_take_new_data+0x44>
 800da6c:	f240 1391 	movw	r3, #401	; 0x191
 800da70:	4298      	cmp	r0, r3
 800da72:	d116      	bne.n	800daa2 <_rclc_take_new_data+0xc6>
 800da74:	2300      	movs	r3, #0
 800da76:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800da7a:	e7d1      	b.n	800da20 <_rclc_take_new_data+0x44>
 800da7c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800da7e:	698b      	ldr	r3, [r1, #24]
 800da80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d0ca      	beq.n	800da1e <_rclc_take_new_data+0x42>
 800da88:	6882      	ldr	r2, [r0, #8]
 800da8a:	f100 0110 	add.w	r1, r0, #16
 800da8e:	6840      	ldr	r0, [r0, #4]
 800da90:	f007 fdfa 	bl	8015688 <rcl_take_response>
 800da94:	4605      	mov	r5, r0
 800da96:	2800      	cmp	r0, #0
 800da98:	d0c1      	beq.n	800da1e <_rclc_take_new_data+0x42>
 800da9a:	f240 13f5 	movw	r3, #501	; 0x1f5
 800da9e:	4298      	cmp	r0, r3
 800daa0:	d0be      	beq.n	800da20 <_rclc_take_new_data+0x44>
 800daa2:	f000 ffc9 	bl	800ea38 <rcutils_reset_error>
 800daa6:	e7bb      	b.n	800da20 <_rclc_take_new_data+0x44>
 800daa8:	6840      	ldr	r0, [r0, #4]
 800daaa:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d17d      	bne.n	800dbae <_rclc_take_new_data+0x1d2>
 800dab2:	69c3      	ldr	r3, [r0, #28]
 800dab4:	b11b      	cbz	r3, 800dabe <_rclc_take_new_data+0xe2>
 800dab6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d144      	bne.n	800db48 <_rclc_take_new_data+0x16c>
 800dabe:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	f040 80ac 	bne.w	800dc20 <_rclc_take_new_data+0x244>
 800dac8:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d0a6      	beq.n	800da1e <_rclc_take_new_data+0x42>
 800dad0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800dad2:	a90a      	add	r1, sp, #40	; 0x28
 800dad4:	3010      	adds	r0, #16
 800dad6:	f00a fa8f 	bl	8017ff8 <rcl_action_take_result_response>
 800dada:	4605      	mov	r5, r0
 800dadc:	2800      	cmp	r0, #0
 800dade:	d1e0      	bne.n	800daa2 <_rclc_take_new_data+0xc6>
 800dae0:	6860      	ldr	r0, [r4, #4]
 800dae2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800dae6:	f00a fef7 	bl	80188d8 <rclc_action_find_handle_by_result_request_sequence_number>
 800daea:	2800      	cmp	r0, #0
 800daec:	d098      	beq.n	800da20 <_rclc_take_new_data+0x44>
 800daee:	2301      	movs	r3, #1
 800daf0:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 800daf4:	e794      	b.n	800da20 <_rclc_take_new_data+0x44>
 800daf6:	250b      	movs	r5, #11
 800daf8:	4628      	mov	r0, r5
 800dafa:	b019      	add	sp, #100	; 0x64
 800dafc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dafe:	ae04      	add	r6, sp, #16
 800db00:	3010      	adds	r0, #16
 800db02:	aa0a      	add	r2, sp, #40	; 0x28
 800db04:	4631      	mov	r1, r6
 800db06:	f00a fceb 	bl	80184e0 <rcl_action_take_cancel_request>
 800db0a:	4605      	mov	r5, r0
 800db0c:	2800      	cmp	r0, #0
 800db0e:	d1c8      	bne.n	800daa2 <_rclc_take_new_data+0xc6>
 800db10:	a90a      	add	r1, sp, #40	; 0x28
 800db12:	6860      	ldr	r0, [r4, #4]
 800db14:	f00a fea0 	bl	8018858 <rclc_action_find_goal_handle_by_uuid>
 800db18:	4607      	mov	r7, r0
 800db1a:	2800      	cmp	r0, #0
 800db1c:	f000 80bb 	beq.w	800dc96 <_rclc_take_new_data+0x2ba>
 800db20:	2101      	movs	r1, #1
 800db22:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800db26:	f00a fe21 	bl	801876c <rcl_action_transition_goal_state>
 800db2a:	2803      	cmp	r0, #3
 800db2c:	4684      	mov	ip, r0
 800db2e:	f040 80a7 	bne.w	800dc80 <_rclc_take_new_data+0x2a4>
 800db32:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800db36:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800db38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db3a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800db3e:	e884 0003 	stmia.w	r4, {r0, r1}
 800db42:	f887 c008 	strb.w	ip, [r7, #8]
 800db46:	e76b      	b.n	800da20 <_rclc_take_new_data+0x44>
 800db48:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800db4a:	3010      	adds	r0, #16
 800db4c:	f00a fad4 	bl	80180f8 <rcl_action_take_feedback>
 800db50:	4605      	mov	r5, r0
 800db52:	2800      	cmp	r0, #0
 800db54:	d1a5      	bne.n	800daa2 <_rclc_take_new_data+0xc6>
 800db56:	6860      	ldr	r0, [r4, #4]
 800db58:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800db5a:	f00a fe7d 	bl	8018858 <rclc_action_find_goal_handle_by_uuid>
 800db5e:	4603      	mov	r3, r0
 800db60:	2800      	cmp	r0, #0
 800db62:	f000 80a3 	beq.w	800dcac <_rclc_take_new_data+0x2d0>
 800db66:	2201      	movs	r2, #1
 800db68:	6860      	ldr	r0, [r4, #4]
 800db6a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800db6e:	e7a6      	b.n	800dabe <_rclc_take_new_data+0xe2>
 800db70:	f00a fe4c 	bl	801880c <rclc_action_take_goal_handle>
 800db74:	4606      	mov	r6, r0
 800db76:	6860      	ldr	r0, [r4, #4]
 800db78:	2e00      	cmp	r6, #0
 800db7a:	f43f af47 	beq.w	800da0c <_rclc_take_new_data+0x30>
 800db7e:	6070      	str	r0, [r6, #4]
 800db80:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800db84:	69f2      	ldr	r2, [r6, #28]
 800db86:	3010      	adds	r0, #16
 800db88:	f00a fbf4 	bl	8018374 <rcl_action_take_goal_request>
 800db8c:	4605      	mov	r5, r0
 800db8e:	2800      	cmp	r0, #0
 800db90:	f040 808e 	bne.w	800dcb0 <_rclc_take_new_data+0x2d4>
 800db94:	69f7      	ldr	r7, [r6, #28]
 800db96:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800db98:	7235      	strb	r5, [r6, #8]
 800db9a:	f8c6 0009 	str.w	r0, [r6, #9]
 800db9e:	f8c6 100d 	str.w	r1, [r6, #13]
 800dba2:	6860      	ldr	r0, [r4, #4]
 800dba4:	f8c6 2011 	str.w	r2, [r6, #17]
 800dba8:	f8c6 3015 	str.w	r3, [r6, #21]
 800dbac:	e72e      	b.n	800da0c <_rclc_take_new_data+0x30>
 800dbae:	aa04      	add	r2, sp, #16
 800dbb0:	a90a      	add	r1, sp, #40	; 0x28
 800dbb2:	3010      	adds	r0, #16
 800dbb4:	f00a f9a8 	bl	8017f08 <rcl_action_take_goal_response>
 800dbb8:	4605      	mov	r5, r0
 800dbba:	2800      	cmp	r0, #0
 800dbbc:	f47f af71 	bne.w	800daa2 <_rclc_take_new_data+0xc6>
 800dbc0:	6860      	ldr	r0, [r4, #4]
 800dbc2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800dbc6:	f00a fe75 	bl	80188b4 <rclc_action_find_handle_by_goal_request_sequence_number>
 800dbca:	b130      	cbz	r0, 800dbda <_rclc_take_new_data+0x1fe>
 800dbcc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800dbd0:	2201      	movs	r2, #1
 800dbd2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800dbd6:	f880 2020 	strb.w	r2, [r0, #32]
 800dbda:	6860      	ldr	r0, [r4, #4]
 800dbdc:	e769      	b.n	800dab2 <_rclc_take_new_data+0xd6>
 800dbde:	3010      	adds	r0, #16
 800dbe0:	aa04      	add	r2, sp, #16
 800dbe2:	a90a      	add	r1, sp, #40	; 0x28
 800dbe4:	f00a fc3c 	bl	8018460 <rcl_action_take_result_request>
 800dbe8:	4605      	mov	r5, r0
 800dbea:	2800      	cmp	r0, #0
 800dbec:	f47f af59 	bne.w	800daa2 <_rclc_take_new_data+0xc6>
 800dbf0:	a904      	add	r1, sp, #16
 800dbf2:	6860      	ldr	r0, [r4, #4]
 800dbf4:	f00a fe30 	bl	8018858 <rclc_action_find_goal_handle_by_uuid>
 800dbf8:	4607      	mov	r7, r0
 800dbfa:	b160      	cbz	r0, 800dc16 <_rclc_take_new_data+0x23a>
 800dbfc:	ad0a      	add	r5, sp, #40	; 0x28
 800dbfe:	f100 0640 	add.w	r6, r0, #64	; 0x40
 800dc02:	f04f 0c02 	mov.w	ip, #2
 800dc06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc08:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800dc0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dc0e:	e886 0003 	stmia.w	r6, {r0, r1}
 800dc12:	f887 c008 	strb.w	ip, [r7, #8]
 800dc16:	6860      	ldr	r0, [r4, #4]
 800dc18:	2300      	movs	r3, #0
 800dc1a:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 800dc1e:	e6fa      	b.n	800da16 <_rclc_take_new_data+0x3a>
 800dc20:	f100 0230 	add.w	r2, r0, #48	; 0x30
 800dc24:	a90a      	add	r1, sp, #40	; 0x28
 800dc26:	3010      	adds	r0, #16
 800dc28:	f00a fa26 	bl	8018078 <rcl_action_take_cancel_response>
 800dc2c:	4605      	mov	r5, r0
 800dc2e:	2800      	cmp	r0, #0
 800dc30:	f47f af37 	bne.w	800daa2 <_rclc_take_new_data+0xc6>
 800dc34:	6860      	ldr	r0, [r4, #4]
 800dc36:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800dc3a:	f00a fe5f 	bl	80188fc <rclc_action_find_handle_by_cancel_request_sequence_number>
 800dc3e:	4606      	mov	r6, r0
 800dc40:	6860      	ldr	r0, [r4, #4]
 800dc42:	2e00      	cmp	r6, #0
 800dc44:	f43f af40 	beq.w	800dac8 <_rclc_take_new_data+0xec>
 800dc48:	2701      	movs	r7, #1
 800dc4a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800dc4c:	84b7      	strh	r7, [r6, #36]	; 0x24
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	f43f af3a 	beq.w	800dac8 <_rclc_take_new_data+0xec>
 800dc54:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dc56:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800dc5a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800dc5e:	f00a fdfb 	bl	8018858 <rclc_action_find_goal_handle_by_uuid>
 800dc62:	b138      	cbz	r0, 800dc74 <_rclc_take_new_data+0x298>
 800dc64:	6860      	ldr	r0, [r4, #4]
 800dc66:	3501      	adds	r5, #1
 800dc68:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 800dc6c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800dc6e:	42ab      	cmp	r3, r5
 800dc70:	d8f0      	bhi.n	800dc54 <_rclc_take_new_data+0x278>
 800dc72:	e729      	b.n	800dac8 <_rclc_take_new_data+0xec>
 800dc74:	6860      	ldr	r0, [r4, #4]
 800dc76:	3501      	adds	r5, #1
 800dc78:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800dc7a:	42ab      	cmp	r3, r5
 800dc7c:	d8ea      	bhi.n	800dc54 <_rclc_take_new_data+0x278>
 800dc7e:	e723      	b.n	800dac8 <_rclc_take_new_data+0xec>
 800dc80:	ab06      	add	r3, sp, #24
 800dc82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc84:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800dc88:	2103      	movs	r1, #3
 800dc8a:	6860      	ldr	r0, [r4, #4]
 800dc8c:	e896 000c 	ldmia.w	r6, {r2, r3}
 800dc90:	f00a feaa 	bl	80189e8 <rclc_action_server_goal_cancel_reject>
 800dc94:	e6c4      	b.n	800da20 <_rclc_take_new_data+0x44>
 800dc96:	ab06      	add	r3, sp, #24
 800dc98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc9a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800dc9e:	2102      	movs	r1, #2
 800dca0:	6860      	ldr	r0, [r4, #4]
 800dca2:	e896 000c 	ldmia.w	r6, {r2, r3}
 800dca6:	f00a fe9f 	bl	80189e8 <rclc_action_server_goal_cancel_reject>
 800dcaa:	e6b9      	b.n	800da20 <_rclc_take_new_data+0x44>
 800dcac:	6860      	ldr	r0, [r4, #4]
 800dcae:	e706      	b.n	800dabe <_rclc_take_new_data+0xe2>
 800dcb0:	4631      	mov	r1, r6
 800dcb2:	6860      	ldr	r0, [r4, #4]
 800dcb4:	f00a fdba 	bl	801882c <rclc_action_remove_used_goal_handle>
 800dcb8:	f000 febe 	bl	800ea38 <rcutils_reset_error>
 800dcbc:	e6b0      	b.n	800da20 <_rclc_take_new_data+0x44>
 800dcbe:	2501      	movs	r5, #1
 800dcc0:	e6ae      	b.n	800da20 <_rclc_take_new_data+0x44>
 800dcc2:	bf00      	nop

0800dcc4 <_rclc_execute.part.0>:
 800dcc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcc6:	7803      	ldrb	r3, [r0, #0]
 800dcc8:	b085      	sub	sp, #20
 800dcca:	4604      	mov	r4, r0
 800dccc:	2b0a      	cmp	r3, #10
 800dcce:	f200 8139 	bhi.w	800df44 <_rclc_execute.part.0+0x280>
 800dcd2:	e8df f003 	tbb	[pc, r3]
 800dcd6:	4268      	.short	0x4268
 800dcd8:	06a75b4d 	.word	0x06a75b4d
 800dcdc:	721d0606 	.word	0x721d0606
 800dce0:	62          	.byte	0x62
 800dce1:	00          	.byte	0x00
 800dce2:	2b06      	cmp	r3, #6
 800dce4:	f000 8126 	beq.w	800df34 <_rclc_execute.part.0+0x270>
 800dce8:	2b07      	cmp	r3, #7
 800dcea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800dcec:	f040 811c 	bne.w	800df28 <_rclc_execute.part.0+0x264>
 800dcf0:	f104 0510 	add.w	r5, r4, #16
 800dcf4:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800dcf8:	6880      	ldr	r0, [r0, #8]
 800dcfa:	4798      	blx	r3
 800dcfc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800dcfe:	4629      	mov	r1, r5
 800dd00:	6860      	ldr	r0, [r4, #4]
 800dd02:	f008 fcc1 	bl	8016688 <rcl_send_response>
 800dd06:	4604      	mov	r4, r0
 800dd08:	b378      	cbz	r0, 800dd6a <_rclc_execute.part.0+0xa6>
 800dd0a:	f000 fe95 	bl	800ea38 <rcutils_reset_error>
 800dd0e:	e02c      	b.n	800dd6a <_rclc_execute.part.0+0xa6>
 800dd10:	6840      	ldr	r0, [r0, #4]
 800dd12:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	f000 808e 	beq.w	800de38 <_rclc_execute.part.0+0x174>
 800dd1c:	2600      	movs	r6, #0
 800dd1e:	2701      	movs	r7, #1
 800dd20:	e004      	b.n	800dd2c <_rclc_execute.part.0+0x68>
 800dd22:	f00a fd4d 	bl	80187c0 <rclc_action_send_result_request>
 800dd26:	b998      	cbnz	r0, 800dd50 <_rclc_execute.part.0+0x8c>
 800dd28:	722f      	strb	r7, [r5, #8]
 800dd2a:	6860      	ldr	r0, [r4, #4]
 800dd2c:	f00a fdf8 	bl	8018920 <rclc_action_find_first_handle_with_goal_response>
 800dd30:	4605      	mov	r5, r0
 800dd32:	2800      	cmp	r0, #0
 800dd34:	d07f      	beq.n	800de36 <_rclc_execute.part.0+0x172>
 800dd36:	6863      	ldr	r3, [r4, #4]
 800dd38:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800dd3a:	699b      	ldr	r3, [r3, #24]
 800dd3c:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 800dd40:	f885 6020 	strb.w	r6, [r5, #32]
 800dd44:	4798      	blx	r3
 800dd46:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800dd4a:	4628      	mov	r0, r5
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d1e8      	bne.n	800dd22 <_rclc_execute.part.0+0x5e>
 800dd50:	6860      	ldr	r0, [r4, #4]
 800dd52:	4629      	mov	r1, r5
 800dd54:	f00a fd6a 	bl	801882c <rclc_action_remove_used_goal_handle>
 800dd58:	e7e7      	b.n	800dd2a <_rclc_execute.part.0+0x66>
 800dd5a:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800dd5e:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 800dd62:	b100      	cbz	r0, 800dd66 <_rclc_execute.part.0+0xa2>
 800dd64:	68a0      	ldr	r0, [r4, #8]
 800dd66:	2400      	movs	r4, #0
 800dd68:	4798      	blx	r3
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	b005      	add	sp, #20
 800dd6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd70:	6840      	ldr	r0, [r0, #4]
 800dd72:	f009 f981 	bl	8017078 <rcl_timer_call>
 800dd76:	f240 3321 	movw	r3, #801	; 0x321
 800dd7a:	4604      	mov	r4, r0
 800dd7c:	4298      	cmp	r0, r3
 800dd7e:	d001      	beq.n	800dd84 <_rclc_execute.part.0+0xc0>
 800dd80:	2800      	cmp	r0, #0
 800dd82:	d1c2      	bne.n	800dd0a <_rclc_execute.part.0+0x46>
 800dd84:	2400      	movs	r4, #0
 800dd86:	4620      	mov	r0, r4
 800dd88:	b005      	add	sp, #20
 800dd8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd8c:	2400      	movs	r4, #0
 800dd8e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800dd90:	6880      	ldr	r0, [r0, #8]
 800dd92:	4798      	blx	r3
 800dd94:	4620      	mov	r0, r4
 800dd96:	b005      	add	sp, #20
 800dd98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd9a:	2400      	movs	r4, #0
 800dd9c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800dd9e:	4798      	blx	r3
 800dda0:	4620      	mov	r0, r4
 800dda2:	b005      	add	sp, #20
 800dda4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dda6:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800ddaa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ddac:	b100      	cbz	r0, 800ddb0 <_rclc_execute.part.0+0xec>
 800ddae:	68a0      	ldr	r0, [r4, #8]
 800ddb0:	2400      	movs	r4, #0
 800ddb2:	4798      	blx	r3
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	b005      	add	sp, #20
 800ddb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddba:	6840      	ldr	r0, [r0, #4]
 800ddbc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800ddc0:	bb3b      	cbnz	r3, 800de12 <_rclc_execute.part.0+0x14e>
 800ddc2:	f890 3020 	ldrb.w	r3, [r0, #32]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d07d      	beq.n	800dec6 <_rclc_execute.part.0+0x202>
 800ddca:	f640 0634 	movw	r6, #2100	; 0x834
 800ddce:	2701      	movs	r7, #1
 800ddd0:	e007      	b.n	800dde2 <_rclc_execute.part.0+0x11e>
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	f00a fdbc 	bl	8018950 <rclc_action_server_response_goal_request>
 800ddd8:	4629      	mov	r1, r5
 800ddda:	6860      	ldr	r0, [r4, #4]
 800dddc:	f00a fd26 	bl	801882c <rclc_action_remove_used_goal_handle>
 800dde0:	6860      	ldr	r0, [r4, #4]
 800dde2:	2100      	movs	r1, #0
 800dde4:	f00a fd4e 	bl	8018884 <rclc_action_find_first_handle_by_status>
 800dde8:	4605      	mov	r5, r0
 800ddea:	2800      	cmp	r0, #0
 800ddec:	d068      	beq.n	800dec0 <_rclc_execute.part.0+0x1fc>
 800ddee:	6863      	ldr	r3, [r4, #4]
 800ddf0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ddf2:	699b      	ldr	r3, [r3, #24]
 800ddf4:	4798      	blx	r3
 800ddf6:	42b0      	cmp	r0, r6
 800ddf8:	f04f 0100 	mov.w	r1, #0
 800ddfc:	d1e9      	bne.n	800ddd2 <_rclc_execute.part.0+0x10e>
 800ddfe:	2101      	movs	r1, #1
 800de00:	4628      	mov	r0, r5
 800de02:	f00a fda5 	bl	8018950 <rclc_action_server_response_goal_request>
 800de06:	722f      	strb	r7, [r5, #8]
 800de08:	e7ea      	b.n	800dde0 <_rclc_execute.part.0+0x11c>
 800de0a:	6848      	ldr	r0, [r1, #4]
 800de0c:	f00a fd0e 	bl	801882c <rclc_action_remove_used_goal_handle>
 800de10:	6860      	ldr	r0, [r4, #4]
 800de12:	f00a fd43 	bl	801889c <rclc_action_find_first_terminated_handle>
 800de16:	4601      	mov	r1, r0
 800de18:	2800      	cmp	r0, #0
 800de1a:	d1f6      	bne.n	800de0a <_rclc_execute.part.0+0x146>
 800de1c:	6860      	ldr	r0, [r4, #4]
 800de1e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800de22:	e7ce      	b.n	800ddc2 <_rclc_execute.part.0+0xfe>
 800de24:	2400      	movs	r4, #0
 800de26:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800de28:	f100 0110 	add.w	r1, r0, #16
 800de2c:	6880      	ldr	r0, [r0, #8]
 800de2e:	4798      	blx	r3
 800de30:	4620      	mov	r0, r4
 800de32:	b005      	add	sp, #20
 800de34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de36:	6860      	ldr	r0, [r4, #4]
 800de38:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800de3c:	b18b      	cbz	r3, 800de62 <_rclc_execute.part.0+0x19e>
 800de3e:	68c5      	ldr	r5, [r0, #12]
 800de40:	b32d      	cbz	r5, 800de8e <_rclc_execute.part.0+0x1ca>
 800de42:	2600      	movs	r6, #0
 800de44:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800de48:	b143      	cbz	r3, 800de5c <_rclc_execute.part.0+0x198>
 800de4a:	69c3      	ldr	r3, [r0, #28]
 800de4c:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 800de50:	b123      	cbz	r3, 800de5c <_rclc_execute.part.0+0x198>
 800de52:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800de54:	4628      	mov	r0, r5
 800de56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800de58:	4798      	blx	r3
 800de5a:	6860      	ldr	r0, [r4, #4]
 800de5c:	682d      	ldr	r5, [r5, #0]
 800de5e:	2d00      	cmp	r5, #0
 800de60:	d1f0      	bne.n	800de44 <_rclc_execute.part.0+0x180>
 800de62:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800de66:	b193      	cbz	r3, 800de8e <_rclc_execute.part.0+0x1ca>
 800de68:	68c5      	ldr	r5, [r0, #12]
 800de6a:	b185      	cbz	r5, 800de8e <_rclc_execute.part.0+0x1ca>
 800de6c:	2600      	movs	r6, #0
 800de6e:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800de72:	b14b      	cbz	r3, 800de88 <_rclc_execute.part.0+0x1c4>
 800de74:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800de76:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 800de7a:	b12b      	cbz	r3, 800de88 <_rclc_execute.part.0+0x1c4>
 800de7c:	4628      	mov	r0, r5
 800de7e:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800de82:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800de84:	4798      	blx	r3
 800de86:	6860      	ldr	r0, [r4, #4]
 800de88:	682d      	ldr	r5, [r5, #0]
 800de8a:	2d00      	cmp	r5, #0
 800de8c:	d1ef      	bne.n	800de6e <_rclc_execute.part.0+0x1aa>
 800de8e:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800de92:	2b00      	cmp	r3, #0
 800de94:	f43f af76 	beq.w	800dd84 <_rclc_execute.part.0+0xc0>
 800de98:	2700      	movs	r7, #0
 800de9a:	e00b      	b.n	800deb4 <_rclc_execute.part.0+0x1f0>
 800de9c:	6863      	ldr	r3, [r4, #4]
 800de9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800dea0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800dea2:	6a1e      	ldr	r6, [r3, #32]
 800dea4:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 800dea8:	47b0      	blx	r6
 800deaa:	6860      	ldr	r0, [r4, #4]
 800deac:	4629      	mov	r1, r5
 800deae:	f00a fcbd 	bl	801882c <rclc_action_remove_used_goal_handle>
 800deb2:	6860      	ldr	r0, [r4, #4]
 800deb4:	f00a fd40 	bl	8018938 <rclc_action_find_first_handle_with_result_response>
 800deb8:	4605      	mov	r5, r0
 800deba:	2800      	cmp	r0, #0
 800debc:	d1ee      	bne.n	800de9c <_rclc_execute.part.0+0x1d8>
 800debe:	e761      	b.n	800dd84 <_rclc_execute.part.0+0xc0>
 800dec0:	6860      	ldr	r0, [r4, #4]
 800dec2:	f880 5020 	strb.w	r5, [r0, #32]
 800dec6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800deca:	2b00      	cmp	r3, #0
 800decc:	f43f af5a 	beq.w	800dd84 <_rclc_execute.part.0+0xc0>
 800ded0:	68c5      	ldr	r5, [r0, #12]
 800ded2:	b1b5      	cbz	r5, 800df02 <_rclc_execute.part.0+0x23e>
 800ded4:	2602      	movs	r6, #2
 800ded6:	e001      	b.n	800dedc <_rclc_execute.part.0+0x218>
 800ded8:	682d      	ldr	r5, [r5, #0]
 800deda:	b195      	cbz	r5, 800df02 <_rclc_execute.part.0+0x23e>
 800dedc:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800dee0:	2b03      	cmp	r3, #3
 800dee2:	d1f9      	bne.n	800ded8 <_rclc_execute.part.0+0x214>
 800dee4:	69c3      	ldr	r3, [r0, #28]
 800dee6:	4628      	mov	r0, r5
 800dee8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800deea:	4798      	blx	r3
 800deec:	4603      	mov	r3, r0
 800deee:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800def2:	4628      	mov	r0, r5
 800def4:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800def8:	b143      	cbz	r3, 800df0c <_rclc_execute.part.0+0x248>
 800defa:	f00a fd49 	bl	8018990 <rclc_action_server_goal_cancel_accept>
 800defe:	6860      	ldr	r0, [r4, #4]
 800df00:	e7ea      	b.n	800ded8 <_rclc_execute.part.0+0x214>
 800df02:	2300      	movs	r3, #0
 800df04:	461c      	mov	r4, r3
 800df06:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800df0a:	e72e      	b.n	800dd6a <_rclc_execute.part.0+0xa6>
 800df0c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800df0e:	f105 0758 	add.w	r7, r5, #88	; 0x58
 800df12:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800df16:	2101      	movs	r1, #1
 800df18:	6860      	ldr	r0, [r4, #4]
 800df1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df1e:	f00a fd63 	bl	80189e8 <rclc_action_server_goal_cancel_reject>
 800df22:	722e      	strb	r6, [r5, #8]
 800df24:	6860      	ldr	r0, [r4, #4]
 800df26:	e7d7      	b.n	800ded8 <_rclc_execute.part.0+0x214>
 800df28:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800df2a:	f104 0510 	add.w	r5, r4, #16
 800df2e:	6880      	ldr	r0, [r0, #8]
 800df30:	4798      	blx	r3
 800df32:	e6e3      	b.n	800dcfc <_rclc_execute.part.0+0x38>
 800df34:	f100 0510 	add.w	r5, r0, #16
 800df38:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800df3a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800df3c:	4629      	mov	r1, r5
 800df3e:	6880      	ldr	r0, [r0, #8]
 800df40:	4798      	blx	r3
 800df42:	e6db      	b.n	800dcfc <_rclc_execute.part.0+0x38>
 800df44:	2401      	movs	r4, #1
 800df46:	e710      	b.n	800dd6a <_rclc_execute.part.0+0xa6>

0800df48 <rclc_executor_trigger_any>:
 800df48:	2800      	cmp	r0, #0
 800df4a:	d03d      	beq.n	800dfc8 <rclc_executor_trigger_any+0x80>
 800df4c:	2900      	cmp	r1, #0
 800df4e:	d03c      	beq.n	800dfca <rclc_executor_trigger_any+0x82>
 800df50:	4603      	mov	r3, r0
 800df52:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800df56:	2200      	movs	r2, #0
 800df58:	2800      	cmp	r0, #0
 800df5a:	d035      	beq.n	800dfc8 <rclc_executor_trigger_any+0x80>
 800df5c:	b430      	push	{r4, r5}
 800df5e:	f893 c000 	ldrb.w	ip, [r3]
 800df62:	f1bc 0f08 	cmp.w	ip, #8
 800df66:	d11d      	bne.n	800dfa4 <rclc_executor_trigger_any+0x5c>
 800df68:	685c      	ldr	r4, [r3, #4]
 800df6a:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800df6c:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800df70:	d105      	bne.n	800df7e <rclc_executor_trigger_any+0x36>
 800df72:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800df76:	b910      	cbnz	r0, 800df7e <rclc_executor_trigger_any+0x36>
 800df78:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 800df7c:	b128      	cbz	r0, 800df8a <rclc_executor_trigger_any+0x42>
 800df7e:	bc30      	pop	{r4, r5}
 800df80:	4770      	bx	lr
 800df82:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800df86:	2800      	cmp	r0, #0
 800df88:	d1f9      	bne.n	800df7e <rclc_executor_trigger_any+0x36>
 800df8a:	3201      	adds	r2, #1
 800df8c:	3340      	adds	r3, #64	; 0x40
 800df8e:	4291      	cmp	r1, r2
 800df90:	d017      	beq.n	800dfc2 <rclc_executor_trigger_any+0x7a>
 800df92:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800df96:	2800      	cmp	r0, #0
 800df98:	d0f1      	beq.n	800df7e <rclc_executor_trigger_any+0x36>
 800df9a:	f893 c000 	ldrb.w	ip, [r3]
 800df9e:	f1bc 0f08 	cmp.w	ip, #8
 800dfa2:	d0e1      	beq.n	800df68 <rclc_executor_trigger_any+0x20>
 800dfa4:	f1bc 0f09 	cmp.w	ip, #9
 800dfa8:	d1eb      	bne.n	800df82 <rclc_executor_trigger_any+0x3a>
 800dfaa:	685c      	ldr	r4, [r3, #4]
 800dfac:	6a25      	ldr	r5, [r4, #32]
 800dfae:	2d00      	cmp	r5, #0
 800dfb0:	d1e5      	bne.n	800df7e <rclc_executor_trigger_any+0x36>
 800dfb2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800dfb6:	2800      	cmp	r0, #0
 800dfb8:	d1e1      	bne.n	800df7e <rclc_executor_trigger_any+0x36>
 800dfba:	3201      	adds	r2, #1
 800dfbc:	3340      	adds	r3, #64	; 0x40
 800dfbe:	4291      	cmp	r1, r2
 800dfc0:	d1e7      	bne.n	800df92 <rclc_executor_trigger_any+0x4a>
 800dfc2:	2000      	movs	r0, #0
 800dfc4:	bc30      	pop	{r4, r5}
 800dfc6:	4770      	bx	lr
 800dfc8:	4770      	bx	lr
 800dfca:	4608      	mov	r0, r1
 800dfcc:	4770      	bx	lr
 800dfce:	bf00      	nop

0800dfd0 <rclc_executor_get_zero_initialized_executor>:
 800dfd0:	b510      	push	{r4, lr}
 800dfd2:	4604      	mov	r4, r0
 800dfd4:	2290      	movs	r2, #144	; 0x90
 800dfd6:	4902      	ldr	r1, [pc, #8]	; (800dfe0 <rclc_executor_get_zero_initialized_executor+0x10>)
 800dfd8:	f00f fd51 	bl	801da7e <memcpy>
 800dfdc:	4620      	mov	r0, r4
 800dfde:	bd10      	pop	{r4, pc}
 800dfe0:	0801f6e0 	.word	0x0801f6e0
 800dfe4:	00000000 	.word	0x00000000

0800dfe8 <rclc_executor_init>:
 800dfe8:	2900      	cmp	r1, #0
 800dfea:	d06a      	beq.n	800e0c2 <rclc_executor_init+0xda>
 800dfec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dff0:	4605      	mov	r5, r0
 800dff2:	b0b2      	sub	sp, #200	; 0xc8
 800dff4:	2800      	cmp	r0, #0
 800dff6:	d05c      	beq.n	800e0b2 <rclc_executor_init+0xca>
 800dff8:	4616      	mov	r6, r2
 800dffa:	4618      	mov	r0, r3
 800dffc:	4688      	mov	r8, r1
 800dffe:	461f      	mov	r7, r3
 800e000:	f000 fcf6 	bl	800e9f0 <rcutils_allocator_is_valid>
 800e004:	2e00      	cmp	r6, #0
 800e006:	d054      	beq.n	800e0b2 <rclc_executor_init+0xca>
 800e008:	f080 0401 	eor.w	r4, r0, #1
 800e00c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800e010:	d14f      	bne.n	800e0b2 <rclc_executor_init+0xca>
 800e012:	2290      	movs	r2, #144	; 0x90
 800e014:	4930      	ldr	r1, [pc, #192]	; (800e0d8 <rclc_executor_init+0xf0>)
 800e016:	a80e      	add	r0, sp, #56	; 0x38
 800e018:	f00f fd31 	bl	801da7e <memcpy>
 800e01c:	a90e      	add	r1, sp, #56	; 0x38
 800e01e:	2290      	movs	r2, #144	; 0x90
 800e020:	4628      	mov	r0, r5
 800e022:	f00f fd2c 	bl	801da7e <memcpy>
 800e026:	4668      	mov	r0, sp
 800e028:	f8c5 8004 	str.w	r8, [r5, #4]
 800e02c:	60ee      	str	r6, [r5, #12]
 800e02e:	f009 f999 	bl	8017364 <rcl_get_zero_initialized_wait_set>
 800e032:	46ec      	mov	ip, sp
 800e034:	f105 0e18 	add.w	lr, r5, #24
 800e038:	f8d7 8000 	ldr.w	r8, [r7]
 800e03c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e040:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e044:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e048:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e04c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e050:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800e0d0 <rclc_executor_init+0xe8>
 800e054:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e058:	f8dc 3000 	ldr.w	r3, [ip]
 800e05c:	01b0      	lsls	r0, r6, #6
 800e05e:	6939      	ldr	r1, [r7, #16]
 800e060:	f8ce 3000 	str.w	r3, [lr]
 800e064:	616f      	str	r7, [r5, #20]
 800e066:	ed85 7b1c 	vstr	d7, [r5, #112]	; 0x70
 800e06a:	47c0      	blx	r8
 800e06c:	60a8      	str	r0, [r5, #8]
 800e06e:	b908      	cbnz	r0, 800e074 <rclc_executor_init+0x8c>
 800e070:	e029      	b.n	800e0c6 <rclc_executor_init+0xde>
 800e072:	68a8      	ldr	r0, [r5, #8]
 800e074:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800e078:	3401      	adds	r4, #1
 800e07a:	4631      	mov	r1, r6
 800e07c:	f000 faf4 	bl	800e668 <rclc_executor_handle_init>
 800e080:	42a6      	cmp	r6, r4
 800e082:	d8f6      	bhi.n	800e072 <rclc_executor_init+0x8a>
 800e084:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 800e088:	f000 fae4 	bl	800e654 <rclc_executor_handle_counters_zero_init>
 800e08c:	4a13      	ldr	r2, [pc, #76]	; (800e0dc <rclc_executor_init+0xf4>)
 800e08e:	2300      	movs	r3, #0
 800e090:	68a8      	ldr	r0, [r5, #8]
 800e092:	e9c5 2320 	strd	r2, r3, [r5, #128]	; 0x80
 800e096:	b168      	cbz	r0, 800e0b4 <rclc_executor_init+0xcc>
 800e098:	68eb      	ldr	r3, [r5, #12]
 800e09a:	b173      	cbz	r3, 800e0ba <rclc_executor_init+0xd2>
 800e09c:	696a      	ldr	r2, [r5, #20]
 800e09e:	fab2 f382 	clz	r3, r2
 800e0a2:	095b      	lsrs	r3, r3, #5
 800e0a4:	b14a      	cbz	r2, 800e0ba <rclc_executor_init+0xd2>
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f885 3088 	strb.w	r3, [r5, #136]	; 0x88
 800e0ac:	b032      	add	sp, #200	; 0xc8
 800e0ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0b2:	200b      	movs	r0, #11
 800e0b4:	b032      	add	sp, #200	; 0xc8
 800e0b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0ba:	2000      	movs	r0, #0
 800e0bc:	b032      	add	sp, #200	; 0xc8
 800e0be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0c2:	200b      	movs	r0, #11
 800e0c4:	4770      	bx	lr
 800e0c6:	200a      	movs	r0, #10
 800e0c8:	e7f4      	b.n	800e0b4 <rclc_executor_init+0xcc>
 800e0ca:	bf00      	nop
 800e0cc:	f3af 8000 	nop.w
 800e0d0:	3b9aca00 	.word	0x3b9aca00
 800e0d4:	00000000 	.word	0x00000000
 800e0d8:	0801f6e0 	.word	0x0801f6e0
 800e0dc:	0800df49 	.word	0x0800df49

0800e0e0 <rclc_executor_add_subscription>:
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	bf18      	it	ne
 800e0e4:	2a00      	cmpne	r2, #0
 800e0e6:	b570      	push	{r4, r5, r6, lr}
 800e0e8:	4604      	mov	r4, r0
 800e0ea:	bf0c      	ite	eq
 800e0ec:	2001      	moveq	r0, #1
 800e0ee:	2000      	movne	r0, #0
 800e0f0:	f89d c010 	ldrb.w	ip, [sp, #16]
 800e0f4:	2900      	cmp	r1, #0
 800e0f6:	bf08      	it	eq
 800e0f8:	f040 0001 	orreq.w	r0, r0, #1
 800e0fc:	bb28      	cbnz	r0, 800e14a <rclc_executor_add_subscription+0x6a>
 800e0fe:	fab4 f584 	clz	r5, r4
 800e102:	096d      	lsrs	r5, r5, #5
 800e104:	b30c      	cbz	r4, 800e14a <rclc_executor_add_subscription+0x6a>
 800e106:	e9d4 0603 	ldrd	r0, r6, [r4, #12]
 800e10a:	4286      	cmp	r6, r0
 800e10c:	d301      	bcc.n	800e112 <rclc_executor_add_subscription+0x32>
 800e10e:	2001      	movs	r0, #1
 800e110:	bd70      	pop	{r4, r5, r6, pc}
 800e112:	68a0      	ldr	r0, [r4, #8]
 800e114:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 800e118:	f800 500e 	strb.w	r5, [r0, lr]
 800e11c:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800e120:	3601      	adds	r6, #1
 800e122:	6303      	str	r3, [r0, #48]	; 0x30
 800e124:	2301      	movs	r3, #1
 800e126:	62c5      	str	r5, [r0, #44]	; 0x2c
 800e128:	f104 0518 	add.w	r5, r4, #24
 800e12c:	f880 c001 	strb.w	ip, [r0, #1]
 800e130:	8703      	strh	r3, [r0, #56]	; 0x38
 800e132:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800e136:	4628      	mov	r0, r5
 800e138:	6126      	str	r6, [r4, #16]
 800e13a:	f009 f927 	bl	801738c <rcl_wait_set_is_valid>
 800e13e:	b930      	cbnz	r0, 800e14e <rclc_executor_add_subscription+0x6e>
 800e140:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800e142:	2000      	movs	r0, #0
 800e144:	3301      	adds	r3, #1
 800e146:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e148:	bd70      	pop	{r4, r5, r6, pc}
 800e14a:	200b      	movs	r0, #11
 800e14c:	bd70      	pop	{r4, r5, r6, pc}
 800e14e:	4628      	mov	r0, r5
 800e150:	f009 f922 	bl	8017398 <rcl_wait_set_fini>
 800e154:	2800      	cmp	r0, #0
 800e156:	d0f3      	beq.n	800e140 <rclc_executor_add_subscription+0x60>
 800e158:	bd70      	pop	{r4, r5, r6, pc}
 800e15a:	bf00      	nop

0800e15c <rclc_executor_add_timer>:
 800e15c:	b351      	cbz	r1, 800e1b4 <rclc_executor_add_timer+0x58>
 800e15e:	fab0 f280 	clz	r2, r0
 800e162:	b570      	push	{r4, r5, r6, lr}
 800e164:	0952      	lsrs	r2, r2, #5
 800e166:	4604      	mov	r4, r0
 800e168:	b1e0      	cbz	r0, 800e1a4 <rclc_executor_add_timer+0x48>
 800e16a:	e9d0 0303 	ldrd	r0, r3, [r0, #12]
 800e16e:	4283      	cmp	r3, r0
 800e170:	d301      	bcc.n	800e176 <rclc_executor_add_timer+0x1a>
 800e172:	2001      	movs	r0, #1
 800e174:	bd70      	pop	{r4, r5, r6, pc}
 800e176:	68a0      	ldr	r0, [r4, #8]
 800e178:	019d      	lsls	r5, r3, #6
 800e17a:	1c5e      	adds	r6, r3, #1
 800e17c:	eb00 1383 	add.w	r3, r0, r3, lsl #6
 800e180:	6059      	str	r1, [r3, #4]
 800e182:	2102      	movs	r1, #2
 800e184:	5341      	strh	r1, [r0, r5]
 800e186:	2101      	movs	r1, #1
 800e188:	f104 0518 	add.w	r5, r4, #24
 800e18c:	62da      	str	r2, [r3, #44]	; 0x2c
 800e18e:	8719      	strh	r1, [r3, #56]	; 0x38
 800e190:	4628      	mov	r0, r5
 800e192:	6126      	str	r6, [r4, #16]
 800e194:	f009 f8fa 	bl	801738c <rcl_wait_set_is_valid>
 800e198:	b930      	cbnz	r0, 800e1a8 <rclc_executor_add_timer+0x4c>
 800e19a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e19c:	2000      	movs	r0, #0
 800e19e:	3301      	adds	r3, #1
 800e1a0:	6523      	str	r3, [r4, #80]	; 0x50
 800e1a2:	bd70      	pop	{r4, r5, r6, pc}
 800e1a4:	200b      	movs	r0, #11
 800e1a6:	bd70      	pop	{r4, r5, r6, pc}
 800e1a8:	4628      	mov	r0, r5
 800e1aa:	f009 f8f5 	bl	8017398 <rcl_wait_set_fini>
 800e1ae:	2800      	cmp	r0, #0
 800e1b0:	d0f3      	beq.n	800e19a <rclc_executor_add_timer+0x3e>
 800e1b2:	bd70      	pop	{r4, r5, r6, pc}
 800e1b4:	200b      	movs	r0, #11
 800e1b6:	4770      	bx	lr

0800e1b8 <rclc_executor_add_service>:
 800e1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ba:	9d06      	ldr	r5, [sp, #24]
 800e1bc:	4604      	mov	r4, r0
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	bf18      	it	ne
 800e1c2:	2d00      	cmpne	r5, #0
 800e1c4:	bf0c      	ite	eq
 800e1c6:	2001      	moveq	r0, #1
 800e1c8:	2000      	movne	r0, #0
 800e1ca:	2a00      	cmp	r2, #0
 800e1cc:	bf08      	it	eq
 800e1ce:	f040 0001 	orreq.w	r0, r0, #1
 800e1d2:	2900      	cmp	r1, #0
 800e1d4:	bf08      	it	eq
 800e1d6:	f040 0001 	orreq.w	r0, r0, #1
 800e1da:	bb40      	cbnz	r0, 800e22e <rclc_executor_add_service+0x76>
 800e1dc:	fab4 f684 	clz	r6, r4
 800e1e0:	0976      	lsrs	r6, r6, #5
 800e1e2:	b324      	cbz	r4, 800e22e <rclc_executor_add_service+0x76>
 800e1e4:	e9d4 7003 	ldrd	r7, r0, [r4, #12]
 800e1e8:	42b8      	cmp	r0, r7
 800e1ea:	d301      	bcc.n	800e1f0 <rclc_executor_add_service+0x38>
 800e1ec:	2001      	movs	r0, #1
 800e1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1f0:	68a7      	ldr	r7, [r4, #8]
 800e1f2:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800e1f6:	f100 0c01 	add.w	ip, r0, #1
 800e1fa:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 800e1fe:	6283      	str	r3, [r0, #40]	; 0x28
 800e200:	2305      	movs	r3, #5
 800e202:	6305      	str	r5, [r0, #48]	; 0x30
 800e204:	f104 0518 	add.w	r5, r4, #24
 800e208:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800e20c:	f827 300e 	strh.w	r3, [r7, lr]
 800e210:	2301      	movs	r3, #1
 800e212:	62c6      	str	r6, [r0, #44]	; 0x2c
 800e214:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800e218:	4628      	mov	r0, r5
 800e21a:	f8c4 c010 	str.w	ip, [r4, #16]
 800e21e:	f009 f8b5 	bl	801738c <rcl_wait_set_is_valid>
 800e222:	b930      	cbnz	r0, 800e232 <rclc_executor_add_service+0x7a>
 800e224:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e226:	2000      	movs	r0, #0
 800e228:	3301      	adds	r3, #1
 800e22a:	65a3      	str	r3, [r4, #88]	; 0x58
 800e22c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e22e:	200b      	movs	r0, #11
 800e230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e232:	4628      	mov	r0, r5
 800e234:	f009 f8b0 	bl	8017398 <rcl_wait_set_fini>
 800e238:	2800      	cmp	r0, #0
 800e23a:	d0f3      	beq.n	800e224 <rclc_executor_add_service+0x6c>
 800e23c:	e7d7      	b.n	800e1ee <rclc_executor_add_service+0x36>
 800e23e:	bf00      	nop

0800e240 <rclc_executor_prepare>:
 800e240:	2800      	cmp	r0, #0
 800e242:	d044      	beq.n	800e2ce <rclc_executor_prepare+0x8e>
 800e244:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e246:	f100 0518 	add.w	r5, r0, #24
 800e24a:	b09b      	sub	sp, #108	; 0x6c
 800e24c:	4604      	mov	r4, r0
 800e24e:	4628      	mov	r0, r5
 800e250:	f009 f89c 	bl	801738c <rcl_wait_set_is_valid>
 800e254:	b110      	cbz	r0, 800e25c <rclc_executor_prepare+0x1c>
 800e256:	2000      	movs	r0, #0
 800e258:	b01b      	add	sp, #108	; 0x6c
 800e25a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e25c:	4628      	mov	r0, r5
 800e25e:	f009 f89b 	bl	8017398 <rcl_wait_set_fini>
 800e262:	2800      	cmp	r0, #0
 800e264:	d130      	bne.n	800e2c8 <rclc_executor_prepare+0x88>
 800e266:	a80c      	add	r0, sp, #48	; 0x30
 800e268:	ae04      	add	r6, sp, #16
 800e26a:	f009 f87b 	bl	8017364 <rcl_get_zero_initialized_wait_set>
 800e26e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800e272:	46ae      	mov	lr, r5
 800e274:	6967      	ldr	r7, [r4, #20]
 800e276:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e27a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e27e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e282:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e286:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e28a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e28e:	f8dc 3000 	ldr.w	r3, [ip]
 800e292:	f8ce 3000 	str.w	r3, [lr]
 800e296:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e298:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	4628      	mov	r0, r5
 800e29e:	6862      	ldr	r2, [r4, #4]
 800e2a0:	6033      	str	r3, [r6, #0]
 800e2a2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800e2a4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e2a6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800e2aa:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800e2ae:	e9cd 2100 	strd	r2, r1, [sp]
 800e2b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e2b4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800e2b6:	f009 fb6f 	bl	8017998 <rcl_wait_set_init>
 800e2ba:	2800      	cmp	r0, #0
 800e2bc:	d0cc      	beq.n	800e258 <rclc_executor_prepare+0x18>
 800e2be:	900b      	str	r0, [sp, #44]	; 0x2c
 800e2c0:	f000 fbba 	bl	800ea38 <rcutils_reset_error>
 800e2c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e2c6:	e7c7      	b.n	800e258 <rclc_executor_prepare+0x18>
 800e2c8:	f000 fbb6 	bl	800ea38 <rcutils_reset_error>
 800e2cc:	e7cb      	b.n	800e266 <rclc_executor_prepare+0x26>
 800e2ce:	200b      	movs	r0, #11
 800e2d0:	4770      	bx	lr
 800e2d2:	bf00      	nop

0800e2d4 <rclc_executor_spin_some.part.0>:
 800e2d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2d8:	4605      	mov	r5, r0
 800e2da:	4691      	mov	r9, r2
 800e2dc:	4698      	mov	r8, r3
 800e2de:	f7ff ffaf 	bl	800e240 <rclc_executor_prepare>
 800e2e2:	f105 0618 	add.w	r6, r5, #24
 800e2e6:	4630      	mov	r0, r6
 800e2e8:	f009 f922 	bl	8017530 <rcl_wait_set_clear>
 800e2ec:	4607      	mov	r7, r0
 800e2ee:	2800      	cmp	r0, #0
 800e2f0:	f040 80a8 	bne.w	800e444 <rclc_executor_spin_some.part.0+0x170>
 800e2f4:	68eb      	ldr	r3, [r5, #12]
 800e2f6:	b30b      	cbz	r3, 800e33c <rclc_executor_spin_some.part.0+0x68>
 800e2f8:	4604      	mov	r4, r0
 800e2fa:	68a9      	ldr	r1, [r5, #8]
 800e2fc:	01a2      	lsls	r2, r4, #6
 800e2fe:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800e302:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 800e306:	b1cb      	cbz	r3, 800e33c <rclc_executor_spin_some.part.0+0x68>
 800e308:	5c8b      	ldrb	r3, [r1, r2]
 800e30a:	2b0a      	cmp	r3, #10
 800e30c:	f200 80de 	bhi.w	800e4cc <rclc_executor_spin_some.part.0+0x1f8>
 800e310:	e8df f003 	tbb	[pc, r3]
 800e314:	8da99d9d 	.word	0x8da99d9d
 800e318:	0606068d 	.word	0x0606068d
 800e31c:	c1ce      	.short	0xc1ce
 800e31e:	b5          	.byte	0xb5
 800e31f:	00          	.byte	0x00
 800e320:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e324:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e328:	4630      	mov	r0, r6
 800e32a:	f009 fc51 	bl	8017bd0 <rcl_wait_set_add_service>
 800e32e:	2800      	cmp	r0, #0
 800e330:	f040 8087 	bne.w	800e442 <rclc_executor_spin_some.part.0+0x16e>
 800e334:	3401      	adds	r4, #1
 800e336:	68eb      	ldr	r3, [r5, #12]
 800e338:	429c      	cmp	r4, r3
 800e33a:	d3de      	bcc.n	800e2fa <rclc_executor_spin_some.part.0+0x26>
 800e33c:	4643      	mov	r3, r8
 800e33e:	464a      	mov	r2, r9
 800e340:	4630      	mov	r0, r6
 800e342:	f009 fc71 	bl	8017c28 <rcl_wait>
 800e346:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	f000 80c6 	beq.w	800e4dc <rclc_executor_spin_some.part.0+0x208>
 800e350:	2b01      	cmp	r3, #1
 800e352:	f040 80bb 	bne.w	800e4cc <rclc_executor_spin_some.part.0+0x1f8>
 800e356:	68eb      	ldr	r3, [r5, #12]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	f000 8159 	beq.w	800e610 <rclc_executor_spin_some.part.0+0x33c>
 800e35e:	2400      	movs	r4, #0
 800e360:	f240 1991 	movw	r9, #401	; 0x191
 800e364:	46a0      	mov	r8, r4
 800e366:	e00a      	b.n	800e37e <rclc_executor_spin_some.part.0+0xaa>
 800e368:	f7ff faea 	bl	800d940 <_rclc_check_for_new_data>
 800e36c:	4604      	mov	r4, r0
 800e36e:	b110      	cbz	r0, 800e376 <rclc_executor_spin_some.part.0+0xa2>
 800e370:	4548      	cmp	r0, r9
 800e372:	f040 80b1 	bne.w	800e4d8 <rclc_executor_spin_some.part.0+0x204>
 800e376:	68eb      	ldr	r3, [r5, #12]
 800e378:	4598      	cmp	r8, r3
 800e37a:	f080 8126 	bcs.w	800e5ca <rclc_executor_spin_some.part.0+0x2f6>
 800e37e:	68aa      	ldr	r2, [r5, #8]
 800e380:	4631      	mov	r1, r6
 800e382:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800e386:	f108 0801 	add.w	r8, r8, #1
 800e38a:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800e38e:	f1bc 0f00 	cmp.w	ip, #0
 800e392:	d1e9      	bne.n	800e368 <rclc_executor_spin_some.part.0+0x94>
 800e394:	4619      	mov	r1, r3
 800e396:	4610      	mov	r0, r2
 800e398:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 800e39c:	4798      	blx	r3
 800e39e:	2800      	cmp	r0, #0
 800e3a0:	f000 809a 	beq.w	800e4d8 <rclc_executor_spin_some.part.0+0x204>
 800e3a4:	68eb      	ldr	r3, [r5, #12]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	f000 8096 	beq.w	800e4d8 <rclc_executor_spin_some.part.0+0x204>
 800e3ac:	f04f 0800 	mov.w	r8, #0
 800e3b0:	f240 1991 	movw	r9, #401	; 0x191
 800e3b4:	e009      	b.n	800e3ca <rclc_executor_spin_some.part.0+0xf6>
 800e3b6:	f7ff fb11 	bl	800d9dc <_rclc_take_new_data>
 800e3ba:	4604      	mov	r4, r0
 800e3bc:	b110      	cbz	r0, 800e3c4 <rclc_executor_spin_some.part.0+0xf0>
 800e3be:	4548      	cmp	r0, r9
 800e3c0:	f040 808a 	bne.w	800e4d8 <rclc_executor_spin_some.part.0+0x204>
 800e3c4:	68eb      	ldr	r3, [r5, #12]
 800e3c6:	4598      	cmp	r8, r3
 800e3c8:	d209      	bcs.n	800e3de <rclc_executor_spin_some.part.0+0x10a>
 800e3ca:	68a8      	ldr	r0, [r5, #8]
 800e3cc:	4631      	mov	r1, r6
 800e3ce:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800e3d2:	f108 0801 	add.w	r8, r8, #1
 800e3d6:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800e3da:	2a00      	cmp	r2, #0
 800e3dc:	d1eb      	bne.n	800e3b6 <rclc_executor_spin_some.part.0+0xe2>
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d07a      	beq.n	800e4d8 <rclc_executor_spin_some.part.0+0x204>
 800e3e2:	2600      	movs	r6, #0
 800e3e4:	e00e      	b.n	800e404 <rclc_executor_spin_some.part.0+0x130>
 800e3e6:	f812 200c 	ldrb.w	r2, [r2, ip]
 800e3ea:	2a08      	cmp	r2, #8
 800e3ec:	f000 80fc 	beq.w	800e5e8 <rclc_executor_spin_some.part.0+0x314>
 800e3f0:	2a09      	cmp	r2, #9
 800e3f2:	f000 80ee 	beq.w	800e5d2 <rclc_executor_spin_some.part.0+0x2fe>
 800e3f6:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800e3fa:	b98a      	cbnz	r2, 800e420 <rclc_executor_spin_some.part.0+0x14c>
 800e3fc:	3601      	adds	r6, #1
 800e3fe:	429e      	cmp	r6, r3
 800e400:	d267      	bcs.n	800e4d2 <rclc_executor_spin_some.part.0+0x1fe>
 800e402:	2400      	movs	r4, #0
 800e404:	68aa      	ldr	r2, [r5, #8]
 800e406:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800e40a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800e40e:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 800e412:	2900      	cmp	r1, #0
 800e414:	d060      	beq.n	800e4d8 <rclc_executor_spin_some.part.0+0x204>
 800e416:	7841      	ldrb	r1, [r0, #1]
 800e418:	2900      	cmp	r1, #0
 800e41a:	d0e4      	beq.n	800e3e6 <rclc_executor_spin_some.part.0+0x112>
 800e41c:	2901      	cmp	r1, #1
 800e41e:	d1ed      	bne.n	800e3fc <rclc_executor_spin_some.part.0+0x128>
 800e420:	f7ff fc50 	bl	800dcc4 <_rclc_execute.part.0>
 800e424:	2800      	cmp	r0, #0
 800e426:	f040 80b5 	bne.w	800e594 <rclc_executor_spin_some.part.0+0x2c0>
 800e42a:	68eb      	ldr	r3, [r5, #12]
 800e42c:	e7e6      	b.n	800e3fc <rclc_executor_spin_some.part.0+0x128>
 800e42e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e432:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e436:	4630      	mov	r0, r6
 800e438:	f009 fb9e 	bl	8017b78 <rcl_wait_set_add_client>
 800e43c:	2800      	cmp	r0, #0
 800e43e:	f43f af79 	beq.w	800e334 <rclc_executor_spin_some.part.0+0x60>
 800e442:	4607      	mov	r7, r0
 800e444:	f000 faf8 	bl	800ea38 <rcutils_reset_error>
 800e448:	4638      	mov	r0, r7
 800e44a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e44e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e452:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e456:	4630      	mov	r0, r6
 800e458:	f009 f83e 	bl	80174d8 <rcl_wait_set_add_subscription>
 800e45c:	2800      	cmp	r0, #0
 800e45e:	f43f af69 	beq.w	800e334 <rclc_executor_spin_some.part.0+0x60>
 800e462:	4607      	mov	r7, r0
 800e464:	e7ee      	b.n	800e444 <rclc_executor_spin_some.part.0+0x170>
 800e466:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e46a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e46e:	4630      	mov	r0, r6
 800e470:	f009 fb52 	bl	8017b18 <rcl_wait_set_add_timer>
 800e474:	2800      	cmp	r0, #0
 800e476:	f43f af5d 	beq.w	800e334 <rclc_executor_spin_some.part.0+0x60>
 800e47a:	4607      	mov	r7, r0
 800e47c:	e7e2      	b.n	800e444 <rclc_executor_spin_some.part.0+0x170>
 800e47e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e482:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e486:	4630      	mov	r0, r6
 800e488:	f009 fb1a 	bl	8017ac0 <rcl_wait_set_add_guard_condition>
 800e48c:	2800      	cmp	r0, #0
 800e48e:	f43f af51 	beq.w	800e334 <rclc_executor_spin_some.part.0+0x60>
 800e492:	4607      	mov	r7, r0
 800e494:	e7d6      	b.n	800e444 <rclc_executor_spin_some.part.0+0x170>
 800e496:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e49a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e49e:	4630      	mov	r0, r6
 800e4a0:	3110      	adds	r1, #16
 800e4a2:	f00a f895 	bl	80185d0 <rcl_action_wait_set_add_action_server>
 800e4a6:	2800      	cmp	r0, #0
 800e4a8:	f43f af44 	beq.w	800e334 <rclc_executor_spin_some.part.0+0x60>
 800e4ac:	4607      	mov	r7, r0
 800e4ae:	e7c9      	b.n	800e444 <rclc_executor_spin_some.part.0+0x170>
 800e4b0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e4ba:	4630      	mov	r0, r6
 800e4bc:	3110      	adds	r1, #16
 800e4be:	f009 fe5f 	bl	8018180 <rcl_action_wait_set_add_action_client>
 800e4c2:	2800      	cmp	r0, #0
 800e4c4:	f43f af36 	beq.w	800e334 <rclc_executor_spin_some.part.0+0x60>
 800e4c8:	4607      	mov	r7, r0
 800e4ca:	e7bb      	b.n	800e444 <rclc_executor_spin_some.part.0+0x170>
 800e4cc:	2701      	movs	r7, #1
 800e4ce:	f000 fab3 	bl	800ea38 <rcutils_reset_error>
 800e4d2:	4638      	mov	r0, r7
 800e4d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4d8:	4627      	mov	r7, r4
 800e4da:	e7fa      	b.n	800e4d2 <rclc_executor_spin_some.part.0+0x1fe>
 800e4dc:	68eb      	ldr	r3, [r5, #12]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	f000 8093 	beq.w	800e60a <rclc_executor_spin_some.part.0+0x336>
 800e4e4:	2400      	movs	r4, #0
 800e4e6:	f240 1991 	movw	r9, #401	; 0x191
 800e4ea:	46a0      	mov	r8, r4
 800e4ec:	e008      	b.n	800e500 <rclc_executor_spin_some.part.0+0x22c>
 800e4ee:	f7ff fa27 	bl	800d940 <_rclc_check_for_new_data>
 800e4f2:	4604      	mov	r4, r0
 800e4f4:	b108      	cbz	r0, 800e4fa <rclc_executor_spin_some.part.0+0x226>
 800e4f6:	4548      	cmp	r0, r9
 800e4f8:	d1ee      	bne.n	800e4d8 <rclc_executor_spin_some.part.0+0x204>
 800e4fa:	68eb      	ldr	r3, [r5, #12]
 800e4fc:	4598      	cmp	r8, r3
 800e4fe:	d266      	bcs.n	800e5ce <rclc_executor_spin_some.part.0+0x2fa>
 800e500:	68aa      	ldr	r2, [r5, #8]
 800e502:	4631      	mov	r1, r6
 800e504:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800e508:	f108 0801 	add.w	r8, r8, #1
 800e50c:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800e510:	f1bc 0f00 	cmp.w	ip, #0
 800e514:	d1eb      	bne.n	800e4ee <rclc_executor_spin_some.part.0+0x21a>
 800e516:	4619      	mov	r1, r3
 800e518:	4610      	mov	r0, r2
 800e51a:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 800e51e:	4798      	blx	r3
 800e520:	2800      	cmp	r0, #0
 800e522:	d0d9      	beq.n	800e4d8 <rclc_executor_spin_some.part.0+0x204>
 800e524:	68eb      	ldr	r3, [r5, #12]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d0d6      	beq.n	800e4d8 <rclc_executor_spin_some.part.0+0x204>
 800e52a:	f04f 0a00 	mov.w	sl, #0
 800e52e:	f240 1891 	movw	r8, #401	; 0x191
 800e532:	f240 2959 	movw	r9, #601	; 0x259
 800e536:	e00e      	b.n	800e556 <rclc_executor_spin_some.part.0+0x282>
 800e538:	f813 300b 	ldrb.w	r3, [r3, fp]
 800e53c:	2b08      	cmp	r3, #8
 800e53e:	d034      	beq.n	800e5aa <rclc_executor_spin_some.part.0+0x2d6>
 800e540:	2b09      	cmp	r3, #9
 800e542:	d029      	beq.n	800e598 <rclc_executor_spin_some.part.0+0x2c4>
 800e544:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800e548:	bb03      	cbnz	r3, 800e58c <rclc_executor_spin_some.part.0+0x2b8>
 800e54a:	f10a 0a01 	add.w	sl, sl, #1
 800e54e:	68eb      	ldr	r3, [r5, #12]
 800e550:	459a      	cmp	sl, r3
 800e552:	d2be      	bcs.n	800e4d2 <rclc_executor_spin_some.part.0+0x1fe>
 800e554:	2400      	movs	r4, #0
 800e556:	68a8      	ldr	r0, [r5, #8]
 800e558:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800e55c:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800e560:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800e564:	2b00      	cmp	r3, #0
 800e566:	d0b7      	beq.n	800e4d8 <rclc_executor_spin_some.part.0+0x204>
 800e568:	4631      	mov	r1, r6
 800e56a:	f7ff fa37 	bl	800d9dc <_rclc_take_new_data>
 800e56e:	2800      	cmp	r0, #0
 800e570:	bf18      	it	ne
 800e572:	4540      	cmpne	r0, r8
 800e574:	d001      	beq.n	800e57a <rclc_executor_spin_some.part.0+0x2a6>
 800e576:	4548      	cmp	r0, r9
 800e578:	d10c      	bne.n	800e594 <rclc_executor_spin_some.part.0+0x2c0>
 800e57a:	68ab      	ldr	r3, [r5, #8]
 800e57c:	eb13 000b 	adds.w	r0, r3, fp
 800e580:	d021      	beq.n	800e5c6 <rclc_executor_spin_some.part.0+0x2f2>
 800e582:	7842      	ldrb	r2, [r0, #1]
 800e584:	2a00      	cmp	r2, #0
 800e586:	d0d7      	beq.n	800e538 <rclc_executor_spin_some.part.0+0x264>
 800e588:	2a01      	cmp	r2, #1
 800e58a:	d1de      	bne.n	800e54a <rclc_executor_spin_some.part.0+0x276>
 800e58c:	f7ff fb9a 	bl	800dcc4 <_rclc_execute.part.0>
 800e590:	2800      	cmp	r0, #0
 800e592:	d0da      	beq.n	800e54a <rclc_executor_spin_some.part.0+0x276>
 800e594:	4607      	mov	r7, r0
 800e596:	e79c      	b.n	800e4d2 <rclc_executor_spin_some.part.0+0x1fe>
 800e598:	6843      	ldr	r3, [r0, #4]
 800e59a:	6a1a      	ldr	r2, [r3, #32]
 800e59c:	2a00      	cmp	r2, #0
 800e59e:	d1f5      	bne.n	800e58c <rclc_executor_spin_some.part.0+0x2b8>
 800e5a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d0d0      	beq.n	800e54a <rclc_executor_spin_some.part.0+0x276>
 800e5a8:	e7f0      	b.n	800e58c <rclc_executor_spin_some.part.0+0x2b8>
 800e5aa:	6843      	ldr	r3, [r0, #4]
 800e5ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e5ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800e5b2:	d1eb      	bne.n	800e58c <rclc_executor_spin_some.part.0+0x2b8>
 800e5b4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e5b8:	2a00      	cmp	r2, #0
 800e5ba:	d1e7      	bne.n	800e58c <rclc_executor_spin_some.part.0+0x2b8>
 800e5bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d0c2      	beq.n	800e54a <rclc_executor_spin_some.part.0+0x276>
 800e5c4:	e7e2      	b.n	800e58c <rclc_executor_spin_some.part.0+0x2b8>
 800e5c6:	270b      	movs	r7, #11
 800e5c8:	e783      	b.n	800e4d2 <rclc_executor_spin_some.part.0+0x1fe>
 800e5ca:	68aa      	ldr	r2, [r5, #8]
 800e5cc:	e6e2      	b.n	800e394 <rclc_executor_spin_some.part.0+0xc0>
 800e5ce:	68aa      	ldr	r2, [r5, #8]
 800e5d0:	e7a1      	b.n	800e516 <rclc_executor_spin_some.part.0+0x242>
 800e5d2:	6842      	ldr	r2, [r0, #4]
 800e5d4:	6a11      	ldr	r1, [r2, #32]
 800e5d6:	2900      	cmp	r1, #0
 800e5d8:	f47f af22 	bne.w	800e420 <rclc_executor_spin_some.part.0+0x14c>
 800e5dc:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800e5e0:	2a00      	cmp	r2, #0
 800e5e2:	f43f af0b 	beq.w	800e3fc <rclc_executor_spin_some.part.0+0x128>
 800e5e6:	e71b      	b.n	800e420 <rclc_executor_spin_some.part.0+0x14c>
 800e5e8:	6842      	ldr	r2, [r0, #4]
 800e5ea:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e5ec:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 800e5f0:	f47f af16 	bne.w	800e420 <rclc_executor_spin_some.part.0+0x14c>
 800e5f4:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 800e5f8:	2900      	cmp	r1, #0
 800e5fa:	f47f af11 	bne.w	800e420 <rclc_executor_spin_some.part.0+0x14c>
 800e5fe:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800e602:	2a00      	cmp	r2, #0
 800e604:	f43f aefa 	beq.w	800e3fc <rclc_executor_spin_some.part.0+0x128>
 800e608:	e70a      	b.n	800e420 <rclc_executor_spin_some.part.0+0x14c>
 800e60a:	68aa      	ldr	r2, [r5, #8]
 800e60c:	461c      	mov	r4, r3
 800e60e:	e782      	b.n	800e516 <rclc_executor_spin_some.part.0+0x242>
 800e610:	68aa      	ldr	r2, [r5, #8]
 800e612:	461c      	mov	r4, r3
 800e614:	e6be      	b.n	800e394 <rclc_executor_spin_some.part.0+0xc0>
 800e616:	bf00      	nop

0800e618 <rclc_executor_spin>:
 800e618:	b1d0      	cbz	r0, 800e650 <rclc_executor_spin+0x38>
 800e61a:	b510      	push	{r4, lr}
 800e61c:	4604      	mov	r4, r0
 800e61e:	b082      	sub	sp, #8
 800e620:	e004      	b.n	800e62c <rclc_executor_spin+0x14>
 800e622:	f7ff fe57 	bl	800e2d4 <rclc_executor_spin_some.part.0>
 800e626:	f030 0302 	bics.w	r3, r0, #2
 800e62a:	d10f      	bne.n	800e64c <rclc_executor_spin+0x34>
 800e62c:	6860      	ldr	r0, [r4, #4]
 800e62e:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
 800e632:	e9cd 2300 	strd	r2, r3, [sp]
 800e636:	f007 f8b7 	bl	80157a8 <rcl_context_is_valid>
 800e63a:	4601      	mov	r1, r0
 800e63c:	4620      	mov	r0, r4
 800e63e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e642:	2900      	cmp	r1, #0
 800e644:	d1ed      	bne.n	800e622 <rclc_executor_spin+0xa>
 800e646:	f000 f9f7 	bl	800ea38 <rcutils_reset_error>
 800e64a:	2001      	movs	r0, #1
 800e64c:	b002      	add	sp, #8
 800e64e:	bd10      	pop	{r4, pc}
 800e650:	200b      	movs	r0, #11
 800e652:	4770      	bx	lr

0800e654 <rclc_executor_handle_counters_zero_init>:
 800e654:	b130      	cbz	r0, 800e664 <rclc_executor_handle_counters_zero_init+0x10>
 800e656:	2220      	movs	r2, #32
 800e658:	2100      	movs	r1, #0
 800e65a:	b508      	push	{r3, lr}
 800e65c:	f00f f8de 	bl	801d81c <memset>
 800e660:	2000      	movs	r0, #0
 800e662:	bd08      	pop	{r3, pc}
 800e664:	200b      	movs	r0, #11
 800e666:	4770      	bx	lr

0800e668 <rclc_executor_handle_init>:
 800e668:	4603      	mov	r3, r0
 800e66a:	b178      	cbz	r0, 800e68c <rclc_executor_handle_init+0x24>
 800e66c:	2200      	movs	r2, #0
 800e66e:	f04f 0c0b 	mov.w	ip, #11
 800e672:	6341      	str	r1, [r0, #52]	; 0x34
 800e674:	4610      	mov	r0, r2
 800e676:	f8a3 c000 	strh.w	ip, [r3]
 800e67a:	631a      	str	r2, [r3, #48]	; 0x30
 800e67c:	871a      	strh	r2, [r3, #56]	; 0x38
 800e67e:	ed9f 7b04 	vldr	d7, [pc, #16]	; 800e690 <rclc_executor_handle_init+0x28>
 800e682:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800e686:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 800e68a:	4770      	bx	lr
 800e68c:	200b      	movs	r0, #11
 800e68e:	4770      	bx	lr
	...

0800e698 <rclc_support_init>:
 800e698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e69c:	b086      	sub	sp, #24
 800e69e:	b3bb      	cbz	r3, 800e710 <rclc_support_init+0x78>
 800e6a0:	4606      	mov	r6, r0
 800e6a2:	b3a8      	cbz	r0, 800e710 <rclc_support_init+0x78>
 800e6a4:	461c      	mov	r4, r3
 800e6a6:	460f      	mov	r7, r1
 800e6a8:	4690      	mov	r8, r2
 800e6aa:	f007 fa1d 	bl	8015ae8 <rcl_get_zero_initialized_init_options>
 800e6ae:	f104 050c 	add.w	r5, r4, #12
 800e6b2:	9005      	str	r0, [sp, #20]
 800e6b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e6b8:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e6bc:	a805      	add	r0, sp, #20
 800e6be:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800e6c2:	f007 fa13 	bl	8015aec <rcl_init_options_init>
 800e6c6:	4605      	mov	r5, r0
 800e6c8:	b9e0      	cbnz	r0, 800e704 <rclc_support_init+0x6c>
 800e6ca:	ad02      	add	r5, sp, #8
 800e6cc:	4628      	mov	r0, r5
 800e6ce:	f007 f861 	bl	8015794 <rcl_get_zero_initialized_context>
 800e6d2:	4633      	mov	r3, r6
 800e6d4:	aa05      	add	r2, sp, #20
 800e6d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e6da:	e886 0003 	stmia.w	r6, {r0, r1}
 800e6de:	4641      	mov	r1, r8
 800e6e0:	4638      	mov	r0, r7
 800e6e2:	f007 f8c7 	bl	8015874 <rcl_init>
 800e6e6:	4605      	mov	r5, r0
 800e6e8:	b9b8      	cbnz	r0, 800e71a <rclc_support_init+0x82>
 800e6ea:	4622      	mov	r2, r4
 800e6ec:	f106 010c 	add.w	r1, r6, #12
 800e6f0:	2003      	movs	r0, #3
 800e6f2:	60b4      	str	r4, [r6, #8]
 800e6f4:	f008 fa10 	bl	8016b18 <rcl_clock_init>
 800e6f8:	4605      	mov	r5, r0
 800e6fa:	b970      	cbnz	r0, 800e71a <rclc_support_init+0x82>
 800e6fc:	a805      	add	r0, sp, #20
 800e6fe:	f007 fa51 	bl	8015ba4 <rcl_init_options_fini>
 800e702:	b108      	cbz	r0, 800e708 <rclc_support_init+0x70>
 800e704:	f000 f998 	bl	800ea38 <rcutils_reset_error>
 800e708:	4628      	mov	r0, r5
 800e70a:	b006      	add	sp, #24
 800e70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e710:	250b      	movs	r5, #11
 800e712:	4628      	mov	r0, r5
 800e714:	b006      	add	sp, #24
 800e716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e71a:	f000 f98d 	bl	800ea38 <rcutils_reset_error>
 800e71e:	a805      	add	r0, sp, #20
 800e720:	f007 fa40 	bl	8015ba4 <rcl_init_options_fini>
 800e724:	2800      	cmp	r0, #0
 800e726:	d0ef      	beq.n	800e708 <rclc_support_init+0x70>
 800e728:	e7ec      	b.n	800e704 <rclc_support_init+0x6c>
 800e72a:	bf00      	nop

0800e72c <rclc_node_init_default>:
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	bf18      	it	ne
 800e730:	2a00      	cmpne	r2, #0
 800e732:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e736:	4616      	mov	r6, r2
 800e738:	bf0c      	ite	eq
 800e73a:	2201      	moveq	r2, #1
 800e73c:	2200      	movne	r2, #0
 800e73e:	b0a3      	sub	sp, #140	; 0x8c
 800e740:	2900      	cmp	r1, #0
 800e742:	bf08      	it	eq
 800e744:	f042 0201 	orreq.w	r2, r2, #1
 800e748:	bb22      	cbnz	r2, 800e794 <rclc_node_init_default+0x68>
 800e74a:	4604      	mov	r4, r0
 800e74c:	b310      	cbz	r0, 800e794 <rclc_node_init_default+0x68>
 800e74e:	f10d 0810 	add.w	r8, sp, #16
 800e752:	461f      	mov	r7, r3
 800e754:	460d      	mov	r5, r1
 800e756:	f10d 0918 	add.w	r9, sp, #24
 800e75a:	4640      	mov	r0, r8
 800e75c:	f007 face 	bl	8015cfc <rcl_get_zero_initialized_node>
 800e760:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e764:	e884 0003 	stmia.w	r4, {r0, r1}
 800e768:	4648      	mov	r0, r9
 800e76a:	f007 fc61 	bl	8016030 <rcl_node_get_default_options>
 800e76e:	4640      	mov	r0, r8
 800e770:	f007 fac4 	bl	8015cfc <rcl_get_zero_initialized_node>
 800e774:	f8cd 9000 	str.w	r9, [sp]
 800e778:	463b      	mov	r3, r7
 800e77a:	4632      	mov	r2, r6
 800e77c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e780:	e884 0003 	stmia.w	r4, {r0, r1}
 800e784:	4629      	mov	r1, r5
 800e786:	4620      	mov	r0, r4
 800e788:	f007 fac2 	bl	8015d10 <rcl_node_init>
 800e78c:	b930      	cbnz	r0, 800e79c <rclc_node_init_default+0x70>
 800e78e:	b023      	add	sp, #140	; 0x8c
 800e790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e794:	200b      	movs	r0, #11
 800e796:	b023      	add	sp, #140	; 0x8c
 800e798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e79c:	9003      	str	r0, [sp, #12]
 800e79e:	f000 f94b 	bl	800ea38 <rcutils_reset_error>
 800e7a2:	f000 f949 	bl	800ea38 <rcutils_reset_error>
 800e7a6:	9803      	ldr	r0, [sp, #12]
 800e7a8:	b023      	add	sp, #140	; 0x8c
 800e7aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7ae:	bf00      	nop

0800e7b0 <rclc_publisher_init_best_effort>:
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	bf18      	it	ne
 800e7b4:	2a00      	cmpne	r2, #0
 800e7b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7ba:	4616      	mov	r6, r2
 800e7bc:	bf0c      	ite	eq
 800e7be:	2201      	moveq	r2, #1
 800e7c0:	2200      	movne	r2, #0
 800e7c2:	b0a0      	sub	sp, #128	; 0x80
 800e7c4:	2900      	cmp	r1, #0
 800e7c6:	bf08      	it	eq
 800e7c8:	f042 0201 	orreq.w	r2, r2, #1
 800e7cc:	bb1a      	cbnz	r2, 800e816 <rclc_publisher_init_best_effort+0x66>
 800e7ce:	4604      	mov	r4, r0
 800e7d0:	b308      	cbz	r0, 800e816 <rclc_publisher_init_best_effort+0x66>
 800e7d2:	f10d 0810 	add.w	r8, sp, #16
 800e7d6:	461f      	mov	r7, r3
 800e7d8:	460d      	mov	r5, r1
 800e7da:	f7fe ff89 	bl	800d6f0 <rcl_get_zero_initialized_publisher>
 800e7de:	6020      	str	r0, [r4, #0]
 800e7e0:	4640      	mov	r0, r8
 800e7e2:	f7ff f827 	bl	800d834 <rcl_publisher_get_default_options>
 800e7e6:	2250      	movs	r2, #80	; 0x50
 800e7e8:	490d      	ldr	r1, [pc, #52]	; (800e820 <rclc_publisher_init_best_effort+0x70>)
 800e7ea:	4640      	mov	r0, r8
 800e7ec:	f00f f947 	bl	801da7e <memcpy>
 800e7f0:	463b      	mov	r3, r7
 800e7f2:	4632      	mov	r2, r6
 800e7f4:	4629      	mov	r1, r5
 800e7f6:	4620      	mov	r0, r4
 800e7f8:	f8cd 8000 	str.w	r8, [sp]
 800e7fc:	f7fe ff7e 	bl	800d6fc <rcl_publisher_init>
 800e800:	b910      	cbnz	r0, 800e808 <rclc_publisher_init_best_effort+0x58>
 800e802:	b020      	add	sp, #128	; 0x80
 800e804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e808:	9003      	str	r0, [sp, #12]
 800e80a:	f000 f915 	bl	800ea38 <rcutils_reset_error>
 800e80e:	9803      	ldr	r0, [sp, #12]
 800e810:	b020      	add	sp, #128	; 0x80
 800e812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e816:	200b      	movs	r0, #11
 800e818:	b020      	add	sp, #128	; 0x80
 800e81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e81e:	bf00      	nop
 800e820:	0801f770 	.word	0x0801f770

0800e824 <rclc_service_init_default>:
 800e824:	2b00      	cmp	r3, #0
 800e826:	bf18      	it	ne
 800e828:	2a00      	cmpne	r2, #0
 800e82a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e82e:	4616      	mov	r6, r2
 800e830:	bf0c      	ite	eq
 800e832:	2201      	moveq	r2, #1
 800e834:	2200      	movne	r2, #0
 800e836:	b09e      	sub	sp, #120	; 0x78
 800e838:	2900      	cmp	r1, #0
 800e83a:	bf08      	it	eq
 800e83c:	f042 0201 	orreq.w	r2, r2, #1
 800e840:	bb1a      	cbnz	r2, 800e88a <rclc_service_init_default+0x66>
 800e842:	4604      	mov	r4, r0
 800e844:	b308      	cbz	r0, 800e88a <rclc_service_init_default+0x66>
 800e846:	f10d 0810 	add.w	r8, sp, #16
 800e84a:	461f      	mov	r7, r3
 800e84c:	460d      	mov	r5, r1
 800e84e:	f007 fdf3 	bl	8016438 <rcl_get_zero_initialized_service>
 800e852:	6020      	str	r0, [r4, #0]
 800e854:	4640      	mov	r0, r8
 800e856:	f007 fe9d 	bl	8016594 <rcl_service_get_default_options>
 800e85a:	2250      	movs	r2, #80	; 0x50
 800e85c:	490d      	ldr	r1, [pc, #52]	; (800e894 <rclc_service_init_default+0x70>)
 800e85e:	4640      	mov	r0, r8
 800e860:	f00f f90d 	bl	801da7e <memcpy>
 800e864:	463b      	mov	r3, r7
 800e866:	4632      	mov	r2, r6
 800e868:	4629      	mov	r1, r5
 800e86a:	4620      	mov	r0, r4
 800e86c:	f8cd 8000 	str.w	r8, [sp]
 800e870:	f007 fde8 	bl	8016444 <rcl_service_init>
 800e874:	b910      	cbnz	r0, 800e87c <rclc_service_init_default+0x58>
 800e876:	b01e      	add	sp, #120	; 0x78
 800e878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e87c:	9003      	str	r0, [sp, #12]
 800e87e:	f000 f8db 	bl	800ea38 <rcutils_reset_error>
 800e882:	9803      	ldr	r0, [sp, #12]
 800e884:	b01e      	add	sp, #120	; 0x78
 800e886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e88a:	200b      	movs	r0, #11
 800e88c:	b01e      	add	sp, #120	; 0x78
 800e88e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e892:	bf00      	nop
 800e894:	0801f7c0 	.word	0x0801f7c0

0800e898 <rclc_subscription_init_best_effort>:
 800e898:	2b00      	cmp	r3, #0
 800e89a:	bf18      	it	ne
 800e89c:	2a00      	cmpne	r2, #0
 800e89e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8a2:	4616      	mov	r6, r2
 800e8a4:	bf0c      	ite	eq
 800e8a6:	2201      	moveq	r2, #1
 800e8a8:	2200      	movne	r2, #0
 800e8aa:	b0a2      	sub	sp, #136	; 0x88
 800e8ac:	2900      	cmp	r1, #0
 800e8ae:	bf08      	it	eq
 800e8b0:	f042 0201 	orreq.w	r2, r2, #1
 800e8b4:	bb1a      	cbnz	r2, 800e8fe <rclc_subscription_init_best_effort+0x66>
 800e8b6:	4604      	mov	r4, r0
 800e8b8:	b308      	cbz	r0, 800e8fe <rclc_subscription_init_best_effort+0x66>
 800e8ba:	f10d 0810 	add.w	r8, sp, #16
 800e8be:	461f      	mov	r7, r3
 800e8c0:	460d      	mov	r5, r1
 800e8c2:	f007 ffb9 	bl	8016838 <rcl_get_zero_initialized_subscription>
 800e8c6:	6020      	str	r0, [r4, #0]
 800e8c8:	4640      	mov	r0, r8
 800e8ca:	f008 f869 	bl	80169a0 <rcl_subscription_get_default_options>
 800e8ce:	2250      	movs	r2, #80	; 0x50
 800e8d0:	490d      	ldr	r1, [pc, #52]	; (800e908 <rclc_subscription_init_best_effort+0x70>)
 800e8d2:	4640      	mov	r0, r8
 800e8d4:	f00f f8d3 	bl	801da7e <memcpy>
 800e8d8:	463b      	mov	r3, r7
 800e8da:	4632      	mov	r2, r6
 800e8dc:	4629      	mov	r1, r5
 800e8de:	4620      	mov	r0, r4
 800e8e0:	f8cd 8000 	str.w	r8, [sp]
 800e8e4:	f007 ffae 	bl	8016844 <rcl_subscription_init>
 800e8e8:	b910      	cbnz	r0, 800e8f0 <rclc_subscription_init_best_effort+0x58>
 800e8ea:	b022      	add	sp, #136	; 0x88
 800e8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8f0:	9003      	str	r0, [sp, #12]
 800e8f2:	f000 f8a1 	bl	800ea38 <rcutils_reset_error>
 800e8f6:	9803      	ldr	r0, [sp, #12]
 800e8f8:	b022      	add	sp, #136	; 0x88
 800e8fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8fe:	200b      	movs	r0, #11
 800e900:	b022      	add	sp, #136	; 0x88
 800e902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e906:	bf00      	nop
 800e908:	0801f810 	.word	0x0801f810

0800e90c <rclc_timer_init_default>:
 800e90c:	b361      	cbz	r1, 800e968 <rclc_timer_init_default+0x5c>
 800e90e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e912:	4606      	mov	r6, r0
 800e914:	b08a      	sub	sp, #40	; 0x28
 800e916:	b318      	cbz	r0, 800e960 <rclc_timer_init_default+0x54>
 800e918:	460d      	mov	r5, r1
 800e91a:	4690      	mov	r8, r2
 800e91c:	461f      	mov	r7, r3
 800e91e:	f008 faf3 	bl	8016f08 <rcl_get_zero_initialized_timer>
 800e922:	68ac      	ldr	r4, [r5, #8]
 800e924:	f10d 0c0c 	add.w	ip, sp, #12
 800e928:	6030      	str	r0, [r6, #0]
 800e92a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e92c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e930:	6823      	ldr	r3, [r4, #0]
 800e932:	462a      	mov	r2, r5
 800e934:	f105 010c 	add.w	r1, r5, #12
 800e938:	4630      	mov	r0, r6
 800e93a:	f8cc 3000 	str.w	r3, [ip]
 800e93e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e940:	e9cd 8700 	strd	r8, r7, [sp]
 800e944:	9302      	str	r3, [sp, #8]
 800e946:	f008 fae5 	bl	8016f14 <rcl_timer_init>
 800e94a:	b910      	cbnz	r0, 800e952 <rclc_timer_init_default+0x46>
 800e94c:	b00a      	add	sp, #40	; 0x28
 800e94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e952:	9009      	str	r0, [sp, #36]	; 0x24
 800e954:	f000 f870 	bl	800ea38 <rcutils_reset_error>
 800e958:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e95a:	b00a      	add	sp, #40	; 0x28
 800e95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e960:	200b      	movs	r0, #11
 800e962:	b00a      	add	sp, #40	; 0x28
 800e964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e968:	200b      	movs	r0, #11
 800e96a:	4770      	bx	lr

0800e96c <__default_zero_allocate>:
 800e96c:	f00e bb78 	b.w	801d060 <calloc>

0800e970 <__default_reallocate>:
 800e970:	f00e bd04 	b.w	801d37c <realloc>

0800e974 <__default_deallocate>:
 800e974:	f00e bbe2 	b.w	801d13c <free>

0800e978 <__default_allocate>:
 800e978:	f00e bbd8 	b.w	801d12c <malloc>

0800e97c <rcutils_get_zero_initialized_allocator>:
 800e97c:	b510      	push	{r4, lr}
 800e97e:	4c05      	ldr	r4, [pc, #20]	; (800e994 <rcutils_get_zero_initialized_allocator+0x18>)
 800e980:	4686      	mov	lr, r0
 800e982:	4684      	mov	ip, r0
 800e984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e986:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e98a:	6823      	ldr	r3, [r4, #0]
 800e98c:	4670      	mov	r0, lr
 800e98e:	f8cc 3000 	str.w	r3, [ip]
 800e992:	bd10      	pop	{r4, pc}
 800e994:	0801f860 	.word	0x0801f860

0800e998 <rcutils_set_default_allocator>:
 800e998:	b1a8      	cbz	r0, 800e9c6 <rcutils_set_default_allocator+0x2e>
 800e99a:	6802      	ldr	r2, [r0, #0]
 800e99c:	b1a2      	cbz	r2, 800e9c8 <rcutils_set_default_allocator+0x30>
 800e99e:	6841      	ldr	r1, [r0, #4]
 800e9a0:	b1a1      	cbz	r1, 800e9cc <rcutils_set_default_allocator+0x34>
 800e9a2:	b410      	push	{r4}
 800e9a4:	68c4      	ldr	r4, [r0, #12]
 800e9a6:	b164      	cbz	r4, 800e9c2 <rcutils_set_default_allocator+0x2a>
 800e9a8:	6880      	ldr	r0, [r0, #8]
 800e9aa:	b138      	cbz	r0, 800e9bc <rcutils_set_default_allocator+0x24>
 800e9ac:	4b08      	ldr	r3, [pc, #32]	; (800e9d0 <rcutils_set_default_allocator+0x38>)
 800e9ae:	601a      	str	r2, [r3, #0]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800e9b6:	2001      	movs	r0, #1
 800e9b8:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800e9bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9c0:	4770      	bx	lr
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	e7fa      	b.n	800e9bc <rcutils_set_default_allocator+0x24>
 800e9c6:	4770      	bx	lr
 800e9c8:	4610      	mov	r0, r2
 800e9ca:	4770      	bx	lr
 800e9cc:	4608      	mov	r0, r1
 800e9ce:	4770      	bx	lr
 800e9d0:	20000b4c 	.word	0x20000b4c

0800e9d4 <rcutils_get_default_allocator>:
 800e9d4:	b510      	push	{r4, lr}
 800e9d6:	4c05      	ldr	r4, [pc, #20]	; (800e9ec <rcutils_get_default_allocator+0x18>)
 800e9d8:	4686      	mov	lr, r0
 800e9da:	4684      	mov	ip, r0
 800e9dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e9de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e9e2:	6823      	ldr	r3, [r4, #0]
 800e9e4:	4670      	mov	r0, lr
 800e9e6:	f8cc 3000 	str.w	r3, [ip]
 800e9ea:	bd10      	pop	{r4, pc}
 800e9ec:	20000b4c 	.word	0x20000b4c

0800e9f0 <rcutils_allocator_is_valid>:
 800e9f0:	b158      	cbz	r0, 800ea0a <rcutils_allocator_is_valid+0x1a>
 800e9f2:	6803      	ldr	r3, [r0, #0]
 800e9f4:	b143      	cbz	r3, 800ea08 <rcutils_allocator_is_valid+0x18>
 800e9f6:	6843      	ldr	r3, [r0, #4]
 800e9f8:	b133      	cbz	r3, 800ea08 <rcutils_allocator_is_valid+0x18>
 800e9fa:	68c3      	ldr	r3, [r0, #12]
 800e9fc:	b123      	cbz	r3, 800ea08 <rcutils_allocator_is_valid+0x18>
 800e9fe:	6880      	ldr	r0, [r0, #8]
 800ea00:	3800      	subs	r0, #0
 800ea02:	bf18      	it	ne
 800ea04:	2001      	movne	r0, #1
 800ea06:	4770      	bx	lr
 800ea08:	4618      	mov	r0, r3
 800ea0a:	4770      	bx	lr

0800ea0c <rcutils_get_error_string>:
 800ea0c:	4b06      	ldr	r3, [pc, #24]	; (800ea28 <rcutils_get_error_string+0x1c>)
 800ea0e:	781b      	ldrb	r3, [r3, #0]
 800ea10:	b13b      	cbz	r3, 800ea22 <rcutils_get_error_string+0x16>
 800ea12:	4b06      	ldr	r3, [pc, #24]	; (800ea2c <rcutils_get_error_string+0x20>)
 800ea14:	781a      	ldrb	r2, [r3, #0]
 800ea16:	b90a      	cbnz	r2, 800ea1c <rcutils_get_error_string+0x10>
 800ea18:	2201      	movs	r2, #1
 800ea1a:	701a      	strb	r2, [r3, #0]
 800ea1c:	4b04      	ldr	r3, [pc, #16]	; (800ea30 <rcutils_get_error_string+0x24>)
 800ea1e:	7818      	ldrb	r0, [r3, #0]
 800ea20:	4770      	bx	lr
 800ea22:	4b04      	ldr	r3, [pc, #16]	; (800ea34 <rcutils_get_error_string+0x28>)
 800ea24:	7818      	ldrb	r0, [r3, #0]
 800ea26:	4770      	bx	lr
 800ea28:	2000bc20 	.word	0x2000bc20
 800ea2c:	2000bc39 	.word	0x2000bc39
 800ea30:	2000bc38 	.word	0x2000bc38
 800ea34:	0801eb78 	.word	0x0801eb78

0800ea38 <rcutils_reset_error>:
 800ea38:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800ea58 <rcutils_reset_error+0x20>
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	4a08      	ldr	r2, [pc, #32]	; (800ea60 <rcutils_reset_error+0x28>)
 800ea40:	4808      	ldr	r0, [pc, #32]	; (800ea64 <rcutils_reset_error+0x2c>)
 800ea42:	8013      	strh	r3, [r2, #0]
 800ea44:	4908      	ldr	r1, [pc, #32]	; (800ea68 <rcutils_reset_error+0x30>)
 800ea46:	7003      	strb	r3, [r0, #0]
 800ea48:	700b      	strb	r3, [r1, #0]
 800ea4a:	ed82 7b02 	vstr	d7, [r2, #8]
 800ea4e:	4a07      	ldr	r2, [pc, #28]	; (800ea6c <rcutils_reset_error+0x34>)
 800ea50:	7013      	strb	r3, [r2, #0]
 800ea52:	4770      	bx	lr
 800ea54:	f3af 8000 	nop.w
	...
 800ea60:	2000bc28 	.word	0x2000bc28
 800ea64:	2000bc39 	.word	0x2000bc39
 800ea68:	2000bc38 	.word	0x2000bc38
 800ea6c:	2000bc20 	.word	0x2000bc20

0800ea70 <rcutils_system_time_now>:
 800ea70:	b310      	cbz	r0, 800eab8 <rcutils_system_time_now+0x48>
 800ea72:	b570      	push	{r4, r5, r6, lr}
 800ea74:	b084      	sub	sp, #16
 800ea76:	4604      	mov	r4, r0
 800ea78:	2001      	movs	r0, #1
 800ea7a:	4669      	mov	r1, sp
 800ea7c:	f7f4 fb30 	bl	80030e0 <clock_gettime>
 800ea80:	2800      	cmp	r0, #0
 800ea82:	db16      	blt.n	800eab2 <rcutils_system_time_now+0x42>
 800ea84:	e9dd 3100 	ldrd	r3, r1, [sp]
 800ea88:	2900      	cmp	r1, #0
 800ea8a:	db12      	blt.n	800eab2 <rcutils_system_time_now+0x42>
 800ea8c:	ea53 0201 	orrs.w	r2, r3, r1
 800ea90:	9d02      	ldr	r5, [sp, #8]
 800ea92:	d101      	bne.n	800ea98 <rcutils_system_time_now+0x28>
 800ea94:	2d00      	cmp	r5, #0
 800ea96:	db0c      	blt.n	800eab2 <rcutils_system_time_now+0x42>
 800ea98:	4e08      	ldr	r6, [pc, #32]	; (800eabc <rcutils_system_time_now+0x4c>)
 800ea9a:	2000      	movs	r0, #0
 800ea9c:	fba3 3206 	umull	r3, r2, r3, r6
 800eaa0:	195b      	adds	r3, r3, r5
 800eaa2:	fb06 2201 	mla	r2, r6, r1, r2
 800eaa6:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800eaaa:	e9c4 3200 	strd	r3, r2, [r4]
 800eaae:	b004      	add	sp, #16
 800eab0:	bd70      	pop	{r4, r5, r6, pc}
 800eab2:	2002      	movs	r0, #2
 800eab4:	b004      	add	sp, #16
 800eab6:	bd70      	pop	{r4, r5, r6, pc}
 800eab8:	200b      	movs	r0, #11
 800eaba:	4770      	bx	lr
 800eabc:	3b9aca00 	.word	0x3b9aca00

0800eac0 <rcutils_steady_time_now>:
 800eac0:	b310      	cbz	r0, 800eb08 <rcutils_steady_time_now+0x48>
 800eac2:	b570      	push	{r4, r5, r6, lr}
 800eac4:	b084      	sub	sp, #16
 800eac6:	4604      	mov	r4, r0
 800eac8:	2000      	movs	r0, #0
 800eaca:	4669      	mov	r1, sp
 800eacc:	f7f4 fb08 	bl	80030e0 <clock_gettime>
 800ead0:	2800      	cmp	r0, #0
 800ead2:	db16      	blt.n	800eb02 <rcutils_steady_time_now+0x42>
 800ead4:	e9dd 3100 	ldrd	r3, r1, [sp]
 800ead8:	2900      	cmp	r1, #0
 800eada:	db12      	blt.n	800eb02 <rcutils_steady_time_now+0x42>
 800eadc:	ea53 0201 	orrs.w	r2, r3, r1
 800eae0:	9d02      	ldr	r5, [sp, #8]
 800eae2:	d101      	bne.n	800eae8 <rcutils_steady_time_now+0x28>
 800eae4:	2d00      	cmp	r5, #0
 800eae6:	db0c      	blt.n	800eb02 <rcutils_steady_time_now+0x42>
 800eae8:	4e08      	ldr	r6, [pc, #32]	; (800eb0c <rcutils_steady_time_now+0x4c>)
 800eaea:	2000      	movs	r0, #0
 800eaec:	fba3 3206 	umull	r3, r2, r3, r6
 800eaf0:	195b      	adds	r3, r3, r5
 800eaf2:	fb06 2201 	mla	r2, r6, r1, r2
 800eaf6:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800eafa:	e9c4 3200 	strd	r3, r2, [r4]
 800eafe:	b004      	add	sp, #16
 800eb00:	bd70      	pop	{r4, r5, r6, pc}
 800eb02:	2002      	movs	r0, #2
 800eb04:	b004      	add	sp, #16
 800eb06:	bd70      	pop	{r4, r5, r6, pc}
 800eb08:	200b      	movs	r0, #11
 800eb0a:	4770      	bx	lr
 800eb0c:	3b9aca00 	.word	0x3b9aca00

0800eb10 <rmw_get_default_publisher_options>:
 800eb10:	2200      	movs	r2, #0
 800eb12:	6002      	str	r2, [r0, #0]
 800eb14:	7102      	strb	r2, [r0, #4]
 800eb16:	4770      	bx	lr

0800eb18 <rmw_uros_set_custom_transport>:
 800eb18:	b470      	push	{r4, r5, r6}
 800eb1a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800eb1e:	b162      	cbz	r2, 800eb3a <rmw_uros_set_custom_transport+0x22>
 800eb20:	b15b      	cbz	r3, 800eb3a <rmw_uros_set_custom_transport+0x22>
 800eb22:	b155      	cbz	r5, 800eb3a <rmw_uros_set_custom_transport+0x22>
 800eb24:	b14e      	cbz	r6, 800eb3a <rmw_uros_set_custom_transport+0x22>
 800eb26:	4c06      	ldr	r4, [pc, #24]	; (800eb40 <rmw_uros_set_custom_transport+0x28>)
 800eb28:	7020      	strb	r0, [r4, #0]
 800eb2a:	2000      	movs	r0, #0
 800eb2c:	6166      	str	r6, [r4, #20]
 800eb2e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800eb32:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800eb36:	bc70      	pop	{r4, r5, r6}
 800eb38:	4770      	bx	lr
 800eb3a:	200b      	movs	r0, #11
 800eb3c:	bc70      	pop	{r4, r5, r6}
 800eb3e:	4770      	bx	lr
 800eb40:	2000bc3c 	.word	0x2000bc3c

0800eb44 <flush_session>:
 800eb44:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800eb46:	f003 be87 	b.w	8012858 <uxr_run_session_until_confirm_delivery>
 800eb4a:	bf00      	nop

0800eb4c <rmw_publish>:
 800eb4c:	2800      	cmp	r0, #0
 800eb4e:	d053      	beq.n	800ebf8 <rmw_publish+0xac>
 800eb50:	b570      	push	{r4, r5, r6, lr}
 800eb52:	460d      	mov	r5, r1
 800eb54:	b08e      	sub	sp, #56	; 0x38
 800eb56:	2900      	cmp	r1, #0
 800eb58:	d04b      	beq.n	800ebf2 <rmw_publish+0xa6>
 800eb5a:	4604      	mov	r4, r0
 800eb5c:	6800      	ldr	r0, [r0, #0]
 800eb5e:	f000 fd97 	bl	800f690 <is_uxrce_rmw_identifier_valid>
 800eb62:	2800      	cmp	r0, #0
 800eb64:	d045      	beq.n	800ebf2 <rmw_publish+0xa6>
 800eb66:	6866      	ldr	r6, [r4, #4]
 800eb68:	2e00      	cmp	r6, #0
 800eb6a:	d042      	beq.n	800ebf2 <rmw_publish+0xa6>
 800eb6c:	69b4      	ldr	r4, [r6, #24]
 800eb6e:	4628      	mov	r0, r5
 800eb70:	6923      	ldr	r3, [r4, #16]
 800eb72:	4798      	blx	r3
 800eb74:	69f3      	ldr	r3, [r6, #28]
 800eb76:	9005      	str	r0, [sp, #20]
 800eb78:	b113      	cbz	r3, 800eb80 <rmw_publish+0x34>
 800eb7a:	a805      	add	r0, sp, #20
 800eb7c:	4798      	blx	r3
 800eb7e:	9805      	ldr	r0, [sp, #20]
 800eb80:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800eb84:	691b      	ldr	r3, [r3, #16]
 800eb86:	9000      	str	r0, [sp, #0]
 800eb88:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800eb8c:	6972      	ldr	r2, [r6, #20]
 800eb8e:	ab06      	add	r3, sp, #24
 800eb90:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800eb92:	f004 fc5f 	bl	8013454 <uxr_prepare_output_stream>
 800eb96:	b1d8      	cbz	r0, 800ebd0 <rmw_publish+0x84>
 800eb98:	68a3      	ldr	r3, [r4, #8]
 800eb9a:	a906      	add	r1, sp, #24
 800eb9c:	4628      	mov	r0, r5
 800eb9e:	4798      	blx	r3
 800eba0:	6a33      	ldr	r3, [r6, #32]
 800eba2:	4604      	mov	r4, r0
 800eba4:	b10b      	cbz	r3, 800ebaa <rmw_publish+0x5e>
 800eba6:	a806      	add	r0, sp, #24
 800eba8:	4798      	blx	r3
 800ebaa:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800ebae:	2b01      	cmp	r3, #1
 800ebb0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ebb4:	d022      	beq.n	800ebfc <rmw_publish+0xb0>
 800ebb6:	6918      	ldr	r0, [r3, #16]
 800ebb8:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800ebba:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ebbe:	f003 fe4b 	bl	8012858 <uxr_run_session_until_confirm_delivery>
 800ebc2:	4020      	ands	r0, r4
 800ebc4:	b2c4      	uxtb	r4, r0
 800ebc6:	f084 0001 	eor.w	r0, r4, #1
 800ebca:	b2c0      	uxtb	r0, r0
 800ebcc:	b00e      	add	sp, #56	; 0x38
 800ebce:	bd70      	pop	{r4, r5, r6, pc}
 800ebd0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ebd4:	6918      	ldr	r0, [r3, #16]
 800ebd6:	9b05      	ldr	r3, [sp, #20]
 800ebd8:	9602      	str	r6, [sp, #8]
 800ebda:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ebde:	9300      	str	r3, [sp, #0]
 800ebe0:	4b09      	ldr	r3, [pc, #36]	; (800ec08 <rmw_publish+0xbc>)
 800ebe2:	9301      	str	r3, [sp, #4]
 800ebe4:	ab06      	add	r3, sp, #24
 800ebe6:	6972      	ldr	r2, [r6, #20]
 800ebe8:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800ebea:	f004 fc63 	bl	80134b4 <uxr_prepare_output_stream_fragmented>
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	d1d2      	bne.n	800eb98 <rmw_publish+0x4c>
 800ebf2:	2001      	movs	r0, #1
 800ebf4:	b00e      	add	sp, #56	; 0x38
 800ebf6:	bd70      	pop	{r4, r5, r6, pc}
 800ebf8:	2001      	movs	r0, #1
 800ebfa:	4770      	bx	lr
 800ebfc:	6918      	ldr	r0, [r3, #16]
 800ebfe:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ec02:	f003 fa6f 	bl	80120e4 <uxr_flash_output_streams>
 800ec06:	e7de      	b.n	800ebc6 <rmw_publish+0x7a>
 800ec08:	0800eb45 	.word	0x0800eb45

0800ec0c <rmw_create_publisher>:
 800ec0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec10:	b087      	sub	sp, #28
 800ec12:	2800      	cmp	r0, #0
 800ec14:	f000 80d2 	beq.w	800edbc <rmw_create_publisher+0x1b0>
 800ec18:	460e      	mov	r6, r1
 800ec1a:	2900      	cmp	r1, #0
 800ec1c:	f000 80ce 	beq.w	800edbc <rmw_create_publisher+0x1b0>
 800ec20:	4604      	mov	r4, r0
 800ec22:	6800      	ldr	r0, [r0, #0]
 800ec24:	4615      	mov	r5, r2
 800ec26:	461f      	mov	r7, r3
 800ec28:	f000 fd32 	bl	800f690 <is_uxrce_rmw_identifier_valid>
 800ec2c:	f080 0001 	eor.w	r0, r0, #1
 800ec30:	b2c0      	uxtb	r0, r0
 800ec32:	2800      	cmp	r0, #0
 800ec34:	f040 80c2 	bne.w	800edbc <rmw_create_publisher+0x1b0>
 800ec38:	2d00      	cmp	r5, #0
 800ec3a:	f000 80bf 	beq.w	800edbc <rmw_create_publisher+0x1b0>
 800ec3e:	782b      	ldrb	r3, [r5, #0]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	f000 80bb 	beq.w	800edbc <rmw_create_publisher+0x1b0>
 800ec46:	2f00      	cmp	r7, #0
 800ec48:	f000 80b8 	beq.w	800edbc <rmw_create_publisher+0x1b0>
 800ec4c:	485e      	ldr	r0, [pc, #376]	; (800edc8 <rmw_create_publisher+0x1bc>)
 800ec4e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ec52:	f00a fc67 	bl	8019524 <get_memory>
 800ec56:	2800      	cmp	r0, #0
 800ec58:	f000 80b0 	beq.w	800edbc <rmw_create_publisher+0x1b0>
 800ec5c:	6884      	ldr	r4, [r0, #8]
 800ec5e:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 800ec62:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800ec66:	f00a fce3 	bl	8019630 <rmw_get_implementation_identifier>
 800ec6a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800ec6e:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800ec72:	4628      	mov	r0, r5
 800ec74:	f7f1 fb44 	bl	8000300 <strlen>
 800ec78:	3001      	adds	r0, #1
 800ec7a:	f104 0884 	add.w	r8, r4, #132	; 0x84
 800ec7e:	283c      	cmp	r0, #60	; 0x3c
 800ec80:	f200 808f 	bhi.w	800eda2 <rmw_create_publisher+0x196>
 800ec84:	462b      	mov	r3, r5
 800ec86:	4a51      	ldr	r2, [pc, #324]	; (800edcc <rmw_create_publisher+0x1c0>)
 800ec88:	213c      	movs	r1, #60	; 0x3c
 800ec8a:	4650      	mov	r0, sl
 800ec8c:	f00e fcec 	bl	801d668 <sniprintf>
 800ec90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ec94:	4639      	mov	r1, r7
 800ec96:	2250      	movs	r2, #80	; 0x50
 800ec98:	67e3      	str	r3, [r4, #124]	; 0x7c
 800ec9a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ec9e:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 800eca2:	f00e feec 	bl	801da7e <memcpy>
 800eca6:	7a3b      	ldrb	r3, [r7, #8]
 800eca8:	4630      	mov	r0, r6
 800ecaa:	4949      	ldr	r1, [pc, #292]	; (800edd0 <rmw_create_publisher+0x1c4>)
 800ecac:	2b02      	cmp	r3, #2
 800ecae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ecb2:	bf0c      	ite	eq
 800ecb4:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800ecb8:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800ecbc:	67a3      	str	r3, [r4, #120]	; 0x78
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800ecc4:	f000 fcf2 	bl	800f6ac <get_message_typesupport_handle>
 800ecc8:	2800      	cmp	r0, #0
 800ecca:	d06a      	beq.n	800eda2 <rmw_create_publisher+0x196>
 800eccc:	6842      	ldr	r2, [r0, #4]
 800ecce:	61a2      	str	r2, [r4, #24]
 800ecd0:	2a00      	cmp	r2, #0
 800ecd2:	d066      	beq.n	800eda2 <rmw_create_publisher+0x196>
 800ecd4:	4629      	mov	r1, r5
 800ecd6:	463b      	mov	r3, r7
 800ecd8:	4648      	mov	r0, r9
 800ecda:	f00a fee7 	bl	8019aac <create_topic>
 800ecde:	6260      	str	r0, [r4, #36]	; 0x24
 800ece0:	2800      	cmp	r0, #0
 800ece2:	d062      	beq.n	800edaa <rmw_create_publisher+0x19e>
 800ece4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ece8:	2103      	movs	r1, #3
 800ecea:	2506      	movs	r5, #6
 800ecec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ecf0:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 800ecf4:	1c42      	adds	r2, r0, #1
 800ecf6:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 800ecfa:	f003 f8a3 	bl	8011e44 <uxr_object_id>
 800ecfe:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800ed02:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ed06:	6120      	str	r0, [r4, #16]
 800ed08:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800ed0c:	6910      	ldr	r0, [r2, #16]
 800ed0e:	9500      	str	r5, [sp, #0]
 800ed10:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ed14:	6819      	ldr	r1, [r3, #0]
 800ed16:	6922      	ldr	r2, [r4, #16]
 800ed18:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ed1c:	f002 ff0a 	bl	8011b34 <uxr_buffer_create_publisher_bin>
 800ed20:	4602      	mov	r2, r0
 800ed22:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ed26:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800ed2a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ed2e:	f000 fb9d 	bl	800f46c <run_xrce_session>
 800ed32:	b3b0      	cbz	r0, 800eda2 <rmw_create_publisher+0x196>
 800ed34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ed38:	2105      	movs	r1, #5
 800ed3a:	f10d 0a10 	add.w	sl, sp, #16
 800ed3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed42:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 800ed46:	1c42      	adds	r2, r0, #1
 800ed48:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 800ed4c:	f003 f87a 	bl	8011e44 <uxr_object_id>
 800ed50:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800ed54:	4639      	mov	r1, r7
 800ed56:	6160      	str	r0, [r4, #20]
 800ed58:	691e      	ldr	r6, [r3, #16]
 800ed5a:	4650      	mov	r0, sl
 800ed5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ed60:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800ed64:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 800ed68:	f8d3 7384 	ldr.w	r7, [r3, #900]	; 0x384
 800ed6c:	f000 fb9a 	bl	800f4a4 <convert_qos_profile>
 800ed70:	9503      	str	r5, [sp, #12]
 800ed72:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800ed76:	9001      	str	r0, [sp, #4]
 800ed78:	4630      	mov	r0, r6
 800ed7a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ed7e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ed82:	9300      	str	r3, [sp, #0]
 800ed84:	6839      	ldr	r1, [r7, #0]
 800ed86:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800ed8a:	f002 ff33 	bl	8011bf4 <uxr_buffer_create_datawriter_bin>
 800ed8e:	4602      	mov	r2, r0
 800ed90:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ed94:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800ed98:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ed9c:	f000 fb66 	bl	800f46c <run_xrce_session>
 800eda0:	b970      	cbnz	r0, 800edc0 <rmw_create_publisher+0x1b4>
 800eda2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800eda4:	b108      	cbz	r0, 800edaa <rmw_create_publisher+0x19e>
 800eda6:	f000 fa53 	bl	800f250 <rmw_uxrce_fini_topic_memory>
 800edaa:	4640      	mov	r0, r8
 800edac:	f04f 0800 	mov.w	r8, #0
 800edb0:	f000 f9f6 	bl	800f1a0 <rmw_uxrce_fini_publisher_memory>
 800edb4:	4640      	mov	r0, r8
 800edb6:	b007      	add	sp, #28
 800edb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edbc:	f04f 0800 	mov.w	r8, #0
 800edc0:	4640      	mov	r0, r8
 800edc2:	b007      	add	sp, #28
 800edc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edc8:	200105fc 	.word	0x200105fc
 800edcc:	0801f884 	.word	0x0801f884
 800edd0:	0801ea1c 	.word	0x0801ea1c

0800edd4 <rmw_publisher_get_actual_qos>:
 800edd4:	b178      	cbz	r0, 800edf6 <rmw_publisher_get_actual_qos+0x22>
 800edd6:	b510      	push	{r4, lr}
 800edd8:	fab1 f481 	clz	r4, r1
 800eddc:	0964      	lsrs	r4, r4, #5
 800edde:	b141      	cbz	r1, 800edf2 <rmw_publisher_get_actual_qos+0x1e>
 800ede0:	6843      	ldr	r3, [r0, #4]
 800ede2:	2250      	movs	r2, #80	; 0x50
 800ede4:	4608      	mov	r0, r1
 800ede6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800edea:	f00e fe48 	bl	801da7e <memcpy>
 800edee:	4620      	mov	r0, r4
 800edf0:	bd10      	pop	{r4, pc}
 800edf2:	200b      	movs	r0, #11
 800edf4:	bd10      	pop	{r4, pc}
 800edf6:	200b      	movs	r0, #11
 800edf8:	4770      	bx	lr
 800edfa:	bf00      	nop

0800edfc <rmw_destroy_publisher>:
 800edfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee00:	b128      	cbz	r0, 800ee0e <rmw_destroy_publisher+0x12>
 800ee02:	4604      	mov	r4, r0
 800ee04:	6800      	ldr	r0, [r0, #0]
 800ee06:	460d      	mov	r5, r1
 800ee08:	f000 fc42 	bl	800f690 <is_uxrce_rmw_identifier_valid>
 800ee0c:	b918      	cbnz	r0, 800ee16 <rmw_destroy_publisher+0x1a>
 800ee0e:	2401      	movs	r4, #1
 800ee10:	4620      	mov	r0, r4
 800ee12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee16:	6863      	ldr	r3, [r4, #4]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d0f8      	beq.n	800ee0e <rmw_destroy_publisher+0x12>
 800ee1c:	fab5 f485 	clz	r4, r5
 800ee20:	0964      	lsrs	r4, r4, #5
 800ee22:	2d00      	cmp	r5, #0
 800ee24:	d0f3      	beq.n	800ee0e <rmw_destroy_publisher+0x12>
 800ee26:	6828      	ldr	r0, [r5, #0]
 800ee28:	f000 fc32 	bl	800f690 <is_uxrce_rmw_identifier_valid>
 800ee2c:	2800      	cmp	r0, #0
 800ee2e:	d0ee      	beq.n	800ee0e <rmw_destroy_publisher+0x12>
 800ee30:	686e      	ldr	r6, [r5, #4]
 800ee32:	2e00      	cmp	r6, #0
 800ee34:	d0eb      	beq.n	800ee0e <rmw_destroy_publisher+0x12>
 800ee36:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800ee38:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 800ee3c:	f00a fe86 	bl	8019b4c <destroy_topic>
 800ee40:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ee44:	6972      	ldr	r2, [r6, #20]
 800ee46:	6918      	ldr	r0, [r3, #16]
 800ee48:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800ee4c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ee50:	6819      	ldr	r1, [r3, #0]
 800ee52:	f002 fdbb 	bl	80119cc <uxr_buffer_delete_entity>
 800ee56:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ee5a:	4680      	mov	r8, r0
 800ee5c:	6932      	ldr	r2, [r6, #16]
 800ee5e:	6918      	ldr	r0, [r3, #16]
 800ee60:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800ee64:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ee68:	6819      	ldr	r1, [r3, #0]
 800ee6a:	f002 fdaf 	bl	80119cc <uxr_buffer_delete_entity>
 800ee6e:	4606      	mov	r6, r0
 800ee70:	6938      	ldr	r0, [r7, #16]
 800ee72:	4642      	mov	r2, r8
 800ee74:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800ee78:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800ee7c:	f000 faf6 	bl	800f46c <run_xrce_session>
 800ee80:	693f      	ldr	r7, [r7, #16]
 800ee82:	4632      	mov	r2, r6
 800ee84:	4606      	mov	r6, r0
 800ee86:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800ee8a:	4638      	mov	r0, r7
 800ee8c:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800ee90:	f000 faec 	bl	800f46c <run_xrce_session>
 800ee94:	b126      	cbz	r6, 800eea0 <rmw_destroy_publisher+0xa4>
 800ee96:	b118      	cbz	r0, 800eea0 <rmw_destroy_publisher+0xa4>
 800ee98:	4628      	mov	r0, r5
 800ee9a:	f000 f981 	bl	800f1a0 <rmw_uxrce_fini_publisher_memory>
 800ee9e:	e7b7      	b.n	800ee10 <rmw_destroy_publisher+0x14>
 800eea0:	2402      	movs	r4, #2
 800eea2:	e7f9      	b.n	800ee98 <rmw_destroy_publisher+0x9c>

0800eea4 <rmw_uxrce_init_service_memory>:
 800eea4:	b1e2      	cbz	r2, 800eee0 <rmw_uxrce_init_service_memory+0x3c>
 800eea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeaa:	7b05      	ldrb	r5, [r0, #12]
 800eeac:	4606      	mov	r6, r0
 800eeae:	b9ad      	cbnz	r5, 800eedc <rmw_uxrce_init_service_memory+0x38>
 800eeb0:	23c8      	movs	r3, #200	; 0xc8
 800eeb2:	4617      	mov	r7, r2
 800eeb4:	460c      	mov	r4, r1
 800eeb6:	46a8      	mov	r8, r5
 800eeb8:	6083      	str	r3, [r0, #8]
 800eeba:	f240 1301 	movw	r3, #257	; 0x101
 800eebe:	e9c0 5500 	strd	r5, r5, [r0]
 800eec2:	8183      	strh	r3, [r0, #12]
 800eec4:	3501      	adds	r5, #1
 800eec6:	4621      	mov	r1, r4
 800eec8:	4630      	mov	r0, r6
 800eeca:	f00a fb3b 	bl	8019544 <put_memory>
 800eece:	42af      	cmp	r7, r5
 800eed0:	60a4      	str	r4, [r4, #8]
 800eed2:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800eed6:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800eeda:	d1f3      	bne.n	800eec4 <rmw_uxrce_init_service_memory+0x20>
 800eedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eee0:	4770      	bx	lr
 800eee2:	bf00      	nop

0800eee4 <rmw_uxrce_init_client_memory>:
 800eee4:	b1e2      	cbz	r2, 800ef20 <rmw_uxrce_init_client_memory+0x3c>
 800eee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeea:	7b05      	ldrb	r5, [r0, #12]
 800eeec:	4606      	mov	r6, r0
 800eeee:	b9ad      	cbnz	r5, 800ef1c <rmw_uxrce_init_client_memory+0x38>
 800eef0:	23c8      	movs	r3, #200	; 0xc8
 800eef2:	4617      	mov	r7, r2
 800eef4:	460c      	mov	r4, r1
 800eef6:	46a8      	mov	r8, r5
 800eef8:	6083      	str	r3, [r0, #8]
 800eefa:	f240 1301 	movw	r3, #257	; 0x101
 800eefe:	e9c0 5500 	strd	r5, r5, [r0]
 800ef02:	8183      	strh	r3, [r0, #12]
 800ef04:	3501      	adds	r5, #1
 800ef06:	4621      	mov	r1, r4
 800ef08:	4630      	mov	r0, r6
 800ef0a:	f00a fb1b 	bl	8019544 <put_memory>
 800ef0e:	42af      	cmp	r7, r5
 800ef10:	60a4      	str	r4, [r4, #8]
 800ef12:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800ef16:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800ef1a:	d1f3      	bne.n	800ef04 <rmw_uxrce_init_client_memory+0x20>
 800ef1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef20:	4770      	bx	lr
 800ef22:	bf00      	nop

0800ef24 <rmw_uxrce_init_publisher_memory>:
 800ef24:	b1e2      	cbz	r2, 800ef60 <rmw_uxrce_init_publisher_memory+0x3c>
 800ef26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef2a:	7b05      	ldrb	r5, [r0, #12]
 800ef2c:	4606      	mov	r6, r0
 800ef2e:	b9ad      	cbnz	r5, 800ef5c <rmw_uxrce_init_publisher_memory+0x38>
 800ef30:	23d8      	movs	r3, #216	; 0xd8
 800ef32:	4617      	mov	r7, r2
 800ef34:	460c      	mov	r4, r1
 800ef36:	46a8      	mov	r8, r5
 800ef38:	6083      	str	r3, [r0, #8]
 800ef3a:	f240 1301 	movw	r3, #257	; 0x101
 800ef3e:	e9c0 5500 	strd	r5, r5, [r0]
 800ef42:	8183      	strh	r3, [r0, #12]
 800ef44:	3501      	adds	r5, #1
 800ef46:	4621      	mov	r1, r4
 800ef48:	4630      	mov	r0, r6
 800ef4a:	f00a fafb 	bl	8019544 <put_memory>
 800ef4e:	42af      	cmp	r7, r5
 800ef50:	60a4      	str	r4, [r4, #8]
 800ef52:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800ef56:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800ef5a:	d1f3      	bne.n	800ef44 <rmw_uxrce_init_publisher_memory+0x20>
 800ef5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef60:	4770      	bx	lr
 800ef62:	bf00      	nop

0800ef64 <rmw_uxrce_init_subscription_memory>:
 800ef64:	b1e2      	cbz	r2, 800efa0 <rmw_uxrce_init_subscription_memory+0x3c>
 800ef66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef6a:	7b05      	ldrb	r5, [r0, #12]
 800ef6c:	4606      	mov	r6, r0
 800ef6e:	b9ad      	cbnz	r5, 800ef9c <rmw_uxrce_init_subscription_memory+0x38>
 800ef70:	23d8      	movs	r3, #216	; 0xd8
 800ef72:	4617      	mov	r7, r2
 800ef74:	460c      	mov	r4, r1
 800ef76:	46a8      	mov	r8, r5
 800ef78:	6083      	str	r3, [r0, #8]
 800ef7a:	f240 1301 	movw	r3, #257	; 0x101
 800ef7e:	e9c0 5500 	strd	r5, r5, [r0]
 800ef82:	8183      	strh	r3, [r0, #12]
 800ef84:	3501      	adds	r5, #1
 800ef86:	4621      	mov	r1, r4
 800ef88:	4630      	mov	r0, r6
 800ef8a:	f00a fadb 	bl	8019544 <put_memory>
 800ef8e:	42af      	cmp	r7, r5
 800ef90:	60a4      	str	r4, [r4, #8]
 800ef92:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800ef96:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800ef9a:	d1f3      	bne.n	800ef84 <rmw_uxrce_init_subscription_memory+0x20>
 800ef9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efa0:	4770      	bx	lr
 800efa2:	bf00      	nop

0800efa4 <rmw_uxrce_init_node_memory>:
 800efa4:	b1e2      	cbz	r2, 800efe0 <rmw_uxrce_init_node_memory+0x3c>
 800efa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efaa:	7b05      	ldrb	r5, [r0, #12]
 800efac:	4606      	mov	r6, r0
 800efae:	b9ad      	cbnz	r5, 800efdc <rmw_uxrce_init_node_memory+0x38>
 800efb0:	23a4      	movs	r3, #164	; 0xa4
 800efb2:	4617      	mov	r7, r2
 800efb4:	460c      	mov	r4, r1
 800efb6:	46a8      	mov	r8, r5
 800efb8:	6083      	str	r3, [r0, #8]
 800efba:	f240 1301 	movw	r3, #257	; 0x101
 800efbe:	e9c0 5500 	strd	r5, r5, [r0]
 800efc2:	8183      	strh	r3, [r0, #12]
 800efc4:	3501      	adds	r5, #1
 800efc6:	4621      	mov	r1, r4
 800efc8:	4630      	mov	r0, r6
 800efca:	f00a fabb 	bl	8019544 <put_memory>
 800efce:	42af      	cmp	r7, r5
 800efd0:	60a4      	str	r4, [r4, #8]
 800efd2:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800efd6:	f804 8c98 	strb.w	r8, [r4, #-152]
 800efda:	d1f3      	bne.n	800efc4 <rmw_uxrce_init_node_memory+0x20>
 800efdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efe0:	4770      	bx	lr
 800efe2:	bf00      	nop

0800efe4 <rmw_uxrce_init_session_memory>:
 800efe4:	b1ea      	cbz	r2, 800f022 <rmw_uxrce_init_session_memory+0x3e>
 800efe6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efea:	7b05      	ldrb	r5, [r0, #12]
 800efec:	4606      	mov	r6, r0
 800efee:	b9b5      	cbnz	r5, 800f01e <rmw_uxrce_init_session_memory+0x3a>
 800eff0:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800eff4:	f240 1301 	movw	r3, #257	; 0x101
 800eff8:	4617      	mov	r7, r2
 800effa:	460c      	mov	r4, r1
 800effc:	46a9      	mov	r9, r5
 800effe:	f8c0 8008 	str.w	r8, [r0, #8]
 800f002:	8183      	strh	r3, [r0, #12]
 800f004:	e9c0 5500 	strd	r5, r5, [r0]
 800f008:	3501      	adds	r5, #1
 800f00a:	4621      	mov	r1, r4
 800f00c:	4630      	mov	r0, r6
 800f00e:	f00a fa99 	bl	8019544 <put_memory>
 800f012:	42af      	cmp	r7, r5
 800f014:	60a4      	str	r4, [r4, #8]
 800f016:	f884 900c 	strb.w	r9, [r4, #12]
 800f01a:	4444      	add	r4, r8
 800f01c:	d1f4      	bne.n	800f008 <rmw_uxrce_init_session_memory+0x24>
 800f01e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f022:	4770      	bx	lr

0800f024 <rmw_uxrce_init_topic_memory>:
 800f024:	b1e2      	cbz	r2, 800f060 <rmw_uxrce_init_topic_memory+0x3c>
 800f026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f02a:	7b05      	ldrb	r5, [r0, #12]
 800f02c:	4606      	mov	r6, r0
 800f02e:	b9ad      	cbnz	r5, 800f05c <rmw_uxrce_init_topic_memory+0x38>
 800f030:	231c      	movs	r3, #28
 800f032:	4617      	mov	r7, r2
 800f034:	460c      	mov	r4, r1
 800f036:	46a8      	mov	r8, r5
 800f038:	6083      	str	r3, [r0, #8]
 800f03a:	f240 1301 	movw	r3, #257	; 0x101
 800f03e:	e9c0 5500 	strd	r5, r5, [r0]
 800f042:	8183      	strh	r3, [r0, #12]
 800f044:	3501      	adds	r5, #1
 800f046:	4621      	mov	r1, r4
 800f048:	4630      	mov	r0, r6
 800f04a:	f00a fa7b 	bl	8019544 <put_memory>
 800f04e:	42af      	cmp	r7, r5
 800f050:	60a4      	str	r4, [r4, #8]
 800f052:	f104 041c 	add.w	r4, r4, #28
 800f056:	f804 8c10 	strb.w	r8, [r4, #-16]
 800f05a:	d1f3      	bne.n	800f044 <rmw_uxrce_init_topic_memory+0x20>
 800f05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f060:	4770      	bx	lr
 800f062:	bf00      	nop

0800f064 <rmw_uxrce_init_static_input_buffer_memory>:
 800f064:	b1ea      	cbz	r2, 800f0a2 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800f066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f06a:	7b05      	ldrb	r5, [r0, #12]
 800f06c:	4606      	mov	r6, r0
 800f06e:	b9b5      	cbnz	r5, 800f09e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800f070:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800f074:	4617      	mov	r7, r2
 800f076:	460c      	mov	r4, r1
 800f078:	46a8      	mov	r8, r5
 800f07a:	6083      	str	r3, [r0, #8]
 800f07c:	f240 1301 	movw	r3, #257	; 0x101
 800f080:	e9c0 5500 	strd	r5, r5, [r0]
 800f084:	8183      	strh	r3, [r0, #12]
 800f086:	3501      	adds	r5, #1
 800f088:	4621      	mov	r1, r4
 800f08a:	4630      	mov	r0, r6
 800f08c:	f00a fa5a 	bl	8019544 <put_memory>
 800f090:	42af      	cmp	r7, r5
 800f092:	60a4      	str	r4, [r4, #8]
 800f094:	f884 800c 	strb.w	r8, [r4, #12]
 800f098:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800f09c:	d1f3      	bne.n	800f086 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800f09e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0a2:	4770      	bx	lr

0800f0a4 <rmw_uxrce_init_init_options_impl_memory>:
 800f0a4:	b1e2      	cbz	r2, 800f0e0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800f0a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0aa:	7b05      	ldrb	r5, [r0, #12]
 800f0ac:	4606      	mov	r6, r0
 800f0ae:	b9ad      	cbnz	r5, 800f0dc <rmw_uxrce_init_init_options_impl_memory+0x38>
 800f0b0:	232c      	movs	r3, #44	; 0x2c
 800f0b2:	4617      	mov	r7, r2
 800f0b4:	460c      	mov	r4, r1
 800f0b6:	46a8      	mov	r8, r5
 800f0b8:	6083      	str	r3, [r0, #8]
 800f0ba:	f240 1301 	movw	r3, #257	; 0x101
 800f0be:	e9c0 5500 	strd	r5, r5, [r0]
 800f0c2:	8183      	strh	r3, [r0, #12]
 800f0c4:	3501      	adds	r5, #1
 800f0c6:	4621      	mov	r1, r4
 800f0c8:	4630      	mov	r0, r6
 800f0ca:	f00a fa3b 	bl	8019544 <put_memory>
 800f0ce:	42af      	cmp	r7, r5
 800f0d0:	60a4      	str	r4, [r4, #8]
 800f0d2:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800f0d6:	f804 8c20 	strb.w	r8, [r4, #-32]
 800f0da:	d1f3      	bne.n	800f0c4 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800f0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0e0:	4770      	bx	lr
 800f0e2:	bf00      	nop

0800f0e4 <rmw_uxrce_init_wait_set_memory>:
 800f0e4:	b1e2      	cbz	r2, 800f120 <rmw_uxrce_init_wait_set_memory+0x3c>
 800f0e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ea:	7b05      	ldrb	r5, [r0, #12]
 800f0ec:	4606      	mov	r6, r0
 800f0ee:	b9ad      	cbnz	r5, 800f11c <rmw_uxrce_init_wait_set_memory+0x38>
 800f0f0:	231c      	movs	r3, #28
 800f0f2:	4617      	mov	r7, r2
 800f0f4:	460c      	mov	r4, r1
 800f0f6:	46a8      	mov	r8, r5
 800f0f8:	6083      	str	r3, [r0, #8]
 800f0fa:	f240 1301 	movw	r3, #257	; 0x101
 800f0fe:	e9c0 5500 	strd	r5, r5, [r0]
 800f102:	8183      	strh	r3, [r0, #12]
 800f104:	3501      	adds	r5, #1
 800f106:	4621      	mov	r1, r4
 800f108:	4630      	mov	r0, r6
 800f10a:	f00a fa1b 	bl	8019544 <put_memory>
 800f10e:	42af      	cmp	r7, r5
 800f110:	60a4      	str	r4, [r4, #8]
 800f112:	f104 041c 	add.w	r4, r4, #28
 800f116:	f804 8c10 	strb.w	r8, [r4, #-16]
 800f11a:	d1f3      	bne.n	800f104 <rmw_uxrce_init_wait_set_memory+0x20>
 800f11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f120:	4770      	bx	lr
 800f122:	bf00      	nop

0800f124 <rmw_uxrce_init_guard_condition_memory>:
 800f124:	b1e2      	cbz	r2, 800f160 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800f126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f12a:	7b05      	ldrb	r5, [r0, #12]
 800f12c:	4606      	mov	r6, r0
 800f12e:	b9ad      	cbnz	r5, 800f15c <rmw_uxrce_init_guard_condition_memory+0x38>
 800f130:	2320      	movs	r3, #32
 800f132:	4617      	mov	r7, r2
 800f134:	460c      	mov	r4, r1
 800f136:	46a8      	mov	r8, r5
 800f138:	6083      	str	r3, [r0, #8]
 800f13a:	f240 1301 	movw	r3, #257	; 0x101
 800f13e:	e9c0 5500 	strd	r5, r5, [r0]
 800f142:	8183      	strh	r3, [r0, #12]
 800f144:	3501      	adds	r5, #1
 800f146:	4621      	mov	r1, r4
 800f148:	4630      	mov	r0, r6
 800f14a:	f00a f9fb 	bl	8019544 <put_memory>
 800f14e:	42af      	cmp	r7, r5
 800f150:	60a4      	str	r4, [r4, #8]
 800f152:	f104 0420 	add.w	r4, r4, #32
 800f156:	f804 8c14 	strb.w	r8, [r4, #-20]
 800f15a:	d1f3      	bne.n	800f144 <rmw_uxrce_init_guard_condition_memory+0x20>
 800f15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f160:	4770      	bx	lr
 800f162:	bf00      	nop

0800f164 <rmw_uxrce_fini_session_memory>:
 800f164:	4601      	mov	r1, r0
 800f166:	4801      	ldr	r0, [pc, #4]	; (800f16c <rmw_uxrce_fini_session_memory+0x8>)
 800f168:	f00a b9ec 	b.w	8019544 <put_memory>
 800f16c:	2001061c 	.word	0x2001061c

0800f170 <rmw_uxrce_fini_node_memory>:
 800f170:	b538      	push	{r3, r4, r5, lr}
 800f172:	4604      	mov	r4, r0
 800f174:	6800      	ldr	r0, [r0, #0]
 800f176:	b128      	cbz	r0, 800f184 <rmw_uxrce_fini_node_memory+0x14>
 800f178:	4b07      	ldr	r3, [pc, #28]	; (800f198 <rmw_uxrce_fini_node_memory+0x28>)
 800f17a:	6819      	ldr	r1, [r3, #0]
 800f17c:	f7f1 f860 	bl	8000240 <strcmp>
 800f180:	b940      	cbnz	r0, 800f194 <rmw_uxrce_fini_node_memory+0x24>
 800f182:	6020      	str	r0, [r4, #0]
 800f184:	6861      	ldr	r1, [r4, #4]
 800f186:	b129      	cbz	r1, 800f194 <rmw_uxrce_fini_node_memory+0x24>
 800f188:	2500      	movs	r5, #0
 800f18a:	4804      	ldr	r0, [pc, #16]	; (800f19c <rmw_uxrce_fini_node_memory+0x2c>)
 800f18c:	610d      	str	r5, [r1, #16]
 800f18e:	f00a f9d9 	bl	8019544 <put_memory>
 800f192:	6065      	str	r5, [r4, #4]
 800f194:	bd38      	pop	{r3, r4, r5, pc}
 800f196:	bf00      	nop
 800f198:	080203d0 	.word	0x080203d0
 800f19c:	200105ec 	.word	0x200105ec

0800f1a0 <rmw_uxrce_fini_publisher_memory>:
 800f1a0:	b510      	push	{r4, lr}
 800f1a2:	4604      	mov	r4, r0
 800f1a4:	6800      	ldr	r0, [r0, #0]
 800f1a6:	b128      	cbz	r0, 800f1b4 <rmw_uxrce_fini_publisher_memory+0x14>
 800f1a8:	4b06      	ldr	r3, [pc, #24]	; (800f1c4 <rmw_uxrce_fini_publisher_memory+0x24>)
 800f1aa:	6819      	ldr	r1, [r3, #0]
 800f1ac:	f7f1 f848 	bl	8000240 <strcmp>
 800f1b0:	b938      	cbnz	r0, 800f1c2 <rmw_uxrce_fini_publisher_memory+0x22>
 800f1b2:	6020      	str	r0, [r4, #0]
 800f1b4:	6861      	ldr	r1, [r4, #4]
 800f1b6:	b121      	cbz	r1, 800f1c2 <rmw_uxrce_fini_publisher_memory+0x22>
 800f1b8:	4803      	ldr	r0, [pc, #12]	; (800f1c8 <rmw_uxrce_fini_publisher_memory+0x28>)
 800f1ba:	f00a f9c3 	bl	8019544 <put_memory>
 800f1be:	2300      	movs	r3, #0
 800f1c0:	6063      	str	r3, [r4, #4]
 800f1c2:	bd10      	pop	{r4, pc}
 800f1c4:	080203d0 	.word	0x080203d0
 800f1c8:	200105fc 	.word	0x200105fc

0800f1cc <rmw_uxrce_fini_subscription_memory>:
 800f1cc:	b510      	push	{r4, lr}
 800f1ce:	4604      	mov	r4, r0
 800f1d0:	6800      	ldr	r0, [r0, #0]
 800f1d2:	b128      	cbz	r0, 800f1e0 <rmw_uxrce_fini_subscription_memory+0x14>
 800f1d4:	4b06      	ldr	r3, [pc, #24]	; (800f1f0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800f1d6:	6819      	ldr	r1, [r3, #0]
 800f1d8:	f7f1 f832 	bl	8000240 <strcmp>
 800f1dc:	b938      	cbnz	r0, 800f1ee <rmw_uxrce_fini_subscription_memory+0x22>
 800f1de:	6020      	str	r0, [r4, #0]
 800f1e0:	6861      	ldr	r1, [r4, #4]
 800f1e2:	b121      	cbz	r1, 800f1ee <rmw_uxrce_fini_subscription_memory+0x22>
 800f1e4:	4803      	ldr	r0, [pc, #12]	; (800f1f4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800f1e6:	f00a f9ad 	bl	8019544 <put_memory>
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	6063      	str	r3, [r4, #4]
 800f1ee:	bd10      	pop	{r4, pc}
 800f1f0:	080203d0 	.word	0x080203d0
 800f1f4:	2001063c 	.word	0x2001063c

0800f1f8 <rmw_uxrce_fini_service_memory>:
 800f1f8:	b510      	push	{r4, lr}
 800f1fa:	4604      	mov	r4, r0
 800f1fc:	6800      	ldr	r0, [r0, #0]
 800f1fe:	b128      	cbz	r0, 800f20c <rmw_uxrce_fini_service_memory+0x14>
 800f200:	4b06      	ldr	r3, [pc, #24]	; (800f21c <rmw_uxrce_fini_service_memory+0x24>)
 800f202:	6819      	ldr	r1, [r3, #0]
 800f204:	f7f1 f81c 	bl	8000240 <strcmp>
 800f208:	b938      	cbnz	r0, 800f21a <rmw_uxrce_fini_service_memory+0x22>
 800f20a:	6020      	str	r0, [r4, #0]
 800f20c:	6861      	ldr	r1, [r4, #4]
 800f20e:	b121      	cbz	r1, 800f21a <rmw_uxrce_fini_service_memory+0x22>
 800f210:	4803      	ldr	r0, [pc, #12]	; (800f220 <rmw_uxrce_fini_service_memory+0x28>)
 800f212:	f00a f997 	bl	8019544 <put_memory>
 800f216:	2300      	movs	r3, #0
 800f218:	6063      	str	r3, [r4, #4]
 800f21a:	bd10      	pop	{r4, pc}
 800f21c:	080203d0 	.word	0x080203d0
 800f220:	2001060c 	.word	0x2001060c

0800f224 <rmw_uxrce_fini_client_memory>:
 800f224:	b510      	push	{r4, lr}
 800f226:	4604      	mov	r4, r0
 800f228:	6800      	ldr	r0, [r0, #0]
 800f22a:	b128      	cbz	r0, 800f238 <rmw_uxrce_fini_client_memory+0x14>
 800f22c:	4b06      	ldr	r3, [pc, #24]	; (800f248 <rmw_uxrce_fini_client_memory+0x24>)
 800f22e:	6819      	ldr	r1, [r3, #0]
 800f230:	f7f1 f806 	bl	8000240 <strcmp>
 800f234:	b938      	cbnz	r0, 800f246 <rmw_uxrce_fini_client_memory+0x22>
 800f236:	6020      	str	r0, [r4, #0]
 800f238:	6861      	ldr	r1, [r4, #4]
 800f23a:	b121      	cbz	r1, 800f246 <rmw_uxrce_fini_client_memory+0x22>
 800f23c:	4803      	ldr	r0, [pc, #12]	; (800f24c <rmw_uxrce_fini_client_memory+0x28>)
 800f23e:	f00a f981 	bl	8019544 <put_memory>
 800f242:	2300      	movs	r3, #0
 800f244:	6063      	str	r3, [r4, #4]
 800f246:	bd10      	pop	{r4, pc}
 800f248:	080203d0 	.word	0x080203d0
 800f24c:	2000bc58 	.word	0x2000bc58

0800f250 <rmw_uxrce_fini_topic_memory>:
 800f250:	b510      	push	{r4, lr}
 800f252:	4604      	mov	r4, r0
 800f254:	4803      	ldr	r0, [pc, #12]	; (800f264 <rmw_uxrce_fini_topic_memory+0x14>)
 800f256:	4621      	mov	r1, r4
 800f258:	f00a f974 	bl	8019544 <put_memory>
 800f25c:	2300      	movs	r3, #0
 800f25e:	61a3      	str	r3, [r4, #24]
 800f260:	bd10      	pop	{r4, pc}
 800f262:	bf00      	nop
 800f264:	2001064c 	.word	0x2001064c

0800f268 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800f268:	b082      	sub	sp, #8
 800f26a:	492b      	ldr	r1, [pc, #172]	; (800f318 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f26c:	b530      	push	{r4, r5, lr}
 800f26e:	680d      	ldr	r5, [r1, #0]
 800f270:	ac03      	add	r4, sp, #12
 800f272:	e884 000c 	stmia.w	r4, {r2, r3}
 800f276:	461c      	mov	r4, r3
 800f278:	2d00      	cmp	r5, #0
 800f27a:	d04b      	beq.n	800f314 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 800f27c:	462b      	mov	r3, r5
 800f27e:	2100      	movs	r1, #0
 800f280:	689a      	ldr	r2, [r3, #8]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800f288:	4290      	cmp	r0, r2
 800f28a:	bf08      	it	eq
 800f28c:	3101      	addeq	r1, #1
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d1f6      	bne.n	800f280 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800f292:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f296:	2b02      	cmp	r3, #2
 800f298:	d029      	beq.n	800f2ee <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f29a:	d820      	bhi.n	800f2de <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 800f29c:	428c      	cmp	r4, r1
 800f29e:	d828      	bhi.n	800f2f2 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800f2a0:	fab4 f284 	clz	r2, r4
 800f2a4:	0952      	lsrs	r2, r2, #5
 800f2a6:	b324      	cbz	r4, 800f2f2 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800f2a8:	b1dd      	cbz	r5, 800f2e2 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 800f2aa:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800f2ae:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800f2b2:	e001      	b.n	800f2b8 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 800f2b4:	686d      	ldr	r5, [r5, #4]
 800f2b6:	b1ad      	cbz	r5, 800f2e4 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800f2b8:	68ab      	ldr	r3, [r5, #8]
 800f2ba:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 800f2be:	4288      	cmp	r0, r1
 800f2c0:	d1f8      	bne.n	800f2b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f2c2:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 800f2c6:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800f2ca:	4561      	cmp	r1, ip
 800f2cc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f2d0:	eb73 0e04 	sbcs.w	lr, r3, r4
 800f2d4:	daee      	bge.n	800f2b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f2d6:	468c      	mov	ip, r1
 800f2d8:	461c      	mov	r4, r3
 800f2da:	462a      	mov	r2, r5
 800f2dc:	e7ea      	b.n	800f2b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f2de:	2b03      	cmp	r3, #3
 800f2e0:	d0dc      	beq.n	800f29c <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	4610      	mov	r0, r2
 800f2e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f2ea:	b002      	add	sp, #8
 800f2ec:	4770      	bx	lr
 800f2ee:	428c      	cmp	r4, r1
 800f2f0:	d905      	bls.n	800f2fe <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800f2f2:	4809      	ldr	r0, [pc, #36]	; (800f318 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f2f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f2f8:	b002      	add	sp, #8
 800f2fa:	f00a b913 	b.w	8019524 <get_memory>
 800f2fe:	fab4 f284 	clz	r2, r4
 800f302:	0952      	lsrs	r2, r2, #5
 800f304:	2c00      	cmp	r4, #0
 800f306:	d1ed      	bne.n	800f2e4 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800f308:	4803      	ldr	r0, [pc, #12]	; (800f318 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f30a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f30e:	b002      	add	sp, #8
 800f310:	f00a b908 	b.w	8019524 <get_memory>
 800f314:	4629      	mov	r1, r5
 800f316:	e7bc      	b.n	800f292 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800f318:	2001062c 	.word	0x2001062c

0800f31c <rmw_uxrce_find_static_input_buffer_by_owner>:
 800f31c:	4b12      	ldr	r3, [pc, #72]	; (800f368 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	b530      	push	{r4, r5, lr}
 800f322:	b1f3      	cbz	r3, 800f362 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800f324:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800f328:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 800f32c:	2400      	movs	r4, #0
 800f32e:	e001      	b.n	800f334 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800f330:	685b      	ldr	r3, [r3, #4]
 800f332:	b1a3      	cbz	r3, 800f35e <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800f334:	689a      	ldr	r2, [r3, #8]
 800f336:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800f33a:	4288      	cmp	r0, r1
 800f33c:	d1f8      	bne.n	800f330 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800f33e:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 800f342:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 800f346:	4571      	cmp	r1, lr
 800f348:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800f34c:	eb72 050c 	sbcs.w	r5, r2, ip
 800f350:	daee      	bge.n	800f330 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800f352:	461c      	mov	r4, r3
 800f354:	685b      	ldr	r3, [r3, #4]
 800f356:	468e      	mov	lr, r1
 800f358:	4694      	mov	ip, r2
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d1ea      	bne.n	800f334 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800f35e:	4620      	mov	r0, r4
 800f360:	bd30      	pop	{r4, r5, pc}
 800f362:	461c      	mov	r4, r3
 800f364:	4620      	mov	r0, r4
 800f366:	bd30      	pop	{r4, r5, pc}
 800f368:	2001062c 	.word	0x2001062c
 800f36c:	00000000 	.word	0x00000000

0800f370 <rmw_uxrce_clean_expired_static_input_buffer>:
 800f370:	4b3d      	ldr	r3, [pc, #244]	; (800f468 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f372:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f376:	681f      	ldr	r7, [r3, #0]
 800f378:	ed2d 8b06 	vpush	{d8-d10}
 800f37c:	b08d      	sub	sp, #52	; 0x34
 800f37e:	f00b fb0d 	bl	801a99c <rmw_uros_epoch_nanos>
 800f382:	2f00      	cmp	r7, #0
 800f384:	d05d      	beq.n	800f442 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800f386:	46b8      	mov	r8, r7
 800f388:	4681      	mov	r9, r0
 800f38a:	468a      	mov	sl, r1
 800f38c:	ac04      	add	r4, sp, #16
 800f38e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f392:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800f396:	2b04      	cmp	r3, #4
 800f398:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 800f450 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800f39c:	ed9f ab2e 	vldr	d10, [pc, #184]	; 800f458 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800f3a0:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 800f460 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800f3a4:	d03f      	beq.n	800f426 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800f3a6:	2b05      	cmp	r3, #5
 800f3a8:	d044      	beq.n	800f434 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800f3aa:	2b03      	cmp	r3, #3
 800f3ac:	d03b      	beq.n	800f426 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800f3ae:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f3b2:	ed8d ab06 	vstr	d10, [sp, #24]
 800f3b6:	ab08      	add	r3, sp, #32
 800f3b8:	ed8d 8b08 	vstr	d8, [sp, #32]
 800f3bc:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 800f3c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f3c2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f3c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f3ca:	f009 fecd 	bl	8019168 <rmw_time_equal>
 800f3ce:	b118      	cbz	r0, 800f3d8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800f3d0:	ed8d 9b04 	vstr	d9, [sp, #16]
 800f3d4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f3d8:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 800f3dc:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 800f3e0:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800f3e4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800f3e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f3ec:	f009 ff12 	bl	8019214 <rmw_time_total_nsec>
 800f3f0:	1830      	adds	r0, r6, r0
 800f3f2:	eb47 0101 	adc.w	r1, r7, r1
 800f3f6:	4548      	cmp	r0, r9
 800f3f8:	eb71 030a 	sbcs.w	r3, r1, sl
 800f3fc:	db05      	blt.n	800f40a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800f3fe:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800f402:	4591      	cmp	r9, r2
 800f404:	eb7a 0303 	sbcs.w	r3, sl, r3
 800f408:	da03      	bge.n	800f412 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800f40a:	4641      	mov	r1, r8
 800f40c:	4816      	ldr	r0, [pc, #88]	; (800f468 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f40e:	f00a f899 	bl	8019544 <put_memory>
 800f412:	f1bb 0f00 	cmp.w	fp, #0
 800f416:	d014      	beq.n	800f442 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800f418:	46d8      	mov	r8, fp
 800f41a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f41e:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800f422:	2b04      	cmp	r3, #4
 800f424:	d1bf      	bne.n	800f3a6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800f426:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800f42a:	3340      	adds	r3, #64	; 0x40
 800f42c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f42e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f432:	e7c0      	b.n	800f3b6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800f434:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800f438:	3348      	adds	r3, #72	; 0x48
 800f43a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f43c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f440:	e7b9      	b.n	800f3b6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800f442:	b00d      	add	sp, #52	; 0x34
 800f444:	ecbd 8b06 	vpop	{d8-d10}
 800f448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f44c:	f3af 8000 	nop.w
	...
 800f458:	00000001 	.word	0x00000001
 800f45c:	00000000 	.word	0x00000000
 800f460:	0000001e 	.word	0x0000001e
 800f464:	00000000 	.word	0x00000000
 800f468:	2001062c 	.word	0x2001062c

0800f46c <run_xrce_session>:
 800f46c:	b510      	push	{r4, lr}
 800f46e:	788c      	ldrb	r4, [r1, #2]
 800f470:	b086      	sub	sp, #24
 800f472:	2c01      	cmp	r4, #1
 800f474:	f8ad 200e 	strh.w	r2, [sp, #14]
 800f478:	d00c      	beq.n	800f494 <run_xrce_session+0x28>
 800f47a:	2401      	movs	r4, #1
 800f47c:	4619      	mov	r1, r3
 800f47e:	f10d 020e 	add.w	r2, sp, #14
 800f482:	f10d 0317 	add.w	r3, sp, #23
 800f486:	9400      	str	r4, [sp, #0]
 800f488:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f48c:	f003 fa08 	bl	80128a0 <uxr_run_session_until_all_status>
 800f490:	b006      	add	sp, #24
 800f492:	bd10      	pop	{r4, pc}
 800f494:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f498:	f002 fe24 	bl	80120e4 <uxr_flash_output_streams>
 800f49c:	4620      	mov	r0, r4
 800f49e:	b006      	add	sp, #24
 800f4a0:	bd10      	pop	{r4, pc}
 800f4a2:	bf00      	nop

0800f4a4 <convert_qos_profile>:
 800f4a4:	7a4a      	ldrb	r2, [r1, #9]
 800f4a6:	f891 c008 	ldrb.w	ip, [r1, #8]
 800f4aa:	2a02      	cmp	r2, #2
 800f4ac:	bf18      	it	ne
 800f4ae:	2200      	movne	r2, #0
 800f4b0:	7002      	strb	r2, [r0, #0]
 800f4b2:	f1ac 0202 	sub.w	r2, ip, #2
 800f4b6:	fab2 f282 	clz	r2, r2
 800f4ba:	0952      	lsrs	r2, r2, #5
 800f4bc:	7042      	strb	r2, [r0, #1]
 800f4be:	780a      	ldrb	r2, [r1, #0]
 800f4c0:	8889      	ldrh	r1, [r1, #4]
 800f4c2:	f1a2 0202 	sub.w	r2, r2, #2
 800f4c6:	8081      	strh	r1, [r0, #4]
 800f4c8:	fab2 f282 	clz	r2, r2
 800f4cc:	0952      	lsrs	r2, r2, #5
 800f4ce:	7082      	strb	r2, [r0, #2]
 800f4d0:	4770      	bx	lr
 800f4d2:	bf00      	nop

0800f4d4 <generate_service_topics>:
 800f4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4d6:	461d      	mov	r5, r3
 800f4d8:	b083      	sub	sp, #12
 800f4da:	4606      	mov	r6, r0
 800f4dc:	4c11      	ldr	r4, [pc, #68]	; (800f524 <generate_service_topics+0x50>)
 800f4de:	4608      	mov	r0, r1
 800f4e0:	4b11      	ldr	r3, [pc, #68]	; (800f528 <generate_service_topics+0x54>)
 800f4e2:	4617      	mov	r7, r2
 800f4e4:	4629      	mov	r1, r5
 800f4e6:	4a11      	ldr	r2, [pc, #68]	; (800f52c <generate_service_topics+0x58>)
 800f4e8:	9401      	str	r4, [sp, #4]
 800f4ea:	9600      	str	r6, [sp, #0]
 800f4ec:	f00e f8bc 	bl	801d668 <sniprintf>
 800f4f0:	4a0f      	ldr	r2, [pc, #60]	; (800f530 <generate_service_topics+0x5c>)
 800f4f2:	4604      	mov	r4, r0
 800f4f4:	4b0f      	ldr	r3, [pc, #60]	; (800f534 <generate_service_topics+0x60>)
 800f4f6:	9201      	str	r2, [sp, #4]
 800f4f8:	4638      	mov	r0, r7
 800f4fa:	4a0c      	ldr	r2, [pc, #48]	; (800f52c <generate_service_topics+0x58>)
 800f4fc:	4629      	mov	r1, r5
 800f4fe:	9600      	str	r6, [sp, #0]
 800f500:	f00e f8b2 	bl	801d668 <sniprintf>
 800f504:	2c00      	cmp	r4, #0
 800f506:	bfa8      	it	ge
 800f508:	42a5      	cmpge	r5, r4
 800f50a:	bfcc      	ite	gt
 800f50c:	2401      	movgt	r4, #1
 800f50e:	2400      	movle	r4, #0
 800f510:	dd05      	ble.n	800f51e <generate_service_topics+0x4a>
 800f512:	2800      	cmp	r0, #0
 800f514:	bfa8      	it	ge
 800f516:	4285      	cmpge	r5, r0
 800f518:	bfcc      	ite	gt
 800f51a:	2401      	movgt	r4, #1
 800f51c:	2400      	movle	r4, #0
 800f51e:	4620      	mov	r0, r4
 800f520:	b003      	add	sp, #12
 800f522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f524:	0801f8a8 	.word	0x0801f8a8
 800f528:	0801f8a4 	.word	0x0801f8a4
 800f52c:	0801f880 	.word	0x0801f880
 800f530:	0801f89c 	.word	0x0801f89c
 800f534:	0801f898 	.word	0x0801f898

0800f538 <generate_service_types>:
 800f538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f53c:	4606      	mov	r6, r0
 800f53e:	b087      	sub	sp, #28
 800f540:	461c      	mov	r4, r3
 800f542:	6883      	ldr	r3, [r0, #8]
 800f544:	460d      	mov	r5, r1
 800f546:	4617      	mov	r7, r2
 800f548:	4798      	blx	r3
 800f54a:	68f3      	ldr	r3, [r6, #12]
 800f54c:	4606      	mov	r6, r0
 800f54e:	4798      	blx	r3
 800f550:	2300      	movs	r3, #0
 800f552:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800f556:	6872      	ldr	r2, [r6, #4]
 800f558:	702b      	strb	r3, [r5, #0]
 800f55a:	6813      	ldr	r3, [r2, #0]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d03f      	beq.n	800f5e0 <generate_service_types+0xa8>
 800f560:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800f5f4 <generate_service_types+0xbc>
 800f564:	4649      	mov	r1, r9
 800f566:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800f5fc <generate_service_types+0xc4>
 800f56a:	4628      	mov	r0, r5
 800f56c:	f8df a090 	ldr.w	sl, [pc, #144]	; 800f600 <generate_service_types+0xc8>
 800f570:	f8cd 8014 	str.w	r8, [sp, #20]
 800f574:	6852      	ldr	r2, [r2, #4]
 800f576:	9100      	str	r1, [sp, #0]
 800f578:	4621      	mov	r1, r4
 800f57a:	f8cd 8008 	str.w	r8, [sp, #8]
 800f57e:	f8cd a004 	str.w	sl, [sp, #4]
 800f582:	e9cd 9203 	strd	r9, r2, [sp, #12]
 800f586:	4a1a      	ldr	r2, [pc, #104]	; (800f5f0 <generate_service_types+0xb8>)
 800f588:	f00e f86e 	bl	801d668 <sniprintf>
 800f58c:	2300      	movs	r3, #0
 800f58e:	42a0      	cmp	r0, r4
 800f590:	ea6f 0600 	mvn.w	r6, r0
 800f594:	703b      	strb	r3, [r7, #0]
 800f596:	f8db 3000 	ldr.w	r3, [fp]
 800f59a:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 800f59e:	bfac      	ite	ge
 800f5a0:	2500      	movge	r5, #0
 800f5a2:	2501      	movlt	r5, #1
 800f5a4:	b30b      	cbz	r3, 800f5ea <generate_service_types+0xb2>
 800f5a6:	4a13      	ldr	r2, [pc, #76]	; (800f5f4 <generate_service_types+0xbc>)
 800f5a8:	f8cd 8014 	str.w	r8, [sp, #20]
 800f5ac:	402e      	ands	r6, r5
 800f5ae:	f8db 1004 	ldr.w	r1, [fp, #4]
 800f5b2:	4638      	mov	r0, r7
 800f5b4:	9104      	str	r1, [sp, #16]
 800f5b6:	4621      	mov	r1, r4
 800f5b8:	e9cd 2a00 	strd	r2, sl, [sp]
 800f5bc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800f5c0:	4a0b      	ldr	r2, [pc, #44]	; (800f5f0 <generate_service_types+0xb8>)
 800f5c2:	f00e f851 	bl	801d668 <sniprintf>
 800f5c6:	2800      	cmp	r0, #0
 800f5c8:	bfb4      	ite	lt
 800f5ca:	2600      	movlt	r6, #0
 800f5cc:	f006 0601 	andge.w	r6, r6, #1
 800f5d0:	42a0      	cmp	r0, r4
 800f5d2:	bfac      	ite	ge
 800f5d4:	2000      	movge	r0, #0
 800f5d6:	f006 0001 	andlt.w	r0, r6, #1
 800f5da:	b007      	add	sp, #28
 800f5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5e0:	4b05      	ldr	r3, [pc, #20]	; (800f5f8 <generate_service_types+0xc0>)
 800f5e2:	f8df 9010 	ldr.w	r9, [pc, #16]	; 800f5f4 <generate_service_types+0xbc>
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	e7bd      	b.n	800f566 <generate_service_types+0x2e>
 800f5ea:	4b03      	ldr	r3, [pc, #12]	; (800f5f8 <generate_service_types+0xc0>)
 800f5ec:	461a      	mov	r2, r3
 800f5ee:	e7db      	b.n	800f5a8 <generate_service_types+0x70>
 800f5f0:	0801f878 	.word	0x0801f878
 800f5f4:	0801f874 	.word	0x0801f874
 800f5f8:	080201a8 	.word	0x080201a8
 800f5fc:	0801f888 	.word	0x0801f888
 800f600:	0801f88c 	.word	0x0801f88c

0800f604 <generate_type_name>:
 800f604:	2300      	movs	r3, #0
 800f606:	b530      	push	{r4, r5, lr}
 800f608:	700b      	strb	r3, [r1, #0]
 800f60a:	b087      	sub	sp, #28
 800f60c:	6803      	ldr	r3, [r0, #0]
 800f60e:	4614      	mov	r4, r2
 800f610:	b1bb      	cbz	r3, 800f642 <generate_type_name+0x3e>
 800f612:	4a0e      	ldr	r2, [pc, #56]	; (800f64c <generate_type_name+0x48>)
 800f614:	4615      	mov	r5, r2
 800f616:	9500      	str	r5, [sp, #0]
 800f618:	9203      	str	r2, [sp, #12]
 800f61a:	4d0d      	ldr	r5, [pc, #52]	; (800f650 <generate_type_name+0x4c>)
 800f61c:	6842      	ldr	r2, [r0, #4]
 800f61e:	4608      	mov	r0, r1
 800f620:	490c      	ldr	r1, [pc, #48]	; (800f654 <generate_type_name+0x50>)
 800f622:	9204      	str	r2, [sp, #16]
 800f624:	9105      	str	r1, [sp, #20]
 800f626:	9102      	str	r1, [sp, #8]
 800f628:	4621      	mov	r1, r4
 800f62a:	4a0b      	ldr	r2, [pc, #44]	; (800f658 <generate_type_name+0x54>)
 800f62c:	9501      	str	r5, [sp, #4]
 800f62e:	f00e f81b 	bl	801d668 <sniprintf>
 800f632:	2800      	cmp	r0, #0
 800f634:	bfa8      	it	ge
 800f636:	4284      	cmpge	r4, r0
 800f638:	bfcc      	ite	gt
 800f63a:	2001      	movgt	r0, #1
 800f63c:	2000      	movle	r0, #0
 800f63e:	b007      	add	sp, #28
 800f640:	bd30      	pop	{r4, r5, pc}
 800f642:	4b06      	ldr	r3, [pc, #24]	; (800f65c <generate_type_name+0x58>)
 800f644:	4a01      	ldr	r2, [pc, #4]	; (800f64c <generate_type_name+0x48>)
 800f646:	461d      	mov	r5, r3
 800f648:	e7e5      	b.n	800f616 <generate_type_name+0x12>
 800f64a:	bf00      	nop
 800f64c:	0801f874 	.word	0x0801f874
 800f650:	0801f88c 	.word	0x0801f88c
 800f654:	0801f888 	.word	0x0801f888
 800f658:	0801f878 	.word	0x0801f878
 800f65c:	080201a8 	.word	0x080201a8

0800f660 <generate_topic_name>:
 800f660:	b530      	push	{r4, r5, lr}
 800f662:	4614      	mov	r4, r2
 800f664:	b083      	sub	sp, #12
 800f666:	4605      	mov	r5, r0
 800f668:	4b07      	ldr	r3, [pc, #28]	; (800f688 <generate_topic_name+0x28>)
 800f66a:	4a08      	ldr	r2, [pc, #32]	; (800f68c <generate_topic_name+0x2c>)
 800f66c:	4608      	mov	r0, r1
 800f66e:	9500      	str	r5, [sp, #0]
 800f670:	4621      	mov	r1, r4
 800f672:	f00d fff9 	bl	801d668 <sniprintf>
 800f676:	2800      	cmp	r0, #0
 800f678:	bfa8      	it	ge
 800f67a:	4284      	cmpge	r4, r0
 800f67c:	bfcc      	ite	gt
 800f67e:	2001      	movgt	r0, #1
 800f680:	2000      	movle	r0, #0
 800f682:	b003      	add	sp, #12
 800f684:	bd30      	pop	{r4, r5, pc}
 800f686:	bf00      	nop
 800f688:	0801f8b0 	.word	0x0801f8b0
 800f68c:	0801f890 	.word	0x0801f890

0800f690 <is_uxrce_rmw_identifier_valid>:
 800f690:	b510      	push	{r4, lr}
 800f692:	4604      	mov	r4, r0
 800f694:	b140      	cbz	r0, 800f6a8 <is_uxrce_rmw_identifier_valid+0x18>
 800f696:	f009 ffcb 	bl	8019630 <rmw_get_implementation_identifier>
 800f69a:	4601      	mov	r1, r0
 800f69c:	4620      	mov	r0, r4
 800f69e:	f7f0 fdcf 	bl	8000240 <strcmp>
 800f6a2:	fab0 f080 	clz	r0, r0
 800f6a6:	0940      	lsrs	r0, r0, #5
 800f6a8:	bd10      	pop	{r4, pc}
 800f6aa:	bf00      	nop

0800f6ac <get_message_typesupport_handle>:
 800f6ac:	6883      	ldr	r3, [r0, #8]
 800f6ae:	4718      	bx	r3

0800f6b0 <get_message_typesupport_handle_function>:
 800f6b0:	b510      	push	{r4, lr}
 800f6b2:	4604      	mov	r4, r0
 800f6b4:	6800      	ldr	r0, [r0, #0]
 800f6b6:	f7f0 fdc3 	bl	8000240 <strcmp>
 800f6ba:	2800      	cmp	r0, #0
 800f6bc:	bf0c      	ite	eq
 800f6be:	4620      	moveq	r0, r4
 800f6c0:	2000      	movne	r0, #0
 800f6c2:	bd10      	pop	{r4, pc}

0800f6c4 <get_service_typesupport_handle>:
 800f6c4:	6883      	ldr	r3, [r0, #8]
 800f6c6:	4718      	bx	r3

0800f6c8 <get_service_typesupport_handle_function>:
 800f6c8:	b510      	push	{r4, lr}
 800f6ca:	4604      	mov	r4, r0
 800f6cc:	6800      	ldr	r0, [r0, #0]
 800f6ce:	f7f0 fdb7 	bl	8000240 <strcmp>
 800f6d2:	2800      	cmp	r0, #0
 800f6d4:	bf0c      	ite	eq
 800f6d6:	4620      	moveq	r0, r4
 800f6d8:	2000      	movne	r0, #0
 800f6da:	bd10      	pop	{r4, pc}

0800f6dc <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800f6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6e0:	6805      	ldr	r5, [r0, #0]
 800f6e2:	4604      	mov	r4, r0
 800f6e4:	460e      	mov	r6, r1
 800f6e6:	4628      	mov	r0, r5
 800f6e8:	f7f0 fdaa 	bl	8000240 <strcmp>
 800f6ec:	b1c8      	cbz	r0, 800f722 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800f6ee:	4b11      	ldr	r3, [pc, #68]	; (800f734 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	429d      	cmp	r5, r3
 800f6f4:	d112      	bne.n	800f71c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800f6f6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f6fa:	f8d8 4000 	ldr.w	r4, [r8]
 800f6fe:	b16c      	cbz	r4, 800f71c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800f700:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f704:	2700      	movs	r7, #0
 800f706:	3d04      	subs	r5, #4
 800f708:	4631      	mov	r1, r6
 800f70a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f70e:	f7f0 fd97 	bl	8000240 <strcmp>
 800f712:	00bb      	lsls	r3, r7, #2
 800f714:	b140      	cbz	r0, 800f728 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800f716:	3701      	adds	r7, #1
 800f718:	42bc      	cmp	r4, r7
 800f71a:	d1f5      	bne.n	800f708 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800f71c:	2000      	movs	r0, #0
 800f71e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f722:	4620      	mov	r0, r4
 800f724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f728:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f72c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f730:	58d3      	ldr	r3, [r2, r3]
 800f732:	4718      	bx	r3
 800f734:	20000b60 	.word	0x20000b60

0800f738 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800f738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f73c:	6805      	ldr	r5, [r0, #0]
 800f73e:	4604      	mov	r4, r0
 800f740:	460e      	mov	r6, r1
 800f742:	4628      	mov	r0, r5
 800f744:	f7f0 fd7c 	bl	8000240 <strcmp>
 800f748:	b1c8      	cbz	r0, 800f77e <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800f74a:	4b11      	ldr	r3, [pc, #68]	; (800f790 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	429d      	cmp	r5, r3
 800f750:	d112      	bne.n	800f778 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800f752:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f756:	f8d8 4000 	ldr.w	r4, [r8]
 800f75a:	b16c      	cbz	r4, 800f778 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800f75c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f760:	2700      	movs	r7, #0
 800f762:	3d04      	subs	r5, #4
 800f764:	4631      	mov	r1, r6
 800f766:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f76a:	f7f0 fd69 	bl	8000240 <strcmp>
 800f76e:	00bb      	lsls	r3, r7, #2
 800f770:	b140      	cbz	r0, 800f784 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800f772:	3701      	adds	r7, #1
 800f774:	42bc      	cmp	r4, r7
 800f776:	d1f5      	bne.n	800f764 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800f778:	2000      	movs	r0, #0
 800f77a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f77e:	4620      	mov	r0, r4
 800f780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f784:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f78c:	58d3      	ldr	r3, [r2, r3]
 800f78e:	4718      	bx	r3
 800f790:	20000b60 	.word	0x20000b60

0800f794 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__size_function__ServiceEventInfo__client_gid>:
 800f794:	2010      	movs	r0, #16
 800f796:	4770      	bx	lr

0800f798 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_const_function__ServiceEventInfo__client_gid>:
 800f798:	4408      	add	r0, r1
 800f79a:	4770      	bx	lr

0800f79c <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__fetch_function__ServiceEventInfo__client_gid>:
 800f79c:	5c43      	ldrb	r3, [r0, r1]
 800f79e:	7013      	strb	r3, [r2, #0]
 800f7a0:	4770      	bx	lr
 800f7a2:	bf00      	nop

0800f7a4 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__assign_function__ServiceEventInfo__client_gid>:
 800f7a4:	7813      	ldrb	r3, [r2, #0]
 800f7a6:	5443      	strb	r3, [r0, r1]
 800f7a8:	4770      	bx	lr
 800f7aa:	bf00      	nop

0800f7ac <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_init_function>:
 800f7ac:	f00b b94c 	b.w	801aa48 <service_msgs__msg__ServiceEventInfo__init>

0800f7b0 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_fini_function>:
 800f7b0:	f00b b95c 	b.w	801aa6c <service_msgs__msg__ServiceEventInfo__fini>

0800f7b4 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_function__ServiceEventInfo__client_gid>:
 800f7b4:	4408      	add	r0, r1
 800f7b6:	4770      	bx	lr

0800f7b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800f7b8:	b508      	push	{r3, lr}
 800f7ba:	f000 f8db 	bl	800f974 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f7be:	4b06      	ldr	r3, [pc, #24]	; (800f7d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800f7c0:	4906      	ldr	r1, [pc, #24]	; (800f7dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x24>)
 800f7c2:	681a      	ldr	r2, [r3, #0]
 800f7c4:	6488      	str	r0, [r1, #72]	; 0x48
 800f7c6:	b10a      	cbz	r2, 800f7cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x14>
 800f7c8:	4803      	ldr	r0, [pc, #12]	; (800f7d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800f7ca:	bd08      	pop	{r3, pc}
 800f7cc:	4a04      	ldr	r2, [pc, #16]	; (800f7e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x28>)
 800f7ce:	4802      	ldr	r0, [pc, #8]	; (800f7d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800f7d0:	6812      	ldr	r2, [r2, #0]
 800f7d2:	601a      	str	r2, [r3, #0]
 800f7d4:	bd08      	pop	{r3, pc}
 800f7d6:	bf00      	nop
 800f7d8:	20000c58 	.word	0x20000c58
 800f7dc:	20000b68 	.word	0x20000b68
 800f7e0:	20000b64 	.word	0x20000b64

0800f7e4 <get_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800f7e4:	b5b0      	push	{r4, r5, r7, lr}
 800f7e6:	4604      	mov	r4, r0
 800f7e8:	b1d8      	cbz	r0, 800f822 <get_serialized_size_service_msgs__msg__ServiceEventInfo+0x3e>
 800f7ea:	460d      	mov	r5, r1
 800f7ec:	2101      	movs	r1, #1
 800f7ee:	4628      	mov	r0, r5
 800f7f0:	f002 f87c 	bl	80118ec <ucdr_alignment>
 800f7f4:	1c6b      	adds	r3, r5, #1
 800f7f6:	4607      	mov	r7, r0
 800f7f8:	1d20      	adds	r0, r4, #4
 800f7fa:	f1c5 0508 	rsb	r5, r5, #8
 800f7fe:	441f      	add	r7, r3
 800f800:	4639      	mov	r1, r7
 800f802:	f000 f8c5 	bl	800f990 <get_serialized_size_builtin_interfaces__msg__Time>
 800f806:	4407      	add	r7, r0
 800f808:	2101      	movs	r1, #1
 800f80a:	4638      	mov	r0, r7
 800f80c:	f002 f86e 	bl	80118ec <ucdr_alignment>
 800f810:	f100 0410 	add.w	r4, r0, #16
 800f814:	2108      	movs	r1, #8
 800f816:	443c      	add	r4, r7
 800f818:	4620      	mov	r0, r4
 800f81a:	f002 f867 	bl	80118ec <ucdr_alignment>
 800f81e:	4428      	add	r0, r5
 800f820:	4420      	add	r0, r4
 800f822:	bdb0      	pop	{r4, r5, r7, pc}

0800f824 <_ServiceEventInfo__cdr_deserialize>:
 800f824:	b538      	push	{r3, r4, r5, lr}
 800f826:	460c      	mov	r4, r1
 800f828:	b1b9      	cbz	r1, 800f85a <_ServiceEventInfo__cdr_deserialize+0x36>
 800f82a:	4605      	mov	r5, r0
 800f82c:	f000 fbe0 	bl	800fff0 <ucdr_deserialize_uint8_t>
 800f830:	f000 f912 	bl	800fa58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f834:	4603      	mov	r3, r0
 800f836:	1d21      	adds	r1, r4, #4
 800f838:	4628      	mov	r0, r5
 800f83a:	685b      	ldr	r3, [r3, #4]
 800f83c:	68db      	ldr	r3, [r3, #12]
 800f83e:	4798      	blx	r3
 800f840:	f104 010c 	add.w	r1, r4, #12
 800f844:	4628      	mov	r0, r5
 800f846:	2210      	movs	r2, #16
 800f848:	f000 f9d4 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 800f84c:	f104 0120 	add.w	r1, r4, #32
 800f850:	4628      	mov	r0, r5
 800f852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f856:	f001 bcd3 	b.w	8011200 <ucdr_deserialize_int64_t>
 800f85a:	4608      	mov	r0, r1
 800f85c:	bd38      	pop	{r3, r4, r5, pc}
 800f85e:	bf00      	nop

0800f860 <_ServiceEventInfo__cdr_serialize>:
 800f860:	b1e8      	cbz	r0, 800f89e <_ServiceEventInfo__cdr_serialize+0x3e>
 800f862:	b570      	push	{r4, r5, r6, lr}
 800f864:	4606      	mov	r6, r0
 800f866:	460d      	mov	r5, r1
 800f868:	4604      	mov	r4, r0
 800f86a:	4608      	mov	r0, r1
 800f86c:	f816 1b04 	ldrb.w	r1, [r6], #4
 800f870:	f000 fba8 	bl	800ffc4 <ucdr_serialize_uint8_t>
 800f874:	f000 f8f0 	bl	800fa58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f878:	4603      	mov	r3, r0
 800f87a:	4629      	mov	r1, r5
 800f87c:	4630      	mov	r0, r6
 800f87e:	685b      	ldr	r3, [r3, #4]
 800f880:	689b      	ldr	r3, [r3, #8]
 800f882:	4798      	blx	r3
 800f884:	2210      	movs	r2, #16
 800f886:	f104 010c 	add.w	r1, r4, #12
 800f88a:	4628      	mov	r0, r5
 800f88c:	f000 f94e 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 800f890:	4628      	mov	r0, r5
 800f892:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800f896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f89a:	f001 bbe1 	b.w	8011060 <ucdr_serialize_int64_t>
 800f89e:	4770      	bx	lr

0800f8a0 <_ServiceEventInfo__get_serialized_size>:
 800f8a0:	b538      	push	{r3, r4, r5, lr}
 800f8a2:	4604      	mov	r4, r0
 800f8a4:	b1b0      	cbz	r0, 800f8d4 <_ServiceEventInfo__get_serialized_size+0x34>
 800f8a6:	2101      	movs	r1, #1
 800f8a8:	2000      	movs	r0, #0
 800f8aa:	f002 f81f 	bl	80118ec <ucdr_alignment>
 800f8ae:	4605      	mov	r5, r0
 800f8b0:	1d20      	adds	r0, r4, #4
 800f8b2:	3501      	adds	r5, #1
 800f8b4:	4629      	mov	r1, r5
 800f8b6:	f000 f86b 	bl	800f990 <get_serialized_size_builtin_interfaces__msg__Time>
 800f8ba:	4405      	add	r5, r0
 800f8bc:	2101      	movs	r1, #1
 800f8be:	4628      	mov	r0, r5
 800f8c0:	f002 f814 	bl	80118ec <ucdr_alignment>
 800f8c4:	3010      	adds	r0, #16
 800f8c6:	2108      	movs	r1, #8
 800f8c8:	4405      	add	r5, r0
 800f8ca:	4628      	mov	r0, r5
 800f8cc:	f002 f80e 	bl	80118ec <ucdr_alignment>
 800f8d0:	3008      	adds	r0, #8
 800f8d2:	4428      	add	r0, r5
 800f8d4:	bd38      	pop	{r3, r4, r5, pc}
 800f8d6:	bf00      	nop

0800f8d8 <_ServiceEventInfo__max_serialized_size>:
 800f8d8:	b550      	push	{r4, r6, lr}
 800f8da:	2601      	movs	r6, #1
 800f8dc:	b083      	sub	sp, #12
 800f8de:	2000      	movs	r0, #0
 800f8e0:	4631      	mov	r1, r6
 800f8e2:	f88d 6007 	strb.w	r6, [sp, #7]
 800f8e6:	f002 f801 	bl	80118ec <ucdr_alignment>
 800f8ea:	4604      	mov	r4, r0
 800f8ec:	f10d 0007 	add.w	r0, sp, #7
 800f8f0:	4434      	add	r4, r6
 800f8f2:	4621      	mov	r1, r4
 800f8f4:	f000 f89c 	bl	800fa30 <max_serialized_size_builtin_interfaces__msg__Time>
 800f8f8:	4404      	add	r4, r0
 800f8fa:	4631      	mov	r1, r6
 800f8fc:	4620      	mov	r0, r4
 800f8fe:	f001 fff5 	bl	80118ec <ucdr_alignment>
 800f902:	3010      	adds	r0, #16
 800f904:	2108      	movs	r1, #8
 800f906:	4404      	add	r4, r0
 800f908:	4620      	mov	r0, r4
 800f90a:	f001 ffef 	bl	80118ec <ucdr_alignment>
 800f90e:	3008      	adds	r0, #8
 800f910:	4420      	add	r0, r4
 800f912:	b003      	add	sp, #12
 800f914:	bd50      	pop	{r4, r6, pc}
 800f916:	bf00      	nop

0800f918 <max_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800f918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f91c:	f04f 0801 	mov.w	r8, #1
 800f920:	460c      	mov	r4, r1
 800f922:	4607      	mov	r7, r0
 800f924:	4641      	mov	r1, r8
 800f926:	4620      	mov	r0, r4
 800f928:	f887 8000 	strb.w	r8, [r7]
 800f92c:	eb04 0608 	add.w	r6, r4, r8
 800f930:	f001 ffdc 	bl	80118ec <ucdr_alignment>
 800f934:	4605      	mov	r5, r0
 800f936:	4638      	mov	r0, r7
 800f938:	f1c4 0408 	rsb	r4, r4, #8
 800f93c:	4435      	add	r5, r6
 800f93e:	4629      	mov	r1, r5
 800f940:	f000 f876 	bl	800fa30 <max_serialized_size_builtin_interfaces__msg__Time>
 800f944:	4405      	add	r5, r0
 800f946:	4641      	mov	r1, r8
 800f948:	4628      	mov	r0, r5
 800f94a:	f001 ffcf 	bl	80118ec <ucdr_alignment>
 800f94e:	3010      	adds	r0, #16
 800f950:	2108      	movs	r1, #8
 800f952:	4405      	add	r5, r0
 800f954:	4628      	mov	r0, r5
 800f956:	f001 ffc9 	bl	80118ec <ucdr_alignment>
 800f95a:	4420      	add	r0, r4
 800f95c:	4428      	add	r0, r5
 800f95e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f962:	bf00      	nop

0800f964 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800f964:	4800      	ldr	r0, [pc, #0]	; (800f968 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x4>)
 800f966:	4770      	bx	lr
 800f968:	20000c70 	.word	0x20000c70

0800f96c <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800f96c:	f00b b8b4 	b.w	801aad8 <builtin_interfaces__msg__Time__init>

0800f970 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800f970:	f00b b8b6 	b.w	801aae0 <builtin_interfaces__msg__Time__fini>

0800f974 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800f974:	4b04      	ldr	r3, [pc, #16]	; (800f988 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800f976:	681a      	ldr	r2, [r3, #0]
 800f978:	b10a      	cbz	r2, 800f97e <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800f97a:	4803      	ldr	r0, [pc, #12]	; (800f988 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800f97c:	4770      	bx	lr
 800f97e:	4a03      	ldr	r2, [pc, #12]	; (800f98c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800f980:	4801      	ldr	r0, [pc, #4]	; (800f988 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800f982:	6812      	ldr	r2, [r2, #0]
 800f984:	601a      	str	r2, [r3, #0]
 800f986:	4770      	bx	lr
 800f988:	20000d1c 	.word	0x20000d1c
 800f98c:	20000b64 	.word	0x20000b64

0800f990 <get_serialized_size_builtin_interfaces__msg__Time>:
 800f990:	b180      	cbz	r0, 800f9b4 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800f992:	b538      	push	{r3, r4, r5, lr}
 800f994:	460d      	mov	r5, r1
 800f996:	2104      	movs	r1, #4
 800f998:	4628      	mov	r0, r5
 800f99a:	f001 ffa7 	bl	80118ec <ucdr_alignment>
 800f99e:	1d2b      	adds	r3, r5, #4
 800f9a0:	f1c5 0504 	rsb	r5, r5, #4
 800f9a4:	2104      	movs	r1, #4
 800f9a6:	181c      	adds	r4, r3, r0
 800f9a8:	4620      	mov	r0, r4
 800f9aa:	f001 ff9f 	bl	80118ec <ucdr_alignment>
 800f9ae:	4428      	add	r0, r5
 800f9b0:	4420      	add	r0, r4
 800f9b2:	bd38      	pop	{r3, r4, r5, pc}
 800f9b4:	4770      	bx	lr
 800f9b6:	bf00      	nop

0800f9b8 <_Time__cdr_deserialize>:
 800f9b8:	b538      	push	{r3, r4, r5, lr}
 800f9ba:	460c      	mov	r4, r1
 800f9bc:	b141      	cbz	r1, 800f9d0 <_Time__cdr_deserialize+0x18>
 800f9be:	4605      	mov	r5, r0
 800f9c0:	f001 fabe 	bl	8010f40 <ucdr_deserialize_int32_t>
 800f9c4:	1d21      	adds	r1, r4, #4
 800f9c6:	4628      	mov	r0, r5
 800f9c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f9cc:	f000 be40 	b.w	8010650 <ucdr_deserialize_uint32_t>
 800f9d0:	4608      	mov	r0, r1
 800f9d2:	bd38      	pop	{r3, r4, r5, pc}

0800f9d4 <_Time__cdr_serialize>:
 800f9d4:	b160      	cbz	r0, 800f9f0 <_Time__cdr_serialize+0x1c>
 800f9d6:	b538      	push	{r3, r4, r5, lr}
 800f9d8:	460d      	mov	r5, r1
 800f9da:	4604      	mov	r4, r0
 800f9dc:	6801      	ldr	r1, [r0, #0]
 800f9de:	4628      	mov	r0, r5
 800f9e0:	f001 fa16 	bl	8010e10 <ucdr_serialize_int32_t>
 800f9e4:	6861      	ldr	r1, [r4, #4]
 800f9e6:	4628      	mov	r0, r5
 800f9e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f9ec:	f000 bd00 	b.w	80103f0 <ucdr_serialize_uint32_t>
 800f9f0:	4770      	bx	lr
 800f9f2:	bf00      	nop

0800f9f4 <_Time__get_serialized_size>:
 800f9f4:	b160      	cbz	r0, 800fa10 <_Time__get_serialized_size+0x1c>
 800f9f6:	2104      	movs	r1, #4
 800f9f8:	2000      	movs	r0, #0
 800f9fa:	b510      	push	{r4, lr}
 800f9fc:	f001 ff76 	bl	80118ec <ucdr_alignment>
 800fa00:	2104      	movs	r1, #4
 800fa02:	1844      	adds	r4, r0, r1
 800fa04:	4620      	mov	r0, r4
 800fa06:	f001 ff71 	bl	80118ec <ucdr_alignment>
 800fa0a:	3004      	adds	r0, #4
 800fa0c:	4420      	add	r0, r4
 800fa0e:	bd10      	pop	{r4, pc}
 800fa10:	4770      	bx	lr
 800fa12:	bf00      	nop

0800fa14 <_Time__max_serialized_size>:
 800fa14:	b510      	push	{r4, lr}
 800fa16:	2104      	movs	r1, #4
 800fa18:	2000      	movs	r0, #0
 800fa1a:	f001 ff67 	bl	80118ec <ucdr_alignment>
 800fa1e:	2104      	movs	r1, #4
 800fa20:	1844      	adds	r4, r0, r1
 800fa22:	4620      	mov	r0, r4
 800fa24:	f001 ff62 	bl	80118ec <ucdr_alignment>
 800fa28:	3004      	adds	r0, #4
 800fa2a:	4420      	add	r0, r4
 800fa2c:	bd10      	pop	{r4, pc}
 800fa2e:	bf00      	nop

0800fa30 <max_serialized_size_builtin_interfaces__msg__Time>:
 800fa30:	b538      	push	{r3, r4, r5, lr}
 800fa32:	460c      	mov	r4, r1
 800fa34:	2301      	movs	r3, #1
 800fa36:	2104      	movs	r1, #4
 800fa38:	1d25      	adds	r5, r4, #4
 800fa3a:	7003      	strb	r3, [r0, #0]
 800fa3c:	4620      	mov	r0, r4
 800fa3e:	f1c4 0404 	rsb	r4, r4, #4
 800fa42:	f001 ff53 	bl	80118ec <ucdr_alignment>
 800fa46:	4405      	add	r5, r0
 800fa48:	2104      	movs	r1, #4
 800fa4a:	4628      	mov	r0, r5
 800fa4c:	f001 ff4e 	bl	80118ec <ucdr_alignment>
 800fa50:	4420      	add	r0, r4
 800fa52:	4428      	add	r0, r5
 800fa54:	bd38      	pop	{r3, r4, r5, pc}
 800fa56:	bf00      	nop

0800fa58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800fa58:	4800      	ldr	r0, [pc, #0]	; (800fa5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800fa5a:	4770      	bx	lr
 800fa5c:	20000d34 	.word	0x20000d34

0800fa60 <ucdr_serialize_endian_array_char>:
 800fa60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa64:	4619      	mov	r1, r3
 800fa66:	461f      	mov	r7, r3
 800fa68:	4605      	mov	r5, r0
 800fa6a:	4690      	mov	r8, r2
 800fa6c:	f001 fee6 	bl	801183c <ucdr_check_buffer_available_for>
 800fa70:	b9e0      	cbnz	r0, 800faac <ucdr_serialize_endian_array_char+0x4c>
 800fa72:	463e      	mov	r6, r7
 800fa74:	e00b      	b.n	800fa8e <ucdr_serialize_endian_array_char+0x2e>
 800fa76:	4441      	add	r1, r8
 800fa78:	68a8      	ldr	r0, [r5, #8]
 800fa7a:	4622      	mov	r2, r4
 800fa7c:	1b36      	subs	r6, r6, r4
 800fa7e:	f00d fffe 	bl	801da7e <memcpy>
 800fa82:	68ab      	ldr	r3, [r5, #8]
 800fa84:	6928      	ldr	r0, [r5, #16]
 800fa86:	4423      	add	r3, r4
 800fa88:	4420      	add	r0, r4
 800fa8a:	60ab      	str	r3, [r5, #8]
 800fa8c:	6128      	str	r0, [r5, #16]
 800fa8e:	4631      	mov	r1, r6
 800fa90:	2201      	movs	r2, #1
 800fa92:	4628      	mov	r0, r5
 800fa94:	f001 ff5c 	bl	8011950 <ucdr_check_final_buffer_behavior_array>
 800fa98:	1bb9      	subs	r1, r7, r6
 800fa9a:	4604      	mov	r4, r0
 800fa9c:	2800      	cmp	r0, #0
 800fa9e:	d1ea      	bne.n	800fa76 <ucdr_serialize_endian_array_char+0x16>
 800faa0:	2301      	movs	r3, #1
 800faa2:	7da8      	ldrb	r0, [r5, #22]
 800faa4:	756b      	strb	r3, [r5, #21]
 800faa6:	4058      	eors	r0, r3
 800faa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faac:	463a      	mov	r2, r7
 800faae:	4641      	mov	r1, r8
 800fab0:	68a8      	ldr	r0, [r5, #8]
 800fab2:	f00d ffe4 	bl	801da7e <memcpy>
 800fab6:	68aa      	ldr	r2, [r5, #8]
 800fab8:	692b      	ldr	r3, [r5, #16]
 800faba:	443a      	add	r2, r7
 800fabc:	443b      	add	r3, r7
 800fabe:	60aa      	str	r2, [r5, #8]
 800fac0:	612b      	str	r3, [r5, #16]
 800fac2:	e7ed      	b.n	800faa0 <ucdr_serialize_endian_array_char+0x40>

0800fac4 <ucdr_deserialize_endian_array_char>:
 800fac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fac8:	4619      	mov	r1, r3
 800faca:	461f      	mov	r7, r3
 800facc:	4605      	mov	r5, r0
 800face:	4690      	mov	r8, r2
 800fad0:	f001 feb4 	bl	801183c <ucdr_check_buffer_available_for>
 800fad4:	b9e8      	cbnz	r0, 800fb12 <ucdr_deserialize_endian_array_char+0x4e>
 800fad6:	463e      	mov	r6, r7
 800fad8:	e00c      	b.n	800faf4 <ucdr_deserialize_endian_array_char+0x30>
 800fada:	eb08 0003 	add.w	r0, r8, r3
 800fade:	68a9      	ldr	r1, [r5, #8]
 800fae0:	4622      	mov	r2, r4
 800fae2:	1b36      	subs	r6, r6, r4
 800fae4:	f00d ffcb 	bl	801da7e <memcpy>
 800fae8:	68ab      	ldr	r3, [r5, #8]
 800faea:	6928      	ldr	r0, [r5, #16]
 800faec:	4423      	add	r3, r4
 800faee:	4420      	add	r0, r4
 800faf0:	60ab      	str	r3, [r5, #8]
 800faf2:	6128      	str	r0, [r5, #16]
 800faf4:	4631      	mov	r1, r6
 800faf6:	2201      	movs	r2, #1
 800faf8:	4628      	mov	r0, r5
 800fafa:	f001 ff29 	bl	8011950 <ucdr_check_final_buffer_behavior_array>
 800fafe:	1bbb      	subs	r3, r7, r6
 800fb00:	4604      	mov	r4, r0
 800fb02:	2800      	cmp	r0, #0
 800fb04:	d1e9      	bne.n	800fada <ucdr_deserialize_endian_array_char+0x16>
 800fb06:	2301      	movs	r3, #1
 800fb08:	7da8      	ldrb	r0, [r5, #22]
 800fb0a:	756b      	strb	r3, [r5, #21]
 800fb0c:	4058      	eors	r0, r3
 800fb0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb12:	463a      	mov	r2, r7
 800fb14:	68a9      	ldr	r1, [r5, #8]
 800fb16:	4640      	mov	r0, r8
 800fb18:	f00d ffb1 	bl	801da7e <memcpy>
 800fb1c:	68aa      	ldr	r2, [r5, #8]
 800fb1e:	692b      	ldr	r3, [r5, #16]
 800fb20:	443a      	add	r2, r7
 800fb22:	443b      	add	r3, r7
 800fb24:	60aa      	str	r2, [r5, #8]
 800fb26:	612b      	str	r3, [r5, #16]
 800fb28:	e7ed      	b.n	800fb06 <ucdr_deserialize_endian_array_char+0x42>
 800fb2a:	bf00      	nop

0800fb2c <ucdr_serialize_array_uint8_t>:
 800fb2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb30:	4688      	mov	r8, r1
 800fb32:	4611      	mov	r1, r2
 800fb34:	4617      	mov	r7, r2
 800fb36:	4605      	mov	r5, r0
 800fb38:	f001 fe80 	bl	801183c <ucdr_check_buffer_available_for>
 800fb3c:	b9e0      	cbnz	r0, 800fb78 <ucdr_serialize_array_uint8_t+0x4c>
 800fb3e:	463e      	mov	r6, r7
 800fb40:	e00b      	b.n	800fb5a <ucdr_serialize_array_uint8_t+0x2e>
 800fb42:	4441      	add	r1, r8
 800fb44:	68a8      	ldr	r0, [r5, #8]
 800fb46:	4622      	mov	r2, r4
 800fb48:	1b36      	subs	r6, r6, r4
 800fb4a:	f00d ff98 	bl	801da7e <memcpy>
 800fb4e:	68ab      	ldr	r3, [r5, #8]
 800fb50:	6928      	ldr	r0, [r5, #16]
 800fb52:	4423      	add	r3, r4
 800fb54:	4420      	add	r0, r4
 800fb56:	60ab      	str	r3, [r5, #8]
 800fb58:	6128      	str	r0, [r5, #16]
 800fb5a:	4631      	mov	r1, r6
 800fb5c:	2201      	movs	r2, #1
 800fb5e:	4628      	mov	r0, r5
 800fb60:	f001 fef6 	bl	8011950 <ucdr_check_final_buffer_behavior_array>
 800fb64:	1bb9      	subs	r1, r7, r6
 800fb66:	4604      	mov	r4, r0
 800fb68:	2800      	cmp	r0, #0
 800fb6a:	d1ea      	bne.n	800fb42 <ucdr_serialize_array_uint8_t+0x16>
 800fb6c:	2301      	movs	r3, #1
 800fb6e:	7da8      	ldrb	r0, [r5, #22]
 800fb70:	756b      	strb	r3, [r5, #21]
 800fb72:	4058      	eors	r0, r3
 800fb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb78:	463a      	mov	r2, r7
 800fb7a:	4641      	mov	r1, r8
 800fb7c:	68a8      	ldr	r0, [r5, #8]
 800fb7e:	f00d ff7e 	bl	801da7e <memcpy>
 800fb82:	68aa      	ldr	r2, [r5, #8]
 800fb84:	692b      	ldr	r3, [r5, #16]
 800fb86:	443a      	add	r2, r7
 800fb88:	443b      	add	r3, r7
 800fb8a:	60aa      	str	r2, [r5, #8]
 800fb8c:	612b      	str	r3, [r5, #16]
 800fb8e:	e7ed      	b.n	800fb6c <ucdr_serialize_array_uint8_t+0x40>

0800fb90 <ucdr_serialize_endian_array_uint8_t>:
 800fb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb94:	4619      	mov	r1, r3
 800fb96:	461f      	mov	r7, r3
 800fb98:	4605      	mov	r5, r0
 800fb9a:	4690      	mov	r8, r2
 800fb9c:	f001 fe4e 	bl	801183c <ucdr_check_buffer_available_for>
 800fba0:	b9e0      	cbnz	r0, 800fbdc <ucdr_serialize_endian_array_uint8_t+0x4c>
 800fba2:	463e      	mov	r6, r7
 800fba4:	e00b      	b.n	800fbbe <ucdr_serialize_endian_array_uint8_t+0x2e>
 800fba6:	4441      	add	r1, r8
 800fba8:	68a8      	ldr	r0, [r5, #8]
 800fbaa:	4622      	mov	r2, r4
 800fbac:	1b36      	subs	r6, r6, r4
 800fbae:	f00d ff66 	bl	801da7e <memcpy>
 800fbb2:	68ab      	ldr	r3, [r5, #8]
 800fbb4:	6928      	ldr	r0, [r5, #16]
 800fbb6:	4423      	add	r3, r4
 800fbb8:	4420      	add	r0, r4
 800fbba:	60ab      	str	r3, [r5, #8]
 800fbbc:	6128      	str	r0, [r5, #16]
 800fbbe:	4631      	mov	r1, r6
 800fbc0:	2201      	movs	r2, #1
 800fbc2:	4628      	mov	r0, r5
 800fbc4:	f001 fec4 	bl	8011950 <ucdr_check_final_buffer_behavior_array>
 800fbc8:	1bb9      	subs	r1, r7, r6
 800fbca:	4604      	mov	r4, r0
 800fbcc:	2800      	cmp	r0, #0
 800fbce:	d1ea      	bne.n	800fba6 <ucdr_serialize_endian_array_uint8_t+0x16>
 800fbd0:	2301      	movs	r3, #1
 800fbd2:	7da8      	ldrb	r0, [r5, #22]
 800fbd4:	756b      	strb	r3, [r5, #21]
 800fbd6:	4058      	eors	r0, r3
 800fbd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbdc:	463a      	mov	r2, r7
 800fbde:	4641      	mov	r1, r8
 800fbe0:	68a8      	ldr	r0, [r5, #8]
 800fbe2:	f00d ff4c 	bl	801da7e <memcpy>
 800fbe6:	68aa      	ldr	r2, [r5, #8]
 800fbe8:	692b      	ldr	r3, [r5, #16]
 800fbea:	443a      	add	r2, r7
 800fbec:	443b      	add	r3, r7
 800fbee:	60aa      	str	r2, [r5, #8]
 800fbf0:	612b      	str	r3, [r5, #16]
 800fbf2:	e7ed      	b.n	800fbd0 <ucdr_serialize_endian_array_uint8_t+0x40>

0800fbf4 <ucdr_deserialize_array_uint8_t>:
 800fbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbf8:	4688      	mov	r8, r1
 800fbfa:	4611      	mov	r1, r2
 800fbfc:	4617      	mov	r7, r2
 800fbfe:	4605      	mov	r5, r0
 800fc00:	f001 fe1c 	bl	801183c <ucdr_check_buffer_available_for>
 800fc04:	b9e8      	cbnz	r0, 800fc42 <ucdr_deserialize_array_uint8_t+0x4e>
 800fc06:	463e      	mov	r6, r7
 800fc08:	e00c      	b.n	800fc24 <ucdr_deserialize_array_uint8_t+0x30>
 800fc0a:	eb08 0003 	add.w	r0, r8, r3
 800fc0e:	68a9      	ldr	r1, [r5, #8]
 800fc10:	4622      	mov	r2, r4
 800fc12:	1b36      	subs	r6, r6, r4
 800fc14:	f00d ff33 	bl	801da7e <memcpy>
 800fc18:	68ab      	ldr	r3, [r5, #8]
 800fc1a:	6928      	ldr	r0, [r5, #16]
 800fc1c:	4423      	add	r3, r4
 800fc1e:	4420      	add	r0, r4
 800fc20:	60ab      	str	r3, [r5, #8]
 800fc22:	6128      	str	r0, [r5, #16]
 800fc24:	4631      	mov	r1, r6
 800fc26:	2201      	movs	r2, #1
 800fc28:	4628      	mov	r0, r5
 800fc2a:	f001 fe91 	bl	8011950 <ucdr_check_final_buffer_behavior_array>
 800fc2e:	1bbb      	subs	r3, r7, r6
 800fc30:	4604      	mov	r4, r0
 800fc32:	2800      	cmp	r0, #0
 800fc34:	d1e9      	bne.n	800fc0a <ucdr_deserialize_array_uint8_t+0x16>
 800fc36:	2301      	movs	r3, #1
 800fc38:	7da8      	ldrb	r0, [r5, #22]
 800fc3a:	756b      	strb	r3, [r5, #21]
 800fc3c:	4058      	eors	r0, r3
 800fc3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc42:	463a      	mov	r2, r7
 800fc44:	68a9      	ldr	r1, [r5, #8]
 800fc46:	4640      	mov	r0, r8
 800fc48:	f00d ff19 	bl	801da7e <memcpy>
 800fc4c:	68aa      	ldr	r2, [r5, #8]
 800fc4e:	692b      	ldr	r3, [r5, #16]
 800fc50:	443a      	add	r2, r7
 800fc52:	443b      	add	r3, r7
 800fc54:	60aa      	str	r2, [r5, #8]
 800fc56:	612b      	str	r3, [r5, #16]
 800fc58:	e7ed      	b.n	800fc36 <ucdr_deserialize_array_uint8_t+0x42>
 800fc5a:	bf00      	nop

0800fc5c <ucdr_deserialize_endian_array_uint8_t>:
 800fc5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc60:	4619      	mov	r1, r3
 800fc62:	461f      	mov	r7, r3
 800fc64:	4605      	mov	r5, r0
 800fc66:	4690      	mov	r8, r2
 800fc68:	f001 fde8 	bl	801183c <ucdr_check_buffer_available_for>
 800fc6c:	b9e8      	cbnz	r0, 800fcaa <ucdr_deserialize_endian_array_uint8_t+0x4e>
 800fc6e:	463e      	mov	r6, r7
 800fc70:	e00c      	b.n	800fc8c <ucdr_deserialize_endian_array_uint8_t+0x30>
 800fc72:	eb08 0003 	add.w	r0, r8, r3
 800fc76:	68a9      	ldr	r1, [r5, #8]
 800fc78:	4622      	mov	r2, r4
 800fc7a:	1b36      	subs	r6, r6, r4
 800fc7c:	f00d feff 	bl	801da7e <memcpy>
 800fc80:	68ab      	ldr	r3, [r5, #8]
 800fc82:	6928      	ldr	r0, [r5, #16]
 800fc84:	4423      	add	r3, r4
 800fc86:	4420      	add	r0, r4
 800fc88:	60ab      	str	r3, [r5, #8]
 800fc8a:	6128      	str	r0, [r5, #16]
 800fc8c:	4631      	mov	r1, r6
 800fc8e:	2201      	movs	r2, #1
 800fc90:	4628      	mov	r0, r5
 800fc92:	f001 fe5d 	bl	8011950 <ucdr_check_final_buffer_behavior_array>
 800fc96:	1bbb      	subs	r3, r7, r6
 800fc98:	4604      	mov	r4, r0
 800fc9a:	2800      	cmp	r0, #0
 800fc9c:	d1e9      	bne.n	800fc72 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800fc9e:	2301      	movs	r3, #1
 800fca0:	7da8      	ldrb	r0, [r5, #22]
 800fca2:	756b      	strb	r3, [r5, #21]
 800fca4:	4058      	eors	r0, r3
 800fca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcaa:	463a      	mov	r2, r7
 800fcac:	68a9      	ldr	r1, [r5, #8]
 800fcae:	4640      	mov	r0, r8
 800fcb0:	f00d fee5 	bl	801da7e <memcpy>
 800fcb4:	68aa      	ldr	r2, [r5, #8]
 800fcb6:	692b      	ldr	r3, [r5, #16]
 800fcb8:	443a      	add	r2, r7
 800fcba:	443b      	add	r3, r7
 800fcbc:	60aa      	str	r2, [r5, #8]
 800fcbe:	612b      	str	r3, [r5, #16]
 800fcc0:	e7ed      	b.n	800fc9e <ucdr_deserialize_endian_array_uint8_t+0x42>
 800fcc2:	bf00      	nop

0800fcc4 <ucdr_serialize_array_int16_t>:
 800fcc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcc8:	4604      	mov	r4, r0
 800fcca:	460e      	mov	r6, r1
 800fccc:	2102      	movs	r1, #2
 800fcce:	4617      	mov	r7, r2
 800fcd0:	f001 fe14 	bl	80118fc <ucdr_buffer_alignment>
 800fcd4:	4601      	mov	r1, r0
 800fcd6:	4620      	mov	r0, r4
 800fcd8:	7d65      	ldrb	r5, [r4, #21]
 800fcda:	f001 fe57 	bl	801198c <ucdr_advance_buffer>
 800fcde:	7d21      	ldrb	r1, [r4, #20]
 800fce0:	7565      	strb	r5, [r4, #21]
 800fce2:	2901      	cmp	r1, #1
 800fce4:	d011      	beq.n	800fd0a <ucdr_serialize_array_int16_t+0x46>
 800fce6:	b15f      	cbz	r7, 800fd00 <ucdr_serialize_array_int16_t+0x3c>
 800fce8:	3e02      	subs	r6, #2
 800fcea:	2500      	movs	r5, #0
 800fcec:	e000      	b.n	800fcf0 <ucdr_serialize_array_int16_t+0x2c>
 800fcee:	7d21      	ldrb	r1, [r4, #20]
 800fcf0:	3501      	adds	r5, #1
 800fcf2:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
 800fcf6:	4620      	mov	r0, r4
 800fcf8:	f000 ff20 	bl	8010b3c <ucdr_serialize_endian_int16_t>
 800fcfc:	42af      	cmp	r7, r5
 800fcfe:	d1f6      	bne.n	800fcee <ucdr_serialize_array_int16_t+0x2a>
 800fd00:	7da0      	ldrb	r0, [r4, #22]
 800fd02:	f080 0001 	eor.w	r0, r0, #1
 800fd06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd0a:	007f      	lsls	r7, r7, #1
 800fd0c:	4620      	mov	r0, r4
 800fd0e:	4639      	mov	r1, r7
 800fd10:	f001 fd94 	bl	801183c <ucdr_check_buffer_available_for>
 800fd14:	b9f8      	cbnz	r0, 800fd56 <ucdr_serialize_array_int16_t+0x92>
 800fd16:	46b8      	mov	r8, r7
 800fd18:	e00c      	b.n	800fd34 <ucdr_serialize_array_int16_t+0x70>
 800fd1a:	462a      	mov	r2, r5
 800fd1c:	4431      	add	r1, r6
 800fd1e:	68a0      	ldr	r0, [r4, #8]
 800fd20:	eba8 0805 	sub.w	r8, r8, r5
 800fd24:	f00d feab 	bl	801da7e <memcpy>
 800fd28:	68a2      	ldr	r2, [r4, #8]
 800fd2a:	6923      	ldr	r3, [r4, #16]
 800fd2c:	442a      	add	r2, r5
 800fd2e:	442b      	add	r3, r5
 800fd30:	60a2      	str	r2, [r4, #8]
 800fd32:	6123      	str	r3, [r4, #16]
 800fd34:	4641      	mov	r1, r8
 800fd36:	2202      	movs	r2, #2
 800fd38:	4620      	mov	r0, r4
 800fd3a:	f001 fe09 	bl	8011950 <ucdr_check_final_buffer_behavior_array>
 800fd3e:	eba7 0108 	sub.w	r1, r7, r8
 800fd42:	4605      	mov	r5, r0
 800fd44:	2800      	cmp	r0, #0
 800fd46:	d1e8      	bne.n	800fd1a <ucdr_serialize_array_int16_t+0x56>
 800fd48:	2302      	movs	r3, #2
 800fd4a:	7da0      	ldrb	r0, [r4, #22]
 800fd4c:	7563      	strb	r3, [r4, #21]
 800fd4e:	f080 0001 	eor.w	r0, r0, #1
 800fd52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd56:	463a      	mov	r2, r7
 800fd58:	4631      	mov	r1, r6
 800fd5a:	68a0      	ldr	r0, [r4, #8]
 800fd5c:	f00d fe8f 	bl	801da7e <memcpy>
 800fd60:	68a2      	ldr	r2, [r4, #8]
 800fd62:	6923      	ldr	r3, [r4, #16]
 800fd64:	443a      	add	r2, r7
 800fd66:	441f      	add	r7, r3
 800fd68:	60a2      	str	r2, [r4, #8]
 800fd6a:	6127      	str	r7, [r4, #16]
 800fd6c:	e7ec      	b.n	800fd48 <ucdr_serialize_array_int16_t+0x84>
 800fd6e:	bf00      	nop

0800fd70 <ucdr_deserialize_array_int16_t>:
 800fd70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd74:	4604      	mov	r4, r0
 800fd76:	460e      	mov	r6, r1
 800fd78:	2102      	movs	r1, #2
 800fd7a:	4617      	mov	r7, r2
 800fd7c:	f001 fdbe 	bl	80118fc <ucdr_buffer_alignment>
 800fd80:	4601      	mov	r1, r0
 800fd82:	4620      	mov	r0, r4
 800fd84:	7d65      	ldrb	r5, [r4, #21]
 800fd86:	f001 fe01 	bl	801198c <ucdr_advance_buffer>
 800fd8a:	7d21      	ldrb	r1, [r4, #20]
 800fd8c:	7565      	strb	r5, [r4, #21]
 800fd8e:	2901      	cmp	r1, #1
 800fd90:	d010      	beq.n	800fdb4 <ucdr_deserialize_array_int16_t+0x44>
 800fd92:	b157      	cbz	r7, 800fdaa <ucdr_deserialize_array_int16_t+0x3a>
 800fd94:	2500      	movs	r5, #0
 800fd96:	e000      	b.n	800fd9a <ucdr_deserialize_array_int16_t+0x2a>
 800fd98:	7d21      	ldrb	r1, [r4, #20]
 800fd9a:	3501      	adds	r5, #1
 800fd9c:	4632      	mov	r2, r6
 800fd9e:	4620      	mov	r0, r4
 800fda0:	3602      	adds	r6, #2
 800fda2:	f000 ffbf 	bl	8010d24 <ucdr_deserialize_endian_int16_t>
 800fda6:	42af      	cmp	r7, r5
 800fda8:	d1f6      	bne.n	800fd98 <ucdr_deserialize_array_int16_t+0x28>
 800fdaa:	7da0      	ldrb	r0, [r4, #22]
 800fdac:	f080 0001 	eor.w	r0, r0, #1
 800fdb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdb4:	007f      	lsls	r7, r7, #1
 800fdb6:	4620      	mov	r0, r4
 800fdb8:	4639      	mov	r1, r7
 800fdba:	f001 fd3f 	bl	801183c <ucdr_check_buffer_available_for>
 800fdbe:	b9f8      	cbnz	r0, 800fe00 <ucdr_deserialize_array_int16_t+0x90>
 800fdc0:	46b8      	mov	r8, r7
 800fdc2:	e00c      	b.n	800fdde <ucdr_deserialize_array_int16_t+0x6e>
 800fdc4:	18f0      	adds	r0, r6, r3
 800fdc6:	462a      	mov	r2, r5
 800fdc8:	68a1      	ldr	r1, [r4, #8]
 800fdca:	eba8 0805 	sub.w	r8, r8, r5
 800fdce:	f00d fe56 	bl	801da7e <memcpy>
 800fdd2:	68a2      	ldr	r2, [r4, #8]
 800fdd4:	6923      	ldr	r3, [r4, #16]
 800fdd6:	442a      	add	r2, r5
 800fdd8:	442b      	add	r3, r5
 800fdda:	60a2      	str	r2, [r4, #8]
 800fddc:	6123      	str	r3, [r4, #16]
 800fdde:	4641      	mov	r1, r8
 800fde0:	2202      	movs	r2, #2
 800fde2:	4620      	mov	r0, r4
 800fde4:	f001 fdb4 	bl	8011950 <ucdr_check_final_buffer_behavior_array>
 800fde8:	eba7 0308 	sub.w	r3, r7, r8
 800fdec:	4605      	mov	r5, r0
 800fdee:	2800      	cmp	r0, #0
 800fdf0:	d1e8      	bne.n	800fdc4 <ucdr_deserialize_array_int16_t+0x54>
 800fdf2:	2302      	movs	r3, #2
 800fdf4:	7da0      	ldrb	r0, [r4, #22]
 800fdf6:	7563      	strb	r3, [r4, #21]
 800fdf8:	f080 0001 	eor.w	r0, r0, #1
 800fdfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe00:	463a      	mov	r2, r7
 800fe02:	68a1      	ldr	r1, [r4, #8]
 800fe04:	4630      	mov	r0, r6
 800fe06:	f00d fe3a 	bl	801da7e <memcpy>
 800fe0a:	68a2      	ldr	r2, [r4, #8]
 800fe0c:	6923      	ldr	r3, [r4, #16]
 800fe0e:	443a      	add	r2, r7
 800fe10:	441f      	add	r7, r3
 800fe12:	60a2      	str	r2, [r4, #8]
 800fe14:	6127      	str	r7, [r4, #16]
 800fe16:	e7ec      	b.n	800fdf2 <ucdr_deserialize_array_int16_t+0x82>

0800fe18 <ucdr_serialize_array_float>:
 800fe18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe1c:	4604      	mov	r4, r0
 800fe1e:	460e      	mov	r6, r1
 800fe20:	2104      	movs	r1, #4
 800fe22:	4617      	mov	r7, r2
 800fe24:	f001 fd6a 	bl	80118fc <ucdr_buffer_alignment>
 800fe28:	4601      	mov	r1, r0
 800fe2a:	4620      	mov	r0, r4
 800fe2c:	7d65      	ldrb	r5, [r4, #21]
 800fe2e:	f001 fdad 	bl	801198c <ucdr_advance_buffer>
 800fe32:	7d21      	ldrb	r1, [r4, #20]
 800fe34:	7565      	strb	r5, [r4, #21]
 800fe36:	2901      	cmp	r1, #1
 800fe38:	d010      	beq.n	800fe5c <ucdr_serialize_array_float+0x44>
 800fe3a:	b157      	cbz	r7, 800fe52 <ucdr_serialize_array_float+0x3a>
 800fe3c:	2500      	movs	r5, #0
 800fe3e:	e000      	b.n	800fe42 <ucdr_serialize_array_float+0x2a>
 800fe40:	7d21      	ldrb	r1, [r4, #20]
 800fe42:	3501      	adds	r5, #1
 800fe44:	ecb6 0a01 	vldmia	r6!, {s0}
 800fe48:	4620      	mov	r0, r4
 800fe4a:	f001 fb37 	bl	80114bc <ucdr_serialize_endian_float>
 800fe4e:	42af      	cmp	r7, r5
 800fe50:	d1f6      	bne.n	800fe40 <ucdr_serialize_array_float+0x28>
 800fe52:	7da0      	ldrb	r0, [r4, #22]
 800fe54:	f080 0001 	eor.w	r0, r0, #1
 800fe58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe5c:	00bf      	lsls	r7, r7, #2
 800fe5e:	4620      	mov	r0, r4
 800fe60:	4639      	mov	r1, r7
 800fe62:	f001 fceb 	bl	801183c <ucdr_check_buffer_available_for>
 800fe66:	b9f8      	cbnz	r0, 800fea8 <ucdr_serialize_array_float+0x90>
 800fe68:	46b8      	mov	r8, r7
 800fe6a:	e00c      	b.n	800fe86 <ucdr_serialize_array_float+0x6e>
 800fe6c:	462a      	mov	r2, r5
 800fe6e:	4431      	add	r1, r6
 800fe70:	68a0      	ldr	r0, [r4, #8]
 800fe72:	eba8 0805 	sub.w	r8, r8, r5
 800fe76:	f00d fe02 	bl	801da7e <memcpy>
 800fe7a:	68a2      	ldr	r2, [r4, #8]
 800fe7c:	6923      	ldr	r3, [r4, #16]
 800fe7e:	442a      	add	r2, r5
 800fe80:	442b      	add	r3, r5
 800fe82:	60a2      	str	r2, [r4, #8]
 800fe84:	6123      	str	r3, [r4, #16]
 800fe86:	4641      	mov	r1, r8
 800fe88:	2204      	movs	r2, #4
 800fe8a:	4620      	mov	r0, r4
 800fe8c:	f001 fd60 	bl	8011950 <ucdr_check_final_buffer_behavior_array>
 800fe90:	eba7 0108 	sub.w	r1, r7, r8
 800fe94:	4605      	mov	r5, r0
 800fe96:	2800      	cmp	r0, #0
 800fe98:	d1e8      	bne.n	800fe6c <ucdr_serialize_array_float+0x54>
 800fe9a:	2304      	movs	r3, #4
 800fe9c:	7da0      	ldrb	r0, [r4, #22]
 800fe9e:	7563      	strb	r3, [r4, #21]
 800fea0:	f080 0001 	eor.w	r0, r0, #1
 800fea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fea8:	463a      	mov	r2, r7
 800feaa:	4631      	mov	r1, r6
 800feac:	68a0      	ldr	r0, [r4, #8]
 800feae:	f00d fde6 	bl	801da7e <memcpy>
 800feb2:	68a2      	ldr	r2, [r4, #8]
 800feb4:	6923      	ldr	r3, [r4, #16]
 800feb6:	443a      	add	r2, r7
 800feb8:	441f      	add	r7, r3
 800feba:	60a2      	str	r2, [r4, #8]
 800febc:	6127      	str	r7, [r4, #16]
 800febe:	e7ec      	b.n	800fe9a <ucdr_serialize_array_float+0x82>

0800fec0 <ucdr_deserialize_array_float>:
 800fec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fec4:	4604      	mov	r4, r0
 800fec6:	460e      	mov	r6, r1
 800fec8:	2104      	movs	r1, #4
 800feca:	4617      	mov	r7, r2
 800fecc:	f001 fd16 	bl	80118fc <ucdr_buffer_alignment>
 800fed0:	4601      	mov	r1, r0
 800fed2:	4620      	mov	r0, r4
 800fed4:	7d65      	ldrb	r5, [r4, #21]
 800fed6:	f001 fd59 	bl	801198c <ucdr_advance_buffer>
 800feda:	7d21      	ldrb	r1, [r4, #20]
 800fedc:	7565      	strb	r5, [r4, #21]
 800fede:	2901      	cmp	r1, #1
 800fee0:	d010      	beq.n	800ff04 <ucdr_deserialize_array_float+0x44>
 800fee2:	b157      	cbz	r7, 800fefa <ucdr_deserialize_array_float+0x3a>
 800fee4:	2500      	movs	r5, #0
 800fee6:	e000      	b.n	800feea <ucdr_deserialize_array_float+0x2a>
 800fee8:	7d21      	ldrb	r1, [r4, #20]
 800feea:	3501      	adds	r5, #1
 800feec:	4632      	mov	r2, r6
 800feee:	4620      	mov	r0, r4
 800fef0:	3604      	adds	r6, #4
 800fef2:	f001 fc0d 	bl	8011710 <ucdr_deserialize_endian_float>
 800fef6:	42af      	cmp	r7, r5
 800fef8:	d1f6      	bne.n	800fee8 <ucdr_deserialize_array_float+0x28>
 800fefa:	7da0      	ldrb	r0, [r4, #22]
 800fefc:	f080 0001 	eor.w	r0, r0, #1
 800ff00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff04:	00bf      	lsls	r7, r7, #2
 800ff06:	4620      	mov	r0, r4
 800ff08:	4639      	mov	r1, r7
 800ff0a:	f001 fc97 	bl	801183c <ucdr_check_buffer_available_for>
 800ff0e:	b9f8      	cbnz	r0, 800ff50 <ucdr_deserialize_array_float+0x90>
 800ff10:	46b8      	mov	r8, r7
 800ff12:	e00c      	b.n	800ff2e <ucdr_deserialize_array_float+0x6e>
 800ff14:	18f0      	adds	r0, r6, r3
 800ff16:	462a      	mov	r2, r5
 800ff18:	68a1      	ldr	r1, [r4, #8]
 800ff1a:	eba8 0805 	sub.w	r8, r8, r5
 800ff1e:	f00d fdae 	bl	801da7e <memcpy>
 800ff22:	68a2      	ldr	r2, [r4, #8]
 800ff24:	6923      	ldr	r3, [r4, #16]
 800ff26:	442a      	add	r2, r5
 800ff28:	442b      	add	r3, r5
 800ff2a:	60a2      	str	r2, [r4, #8]
 800ff2c:	6123      	str	r3, [r4, #16]
 800ff2e:	4641      	mov	r1, r8
 800ff30:	2204      	movs	r2, #4
 800ff32:	4620      	mov	r0, r4
 800ff34:	f001 fd0c 	bl	8011950 <ucdr_check_final_buffer_behavior_array>
 800ff38:	eba7 0308 	sub.w	r3, r7, r8
 800ff3c:	4605      	mov	r5, r0
 800ff3e:	2800      	cmp	r0, #0
 800ff40:	d1e8      	bne.n	800ff14 <ucdr_deserialize_array_float+0x54>
 800ff42:	2304      	movs	r3, #4
 800ff44:	7da0      	ldrb	r0, [r4, #22]
 800ff46:	7563      	strb	r3, [r4, #21]
 800ff48:	f080 0001 	eor.w	r0, r0, #1
 800ff4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff50:	463a      	mov	r2, r7
 800ff52:	68a1      	ldr	r1, [r4, #8]
 800ff54:	4630      	mov	r0, r6
 800ff56:	f00d fd92 	bl	801da7e <memcpy>
 800ff5a:	68a2      	ldr	r2, [r4, #8]
 800ff5c:	6923      	ldr	r3, [r4, #16]
 800ff5e:	443a      	add	r2, r7
 800ff60:	441f      	add	r7, r3
 800ff62:	60a2      	str	r2, [r4, #8]
 800ff64:	6127      	str	r7, [r4, #16]
 800ff66:	e7ec      	b.n	800ff42 <ucdr_deserialize_array_float+0x82>

0800ff68 <ucdr_serialize_bool>:
 800ff68:	b538      	push	{r3, r4, r5, lr}
 800ff6a:	460d      	mov	r5, r1
 800ff6c:	2101      	movs	r1, #1
 800ff6e:	4604      	mov	r4, r0
 800ff70:	f001 fc70 	bl	8011854 <ucdr_check_final_buffer_behavior>
 800ff74:	b148      	cbz	r0, 800ff8a <ucdr_serialize_bool+0x22>
 800ff76:	68a3      	ldr	r3, [r4, #8]
 800ff78:	2101      	movs	r1, #1
 800ff7a:	701d      	strb	r5, [r3, #0]
 800ff7c:	68a2      	ldr	r2, [r4, #8]
 800ff7e:	6923      	ldr	r3, [r4, #16]
 800ff80:	440a      	add	r2, r1
 800ff82:	7561      	strb	r1, [r4, #21]
 800ff84:	440b      	add	r3, r1
 800ff86:	60a2      	str	r2, [r4, #8]
 800ff88:	6123      	str	r3, [r4, #16]
 800ff8a:	7da0      	ldrb	r0, [r4, #22]
 800ff8c:	f080 0001 	eor.w	r0, r0, #1
 800ff90:	bd38      	pop	{r3, r4, r5, pc}
 800ff92:	bf00      	nop

0800ff94 <ucdr_deserialize_bool>:
 800ff94:	b538      	push	{r3, r4, r5, lr}
 800ff96:	460d      	mov	r5, r1
 800ff98:	2101      	movs	r1, #1
 800ff9a:	4604      	mov	r4, r0
 800ff9c:	f001 fc5a 	bl	8011854 <ucdr_check_final_buffer_behavior>
 800ffa0:	b160      	cbz	r0, 800ffbc <ucdr_deserialize_bool+0x28>
 800ffa2:	68a2      	ldr	r2, [r4, #8]
 800ffa4:	2101      	movs	r1, #1
 800ffa6:	6923      	ldr	r3, [r4, #16]
 800ffa8:	f812 0b01 	ldrb.w	r0, [r2], #1
 800ffac:	440b      	add	r3, r1
 800ffae:	3800      	subs	r0, #0
 800ffb0:	bf18      	it	ne
 800ffb2:	2001      	movne	r0, #1
 800ffb4:	7028      	strb	r0, [r5, #0]
 800ffb6:	60a2      	str	r2, [r4, #8]
 800ffb8:	6123      	str	r3, [r4, #16]
 800ffba:	7561      	strb	r1, [r4, #21]
 800ffbc:	7da0      	ldrb	r0, [r4, #22]
 800ffbe:	f080 0001 	eor.w	r0, r0, #1
 800ffc2:	bd38      	pop	{r3, r4, r5, pc}

0800ffc4 <ucdr_serialize_uint8_t>:
 800ffc4:	b538      	push	{r3, r4, r5, lr}
 800ffc6:	460d      	mov	r5, r1
 800ffc8:	2101      	movs	r1, #1
 800ffca:	4604      	mov	r4, r0
 800ffcc:	f001 fc42 	bl	8011854 <ucdr_check_final_buffer_behavior>
 800ffd0:	b148      	cbz	r0, 800ffe6 <ucdr_serialize_uint8_t+0x22>
 800ffd2:	68a3      	ldr	r3, [r4, #8]
 800ffd4:	2101      	movs	r1, #1
 800ffd6:	701d      	strb	r5, [r3, #0]
 800ffd8:	68a2      	ldr	r2, [r4, #8]
 800ffda:	6923      	ldr	r3, [r4, #16]
 800ffdc:	440a      	add	r2, r1
 800ffde:	7561      	strb	r1, [r4, #21]
 800ffe0:	440b      	add	r3, r1
 800ffe2:	60a2      	str	r2, [r4, #8]
 800ffe4:	6123      	str	r3, [r4, #16]
 800ffe6:	7da0      	ldrb	r0, [r4, #22]
 800ffe8:	f080 0001 	eor.w	r0, r0, #1
 800ffec:	bd38      	pop	{r3, r4, r5, pc}
 800ffee:	bf00      	nop

0800fff0 <ucdr_deserialize_uint8_t>:
 800fff0:	b538      	push	{r3, r4, r5, lr}
 800fff2:	460d      	mov	r5, r1
 800fff4:	2101      	movs	r1, #1
 800fff6:	4604      	mov	r4, r0
 800fff8:	f001 fc2c 	bl	8011854 <ucdr_check_final_buffer_behavior>
 800fffc:	b150      	cbz	r0, 8010014 <ucdr_deserialize_uint8_t+0x24>
 800fffe:	68a3      	ldr	r3, [r4, #8]
 8010000:	2101      	movs	r1, #1
 8010002:	781b      	ldrb	r3, [r3, #0]
 8010004:	702b      	strb	r3, [r5, #0]
 8010006:	68a2      	ldr	r2, [r4, #8]
 8010008:	6923      	ldr	r3, [r4, #16]
 801000a:	440a      	add	r2, r1
 801000c:	7561      	strb	r1, [r4, #21]
 801000e:	440b      	add	r3, r1
 8010010:	60a2      	str	r2, [r4, #8]
 8010012:	6123      	str	r3, [r4, #16]
 8010014:	7da0      	ldrb	r0, [r4, #22]
 8010016:	f080 0001 	eor.w	r0, r0, #1
 801001a:	bd38      	pop	{r3, r4, r5, pc}

0801001c <ucdr_serialize_uint16_t>:
 801001c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010020:	460b      	mov	r3, r1
 8010022:	b082      	sub	sp, #8
 8010024:	4604      	mov	r4, r0
 8010026:	2102      	movs	r1, #2
 8010028:	f8ad 3006 	strh.w	r3, [sp, #6]
 801002c:	f001 fc66 	bl	80118fc <ucdr_buffer_alignment>
 8010030:	4601      	mov	r1, r0
 8010032:	4620      	mov	r0, r4
 8010034:	7d67      	ldrb	r7, [r4, #21]
 8010036:	f001 fca9 	bl	801198c <ucdr_advance_buffer>
 801003a:	2102      	movs	r1, #2
 801003c:	4620      	mov	r0, r4
 801003e:	f001 fbfd 	bl	801183c <ucdr_check_buffer_available_for>
 8010042:	bb78      	cbnz	r0, 80100a4 <ucdr_serialize_uint16_t+0x88>
 8010044:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010048:	42ab      	cmp	r3, r5
 801004a:	d926      	bls.n	801009a <ucdr_serialize_uint16_t+0x7e>
 801004c:	1b5e      	subs	r6, r3, r5
 801004e:	60a3      	str	r3, [r4, #8]
 8010050:	6923      	ldr	r3, [r4, #16]
 8010052:	4620      	mov	r0, r4
 8010054:	f1c6 0802 	rsb	r8, r6, #2
 8010058:	4433      	add	r3, r6
 801005a:	4641      	mov	r1, r8
 801005c:	6123      	str	r3, [r4, #16]
 801005e:	f001 fbf9 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8010062:	2800      	cmp	r0, #0
 8010064:	d03b      	beq.n	80100de <ucdr_serialize_uint16_t+0xc2>
 8010066:	7d23      	ldrb	r3, [r4, #20]
 8010068:	2b01      	cmp	r3, #1
 801006a:	d04a      	beq.n	8010102 <ucdr_serialize_uint16_t+0xe6>
 801006c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010070:	702b      	strb	r3, [r5, #0]
 8010072:	2e00      	cmp	r6, #0
 8010074:	d040      	beq.n	80100f8 <ucdr_serialize_uint16_t+0xdc>
 8010076:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801007a:	706b      	strb	r3, [r5, #1]
 801007c:	6923      	ldr	r3, [r4, #16]
 801007e:	2102      	movs	r1, #2
 8010080:	68a2      	ldr	r2, [r4, #8]
 8010082:	3302      	adds	r3, #2
 8010084:	7da0      	ldrb	r0, [r4, #22]
 8010086:	4442      	add	r2, r8
 8010088:	7561      	strb	r1, [r4, #21]
 801008a:	1b9e      	subs	r6, r3, r6
 801008c:	f080 0001 	eor.w	r0, r0, #1
 8010090:	60a2      	str	r2, [r4, #8]
 8010092:	6126      	str	r6, [r4, #16]
 8010094:	b002      	add	sp, #8
 8010096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801009a:	2102      	movs	r1, #2
 801009c:	4620      	mov	r0, r4
 801009e:	f001 fbd9 	bl	8011854 <ucdr_check_final_buffer_behavior>
 80100a2:	b190      	cbz	r0, 80100ca <ucdr_serialize_uint16_t+0xae>
 80100a4:	7d23      	ldrb	r3, [r4, #20]
 80100a6:	2b01      	cmp	r3, #1
 80100a8:	68a3      	ldr	r3, [r4, #8]
 80100aa:	d014      	beq.n	80100d6 <ucdr_serialize_uint16_t+0xba>
 80100ac:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80100b0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80100b4:	7019      	strb	r1, [r3, #0]
 80100b6:	68a3      	ldr	r3, [r4, #8]
 80100b8:	705a      	strb	r2, [r3, #1]
 80100ba:	2102      	movs	r1, #2
 80100bc:	68a2      	ldr	r2, [r4, #8]
 80100be:	6923      	ldr	r3, [r4, #16]
 80100c0:	440a      	add	r2, r1
 80100c2:	7561      	strb	r1, [r4, #21]
 80100c4:	440b      	add	r3, r1
 80100c6:	60a2      	str	r2, [r4, #8]
 80100c8:	6123      	str	r3, [r4, #16]
 80100ca:	7da0      	ldrb	r0, [r4, #22]
 80100cc:	f080 0001 	eor.w	r0, r0, #1
 80100d0:	b002      	add	sp, #8
 80100d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100d6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80100da:	801a      	strh	r2, [r3, #0]
 80100dc:	e7ed      	b.n	80100ba <ucdr_serialize_uint16_t+0x9e>
 80100de:	68a2      	ldr	r2, [r4, #8]
 80100e0:	6923      	ldr	r3, [r4, #16]
 80100e2:	7da0      	ldrb	r0, [r4, #22]
 80100e4:	1b92      	subs	r2, r2, r6
 80100e6:	1b9b      	subs	r3, r3, r6
 80100e8:	7567      	strb	r7, [r4, #21]
 80100ea:	f080 0001 	eor.w	r0, r0, #1
 80100ee:	60a2      	str	r2, [r4, #8]
 80100f0:	6123      	str	r3, [r4, #16]
 80100f2:	b002      	add	sp, #8
 80100f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100f8:	68a3      	ldr	r3, [r4, #8]
 80100fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80100fe:	701a      	strb	r2, [r3, #0]
 8010100:	e7bc      	b.n	801007c <ucdr_serialize_uint16_t+0x60>
 8010102:	4628      	mov	r0, r5
 8010104:	f10d 0506 	add.w	r5, sp, #6
 8010108:	4632      	mov	r2, r6
 801010a:	4629      	mov	r1, r5
 801010c:	f00d fcb7 	bl	801da7e <memcpy>
 8010110:	4642      	mov	r2, r8
 8010112:	19a9      	adds	r1, r5, r6
 8010114:	68a0      	ldr	r0, [r4, #8]
 8010116:	f00d fcb2 	bl	801da7e <memcpy>
 801011a:	e7af      	b.n	801007c <ucdr_serialize_uint16_t+0x60>

0801011c <ucdr_serialize_endian_uint16_t>:
 801011c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010120:	4604      	mov	r4, r0
 8010122:	b083      	sub	sp, #12
 8010124:	460d      	mov	r5, r1
 8010126:	2102      	movs	r1, #2
 8010128:	f8ad 2006 	strh.w	r2, [sp, #6]
 801012c:	f001 fbe6 	bl	80118fc <ucdr_buffer_alignment>
 8010130:	4601      	mov	r1, r0
 8010132:	4620      	mov	r0, r4
 8010134:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010138:	f001 fc28 	bl	801198c <ucdr_advance_buffer>
 801013c:	2102      	movs	r1, #2
 801013e:	4620      	mov	r0, r4
 8010140:	f001 fb7c 	bl	801183c <ucdr_check_buffer_available_for>
 8010144:	bb70      	cbnz	r0, 80101a4 <ucdr_serialize_endian_uint16_t+0x88>
 8010146:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801014a:	42be      	cmp	r6, r7
 801014c:	d925      	bls.n	801019a <ucdr_serialize_endian_uint16_t+0x7e>
 801014e:	6923      	ldr	r3, [r4, #16]
 8010150:	4620      	mov	r0, r4
 8010152:	60a6      	str	r6, [r4, #8]
 8010154:	1bf6      	subs	r6, r6, r7
 8010156:	4433      	add	r3, r6
 8010158:	f1c6 0902 	rsb	r9, r6, #2
 801015c:	6123      	str	r3, [r4, #16]
 801015e:	4649      	mov	r1, r9
 8010160:	f001 fb78 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8010164:	2800      	cmp	r0, #0
 8010166:	d039      	beq.n	80101dc <ucdr_serialize_endian_uint16_t+0xc0>
 8010168:	2d01      	cmp	r5, #1
 801016a:	d04a      	beq.n	8010202 <ucdr_serialize_endian_uint16_t+0xe6>
 801016c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010170:	703b      	strb	r3, [r7, #0]
 8010172:	2e00      	cmp	r6, #0
 8010174:	d040      	beq.n	80101f8 <ucdr_serialize_endian_uint16_t+0xdc>
 8010176:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801017a:	707b      	strb	r3, [r7, #1]
 801017c:	6923      	ldr	r3, [r4, #16]
 801017e:	2102      	movs	r1, #2
 8010180:	68a2      	ldr	r2, [r4, #8]
 8010182:	7da0      	ldrb	r0, [r4, #22]
 8010184:	3302      	adds	r3, #2
 8010186:	444a      	add	r2, r9
 8010188:	7561      	strb	r1, [r4, #21]
 801018a:	1b9b      	subs	r3, r3, r6
 801018c:	f080 0001 	eor.w	r0, r0, #1
 8010190:	60a2      	str	r2, [r4, #8]
 8010192:	6123      	str	r3, [r4, #16]
 8010194:	b003      	add	sp, #12
 8010196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801019a:	2102      	movs	r1, #2
 801019c:	4620      	mov	r0, r4
 801019e:	f001 fb59 	bl	8011854 <ucdr_check_final_buffer_behavior>
 80101a2:	b188      	cbz	r0, 80101c8 <ucdr_serialize_endian_uint16_t+0xac>
 80101a4:	2d01      	cmp	r5, #1
 80101a6:	68a3      	ldr	r3, [r4, #8]
 80101a8:	d014      	beq.n	80101d4 <ucdr_serialize_endian_uint16_t+0xb8>
 80101aa:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80101ae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80101b2:	7019      	strb	r1, [r3, #0]
 80101b4:	68a3      	ldr	r3, [r4, #8]
 80101b6:	705a      	strb	r2, [r3, #1]
 80101b8:	2102      	movs	r1, #2
 80101ba:	68a2      	ldr	r2, [r4, #8]
 80101bc:	6923      	ldr	r3, [r4, #16]
 80101be:	440a      	add	r2, r1
 80101c0:	7561      	strb	r1, [r4, #21]
 80101c2:	440b      	add	r3, r1
 80101c4:	60a2      	str	r2, [r4, #8]
 80101c6:	6123      	str	r3, [r4, #16]
 80101c8:	7da0      	ldrb	r0, [r4, #22]
 80101ca:	f080 0001 	eor.w	r0, r0, #1
 80101ce:	b003      	add	sp, #12
 80101d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80101d8:	801a      	strh	r2, [r3, #0]
 80101da:	e7ed      	b.n	80101b8 <ucdr_serialize_endian_uint16_t+0x9c>
 80101dc:	68a2      	ldr	r2, [r4, #8]
 80101de:	6923      	ldr	r3, [r4, #16]
 80101e0:	7da0      	ldrb	r0, [r4, #22]
 80101e2:	1b92      	subs	r2, r2, r6
 80101e4:	1b9b      	subs	r3, r3, r6
 80101e6:	f884 8015 	strb.w	r8, [r4, #21]
 80101ea:	f080 0001 	eor.w	r0, r0, #1
 80101ee:	60a2      	str	r2, [r4, #8]
 80101f0:	6123      	str	r3, [r4, #16]
 80101f2:	b003      	add	sp, #12
 80101f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101f8:	68a3      	ldr	r3, [r4, #8]
 80101fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80101fe:	701a      	strb	r2, [r3, #0]
 8010200:	e7bc      	b.n	801017c <ucdr_serialize_endian_uint16_t+0x60>
 8010202:	f10d 0506 	add.w	r5, sp, #6
 8010206:	4632      	mov	r2, r6
 8010208:	4638      	mov	r0, r7
 801020a:	4629      	mov	r1, r5
 801020c:	f00d fc37 	bl	801da7e <memcpy>
 8010210:	464a      	mov	r2, r9
 8010212:	19a9      	adds	r1, r5, r6
 8010214:	68a0      	ldr	r0, [r4, #8]
 8010216:	f00d fc32 	bl	801da7e <memcpy>
 801021a:	e7af      	b.n	801017c <ucdr_serialize_endian_uint16_t+0x60>

0801021c <ucdr_deserialize_uint16_t>:
 801021c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010220:	4604      	mov	r4, r0
 8010222:	460d      	mov	r5, r1
 8010224:	2102      	movs	r1, #2
 8010226:	f001 fb69 	bl	80118fc <ucdr_buffer_alignment>
 801022a:	4601      	mov	r1, r0
 801022c:	4620      	mov	r0, r4
 801022e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010232:	f001 fbab 	bl	801198c <ucdr_advance_buffer>
 8010236:	2102      	movs	r1, #2
 8010238:	4620      	mov	r0, r4
 801023a:	f001 faff 	bl	801183c <ucdr_check_buffer_available_for>
 801023e:	bb60      	cbnz	r0, 801029a <ucdr_deserialize_uint16_t+0x7e>
 8010240:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010244:	42be      	cmp	r6, r7
 8010246:	d923      	bls.n	8010290 <ucdr_deserialize_uint16_t+0x74>
 8010248:	6923      	ldr	r3, [r4, #16]
 801024a:	4620      	mov	r0, r4
 801024c:	60a6      	str	r6, [r4, #8]
 801024e:	1bf6      	subs	r6, r6, r7
 8010250:	4433      	add	r3, r6
 8010252:	f1c6 0902 	rsb	r9, r6, #2
 8010256:	6123      	str	r3, [r4, #16]
 8010258:	4649      	mov	r1, r9
 801025a:	f001 fafb 	bl	8011854 <ucdr_check_final_buffer_behavior>
 801025e:	2800      	cmp	r0, #0
 8010260:	d034      	beq.n	80102cc <ucdr_deserialize_uint16_t+0xb0>
 8010262:	7d23      	ldrb	r3, [r4, #20]
 8010264:	2b01      	cmp	r3, #1
 8010266:	d042      	beq.n	80102ee <ucdr_deserialize_uint16_t+0xd2>
 8010268:	787b      	ldrb	r3, [r7, #1]
 801026a:	702b      	strb	r3, [r5, #0]
 801026c:	2e00      	cmp	r6, #0
 801026e:	d03a      	beq.n	80102e6 <ucdr_deserialize_uint16_t+0xca>
 8010270:	783b      	ldrb	r3, [r7, #0]
 8010272:	706b      	strb	r3, [r5, #1]
 8010274:	6923      	ldr	r3, [r4, #16]
 8010276:	2102      	movs	r1, #2
 8010278:	68a2      	ldr	r2, [r4, #8]
 801027a:	3302      	adds	r3, #2
 801027c:	7da0      	ldrb	r0, [r4, #22]
 801027e:	444a      	add	r2, r9
 8010280:	7561      	strb	r1, [r4, #21]
 8010282:	1b9b      	subs	r3, r3, r6
 8010284:	f080 0001 	eor.w	r0, r0, #1
 8010288:	60a2      	str	r2, [r4, #8]
 801028a:	6123      	str	r3, [r4, #16]
 801028c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010290:	2102      	movs	r1, #2
 8010292:	4620      	mov	r0, r4
 8010294:	f001 fade 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8010298:	b180      	cbz	r0, 80102bc <ucdr_deserialize_uint16_t+0xa0>
 801029a:	7d23      	ldrb	r3, [r4, #20]
 801029c:	2b01      	cmp	r3, #1
 801029e:	68a3      	ldr	r3, [r4, #8]
 80102a0:	d011      	beq.n	80102c6 <ucdr_deserialize_uint16_t+0xaa>
 80102a2:	785b      	ldrb	r3, [r3, #1]
 80102a4:	702b      	strb	r3, [r5, #0]
 80102a6:	68a3      	ldr	r3, [r4, #8]
 80102a8:	781b      	ldrb	r3, [r3, #0]
 80102aa:	706b      	strb	r3, [r5, #1]
 80102ac:	2102      	movs	r1, #2
 80102ae:	68a2      	ldr	r2, [r4, #8]
 80102b0:	6923      	ldr	r3, [r4, #16]
 80102b2:	440a      	add	r2, r1
 80102b4:	7561      	strb	r1, [r4, #21]
 80102b6:	440b      	add	r3, r1
 80102b8:	60a2      	str	r2, [r4, #8]
 80102ba:	6123      	str	r3, [r4, #16]
 80102bc:	7da0      	ldrb	r0, [r4, #22]
 80102be:	f080 0001 	eor.w	r0, r0, #1
 80102c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102c6:	881b      	ldrh	r3, [r3, #0]
 80102c8:	802b      	strh	r3, [r5, #0]
 80102ca:	e7ef      	b.n	80102ac <ucdr_deserialize_uint16_t+0x90>
 80102cc:	68a2      	ldr	r2, [r4, #8]
 80102ce:	6923      	ldr	r3, [r4, #16]
 80102d0:	1b92      	subs	r2, r2, r6
 80102d2:	7da0      	ldrb	r0, [r4, #22]
 80102d4:	1b9b      	subs	r3, r3, r6
 80102d6:	f884 8015 	strb.w	r8, [r4, #21]
 80102da:	f080 0001 	eor.w	r0, r0, #1
 80102de:	60a2      	str	r2, [r4, #8]
 80102e0:	6123      	str	r3, [r4, #16]
 80102e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102e6:	68a3      	ldr	r3, [r4, #8]
 80102e8:	781b      	ldrb	r3, [r3, #0]
 80102ea:	706b      	strb	r3, [r5, #1]
 80102ec:	e7c2      	b.n	8010274 <ucdr_deserialize_uint16_t+0x58>
 80102ee:	4639      	mov	r1, r7
 80102f0:	4632      	mov	r2, r6
 80102f2:	4628      	mov	r0, r5
 80102f4:	f00d fbc3 	bl	801da7e <memcpy>
 80102f8:	464a      	mov	r2, r9
 80102fa:	19a8      	adds	r0, r5, r6
 80102fc:	68a1      	ldr	r1, [r4, #8]
 80102fe:	f00d fbbe 	bl	801da7e <memcpy>
 8010302:	e7b7      	b.n	8010274 <ucdr_deserialize_uint16_t+0x58>

08010304 <ucdr_deserialize_endian_uint16_t>:
 8010304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010308:	4604      	mov	r4, r0
 801030a:	460e      	mov	r6, r1
 801030c:	2102      	movs	r1, #2
 801030e:	4615      	mov	r5, r2
 8010310:	f001 faf4 	bl	80118fc <ucdr_buffer_alignment>
 8010314:	4601      	mov	r1, r0
 8010316:	4620      	mov	r0, r4
 8010318:	f894 8015 	ldrb.w	r8, [r4, #21]
 801031c:	f001 fb36 	bl	801198c <ucdr_advance_buffer>
 8010320:	2102      	movs	r1, #2
 8010322:	4620      	mov	r0, r4
 8010324:	f001 fa8a 	bl	801183c <ucdr_check_buffer_available_for>
 8010328:	bb70      	cbnz	r0, 8010388 <ucdr_deserialize_endian_uint16_t+0x84>
 801032a:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 801032e:	454f      	cmp	r7, r9
 8010330:	d925      	bls.n	801037e <ucdr_deserialize_endian_uint16_t+0x7a>
 8010332:	6923      	ldr	r3, [r4, #16]
 8010334:	4620      	mov	r0, r4
 8010336:	60a7      	str	r7, [r4, #8]
 8010338:	eba7 0709 	sub.w	r7, r7, r9
 801033c:	443b      	add	r3, r7
 801033e:	f1c7 0a02 	rsb	sl, r7, #2
 8010342:	6123      	str	r3, [r4, #16]
 8010344:	4651      	mov	r1, sl
 8010346:	f001 fa85 	bl	8011854 <ucdr_check_final_buffer_behavior>
 801034a:	2800      	cmp	r0, #0
 801034c:	d034      	beq.n	80103b8 <ucdr_deserialize_endian_uint16_t+0xb4>
 801034e:	2e01      	cmp	r6, #1
 8010350:	d043      	beq.n	80103da <ucdr_deserialize_endian_uint16_t+0xd6>
 8010352:	f899 3001 	ldrb.w	r3, [r9, #1]
 8010356:	702b      	strb	r3, [r5, #0]
 8010358:	2f00      	cmp	r7, #0
 801035a:	d03a      	beq.n	80103d2 <ucdr_deserialize_endian_uint16_t+0xce>
 801035c:	f899 3000 	ldrb.w	r3, [r9]
 8010360:	706b      	strb	r3, [r5, #1]
 8010362:	6923      	ldr	r3, [r4, #16]
 8010364:	2102      	movs	r1, #2
 8010366:	68a2      	ldr	r2, [r4, #8]
 8010368:	3302      	adds	r3, #2
 801036a:	7da0      	ldrb	r0, [r4, #22]
 801036c:	4452      	add	r2, sl
 801036e:	7561      	strb	r1, [r4, #21]
 8010370:	1bdb      	subs	r3, r3, r7
 8010372:	f080 0001 	eor.w	r0, r0, #1
 8010376:	60a2      	str	r2, [r4, #8]
 8010378:	6123      	str	r3, [r4, #16]
 801037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801037e:	2102      	movs	r1, #2
 8010380:	4620      	mov	r0, r4
 8010382:	f001 fa67 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8010386:	b178      	cbz	r0, 80103a8 <ucdr_deserialize_endian_uint16_t+0xa4>
 8010388:	2e01      	cmp	r6, #1
 801038a:	68a3      	ldr	r3, [r4, #8]
 801038c:	d011      	beq.n	80103b2 <ucdr_deserialize_endian_uint16_t+0xae>
 801038e:	785b      	ldrb	r3, [r3, #1]
 8010390:	702b      	strb	r3, [r5, #0]
 8010392:	68a3      	ldr	r3, [r4, #8]
 8010394:	781b      	ldrb	r3, [r3, #0]
 8010396:	706b      	strb	r3, [r5, #1]
 8010398:	2102      	movs	r1, #2
 801039a:	68a2      	ldr	r2, [r4, #8]
 801039c:	6923      	ldr	r3, [r4, #16]
 801039e:	440a      	add	r2, r1
 80103a0:	7561      	strb	r1, [r4, #21]
 80103a2:	440b      	add	r3, r1
 80103a4:	60a2      	str	r2, [r4, #8]
 80103a6:	6123      	str	r3, [r4, #16]
 80103a8:	7da0      	ldrb	r0, [r4, #22]
 80103aa:	f080 0001 	eor.w	r0, r0, #1
 80103ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103b2:	881b      	ldrh	r3, [r3, #0]
 80103b4:	802b      	strh	r3, [r5, #0]
 80103b6:	e7ef      	b.n	8010398 <ucdr_deserialize_endian_uint16_t+0x94>
 80103b8:	68a2      	ldr	r2, [r4, #8]
 80103ba:	6923      	ldr	r3, [r4, #16]
 80103bc:	1bd2      	subs	r2, r2, r7
 80103be:	7da0      	ldrb	r0, [r4, #22]
 80103c0:	1bdb      	subs	r3, r3, r7
 80103c2:	f884 8015 	strb.w	r8, [r4, #21]
 80103c6:	f080 0001 	eor.w	r0, r0, #1
 80103ca:	60a2      	str	r2, [r4, #8]
 80103cc:	6123      	str	r3, [r4, #16]
 80103ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103d2:	68a3      	ldr	r3, [r4, #8]
 80103d4:	781b      	ldrb	r3, [r3, #0]
 80103d6:	706b      	strb	r3, [r5, #1]
 80103d8:	e7c3      	b.n	8010362 <ucdr_deserialize_endian_uint16_t+0x5e>
 80103da:	4649      	mov	r1, r9
 80103dc:	463a      	mov	r2, r7
 80103de:	4628      	mov	r0, r5
 80103e0:	f00d fb4d 	bl	801da7e <memcpy>
 80103e4:	4652      	mov	r2, sl
 80103e6:	19e8      	adds	r0, r5, r7
 80103e8:	68a1      	ldr	r1, [r4, #8]
 80103ea:	f00d fb48 	bl	801da7e <memcpy>
 80103ee:	e7b8      	b.n	8010362 <ucdr_deserialize_endian_uint16_t+0x5e>

080103f0 <ucdr_serialize_uint32_t>:
 80103f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103f4:	b082      	sub	sp, #8
 80103f6:	4604      	mov	r4, r0
 80103f8:	9101      	str	r1, [sp, #4]
 80103fa:	2104      	movs	r1, #4
 80103fc:	f001 fa7e 	bl	80118fc <ucdr_buffer_alignment>
 8010400:	4601      	mov	r1, r0
 8010402:	4620      	mov	r0, r4
 8010404:	7d67      	ldrb	r7, [r4, #21]
 8010406:	f001 fac1 	bl	801198c <ucdr_advance_buffer>
 801040a:	2104      	movs	r1, #4
 801040c:	4620      	mov	r0, r4
 801040e:	f001 fa15 	bl	801183c <ucdr_check_buffer_available_for>
 8010412:	2800      	cmp	r0, #0
 8010414:	d139      	bne.n	801048a <ucdr_serialize_uint32_t+0x9a>
 8010416:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801041a:	42ab      	cmp	r3, r5
 801041c:	d930      	bls.n	8010480 <ucdr_serialize_uint32_t+0x90>
 801041e:	1b5e      	subs	r6, r3, r5
 8010420:	60a3      	str	r3, [r4, #8]
 8010422:	6923      	ldr	r3, [r4, #16]
 8010424:	4620      	mov	r0, r4
 8010426:	f1c6 0804 	rsb	r8, r6, #4
 801042a:	4433      	add	r3, r6
 801042c:	4641      	mov	r1, r8
 801042e:	6123      	str	r3, [r4, #16]
 8010430:	f001 fa10 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8010434:	2800      	cmp	r0, #0
 8010436:	d04c      	beq.n	80104d2 <ucdr_serialize_uint32_t+0xe2>
 8010438:	7d23      	ldrb	r3, [r4, #20]
 801043a:	2b01      	cmp	r3, #1
 801043c:	d063      	beq.n	8010506 <ucdr_serialize_uint32_t+0x116>
 801043e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010442:	702b      	strb	r3, [r5, #0]
 8010444:	2e00      	cmp	r6, #0
 8010446:	d051      	beq.n	80104ec <ucdr_serialize_uint32_t+0xfc>
 8010448:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801044c:	2e01      	cmp	r6, #1
 801044e:	706b      	strb	r3, [r5, #1]
 8010450:	d050      	beq.n	80104f4 <ucdr_serialize_uint32_t+0x104>
 8010452:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010456:	2e02      	cmp	r6, #2
 8010458:	70ab      	strb	r3, [r5, #2]
 801045a:	d04f      	beq.n	80104fc <ucdr_serialize_uint32_t+0x10c>
 801045c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010460:	70eb      	strb	r3, [r5, #3]
 8010462:	6923      	ldr	r3, [r4, #16]
 8010464:	2104      	movs	r1, #4
 8010466:	68a2      	ldr	r2, [r4, #8]
 8010468:	3304      	adds	r3, #4
 801046a:	7da0      	ldrb	r0, [r4, #22]
 801046c:	4442      	add	r2, r8
 801046e:	7561      	strb	r1, [r4, #21]
 8010470:	1b9e      	subs	r6, r3, r6
 8010472:	f080 0001 	eor.w	r0, r0, #1
 8010476:	60a2      	str	r2, [r4, #8]
 8010478:	6126      	str	r6, [r4, #16]
 801047a:	b002      	add	sp, #8
 801047c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010480:	2104      	movs	r1, #4
 8010482:	4620      	mov	r0, r4
 8010484:	f001 f9e6 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8010488:	b1d0      	cbz	r0, 80104c0 <ucdr_serialize_uint32_t+0xd0>
 801048a:	7d23      	ldrb	r3, [r4, #20]
 801048c:	2b01      	cmp	r3, #1
 801048e:	68a3      	ldr	r3, [r4, #8]
 8010490:	d01c      	beq.n	80104cc <ucdr_serialize_uint32_t+0xdc>
 8010492:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010496:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801049a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801049e:	7018      	strb	r0, [r3, #0]
 80104a0:	68a3      	ldr	r3, [r4, #8]
 80104a2:	705a      	strb	r2, [r3, #1]
 80104a4:	68a3      	ldr	r3, [r4, #8]
 80104a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80104aa:	7099      	strb	r1, [r3, #2]
 80104ac:	68a3      	ldr	r3, [r4, #8]
 80104ae:	70da      	strb	r2, [r3, #3]
 80104b0:	2104      	movs	r1, #4
 80104b2:	68a2      	ldr	r2, [r4, #8]
 80104b4:	6923      	ldr	r3, [r4, #16]
 80104b6:	440a      	add	r2, r1
 80104b8:	7561      	strb	r1, [r4, #21]
 80104ba:	440b      	add	r3, r1
 80104bc:	60a2      	str	r2, [r4, #8]
 80104be:	6123      	str	r3, [r4, #16]
 80104c0:	7da0      	ldrb	r0, [r4, #22]
 80104c2:	f080 0001 	eor.w	r0, r0, #1
 80104c6:	b002      	add	sp, #8
 80104c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104cc:	9a01      	ldr	r2, [sp, #4]
 80104ce:	601a      	str	r2, [r3, #0]
 80104d0:	e7ee      	b.n	80104b0 <ucdr_serialize_uint32_t+0xc0>
 80104d2:	68a2      	ldr	r2, [r4, #8]
 80104d4:	6923      	ldr	r3, [r4, #16]
 80104d6:	7da0      	ldrb	r0, [r4, #22]
 80104d8:	1b92      	subs	r2, r2, r6
 80104da:	1b9b      	subs	r3, r3, r6
 80104dc:	7567      	strb	r7, [r4, #21]
 80104de:	f080 0001 	eor.w	r0, r0, #1
 80104e2:	60a2      	str	r2, [r4, #8]
 80104e4:	6123      	str	r3, [r4, #16]
 80104e6:	b002      	add	sp, #8
 80104e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104ec:	68a3      	ldr	r3, [r4, #8]
 80104ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80104f2:	701a      	strb	r2, [r3, #0]
 80104f4:	68a3      	ldr	r3, [r4, #8]
 80104f6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80104fa:	701a      	strb	r2, [r3, #0]
 80104fc:	68a3      	ldr	r3, [r4, #8]
 80104fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010502:	701a      	strb	r2, [r3, #0]
 8010504:	e7ad      	b.n	8010462 <ucdr_serialize_uint32_t+0x72>
 8010506:	4628      	mov	r0, r5
 8010508:	ad01      	add	r5, sp, #4
 801050a:	4632      	mov	r2, r6
 801050c:	4629      	mov	r1, r5
 801050e:	f00d fab6 	bl	801da7e <memcpy>
 8010512:	4642      	mov	r2, r8
 8010514:	19a9      	adds	r1, r5, r6
 8010516:	68a0      	ldr	r0, [r4, #8]
 8010518:	f00d fab1 	bl	801da7e <memcpy>
 801051c:	e7a1      	b.n	8010462 <ucdr_serialize_uint32_t+0x72>
 801051e:	bf00      	nop

08010520 <ucdr_serialize_endian_uint32_t>:
 8010520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010524:	4604      	mov	r4, r0
 8010526:	b083      	sub	sp, #12
 8010528:	460d      	mov	r5, r1
 801052a:	2104      	movs	r1, #4
 801052c:	9201      	str	r2, [sp, #4]
 801052e:	f001 f9e5 	bl	80118fc <ucdr_buffer_alignment>
 8010532:	4601      	mov	r1, r0
 8010534:	4620      	mov	r0, r4
 8010536:	f894 8015 	ldrb.w	r8, [r4, #21]
 801053a:	f001 fa27 	bl	801198c <ucdr_advance_buffer>
 801053e:	2104      	movs	r1, #4
 8010540:	4620      	mov	r0, r4
 8010542:	f001 f97b 	bl	801183c <ucdr_check_buffer_available_for>
 8010546:	2800      	cmp	r0, #0
 8010548:	d138      	bne.n	80105bc <ucdr_serialize_endian_uint32_t+0x9c>
 801054a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801054e:	42b7      	cmp	r7, r6
 8010550:	d92f      	bls.n	80105b2 <ucdr_serialize_endian_uint32_t+0x92>
 8010552:	6923      	ldr	r3, [r4, #16]
 8010554:	4620      	mov	r0, r4
 8010556:	60a7      	str	r7, [r4, #8]
 8010558:	1bbf      	subs	r7, r7, r6
 801055a:	443b      	add	r3, r7
 801055c:	f1c7 0904 	rsb	r9, r7, #4
 8010560:	6123      	str	r3, [r4, #16]
 8010562:	4649      	mov	r1, r9
 8010564:	f001 f976 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8010568:	2800      	cmp	r0, #0
 801056a:	d04a      	beq.n	8010602 <ucdr_serialize_endian_uint32_t+0xe2>
 801056c:	2d01      	cmp	r5, #1
 801056e:	d063      	beq.n	8010638 <ucdr_serialize_endian_uint32_t+0x118>
 8010570:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010574:	7033      	strb	r3, [r6, #0]
 8010576:	2f00      	cmp	r7, #0
 8010578:	d051      	beq.n	801061e <ucdr_serialize_endian_uint32_t+0xfe>
 801057a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801057e:	2f01      	cmp	r7, #1
 8010580:	7073      	strb	r3, [r6, #1]
 8010582:	d050      	beq.n	8010626 <ucdr_serialize_endian_uint32_t+0x106>
 8010584:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010588:	2f02      	cmp	r7, #2
 801058a:	70b3      	strb	r3, [r6, #2]
 801058c:	d04f      	beq.n	801062e <ucdr_serialize_endian_uint32_t+0x10e>
 801058e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010592:	70f3      	strb	r3, [r6, #3]
 8010594:	6923      	ldr	r3, [r4, #16]
 8010596:	2104      	movs	r1, #4
 8010598:	68a2      	ldr	r2, [r4, #8]
 801059a:	7da0      	ldrb	r0, [r4, #22]
 801059c:	3304      	adds	r3, #4
 801059e:	444a      	add	r2, r9
 80105a0:	7561      	strb	r1, [r4, #21]
 80105a2:	1bdb      	subs	r3, r3, r7
 80105a4:	f080 0001 	eor.w	r0, r0, #1
 80105a8:	60a2      	str	r2, [r4, #8]
 80105aa:	6123      	str	r3, [r4, #16]
 80105ac:	b003      	add	sp, #12
 80105ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105b2:	2104      	movs	r1, #4
 80105b4:	4620      	mov	r0, r4
 80105b6:	f001 f94d 	bl	8011854 <ucdr_check_final_buffer_behavior>
 80105ba:	b1c8      	cbz	r0, 80105f0 <ucdr_serialize_endian_uint32_t+0xd0>
 80105bc:	2d01      	cmp	r5, #1
 80105be:	68a3      	ldr	r3, [r4, #8]
 80105c0:	d01c      	beq.n	80105fc <ucdr_serialize_endian_uint32_t+0xdc>
 80105c2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80105c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80105ca:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80105ce:	7018      	strb	r0, [r3, #0]
 80105d0:	68a3      	ldr	r3, [r4, #8]
 80105d2:	705a      	strb	r2, [r3, #1]
 80105d4:	68a3      	ldr	r3, [r4, #8]
 80105d6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80105da:	7099      	strb	r1, [r3, #2]
 80105dc:	68a3      	ldr	r3, [r4, #8]
 80105de:	70da      	strb	r2, [r3, #3]
 80105e0:	2104      	movs	r1, #4
 80105e2:	68a2      	ldr	r2, [r4, #8]
 80105e4:	6923      	ldr	r3, [r4, #16]
 80105e6:	440a      	add	r2, r1
 80105e8:	7561      	strb	r1, [r4, #21]
 80105ea:	440b      	add	r3, r1
 80105ec:	60a2      	str	r2, [r4, #8]
 80105ee:	6123      	str	r3, [r4, #16]
 80105f0:	7da0      	ldrb	r0, [r4, #22]
 80105f2:	f080 0001 	eor.w	r0, r0, #1
 80105f6:	b003      	add	sp, #12
 80105f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105fc:	9a01      	ldr	r2, [sp, #4]
 80105fe:	601a      	str	r2, [r3, #0]
 8010600:	e7ee      	b.n	80105e0 <ucdr_serialize_endian_uint32_t+0xc0>
 8010602:	68a2      	ldr	r2, [r4, #8]
 8010604:	6923      	ldr	r3, [r4, #16]
 8010606:	7da0      	ldrb	r0, [r4, #22]
 8010608:	1bd2      	subs	r2, r2, r7
 801060a:	1bdb      	subs	r3, r3, r7
 801060c:	f884 8015 	strb.w	r8, [r4, #21]
 8010610:	f080 0001 	eor.w	r0, r0, #1
 8010614:	60a2      	str	r2, [r4, #8]
 8010616:	6123      	str	r3, [r4, #16]
 8010618:	b003      	add	sp, #12
 801061a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801061e:	68a3      	ldr	r3, [r4, #8]
 8010620:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010624:	701a      	strb	r2, [r3, #0]
 8010626:	68a3      	ldr	r3, [r4, #8]
 8010628:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801062c:	701a      	strb	r2, [r3, #0]
 801062e:	68a3      	ldr	r3, [r4, #8]
 8010630:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010634:	701a      	strb	r2, [r3, #0]
 8010636:	e7ad      	b.n	8010594 <ucdr_serialize_endian_uint32_t+0x74>
 8010638:	ad01      	add	r5, sp, #4
 801063a:	463a      	mov	r2, r7
 801063c:	4630      	mov	r0, r6
 801063e:	4629      	mov	r1, r5
 8010640:	f00d fa1d 	bl	801da7e <memcpy>
 8010644:	464a      	mov	r2, r9
 8010646:	19e9      	adds	r1, r5, r7
 8010648:	68a0      	ldr	r0, [r4, #8]
 801064a:	f00d fa18 	bl	801da7e <memcpy>
 801064e:	e7a1      	b.n	8010594 <ucdr_serialize_endian_uint32_t+0x74>

08010650 <ucdr_deserialize_uint32_t>:
 8010650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010654:	4604      	mov	r4, r0
 8010656:	460d      	mov	r5, r1
 8010658:	2104      	movs	r1, #4
 801065a:	f001 f94f 	bl	80118fc <ucdr_buffer_alignment>
 801065e:	4601      	mov	r1, r0
 8010660:	4620      	mov	r0, r4
 8010662:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010666:	f001 f991 	bl	801198c <ucdr_advance_buffer>
 801066a:	2104      	movs	r1, #4
 801066c:	4620      	mov	r0, r4
 801066e:	f001 f8e5 	bl	801183c <ucdr_check_buffer_available_for>
 8010672:	2800      	cmp	r0, #0
 8010674:	d138      	bne.n	80106e8 <ucdr_deserialize_uint32_t+0x98>
 8010676:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801067a:	42b7      	cmp	r7, r6
 801067c:	d92f      	bls.n	80106de <ucdr_deserialize_uint32_t+0x8e>
 801067e:	6923      	ldr	r3, [r4, #16]
 8010680:	4620      	mov	r0, r4
 8010682:	60a7      	str	r7, [r4, #8]
 8010684:	1bbf      	subs	r7, r7, r6
 8010686:	443b      	add	r3, r7
 8010688:	f1c7 0904 	rsb	r9, r7, #4
 801068c:	6123      	str	r3, [r4, #16]
 801068e:	4649      	mov	r1, r9
 8010690:	f001 f8e0 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8010694:	2800      	cmp	r0, #0
 8010696:	d046      	beq.n	8010726 <ucdr_deserialize_uint32_t+0xd6>
 8010698:	7d23      	ldrb	r3, [r4, #20]
 801069a:	2b01      	cmp	r3, #1
 801069c:	d05c      	beq.n	8010758 <ucdr_deserialize_uint32_t+0x108>
 801069e:	78f3      	ldrb	r3, [r6, #3]
 80106a0:	702b      	strb	r3, [r5, #0]
 80106a2:	2f00      	cmp	r7, #0
 80106a4:	d04c      	beq.n	8010740 <ucdr_deserialize_uint32_t+0xf0>
 80106a6:	78b3      	ldrb	r3, [r6, #2]
 80106a8:	2f01      	cmp	r7, #1
 80106aa:	706b      	strb	r3, [r5, #1]
 80106ac:	f105 0302 	add.w	r3, r5, #2
 80106b0:	d04a      	beq.n	8010748 <ucdr_deserialize_uint32_t+0xf8>
 80106b2:	7873      	ldrb	r3, [r6, #1]
 80106b4:	2f02      	cmp	r7, #2
 80106b6:	70ab      	strb	r3, [r5, #2]
 80106b8:	f105 0303 	add.w	r3, r5, #3
 80106bc:	d048      	beq.n	8010750 <ucdr_deserialize_uint32_t+0x100>
 80106be:	7833      	ldrb	r3, [r6, #0]
 80106c0:	70eb      	strb	r3, [r5, #3]
 80106c2:	6923      	ldr	r3, [r4, #16]
 80106c4:	2104      	movs	r1, #4
 80106c6:	68a2      	ldr	r2, [r4, #8]
 80106c8:	3304      	adds	r3, #4
 80106ca:	7da0      	ldrb	r0, [r4, #22]
 80106cc:	444a      	add	r2, r9
 80106ce:	7561      	strb	r1, [r4, #21]
 80106d0:	1bdb      	subs	r3, r3, r7
 80106d2:	f080 0001 	eor.w	r0, r0, #1
 80106d6:	60a2      	str	r2, [r4, #8]
 80106d8:	6123      	str	r3, [r4, #16]
 80106da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106de:	2104      	movs	r1, #4
 80106e0:	4620      	mov	r0, r4
 80106e2:	f001 f8b7 	bl	8011854 <ucdr_check_final_buffer_behavior>
 80106e6:	b1b0      	cbz	r0, 8010716 <ucdr_deserialize_uint32_t+0xc6>
 80106e8:	7d23      	ldrb	r3, [r4, #20]
 80106ea:	2b01      	cmp	r3, #1
 80106ec:	68a3      	ldr	r3, [r4, #8]
 80106ee:	d017      	beq.n	8010720 <ucdr_deserialize_uint32_t+0xd0>
 80106f0:	78db      	ldrb	r3, [r3, #3]
 80106f2:	702b      	strb	r3, [r5, #0]
 80106f4:	68a3      	ldr	r3, [r4, #8]
 80106f6:	789b      	ldrb	r3, [r3, #2]
 80106f8:	706b      	strb	r3, [r5, #1]
 80106fa:	68a3      	ldr	r3, [r4, #8]
 80106fc:	785b      	ldrb	r3, [r3, #1]
 80106fe:	70ab      	strb	r3, [r5, #2]
 8010700:	68a3      	ldr	r3, [r4, #8]
 8010702:	781b      	ldrb	r3, [r3, #0]
 8010704:	70eb      	strb	r3, [r5, #3]
 8010706:	2104      	movs	r1, #4
 8010708:	68a2      	ldr	r2, [r4, #8]
 801070a:	6923      	ldr	r3, [r4, #16]
 801070c:	440a      	add	r2, r1
 801070e:	7561      	strb	r1, [r4, #21]
 8010710:	440b      	add	r3, r1
 8010712:	60a2      	str	r2, [r4, #8]
 8010714:	6123      	str	r3, [r4, #16]
 8010716:	7da0      	ldrb	r0, [r4, #22]
 8010718:	f080 0001 	eor.w	r0, r0, #1
 801071c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	602b      	str	r3, [r5, #0]
 8010724:	e7ef      	b.n	8010706 <ucdr_deserialize_uint32_t+0xb6>
 8010726:	68a2      	ldr	r2, [r4, #8]
 8010728:	6923      	ldr	r3, [r4, #16]
 801072a:	1bd2      	subs	r2, r2, r7
 801072c:	7da0      	ldrb	r0, [r4, #22]
 801072e:	1bdb      	subs	r3, r3, r7
 8010730:	f884 8015 	strb.w	r8, [r4, #21]
 8010734:	f080 0001 	eor.w	r0, r0, #1
 8010738:	60a2      	str	r2, [r4, #8]
 801073a:	6123      	str	r3, [r4, #16]
 801073c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010740:	68a3      	ldr	r3, [r4, #8]
 8010742:	789b      	ldrb	r3, [r3, #2]
 8010744:	706b      	strb	r3, [r5, #1]
 8010746:	1cab      	adds	r3, r5, #2
 8010748:	68a2      	ldr	r2, [r4, #8]
 801074a:	7852      	ldrb	r2, [r2, #1]
 801074c:	f803 2b01 	strb.w	r2, [r3], #1
 8010750:	68a2      	ldr	r2, [r4, #8]
 8010752:	7812      	ldrb	r2, [r2, #0]
 8010754:	701a      	strb	r2, [r3, #0]
 8010756:	e7b4      	b.n	80106c2 <ucdr_deserialize_uint32_t+0x72>
 8010758:	4631      	mov	r1, r6
 801075a:	463a      	mov	r2, r7
 801075c:	4628      	mov	r0, r5
 801075e:	f00d f98e 	bl	801da7e <memcpy>
 8010762:	464a      	mov	r2, r9
 8010764:	19e8      	adds	r0, r5, r7
 8010766:	68a1      	ldr	r1, [r4, #8]
 8010768:	f00d f989 	bl	801da7e <memcpy>
 801076c:	e7a9      	b.n	80106c2 <ucdr_deserialize_uint32_t+0x72>
 801076e:	bf00      	nop

08010770 <ucdr_deserialize_endian_uint32_t>:
 8010770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010774:	4604      	mov	r4, r0
 8010776:	460e      	mov	r6, r1
 8010778:	2104      	movs	r1, #4
 801077a:	4615      	mov	r5, r2
 801077c:	f001 f8be 	bl	80118fc <ucdr_buffer_alignment>
 8010780:	4601      	mov	r1, r0
 8010782:	4620      	mov	r0, r4
 8010784:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010788:	f001 f900 	bl	801198c <ucdr_advance_buffer>
 801078c:	2104      	movs	r1, #4
 801078e:	4620      	mov	r0, r4
 8010790:	f001 f854 	bl	801183c <ucdr_check_buffer_available_for>
 8010794:	2800      	cmp	r0, #0
 8010796:	d13c      	bne.n	8010812 <ucdr_deserialize_endian_uint32_t+0xa2>
 8010798:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 801079c:	42bb      	cmp	r3, r7
 801079e:	d933      	bls.n	8010808 <ucdr_deserialize_endian_uint32_t+0x98>
 80107a0:	eba3 0907 	sub.w	r9, r3, r7
 80107a4:	60a3      	str	r3, [r4, #8]
 80107a6:	6923      	ldr	r3, [r4, #16]
 80107a8:	4620      	mov	r0, r4
 80107aa:	f1c9 0a04 	rsb	sl, r9, #4
 80107ae:	444b      	add	r3, r9
 80107b0:	4651      	mov	r1, sl
 80107b2:	6123      	str	r3, [r4, #16]
 80107b4:	f001 f84e 	bl	8011854 <ucdr_check_final_buffer_behavior>
 80107b8:	2800      	cmp	r0, #0
 80107ba:	d048      	beq.n	801084e <ucdr_deserialize_endian_uint32_t+0xde>
 80107bc:	2e01      	cmp	r6, #1
 80107be:	d061      	beq.n	8010884 <ucdr_deserialize_endian_uint32_t+0x114>
 80107c0:	78fb      	ldrb	r3, [r7, #3]
 80107c2:	702b      	strb	r3, [r5, #0]
 80107c4:	f1b9 0f00 	cmp.w	r9, #0
 80107c8:	d050      	beq.n	801086c <ucdr_deserialize_endian_uint32_t+0xfc>
 80107ca:	78bb      	ldrb	r3, [r7, #2]
 80107cc:	f1b9 0f01 	cmp.w	r9, #1
 80107d0:	706b      	strb	r3, [r5, #1]
 80107d2:	f105 0302 	add.w	r3, r5, #2
 80107d6:	d04d      	beq.n	8010874 <ucdr_deserialize_endian_uint32_t+0x104>
 80107d8:	787b      	ldrb	r3, [r7, #1]
 80107da:	f1b9 0f02 	cmp.w	r9, #2
 80107de:	70ab      	strb	r3, [r5, #2]
 80107e0:	f105 0303 	add.w	r3, r5, #3
 80107e4:	d04a      	beq.n	801087c <ucdr_deserialize_endian_uint32_t+0x10c>
 80107e6:	783b      	ldrb	r3, [r7, #0]
 80107e8:	70eb      	strb	r3, [r5, #3]
 80107ea:	6923      	ldr	r3, [r4, #16]
 80107ec:	2104      	movs	r1, #4
 80107ee:	68a2      	ldr	r2, [r4, #8]
 80107f0:	3304      	adds	r3, #4
 80107f2:	7da0      	ldrb	r0, [r4, #22]
 80107f4:	4452      	add	r2, sl
 80107f6:	7561      	strb	r1, [r4, #21]
 80107f8:	eba3 0309 	sub.w	r3, r3, r9
 80107fc:	f080 0001 	eor.w	r0, r0, #1
 8010800:	60a2      	str	r2, [r4, #8]
 8010802:	6123      	str	r3, [r4, #16]
 8010804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010808:	2104      	movs	r1, #4
 801080a:	4620      	mov	r0, r4
 801080c:	f001 f822 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8010810:	b1a8      	cbz	r0, 801083e <ucdr_deserialize_endian_uint32_t+0xce>
 8010812:	2e01      	cmp	r6, #1
 8010814:	68a3      	ldr	r3, [r4, #8]
 8010816:	d017      	beq.n	8010848 <ucdr_deserialize_endian_uint32_t+0xd8>
 8010818:	78db      	ldrb	r3, [r3, #3]
 801081a:	702b      	strb	r3, [r5, #0]
 801081c:	68a3      	ldr	r3, [r4, #8]
 801081e:	789b      	ldrb	r3, [r3, #2]
 8010820:	706b      	strb	r3, [r5, #1]
 8010822:	68a3      	ldr	r3, [r4, #8]
 8010824:	785b      	ldrb	r3, [r3, #1]
 8010826:	70ab      	strb	r3, [r5, #2]
 8010828:	68a3      	ldr	r3, [r4, #8]
 801082a:	781b      	ldrb	r3, [r3, #0]
 801082c:	70eb      	strb	r3, [r5, #3]
 801082e:	2104      	movs	r1, #4
 8010830:	68a2      	ldr	r2, [r4, #8]
 8010832:	6923      	ldr	r3, [r4, #16]
 8010834:	440a      	add	r2, r1
 8010836:	7561      	strb	r1, [r4, #21]
 8010838:	440b      	add	r3, r1
 801083a:	60a2      	str	r2, [r4, #8]
 801083c:	6123      	str	r3, [r4, #16]
 801083e:	7da0      	ldrb	r0, [r4, #22]
 8010840:	f080 0001 	eor.w	r0, r0, #1
 8010844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	602b      	str	r3, [r5, #0]
 801084c:	e7ef      	b.n	801082e <ucdr_deserialize_endian_uint32_t+0xbe>
 801084e:	68a2      	ldr	r2, [r4, #8]
 8010850:	6923      	ldr	r3, [r4, #16]
 8010852:	eba2 0209 	sub.w	r2, r2, r9
 8010856:	7da0      	ldrb	r0, [r4, #22]
 8010858:	eba3 0309 	sub.w	r3, r3, r9
 801085c:	f884 8015 	strb.w	r8, [r4, #21]
 8010860:	f080 0001 	eor.w	r0, r0, #1
 8010864:	60a2      	str	r2, [r4, #8]
 8010866:	6123      	str	r3, [r4, #16]
 8010868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801086c:	68a3      	ldr	r3, [r4, #8]
 801086e:	789b      	ldrb	r3, [r3, #2]
 8010870:	706b      	strb	r3, [r5, #1]
 8010872:	1cab      	adds	r3, r5, #2
 8010874:	68a2      	ldr	r2, [r4, #8]
 8010876:	7852      	ldrb	r2, [r2, #1]
 8010878:	f803 2b01 	strb.w	r2, [r3], #1
 801087c:	68a2      	ldr	r2, [r4, #8]
 801087e:	7812      	ldrb	r2, [r2, #0]
 8010880:	701a      	strb	r2, [r3, #0]
 8010882:	e7b2      	b.n	80107ea <ucdr_deserialize_endian_uint32_t+0x7a>
 8010884:	4639      	mov	r1, r7
 8010886:	464a      	mov	r2, r9
 8010888:	4628      	mov	r0, r5
 801088a:	f00d f8f8 	bl	801da7e <memcpy>
 801088e:	4652      	mov	r2, sl
 8010890:	eb05 0009 	add.w	r0, r5, r9
 8010894:	68a1      	ldr	r1, [r4, #8]
 8010896:	f00d f8f2 	bl	801da7e <memcpy>
 801089a:	e7a6      	b.n	80107ea <ucdr_deserialize_endian_uint32_t+0x7a>

0801089c <ucdr_serialize_uint64_t>:
 801089c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108a0:	4604      	mov	r4, r0
 80108a2:	b082      	sub	sp, #8
 80108a4:	2108      	movs	r1, #8
 80108a6:	e9cd 2300 	strd	r2, r3, [sp]
 80108aa:	f001 f827 	bl	80118fc <ucdr_buffer_alignment>
 80108ae:	4601      	mov	r1, r0
 80108b0:	4620      	mov	r0, r4
 80108b2:	7d67      	ldrb	r7, [r4, #21]
 80108b4:	f001 f86a 	bl	801198c <ucdr_advance_buffer>
 80108b8:	2108      	movs	r1, #8
 80108ba:	4620      	mov	r0, r4
 80108bc:	f000 ffbe 	bl	801183c <ucdr_check_buffer_available_for>
 80108c0:	2800      	cmp	r0, #0
 80108c2:	d14e      	bne.n	8010962 <ucdr_serialize_uint64_t+0xc6>
 80108c4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80108c8:	42ab      	cmp	r3, r5
 80108ca:	d945      	bls.n	8010958 <ucdr_serialize_uint64_t+0xbc>
 80108cc:	1b5e      	subs	r6, r3, r5
 80108ce:	60a3      	str	r3, [r4, #8]
 80108d0:	6923      	ldr	r3, [r4, #16]
 80108d2:	4620      	mov	r0, r4
 80108d4:	f1c6 0808 	rsb	r8, r6, #8
 80108d8:	4433      	add	r3, r6
 80108da:	4641      	mov	r1, r8
 80108dc:	6123      	str	r3, [r4, #16]
 80108de:	f000 ffb9 	bl	8011854 <ucdr_check_final_buffer_behavior>
 80108e2:	2800      	cmp	r0, #0
 80108e4:	d074      	beq.n	80109d0 <ucdr_serialize_uint64_t+0x134>
 80108e6:	7d23      	ldrb	r3, [r4, #20]
 80108e8:	2b01      	cmp	r3, #1
 80108ea:	f000 809b 	beq.w	8010a24 <ucdr_serialize_uint64_t+0x188>
 80108ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80108f2:	702b      	strb	r3, [r5, #0]
 80108f4:	2e00      	cmp	r6, #0
 80108f6:	d078      	beq.n	80109ea <ucdr_serialize_uint64_t+0x14e>
 80108f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80108fc:	2e01      	cmp	r6, #1
 80108fe:	706b      	strb	r3, [r5, #1]
 8010900:	d077      	beq.n	80109f2 <ucdr_serialize_uint64_t+0x156>
 8010902:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010906:	2e02      	cmp	r6, #2
 8010908:	70ab      	strb	r3, [r5, #2]
 801090a:	d076      	beq.n	80109fa <ucdr_serialize_uint64_t+0x15e>
 801090c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010910:	2e03      	cmp	r6, #3
 8010912:	70eb      	strb	r3, [r5, #3]
 8010914:	d075      	beq.n	8010a02 <ucdr_serialize_uint64_t+0x166>
 8010916:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801091a:	2e04      	cmp	r6, #4
 801091c:	712b      	strb	r3, [r5, #4]
 801091e:	d074      	beq.n	8010a0a <ucdr_serialize_uint64_t+0x16e>
 8010920:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8010924:	2e05      	cmp	r6, #5
 8010926:	716b      	strb	r3, [r5, #5]
 8010928:	d073      	beq.n	8010a12 <ucdr_serialize_uint64_t+0x176>
 801092a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801092e:	2e06      	cmp	r6, #6
 8010930:	71ab      	strb	r3, [r5, #6]
 8010932:	d072      	beq.n	8010a1a <ucdr_serialize_uint64_t+0x17e>
 8010934:	f89d 3000 	ldrb.w	r3, [sp]
 8010938:	71eb      	strb	r3, [r5, #7]
 801093a:	6923      	ldr	r3, [r4, #16]
 801093c:	2108      	movs	r1, #8
 801093e:	68a2      	ldr	r2, [r4, #8]
 8010940:	3308      	adds	r3, #8
 8010942:	7da0      	ldrb	r0, [r4, #22]
 8010944:	4442      	add	r2, r8
 8010946:	7561      	strb	r1, [r4, #21]
 8010948:	1b9e      	subs	r6, r3, r6
 801094a:	f080 0001 	eor.w	r0, r0, #1
 801094e:	60a2      	str	r2, [r4, #8]
 8010950:	6126      	str	r6, [r4, #16]
 8010952:	b002      	add	sp, #8
 8010954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010958:	2108      	movs	r1, #8
 801095a:	4620      	mov	r0, r4
 801095c:	f000 ff7a 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8010960:	b350      	cbz	r0, 80109b8 <ucdr_serialize_uint64_t+0x11c>
 8010962:	7d23      	ldrb	r3, [r4, #20]
 8010964:	2b01      	cmp	r3, #1
 8010966:	d02d      	beq.n	80109c4 <ucdr_serialize_uint64_t+0x128>
 8010968:	68a3      	ldr	r3, [r4, #8]
 801096a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801096e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010972:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010976:	7018      	strb	r0, [r3, #0]
 8010978:	68a3      	ldr	r3, [r4, #8]
 801097a:	705a      	strb	r2, [r3, #1]
 801097c:	68a3      	ldr	r3, [r4, #8]
 801097e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010982:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8010986:	7099      	strb	r1, [r3, #2]
 8010988:	68a3      	ldr	r3, [r4, #8]
 801098a:	70da      	strb	r2, [r3, #3]
 801098c:	68a3      	ldr	r3, [r4, #8]
 801098e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010992:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8010996:	7118      	strb	r0, [r3, #4]
 8010998:	68a3      	ldr	r3, [r4, #8]
 801099a:	715a      	strb	r2, [r3, #5]
 801099c:	68a3      	ldr	r3, [r4, #8]
 801099e:	f89d 2000 	ldrb.w	r2, [sp]
 80109a2:	7199      	strb	r1, [r3, #6]
 80109a4:	68a3      	ldr	r3, [r4, #8]
 80109a6:	71da      	strb	r2, [r3, #7]
 80109a8:	2108      	movs	r1, #8
 80109aa:	68a2      	ldr	r2, [r4, #8]
 80109ac:	6923      	ldr	r3, [r4, #16]
 80109ae:	440a      	add	r2, r1
 80109b0:	7561      	strb	r1, [r4, #21]
 80109b2:	440b      	add	r3, r1
 80109b4:	60a2      	str	r2, [r4, #8]
 80109b6:	6123      	str	r3, [r4, #16]
 80109b8:	7da0      	ldrb	r0, [r4, #22]
 80109ba:	f080 0001 	eor.w	r0, r0, #1
 80109be:	b002      	add	sp, #8
 80109c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109c4:	466b      	mov	r3, sp
 80109c6:	68a2      	ldr	r2, [r4, #8]
 80109c8:	cb03      	ldmia	r3!, {r0, r1}
 80109ca:	6010      	str	r0, [r2, #0]
 80109cc:	6051      	str	r1, [r2, #4]
 80109ce:	e7eb      	b.n	80109a8 <ucdr_serialize_uint64_t+0x10c>
 80109d0:	68a2      	ldr	r2, [r4, #8]
 80109d2:	6923      	ldr	r3, [r4, #16]
 80109d4:	7da0      	ldrb	r0, [r4, #22]
 80109d6:	1b92      	subs	r2, r2, r6
 80109d8:	1b9b      	subs	r3, r3, r6
 80109da:	7567      	strb	r7, [r4, #21]
 80109dc:	f080 0001 	eor.w	r0, r0, #1
 80109e0:	60a2      	str	r2, [r4, #8]
 80109e2:	6123      	str	r3, [r4, #16]
 80109e4:	b002      	add	sp, #8
 80109e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109ea:	68a3      	ldr	r3, [r4, #8]
 80109ec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80109f0:	701a      	strb	r2, [r3, #0]
 80109f2:	68a3      	ldr	r3, [r4, #8]
 80109f4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80109f8:	701a      	strb	r2, [r3, #0]
 80109fa:	68a3      	ldr	r3, [r4, #8]
 80109fc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010a00:	701a      	strb	r2, [r3, #0]
 8010a02:	68a3      	ldr	r3, [r4, #8]
 8010a04:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010a08:	701a      	strb	r2, [r3, #0]
 8010a0a:	68a3      	ldr	r3, [r4, #8]
 8010a0c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010a10:	701a      	strb	r2, [r3, #0]
 8010a12:	68a3      	ldr	r3, [r4, #8]
 8010a14:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010a18:	701a      	strb	r2, [r3, #0]
 8010a1a:	68a3      	ldr	r3, [r4, #8]
 8010a1c:	f89d 2000 	ldrb.w	r2, [sp]
 8010a20:	701a      	strb	r2, [r3, #0]
 8010a22:	e78a      	b.n	801093a <ucdr_serialize_uint64_t+0x9e>
 8010a24:	4628      	mov	r0, r5
 8010a26:	466d      	mov	r5, sp
 8010a28:	4632      	mov	r2, r6
 8010a2a:	4629      	mov	r1, r5
 8010a2c:	f00d f827 	bl	801da7e <memcpy>
 8010a30:	4642      	mov	r2, r8
 8010a32:	19a9      	adds	r1, r5, r6
 8010a34:	68a0      	ldr	r0, [r4, #8]
 8010a36:	f00d f822 	bl	801da7e <memcpy>
 8010a3a:	e77e      	b.n	801093a <ucdr_serialize_uint64_t+0x9e>

08010a3c <ucdr_serialize_int16_t>:
 8010a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a40:	460b      	mov	r3, r1
 8010a42:	b082      	sub	sp, #8
 8010a44:	4604      	mov	r4, r0
 8010a46:	2102      	movs	r1, #2
 8010a48:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010a4c:	f000 ff56 	bl	80118fc <ucdr_buffer_alignment>
 8010a50:	4601      	mov	r1, r0
 8010a52:	4620      	mov	r0, r4
 8010a54:	7d67      	ldrb	r7, [r4, #21]
 8010a56:	f000 ff99 	bl	801198c <ucdr_advance_buffer>
 8010a5a:	2102      	movs	r1, #2
 8010a5c:	4620      	mov	r0, r4
 8010a5e:	f000 feed 	bl	801183c <ucdr_check_buffer_available_for>
 8010a62:	bb78      	cbnz	r0, 8010ac4 <ucdr_serialize_int16_t+0x88>
 8010a64:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010a68:	42ab      	cmp	r3, r5
 8010a6a:	d926      	bls.n	8010aba <ucdr_serialize_int16_t+0x7e>
 8010a6c:	1b5e      	subs	r6, r3, r5
 8010a6e:	60a3      	str	r3, [r4, #8]
 8010a70:	6923      	ldr	r3, [r4, #16]
 8010a72:	4620      	mov	r0, r4
 8010a74:	f1c6 0802 	rsb	r8, r6, #2
 8010a78:	4433      	add	r3, r6
 8010a7a:	4641      	mov	r1, r8
 8010a7c:	6123      	str	r3, [r4, #16]
 8010a7e:	f000 fee9 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8010a82:	2800      	cmp	r0, #0
 8010a84:	d03b      	beq.n	8010afe <ucdr_serialize_int16_t+0xc2>
 8010a86:	7d23      	ldrb	r3, [r4, #20]
 8010a88:	2b01      	cmp	r3, #1
 8010a8a:	d04a      	beq.n	8010b22 <ucdr_serialize_int16_t+0xe6>
 8010a8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010a90:	702b      	strb	r3, [r5, #0]
 8010a92:	2e00      	cmp	r6, #0
 8010a94:	d040      	beq.n	8010b18 <ucdr_serialize_int16_t+0xdc>
 8010a96:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010a9a:	706b      	strb	r3, [r5, #1]
 8010a9c:	6923      	ldr	r3, [r4, #16]
 8010a9e:	2102      	movs	r1, #2
 8010aa0:	68a2      	ldr	r2, [r4, #8]
 8010aa2:	3302      	adds	r3, #2
 8010aa4:	7da0      	ldrb	r0, [r4, #22]
 8010aa6:	4442      	add	r2, r8
 8010aa8:	7561      	strb	r1, [r4, #21]
 8010aaa:	1b9e      	subs	r6, r3, r6
 8010aac:	f080 0001 	eor.w	r0, r0, #1
 8010ab0:	60a2      	str	r2, [r4, #8]
 8010ab2:	6126      	str	r6, [r4, #16]
 8010ab4:	b002      	add	sp, #8
 8010ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010aba:	2102      	movs	r1, #2
 8010abc:	4620      	mov	r0, r4
 8010abe:	f000 fec9 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8010ac2:	b190      	cbz	r0, 8010aea <ucdr_serialize_int16_t+0xae>
 8010ac4:	7d23      	ldrb	r3, [r4, #20]
 8010ac6:	2b01      	cmp	r3, #1
 8010ac8:	68a3      	ldr	r3, [r4, #8]
 8010aca:	d014      	beq.n	8010af6 <ucdr_serialize_int16_t+0xba>
 8010acc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010ad0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010ad4:	7019      	strb	r1, [r3, #0]
 8010ad6:	68a3      	ldr	r3, [r4, #8]
 8010ad8:	705a      	strb	r2, [r3, #1]
 8010ada:	2102      	movs	r1, #2
 8010adc:	68a2      	ldr	r2, [r4, #8]
 8010ade:	6923      	ldr	r3, [r4, #16]
 8010ae0:	440a      	add	r2, r1
 8010ae2:	7561      	strb	r1, [r4, #21]
 8010ae4:	440b      	add	r3, r1
 8010ae6:	60a2      	str	r2, [r4, #8]
 8010ae8:	6123      	str	r3, [r4, #16]
 8010aea:	7da0      	ldrb	r0, [r4, #22]
 8010aec:	f080 0001 	eor.w	r0, r0, #1
 8010af0:	b002      	add	sp, #8
 8010af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010af6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010afa:	801a      	strh	r2, [r3, #0]
 8010afc:	e7ed      	b.n	8010ada <ucdr_serialize_int16_t+0x9e>
 8010afe:	68a2      	ldr	r2, [r4, #8]
 8010b00:	6923      	ldr	r3, [r4, #16]
 8010b02:	7da0      	ldrb	r0, [r4, #22]
 8010b04:	1b92      	subs	r2, r2, r6
 8010b06:	1b9b      	subs	r3, r3, r6
 8010b08:	7567      	strb	r7, [r4, #21]
 8010b0a:	f080 0001 	eor.w	r0, r0, #1
 8010b0e:	60a2      	str	r2, [r4, #8]
 8010b10:	6123      	str	r3, [r4, #16]
 8010b12:	b002      	add	sp, #8
 8010b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b18:	68a3      	ldr	r3, [r4, #8]
 8010b1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010b1e:	701a      	strb	r2, [r3, #0]
 8010b20:	e7bc      	b.n	8010a9c <ucdr_serialize_int16_t+0x60>
 8010b22:	4628      	mov	r0, r5
 8010b24:	f10d 0506 	add.w	r5, sp, #6
 8010b28:	4632      	mov	r2, r6
 8010b2a:	4629      	mov	r1, r5
 8010b2c:	f00c ffa7 	bl	801da7e <memcpy>
 8010b30:	4642      	mov	r2, r8
 8010b32:	19a9      	adds	r1, r5, r6
 8010b34:	68a0      	ldr	r0, [r4, #8]
 8010b36:	f00c ffa2 	bl	801da7e <memcpy>
 8010b3a:	e7af      	b.n	8010a9c <ucdr_serialize_int16_t+0x60>

08010b3c <ucdr_serialize_endian_int16_t>:
 8010b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010b40:	4604      	mov	r4, r0
 8010b42:	b083      	sub	sp, #12
 8010b44:	460d      	mov	r5, r1
 8010b46:	2102      	movs	r1, #2
 8010b48:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010b4c:	f000 fed6 	bl	80118fc <ucdr_buffer_alignment>
 8010b50:	4601      	mov	r1, r0
 8010b52:	4620      	mov	r0, r4
 8010b54:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010b58:	f000 ff18 	bl	801198c <ucdr_advance_buffer>
 8010b5c:	2102      	movs	r1, #2
 8010b5e:	4620      	mov	r0, r4
 8010b60:	f000 fe6c 	bl	801183c <ucdr_check_buffer_available_for>
 8010b64:	bb70      	cbnz	r0, 8010bc4 <ucdr_serialize_endian_int16_t+0x88>
 8010b66:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010b6a:	42be      	cmp	r6, r7
 8010b6c:	d925      	bls.n	8010bba <ucdr_serialize_endian_int16_t+0x7e>
 8010b6e:	6923      	ldr	r3, [r4, #16]
 8010b70:	4620      	mov	r0, r4
 8010b72:	60a6      	str	r6, [r4, #8]
 8010b74:	1bf6      	subs	r6, r6, r7
 8010b76:	4433      	add	r3, r6
 8010b78:	f1c6 0902 	rsb	r9, r6, #2
 8010b7c:	6123      	str	r3, [r4, #16]
 8010b7e:	4649      	mov	r1, r9
 8010b80:	f000 fe68 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8010b84:	2800      	cmp	r0, #0
 8010b86:	d039      	beq.n	8010bfc <ucdr_serialize_endian_int16_t+0xc0>
 8010b88:	2d01      	cmp	r5, #1
 8010b8a:	d04a      	beq.n	8010c22 <ucdr_serialize_endian_int16_t+0xe6>
 8010b8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010b90:	703b      	strb	r3, [r7, #0]
 8010b92:	2e00      	cmp	r6, #0
 8010b94:	d040      	beq.n	8010c18 <ucdr_serialize_endian_int16_t+0xdc>
 8010b96:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010b9a:	707b      	strb	r3, [r7, #1]
 8010b9c:	6923      	ldr	r3, [r4, #16]
 8010b9e:	2102      	movs	r1, #2
 8010ba0:	68a2      	ldr	r2, [r4, #8]
 8010ba2:	7da0      	ldrb	r0, [r4, #22]
 8010ba4:	3302      	adds	r3, #2
 8010ba6:	444a      	add	r2, r9
 8010ba8:	7561      	strb	r1, [r4, #21]
 8010baa:	1b9b      	subs	r3, r3, r6
 8010bac:	f080 0001 	eor.w	r0, r0, #1
 8010bb0:	60a2      	str	r2, [r4, #8]
 8010bb2:	6123      	str	r3, [r4, #16]
 8010bb4:	b003      	add	sp, #12
 8010bb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010bba:	2102      	movs	r1, #2
 8010bbc:	4620      	mov	r0, r4
 8010bbe:	f000 fe49 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8010bc2:	b188      	cbz	r0, 8010be8 <ucdr_serialize_endian_int16_t+0xac>
 8010bc4:	2d01      	cmp	r5, #1
 8010bc6:	68a3      	ldr	r3, [r4, #8]
 8010bc8:	d014      	beq.n	8010bf4 <ucdr_serialize_endian_int16_t+0xb8>
 8010bca:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010bce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010bd2:	7019      	strb	r1, [r3, #0]
 8010bd4:	68a3      	ldr	r3, [r4, #8]
 8010bd6:	705a      	strb	r2, [r3, #1]
 8010bd8:	2102      	movs	r1, #2
 8010bda:	68a2      	ldr	r2, [r4, #8]
 8010bdc:	6923      	ldr	r3, [r4, #16]
 8010bde:	440a      	add	r2, r1
 8010be0:	7561      	strb	r1, [r4, #21]
 8010be2:	440b      	add	r3, r1
 8010be4:	60a2      	str	r2, [r4, #8]
 8010be6:	6123      	str	r3, [r4, #16]
 8010be8:	7da0      	ldrb	r0, [r4, #22]
 8010bea:	f080 0001 	eor.w	r0, r0, #1
 8010bee:	b003      	add	sp, #12
 8010bf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010bf4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010bf8:	801a      	strh	r2, [r3, #0]
 8010bfa:	e7ed      	b.n	8010bd8 <ucdr_serialize_endian_int16_t+0x9c>
 8010bfc:	68a2      	ldr	r2, [r4, #8]
 8010bfe:	6923      	ldr	r3, [r4, #16]
 8010c00:	7da0      	ldrb	r0, [r4, #22]
 8010c02:	1b92      	subs	r2, r2, r6
 8010c04:	1b9b      	subs	r3, r3, r6
 8010c06:	f884 8015 	strb.w	r8, [r4, #21]
 8010c0a:	f080 0001 	eor.w	r0, r0, #1
 8010c0e:	60a2      	str	r2, [r4, #8]
 8010c10:	6123      	str	r3, [r4, #16]
 8010c12:	b003      	add	sp, #12
 8010c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c18:	68a3      	ldr	r3, [r4, #8]
 8010c1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010c1e:	701a      	strb	r2, [r3, #0]
 8010c20:	e7bc      	b.n	8010b9c <ucdr_serialize_endian_int16_t+0x60>
 8010c22:	f10d 0506 	add.w	r5, sp, #6
 8010c26:	4632      	mov	r2, r6
 8010c28:	4638      	mov	r0, r7
 8010c2a:	4629      	mov	r1, r5
 8010c2c:	f00c ff27 	bl	801da7e <memcpy>
 8010c30:	464a      	mov	r2, r9
 8010c32:	19a9      	adds	r1, r5, r6
 8010c34:	68a0      	ldr	r0, [r4, #8]
 8010c36:	f00c ff22 	bl	801da7e <memcpy>
 8010c3a:	e7af      	b.n	8010b9c <ucdr_serialize_endian_int16_t+0x60>

08010c3c <ucdr_deserialize_int16_t>:
 8010c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c40:	4604      	mov	r4, r0
 8010c42:	460d      	mov	r5, r1
 8010c44:	2102      	movs	r1, #2
 8010c46:	f000 fe59 	bl	80118fc <ucdr_buffer_alignment>
 8010c4a:	4601      	mov	r1, r0
 8010c4c:	4620      	mov	r0, r4
 8010c4e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010c52:	f000 fe9b 	bl	801198c <ucdr_advance_buffer>
 8010c56:	2102      	movs	r1, #2
 8010c58:	4620      	mov	r0, r4
 8010c5a:	f000 fdef 	bl	801183c <ucdr_check_buffer_available_for>
 8010c5e:	bb60      	cbnz	r0, 8010cba <ucdr_deserialize_int16_t+0x7e>
 8010c60:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010c64:	42be      	cmp	r6, r7
 8010c66:	d923      	bls.n	8010cb0 <ucdr_deserialize_int16_t+0x74>
 8010c68:	6923      	ldr	r3, [r4, #16]
 8010c6a:	4620      	mov	r0, r4
 8010c6c:	60a6      	str	r6, [r4, #8]
 8010c6e:	1bf6      	subs	r6, r6, r7
 8010c70:	4433      	add	r3, r6
 8010c72:	f1c6 0902 	rsb	r9, r6, #2
 8010c76:	6123      	str	r3, [r4, #16]
 8010c78:	4649      	mov	r1, r9
 8010c7a:	f000 fdeb 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8010c7e:	2800      	cmp	r0, #0
 8010c80:	d034      	beq.n	8010cec <ucdr_deserialize_int16_t+0xb0>
 8010c82:	7d23      	ldrb	r3, [r4, #20]
 8010c84:	2b01      	cmp	r3, #1
 8010c86:	d042      	beq.n	8010d0e <ucdr_deserialize_int16_t+0xd2>
 8010c88:	787b      	ldrb	r3, [r7, #1]
 8010c8a:	702b      	strb	r3, [r5, #0]
 8010c8c:	2e00      	cmp	r6, #0
 8010c8e:	d03a      	beq.n	8010d06 <ucdr_deserialize_int16_t+0xca>
 8010c90:	783b      	ldrb	r3, [r7, #0]
 8010c92:	706b      	strb	r3, [r5, #1]
 8010c94:	6923      	ldr	r3, [r4, #16]
 8010c96:	2102      	movs	r1, #2
 8010c98:	68a2      	ldr	r2, [r4, #8]
 8010c9a:	3302      	adds	r3, #2
 8010c9c:	7da0      	ldrb	r0, [r4, #22]
 8010c9e:	444a      	add	r2, r9
 8010ca0:	7561      	strb	r1, [r4, #21]
 8010ca2:	1b9b      	subs	r3, r3, r6
 8010ca4:	f080 0001 	eor.w	r0, r0, #1
 8010ca8:	60a2      	str	r2, [r4, #8]
 8010caa:	6123      	str	r3, [r4, #16]
 8010cac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cb0:	2102      	movs	r1, #2
 8010cb2:	4620      	mov	r0, r4
 8010cb4:	f000 fdce 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8010cb8:	b180      	cbz	r0, 8010cdc <ucdr_deserialize_int16_t+0xa0>
 8010cba:	7d23      	ldrb	r3, [r4, #20]
 8010cbc:	2b01      	cmp	r3, #1
 8010cbe:	68a3      	ldr	r3, [r4, #8]
 8010cc0:	d011      	beq.n	8010ce6 <ucdr_deserialize_int16_t+0xaa>
 8010cc2:	785b      	ldrb	r3, [r3, #1]
 8010cc4:	702b      	strb	r3, [r5, #0]
 8010cc6:	68a3      	ldr	r3, [r4, #8]
 8010cc8:	781b      	ldrb	r3, [r3, #0]
 8010cca:	706b      	strb	r3, [r5, #1]
 8010ccc:	2102      	movs	r1, #2
 8010cce:	68a2      	ldr	r2, [r4, #8]
 8010cd0:	6923      	ldr	r3, [r4, #16]
 8010cd2:	440a      	add	r2, r1
 8010cd4:	7561      	strb	r1, [r4, #21]
 8010cd6:	440b      	add	r3, r1
 8010cd8:	60a2      	str	r2, [r4, #8]
 8010cda:	6123      	str	r3, [r4, #16]
 8010cdc:	7da0      	ldrb	r0, [r4, #22]
 8010cde:	f080 0001 	eor.w	r0, r0, #1
 8010ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ce6:	881b      	ldrh	r3, [r3, #0]
 8010ce8:	802b      	strh	r3, [r5, #0]
 8010cea:	e7ef      	b.n	8010ccc <ucdr_deserialize_int16_t+0x90>
 8010cec:	68a2      	ldr	r2, [r4, #8]
 8010cee:	6923      	ldr	r3, [r4, #16]
 8010cf0:	1b92      	subs	r2, r2, r6
 8010cf2:	7da0      	ldrb	r0, [r4, #22]
 8010cf4:	1b9b      	subs	r3, r3, r6
 8010cf6:	f884 8015 	strb.w	r8, [r4, #21]
 8010cfa:	f080 0001 	eor.w	r0, r0, #1
 8010cfe:	60a2      	str	r2, [r4, #8]
 8010d00:	6123      	str	r3, [r4, #16]
 8010d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d06:	68a3      	ldr	r3, [r4, #8]
 8010d08:	781b      	ldrb	r3, [r3, #0]
 8010d0a:	706b      	strb	r3, [r5, #1]
 8010d0c:	e7c2      	b.n	8010c94 <ucdr_deserialize_int16_t+0x58>
 8010d0e:	4639      	mov	r1, r7
 8010d10:	4632      	mov	r2, r6
 8010d12:	4628      	mov	r0, r5
 8010d14:	f00c feb3 	bl	801da7e <memcpy>
 8010d18:	464a      	mov	r2, r9
 8010d1a:	19a8      	adds	r0, r5, r6
 8010d1c:	68a1      	ldr	r1, [r4, #8]
 8010d1e:	f00c feae 	bl	801da7e <memcpy>
 8010d22:	e7b7      	b.n	8010c94 <ucdr_deserialize_int16_t+0x58>

08010d24 <ucdr_deserialize_endian_int16_t>:
 8010d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d28:	4604      	mov	r4, r0
 8010d2a:	460e      	mov	r6, r1
 8010d2c:	2102      	movs	r1, #2
 8010d2e:	4615      	mov	r5, r2
 8010d30:	f000 fde4 	bl	80118fc <ucdr_buffer_alignment>
 8010d34:	4601      	mov	r1, r0
 8010d36:	4620      	mov	r0, r4
 8010d38:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010d3c:	f000 fe26 	bl	801198c <ucdr_advance_buffer>
 8010d40:	2102      	movs	r1, #2
 8010d42:	4620      	mov	r0, r4
 8010d44:	f000 fd7a 	bl	801183c <ucdr_check_buffer_available_for>
 8010d48:	bb70      	cbnz	r0, 8010da8 <ucdr_deserialize_endian_int16_t+0x84>
 8010d4a:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 8010d4e:	454f      	cmp	r7, r9
 8010d50:	d925      	bls.n	8010d9e <ucdr_deserialize_endian_int16_t+0x7a>
 8010d52:	6923      	ldr	r3, [r4, #16]
 8010d54:	4620      	mov	r0, r4
 8010d56:	60a7      	str	r7, [r4, #8]
 8010d58:	eba7 0709 	sub.w	r7, r7, r9
 8010d5c:	443b      	add	r3, r7
 8010d5e:	f1c7 0a02 	rsb	sl, r7, #2
 8010d62:	6123      	str	r3, [r4, #16]
 8010d64:	4651      	mov	r1, sl
 8010d66:	f000 fd75 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8010d6a:	2800      	cmp	r0, #0
 8010d6c:	d034      	beq.n	8010dd8 <ucdr_deserialize_endian_int16_t+0xb4>
 8010d6e:	2e01      	cmp	r6, #1
 8010d70:	d043      	beq.n	8010dfa <ucdr_deserialize_endian_int16_t+0xd6>
 8010d72:	f899 3001 	ldrb.w	r3, [r9, #1]
 8010d76:	702b      	strb	r3, [r5, #0]
 8010d78:	2f00      	cmp	r7, #0
 8010d7a:	d03a      	beq.n	8010df2 <ucdr_deserialize_endian_int16_t+0xce>
 8010d7c:	f899 3000 	ldrb.w	r3, [r9]
 8010d80:	706b      	strb	r3, [r5, #1]
 8010d82:	6923      	ldr	r3, [r4, #16]
 8010d84:	2102      	movs	r1, #2
 8010d86:	68a2      	ldr	r2, [r4, #8]
 8010d88:	3302      	adds	r3, #2
 8010d8a:	7da0      	ldrb	r0, [r4, #22]
 8010d8c:	4452      	add	r2, sl
 8010d8e:	7561      	strb	r1, [r4, #21]
 8010d90:	1bdb      	subs	r3, r3, r7
 8010d92:	f080 0001 	eor.w	r0, r0, #1
 8010d96:	60a2      	str	r2, [r4, #8]
 8010d98:	6123      	str	r3, [r4, #16]
 8010d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d9e:	2102      	movs	r1, #2
 8010da0:	4620      	mov	r0, r4
 8010da2:	f000 fd57 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8010da6:	b178      	cbz	r0, 8010dc8 <ucdr_deserialize_endian_int16_t+0xa4>
 8010da8:	2e01      	cmp	r6, #1
 8010daa:	68a3      	ldr	r3, [r4, #8]
 8010dac:	d011      	beq.n	8010dd2 <ucdr_deserialize_endian_int16_t+0xae>
 8010dae:	785b      	ldrb	r3, [r3, #1]
 8010db0:	702b      	strb	r3, [r5, #0]
 8010db2:	68a3      	ldr	r3, [r4, #8]
 8010db4:	781b      	ldrb	r3, [r3, #0]
 8010db6:	706b      	strb	r3, [r5, #1]
 8010db8:	2102      	movs	r1, #2
 8010dba:	68a2      	ldr	r2, [r4, #8]
 8010dbc:	6923      	ldr	r3, [r4, #16]
 8010dbe:	440a      	add	r2, r1
 8010dc0:	7561      	strb	r1, [r4, #21]
 8010dc2:	440b      	add	r3, r1
 8010dc4:	60a2      	str	r2, [r4, #8]
 8010dc6:	6123      	str	r3, [r4, #16]
 8010dc8:	7da0      	ldrb	r0, [r4, #22]
 8010dca:	f080 0001 	eor.w	r0, r0, #1
 8010dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dd2:	881b      	ldrh	r3, [r3, #0]
 8010dd4:	802b      	strh	r3, [r5, #0]
 8010dd6:	e7ef      	b.n	8010db8 <ucdr_deserialize_endian_int16_t+0x94>
 8010dd8:	68a2      	ldr	r2, [r4, #8]
 8010dda:	6923      	ldr	r3, [r4, #16]
 8010ddc:	1bd2      	subs	r2, r2, r7
 8010dde:	7da0      	ldrb	r0, [r4, #22]
 8010de0:	1bdb      	subs	r3, r3, r7
 8010de2:	f884 8015 	strb.w	r8, [r4, #21]
 8010de6:	f080 0001 	eor.w	r0, r0, #1
 8010dea:	60a2      	str	r2, [r4, #8]
 8010dec:	6123      	str	r3, [r4, #16]
 8010dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010df2:	68a3      	ldr	r3, [r4, #8]
 8010df4:	781b      	ldrb	r3, [r3, #0]
 8010df6:	706b      	strb	r3, [r5, #1]
 8010df8:	e7c3      	b.n	8010d82 <ucdr_deserialize_endian_int16_t+0x5e>
 8010dfa:	4649      	mov	r1, r9
 8010dfc:	463a      	mov	r2, r7
 8010dfe:	4628      	mov	r0, r5
 8010e00:	f00c fe3d 	bl	801da7e <memcpy>
 8010e04:	4652      	mov	r2, sl
 8010e06:	19e8      	adds	r0, r5, r7
 8010e08:	68a1      	ldr	r1, [r4, #8]
 8010e0a:	f00c fe38 	bl	801da7e <memcpy>
 8010e0e:	e7b8      	b.n	8010d82 <ucdr_deserialize_endian_int16_t+0x5e>

08010e10 <ucdr_serialize_int32_t>:
 8010e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e14:	b082      	sub	sp, #8
 8010e16:	4604      	mov	r4, r0
 8010e18:	9101      	str	r1, [sp, #4]
 8010e1a:	2104      	movs	r1, #4
 8010e1c:	f000 fd6e 	bl	80118fc <ucdr_buffer_alignment>
 8010e20:	4601      	mov	r1, r0
 8010e22:	4620      	mov	r0, r4
 8010e24:	7d67      	ldrb	r7, [r4, #21]
 8010e26:	f000 fdb1 	bl	801198c <ucdr_advance_buffer>
 8010e2a:	2104      	movs	r1, #4
 8010e2c:	4620      	mov	r0, r4
 8010e2e:	f000 fd05 	bl	801183c <ucdr_check_buffer_available_for>
 8010e32:	2800      	cmp	r0, #0
 8010e34:	d139      	bne.n	8010eaa <ucdr_serialize_int32_t+0x9a>
 8010e36:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010e3a:	42ab      	cmp	r3, r5
 8010e3c:	d930      	bls.n	8010ea0 <ucdr_serialize_int32_t+0x90>
 8010e3e:	1b5e      	subs	r6, r3, r5
 8010e40:	60a3      	str	r3, [r4, #8]
 8010e42:	6923      	ldr	r3, [r4, #16]
 8010e44:	4620      	mov	r0, r4
 8010e46:	f1c6 0804 	rsb	r8, r6, #4
 8010e4a:	4433      	add	r3, r6
 8010e4c:	4641      	mov	r1, r8
 8010e4e:	6123      	str	r3, [r4, #16]
 8010e50:	f000 fd00 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8010e54:	2800      	cmp	r0, #0
 8010e56:	d04c      	beq.n	8010ef2 <ucdr_serialize_int32_t+0xe2>
 8010e58:	7d23      	ldrb	r3, [r4, #20]
 8010e5a:	2b01      	cmp	r3, #1
 8010e5c:	d063      	beq.n	8010f26 <ucdr_serialize_int32_t+0x116>
 8010e5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010e62:	702b      	strb	r3, [r5, #0]
 8010e64:	2e00      	cmp	r6, #0
 8010e66:	d051      	beq.n	8010f0c <ucdr_serialize_int32_t+0xfc>
 8010e68:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010e6c:	2e01      	cmp	r6, #1
 8010e6e:	706b      	strb	r3, [r5, #1]
 8010e70:	d050      	beq.n	8010f14 <ucdr_serialize_int32_t+0x104>
 8010e72:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010e76:	2e02      	cmp	r6, #2
 8010e78:	70ab      	strb	r3, [r5, #2]
 8010e7a:	d04f      	beq.n	8010f1c <ucdr_serialize_int32_t+0x10c>
 8010e7c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010e80:	70eb      	strb	r3, [r5, #3]
 8010e82:	6923      	ldr	r3, [r4, #16]
 8010e84:	2104      	movs	r1, #4
 8010e86:	68a2      	ldr	r2, [r4, #8]
 8010e88:	3304      	adds	r3, #4
 8010e8a:	7da0      	ldrb	r0, [r4, #22]
 8010e8c:	4442      	add	r2, r8
 8010e8e:	7561      	strb	r1, [r4, #21]
 8010e90:	1b9e      	subs	r6, r3, r6
 8010e92:	f080 0001 	eor.w	r0, r0, #1
 8010e96:	60a2      	str	r2, [r4, #8]
 8010e98:	6126      	str	r6, [r4, #16]
 8010e9a:	b002      	add	sp, #8
 8010e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ea0:	2104      	movs	r1, #4
 8010ea2:	4620      	mov	r0, r4
 8010ea4:	f000 fcd6 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8010ea8:	b1d0      	cbz	r0, 8010ee0 <ucdr_serialize_int32_t+0xd0>
 8010eaa:	7d23      	ldrb	r3, [r4, #20]
 8010eac:	2b01      	cmp	r3, #1
 8010eae:	68a3      	ldr	r3, [r4, #8]
 8010eb0:	d01c      	beq.n	8010eec <ucdr_serialize_int32_t+0xdc>
 8010eb2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010eb6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010eba:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010ebe:	7018      	strb	r0, [r3, #0]
 8010ec0:	68a3      	ldr	r3, [r4, #8]
 8010ec2:	705a      	strb	r2, [r3, #1]
 8010ec4:	68a3      	ldr	r3, [r4, #8]
 8010ec6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010eca:	7099      	strb	r1, [r3, #2]
 8010ecc:	68a3      	ldr	r3, [r4, #8]
 8010ece:	70da      	strb	r2, [r3, #3]
 8010ed0:	2104      	movs	r1, #4
 8010ed2:	68a2      	ldr	r2, [r4, #8]
 8010ed4:	6923      	ldr	r3, [r4, #16]
 8010ed6:	440a      	add	r2, r1
 8010ed8:	7561      	strb	r1, [r4, #21]
 8010eda:	440b      	add	r3, r1
 8010edc:	60a2      	str	r2, [r4, #8]
 8010ede:	6123      	str	r3, [r4, #16]
 8010ee0:	7da0      	ldrb	r0, [r4, #22]
 8010ee2:	f080 0001 	eor.w	r0, r0, #1
 8010ee6:	b002      	add	sp, #8
 8010ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eec:	9a01      	ldr	r2, [sp, #4]
 8010eee:	601a      	str	r2, [r3, #0]
 8010ef0:	e7ee      	b.n	8010ed0 <ucdr_serialize_int32_t+0xc0>
 8010ef2:	68a2      	ldr	r2, [r4, #8]
 8010ef4:	6923      	ldr	r3, [r4, #16]
 8010ef6:	7da0      	ldrb	r0, [r4, #22]
 8010ef8:	1b92      	subs	r2, r2, r6
 8010efa:	1b9b      	subs	r3, r3, r6
 8010efc:	7567      	strb	r7, [r4, #21]
 8010efe:	f080 0001 	eor.w	r0, r0, #1
 8010f02:	60a2      	str	r2, [r4, #8]
 8010f04:	6123      	str	r3, [r4, #16]
 8010f06:	b002      	add	sp, #8
 8010f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f0c:	68a3      	ldr	r3, [r4, #8]
 8010f0e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010f12:	701a      	strb	r2, [r3, #0]
 8010f14:	68a3      	ldr	r3, [r4, #8]
 8010f16:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010f1a:	701a      	strb	r2, [r3, #0]
 8010f1c:	68a3      	ldr	r3, [r4, #8]
 8010f1e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010f22:	701a      	strb	r2, [r3, #0]
 8010f24:	e7ad      	b.n	8010e82 <ucdr_serialize_int32_t+0x72>
 8010f26:	4628      	mov	r0, r5
 8010f28:	ad01      	add	r5, sp, #4
 8010f2a:	4632      	mov	r2, r6
 8010f2c:	4629      	mov	r1, r5
 8010f2e:	f00c fda6 	bl	801da7e <memcpy>
 8010f32:	4642      	mov	r2, r8
 8010f34:	19a9      	adds	r1, r5, r6
 8010f36:	68a0      	ldr	r0, [r4, #8]
 8010f38:	f00c fda1 	bl	801da7e <memcpy>
 8010f3c:	e7a1      	b.n	8010e82 <ucdr_serialize_int32_t+0x72>
 8010f3e:	bf00      	nop

08010f40 <ucdr_deserialize_int32_t>:
 8010f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f44:	4604      	mov	r4, r0
 8010f46:	460d      	mov	r5, r1
 8010f48:	2104      	movs	r1, #4
 8010f4a:	f000 fcd7 	bl	80118fc <ucdr_buffer_alignment>
 8010f4e:	4601      	mov	r1, r0
 8010f50:	4620      	mov	r0, r4
 8010f52:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010f56:	f000 fd19 	bl	801198c <ucdr_advance_buffer>
 8010f5a:	2104      	movs	r1, #4
 8010f5c:	4620      	mov	r0, r4
 8010f5e:	f000 fc6d 	bl	801183c <ucdr_check_buffer_available_for>
 8010f62:	2800      	cmp	r0, #0
 8010f64:	d138      	bne.n	8010fd8 <ucdr_deserialize_int32_t+0x98>
 8010f66:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8010f6a:	42b7      	cmp	r7, r6
 8010f6c:	d92f      	bls.n	8010fce <ucdr_deserialize_int32_t+0x8e>
 8010f6e:	6923      	ldr	r3, [r4, #16]
 8010f70:	4620      	mov	r0, r4
 8010f72:	60a7      	str	r7, [r4, #8]
 8010f74:	1bbf      	subs	r7, r7, r6
 8010f76:	443b      	add	r3, r7
 8010f78:	f1c7 0904 	rsb	r9, r7, #4
 8010f7c:	6123      	str	r3, [r4, #16]
 8010f7e:	4649      	mov	r1, r9
 8010f80:	f000 fc68 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8010f84:	2800      	cmp	r0, #0
 8010f86:	d046      	beq.n	8011016 <ucdr_deserialize_int32_t+0xd6>
 8010f88:	7d23      	ldrb	r3, [r4, #20]
 8010f8a:	2b01      	cmp	r3, #1
 8010f8c:	d05c      	beq.n	8011048 <ucdr_deserialize_int32_t+0x108>
 8010f8e:	78f3      	ldrb	r3, [r6, #3]
 8010f90:	702b      	strb	r3, [r5, #0]
 8010f92:	2f00      	cmp	r7, #0
 8010f94:	d04c      	beq.n	8011030 <ucdr_deserialize_int32_t+0xf0>
 8010f96:	78b3      	ldrb	r3, [r6, #2]
 8010f98:	2f01      	cmp	r7, #1
 8010f9a:	706b      	strb	r3, [r5, #1]
 8010f9c:	f105 0302 	add.w	r3, r5, #2
 8010fa0:	d04a      	beq.n	8011038 <ucdr_deserialize_int32_t+0xf8>
 8010fa2:	7873      	ldrb	r3, [r6, #1]
 8010fa4:	2f02      	cmp	r7, #2
 8010fa6:	70ab      	strb	r3, [r5, #2]
 8010fa8:	f105 0303 	add.w	r3, r5, #3
 8010fac:	d048      	beq.n	8011040 <ucdr_deserialize_int32_t+0x100>
 8010fae:	7833      	ldrb	r3, [r6, #0]
 8010fb0:	70eb      	strb	r3, [r5, #3]
 8010fb2:	6923      	ldr	r3, [r4, #16]
 8010fb4:	2104      	movs	r1, #4
 8010fb6:	68a2      	ldr	r2, [r4, #8]
 8010fb8:	3304      	adds	r3, #4
 8010fba:	7da0      	ldrb	r0, [r4, #22]
 8010fbc:	444a      	add	r2, r9
 8010fbe:	7561      	strb	r1, [r4, #21]
 8010fc0:	1bdb      	subs	r3, r3, r7
 8010fc2:	f080 0001 	eor.w	r0, r0, #1
 8010fc6:	60a2      	str	r2, [r4, #8]
 8010fc8:	6123      	str	r3, [r4, #16]
 8010fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fce:	2104      	movs	r1, #4
 8010fd0:	4620      	mov	r0, r4
 8010fd2:	f000 fc3f 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8010fd6:	b1b0      	cbz	r0, 8011006 <ucdr_deserialize_int32_t+0xc6>
 8010fd8:	7d23      	ldrb	r3, [r4, #20]
 8010fda:	2b01      	cmp	r3, #1
 8010fdc:	68a3      	ldr	r3, [r4, #8]
 8010fde:	d017      	beq.n	8011010 <ucdr_deserialize_int32_t+0xd0>
 8010fe0:	78db      	ldrb	r3, [r3, #3]
 8010fe2:	702b      	strb	r3, [r5, #0]
 8010fe4:	68a3      	ldr	r3, [r4, #8]
 8010fe6:	789b      	ldrb	r3, [r3, #2]
 8010fe8:	706b      	strb	r3, [r5, #1]
 8010fea:	68a3      	ldr	r3, [r4, #8]
 8010fec:	785b      	ldrb	r3, [r3, #1]
 8010fee:	70ab      	strb	r3, [r5, #2]
 8010ff0:	68a3      	ldr	r3, [r4, #8]
 8010ff2:	781b      	ldrb	r3, [r3, #0]
 8010ff4:	70eb      	strb	r3, [r5, #3]
 8010ff6:	2104      	movs	r1, #4
 8010ff8:	68a2      	ldr	r2, [r4, #8]
 8010ffa:	6923      	ldr	r3, [r4, #16]
 8010ffc:	440a      	add	r2, r1
 8010ffe:	7561      	strb	r1, [r4, #21]
 8011000:	440b      	add	r3, r1
 8011002:	60a2      	str	r2, [r4, #8]
 8011004:	6123      	str	r3, [r4, #16]
 8011006:	7da0      	ldrb	r0, [r4, #22]
 8011008:	f080 0001 	eor.w	r0, r0, #1
 801100c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	602b      	str	r3, [r5, #0]
 8011014:	e7ef      	b.n	8010ff6 <ucdr_deserialize_int32_t+0xb6>
 8011016:	68a2      	ldr	r2, [r4, #8]
 8011018:	6923      	ldr	r3, [r4, #16]
 801101a:	1bd2      	subs	r2, r2, r7
 801101c:	7da0      	ldrb	r0, [r4, #22]
 801101e:	1bdb      	subs	r3, r3, r7
 8011020:	f884 8015 	strb.w	r8, [r4, #21]
 8011024:	f080 0001 	eor.w	r0, r0, #1
 8011028:	60a2      	str	r2, [r4, #8]
 801102a:	6123      	str	r3, [r4, #16]
 801102c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011030:	68a3      	ldr	r3, [r4, #8]
 8011032:	789b      	ldrb	r3, [r3, #2]
 8011034:	706b      	strb	r3, [r5, #1]
 8011036:	1cab      	adds	r3, r5, #2
 8011038:	68a2      	ldr	r2, [r4, #8]
 801103a:	7852      	ldrb	r2, [r2, #1]
 801103c:	f803 2b01 	strb.w	r2, [r3], #1
 8011040:	68a2      	ldr	r2, [r4, #8]
 8011042:	7812      	ldrb	r2, [r2, #0]
 8011044:	701a      	strb	r2, [r3, #0]
 8011046:	e7b4      	b.n	8010fb2 <ucdr_deserialize_int32_t+0x72>
 8011048:	4631      	mov	r1, r6
 801104a:	463a      	mov	r2, r7
 801104c:	4628      	mov	r0, r5
 801104e:	f00c fd16 	bl	801da7e <memcpy>
 8011052:	464a      	mov	r2, r9
 8011054:	19e8      	adds	r0, r5, r7
 8011056:	68a1      	ldr	r1, [r4, #8]
 8011058:	f00c fd11 	bl	801da7e <memcpy>
 801105c:	e7a9      	b.n	8010fb2 <ucdr_deserialize_int32_t+0x72>
 801105e:	bf00      	nop

08011060 <ucdr_serialize_int64_t>:
 8011060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011064:	4604      	mov	r4, r0
 8011066:	b082      	sub	sp, #8
 8011068:	2108      	movs	r1, #8
 801106a:	e9cd 2300 	strd	r2, r3, [sp]
 801106e:	f000 fc45 	bl	80118fc <ucdr_buffer_alignment>
 8011072:	4601      	mov	r1, r0
 8011074:	4620      	mov	r0, r4
 8011076:	7d67      	ldrb	r7, [r4, #21]
 8011078:	f000 fc88 	bl	801198c <ucdr_advance_buffer>
 801107c:	2108      	movs	r1, #8
 801107e:	4620      	mov	r0, r4
 8011080:	f000 fbdc 	bl	801183c <ucdr_check_buffer_available_for>
 8011084:	2800      	cmp	r0, #0
 8011086:	d14e      	bne.n	8011126 <ucdr_serialize_int64_t+0xc6>
 8011088:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801108c:	42ab      	cmp	r3, r5
 801108e:	d945      	bls.n	801111c <ucdr_serialize_int64_t+0xbc>
 8011090:	1b5e      	subs	r6, r3, r5
 8011092:	60a3      	str	r3, [r4, #8]
 8011094:	6923      	ldr	r3, [r4, #16]
 8011096:	4620      	mov	r0, r4
 8011098:	f1c6 0808 	rsb	r8, r6, #8
 801109c:	4433      	add	r3, r6
 801109e:	4641      	mov	r1, r8
 80110a0:	6123      	str	r3, [r4, #16]
 80110a2:	f000 fbd7 	bl	8011854 <ucdr_check_final_buffer_behavior>
 80110a6:	2800      	cmp	r0, #0
 80110a8:	d074      	beq.n	8011194 <ucdr_serialize_int64_t+0x134>
 80110aa:	7d23      	ldrb	r3, [r4, #20]
 80110ac:	2b01      	cmp	r3, #1
 80110ae:	f000 809b 	beq.w	80111e8 <ucdr_serialize_int64_t+0x188>
 80110b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80110b6:	702b      	strb	r3, [r5, #0]
 80110b8:	2e00      	cmp	r6, #0
 80110ba:	d078      	beq.n	80111ae <ucdr_serialize_int64_t+0x14e>
 80110bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80110c0:	2e01      	cmp	r6, #1
 80110c2:	706b      	strb	r3, [r5, #1]
 80110c4:	d077      	beq.n	80111b6 <ucdr_serialize_int64_t+0x156>
 80110c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80110ca:	2e02      	cmp	r6, #2
 80110cc:	70ab      	strb	r3, [r5, #2]
 80110ce:	d076      	beq.n	80111be <ucdr_serialize_int64_t+0x15e>
 80110d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80110d4:	2e03      	cmp	r6, #3
 80110d6:	70eb      	strb	r3, [r5, #3]
 80110d8:	d075      	beq.n	80111c6 <ucdr_serialize_int64_t+0x166>
 80110da:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80110de:	2e04      	cmp	r6, #4
 80110e0:	712b      	strb	r3, [r5, #4]
 80110e2:	d074      	beq.n	80111ce <ucdr_serialize_int64_t+0x16e>
 80110e4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80110e8:	2e05      	cmp	r6, #5
 80110ea:	716b      	strb	r3, [r5, #5]
 80110ec:	d073      	beq.n	80111d6 <ucdr_serialize_int64_t+0x176>
 80110ee:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80110f2:	2e06      	cmp	r6, #6
 80110f4:	71ab      	strb	r3, [r5, #6]
 80110f6:	d072      	beq.n	80111de <ucdr_serialize_int64_t+0x17e>
 80110f8:	f89d 3000 	ldrb.w	r3, [sp]
 80110fc:	71eb      	strb	r3, [r5, #7]
 80110fe:	6923      	ldr	r3, [r4, #16]
 8011100:	2108      	movs	r1, #8
 8011102:	68a2      	ldr	r2, [r4, #8]
 8011104:	3308      	adds	r3, #8
 8011106:	7da0      	ldrb	r0, [r4, #22]
 8011108:	4442      	add	r2, r8
 801110a:	7561      	strb	r1, [r4, #21]
 801110c:	1b9e      	subs	r6, r3, r6
 801110e:	f080 0001 	eor.w	r0, r0, #1
 8011112:	60a2      	str	r2, [r4, #8]
 8011114:	6126      	str	r6, [r4, #16]
 8011116:	b002      	add	sp, #8
 8011118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801111c:	2108      	movs	r1, #8
 801111e:	4620      	mov	r0, r4
 8011120:	f000 fb98 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8011124:	b350      	cbz	r0, 801117c <ucdr_serialize_int64_t+0x11c>
 8011126:	7d23      	ldrb	r3, [r4, #20]
 8011128:	2b01      	cmp	r3, #1
 801112a:	d02d      	beq.n	8011188 <ucdr_serialize_int64_t+0x128>
 801112c:	68a3      	ldr	r3, [r4, #8]
 801112e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011132:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011136:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801113a:	7018      	strb	r0, [r3, #0]
 801113c:	68a3      	ldr	r3, [r4, #8]
 801113e:	705a      	strb	r2, [r3, #1]
 8011140:	68a3      	ldr	r3, [r4, #8]
 8011142:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011146:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801114a:	7099      	strb	r1, [r3, #2]
 801114c:	68a3      	ldr	r3, [r4, #8]
 801114e:	70da      	strb	r2, [r3, #3]
 8011150:	68a3      	ldr	r3, [r4, #8]
 8011152:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011156:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801115a:	7118      	strb	r0, [r3, #4]
 801115c:	68a3      	ldr	r3, [r4, #8]
 801115e:	715a      	strb	r2, [r3, #5]
 8011160:	68a3      	ldr	r3, [r4, #8]
 8011162:	f89d 2000 	ldrb.w	r2, [sp]
 8011166:	7199      	strb	r1, [r3, #6]
 8011168:	68a3      	ldr	r3, [r4, #8]
 801116a:	71da      	strb	r2, [r3, #7]
 801116c:	2108      	movs	r1, #8
 801116e:	68a2      	ldr	r2, [r4, #8]
 8011170:	6923      	ldr	r3, [r4, #16]
 8011172:	440a      	add	r2, r1
 8011174:	7561      	strb	r1, [r4, #21]
 8011176:	440b      	add	r3, r1
 8011178:	60a2      	str	r2, [r4, #8]
 801117a:	6123      	str	r3, [r4, #16]
 801117c:	7da0      	ldrb	r0, [r4, #22]
 801117e:	f080 0001 	eor.w	r0, r0, #1
 8011182:	b002      	add	sp, #8
 8011184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011188:	466b      	mov	r3, sp
 801118a:	68a2      	ldr	r2, [r4, #8]
 801118c:	cb03      	ldmia	r3!, {r0, r1}
 801118e:	6010      	str	r0, [r2, #0]
 8011190:	6051      	str	r1, [r2, #4]
 8011192:	e7eb      	b.n	801116c <ucdr_serialize_int64_t+0x10c>
 8011194:	68a2      	ldr	r2, [r4, #8]
 8011196:	6923      	ldr	r3, [r4, #16]
 8011198:	7da0      	ldrb	r0, [r4, #22]
 801119a:	1b92      	subs	r2, r2, r6
 801119c:	1b9b      	subs	r3, r3, r6
 801119e:	7567      	strb	r7, [r4, #21]
 80111a0:	f080 0001 	eor.w	r0, r0, #1
 80111a4:	60a2      	str	r2, [r4, #8]
 80111a6:	6123      	str	r3, [r4, #16]
 80111a8:	b002      	add	sp, #8
 80111aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111ae:	68a3      	ldr	r3, [r4, #8]
 80111b0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80111b4:	701a      	strb	r2, [r3, #0]
 80111b6:	68a3      	ldr	r3, [r4, #8]
 80111b8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80111bc:	701a      	strb	r2, [r3, #0]
 80111be:	68a3      	ldr	r3, [r4, #8]
 80111c0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80111c4:	701a      	strb	r2, [r3, #0]
 80111c6:	68a3      	ldr	r3, [r4, #8]
 80111c8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80111cc:	701a      	strb	r2, [r3, #0]
 80111ce:	68a3      	ldr	r3, [r4, #8]
 80111d0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80111d4:	701a      	strb	r2, [r3, #0]
 80111d6:	68a3      	ldr	r3, [r4, #8]
 80111d8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80111dc:	701a      	strb	r2, [r3, #0]
 80111de:	68a3      	ldr	r3, [r4, #8]
 80111e0:	f89d 2000 	ldrb.w	r2, [sp]
 80111e4:	701a      	strb	r2, [r3, #0]
 80111e6:	e78a      	b.n	80110fe <ucdr_serialize_int64_t+0x9e>
 80111e8:	4628      	mov	r0, r5
 80111ea:	466d      	mov	r5, sp
 80111ec:	4632      	mov	r2, r6
 80111ee:	4629      	mov	r1, r5
 80111f0:	f00c fc45 	bl	801da7e <memcpy>
 80111f4:	4642      	mov	r2, r8
 80111f6:	19a9      	adds	r1, r5, r6
 80111f8:	68a0      	ldr	r0, [r4, #8]
 80111fa:	f00c fc40 	bl	801da7e <memcpy>
 80111fe:	e77e      	b.n	80110fe <ucdr_serialize_int64_t+0x9e>

08011200 <ucdr_deserialize_int64_t>:
 8011200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011204:	4604      	mov	r4, r0
 8011206:	460d      	mov	r5, r1
 8011208:	2108      	movs	r1, #8
 801120a:	f000 fb77 	bl	80118fc <ucdr_buffer_alignment>
 801120e:	4601      	mov	r1, r0
 8011210:	4620      	mov	r0, r4
 8011212:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011216:	f000 fbb9 	bl	801198c <ucdr_advance_buffer>
 801121a:	2108      	movs	r1, #8
 801121c:	4620      	mov	r0, r4
 801121e:	f000 fb0d 	bl	801183c <ucdr_check_buffer_available_for>
 8011222:	2800      	cmp	r0, #0
 8011224:	d151      	bne.n	80112ca <ucdr_deserialize_int64_t+0xca>
 8011226:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801122a:	42be      	cmp	r6, r7
 801122c:	d948      	bls.n	80112c0 <ucdr_deserialize_int64_t+0xc0>
 801122e:	6923      	ldr	r3, [r4, #16]
 8011230:	4620      	mov	r0, r4
 8011232:	60a6      	str	r6, [r4, #8]
 8011234:	1bf6      	subs	r6, r6, r7
 8011236:	4433      	add	r3, r6
 8011238:	f1c6 0908 	rsb	r9, r6, #8
 801123c:	6123      	str	r3, [r4, #16]
 801123e:	4649      	mov	r1, r9
 8011240:	f000 fb08 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8011244:	2800      	cmp	r0, #0
 8011246:	d06d      	beq.n	8011324 <ucdr_deserialize_int64_t+0x124>
 8011248:	7d23      	ldrb	r3, [r4, #20]
 801124a:	2b01      	cmp	r3, #1
 801124c:	f000 8093 	beq.w	8011376 <ucdr_deserialize_int64_t+0x176>
 8011250:	79fb      	ldrb	r3, [r7, #7]
 8011252:	702b      	strb	r3, [r5, #0]
 8011254:	2e00      	cmp	r6, #0
 8011256:	d072      	beq.n	801133e <ucdr_deserialize_int64_t+0x13e>
 8011258:	79bb      	ldrb	r3, [r7, #6]
 801125a:	2e01      	cmp	r6, #1
 801125c:	706b      	strb	r3, [r5, #1]
 801125e:	f105 0302 	add.w	r3, r5, #2
 8011262:	d070      	beq.n	8011346 <ucdr_deserialize_int64_t+0x146>
 8011264:	797b      	ldrb	r3, [r7, #5]
 8011266:	2e02      	cmp	r6, #2
 8011268:	70ab      	strb	r3, [r5, #2]
 801126a:	f105 0303 	add.w	r3, r5, #3
 801126e:	d06e      	beq.n	801134e <ucdr_deserialize_int64_t+0x14e>
 8011270:	793b      	ldrb	r3, [r7, #4]
 8011272:	2e03      	cmp	r6, #3
 8011274:	70eb      	strb	r3, [r5, #3]
 8011276:	f105 0304 	add.w	r3, r5, #4
 801127a:	d06c      	beq.n	8011356 <ucdr_deserialize_int64_t+0x156>
 801127c:	78fb      	ldrb	r3, [r7, #3]
 801127e:	2e04      	cmp	r6, #4
 8011280:	712b      	strb	r3, [r5, #4]
 8011282:	f105 0305 	add.w	r3, r5, #5
 8011286:	d06a      	beq.n	801135e <ucdr_deserialize_int64_t+0x15e>
 8011288:	78bb      	ldrb	r3, [r7, #2]
 801128a:	2e05      	cmp	r6, #5
 801128c:	716b      	strb	r3, [r5, #5]
 801128e:	f105 0306 	add.w	r3, r5, #6
 8011292:	d068      	beq.n	8011366 <ucdr_deserialize_int64_t+0x166>
 8011294:	787b      	ldrb	r3, [r7, #1]
 8011296:	2e06      	cmp	r6, #6
 8011298:	71ab      	strb	r3, [r5, #6]
 801129a:	f105 0307 	add.w	r3, r5, #7
 801129e:	d066      	beq.n	801136e <ucdr_deserialize_int64_t+0x16e>
 80112a0:	783b      	ldrb	r3, [r7, #0]
 80112a2:	71eb      	strb	r3, [r5, #7]
 80112a4:	6923      	ldr	r3, [r4, #16]
 80112a6:	2108      	movs	r1, #8
 80112a8:	68a2      	ldr	r2, [r4, #8]
 80112aa:	3308      	adds	r3, #8
 80112ac:	7da0      	ldrb	r0, [r4, #22]
 80112ae:	444a      	add	r2, r9
 80112b0:	7561      	strb	r1, [r4, #21]
 80112b2:	1b9e      	subs	r6, r3, r6
 80112b4:	f080 0001 	eor.w	r0, r0, #1
 80112b8:	60a2      	str	r2, [r4, #8]
 80112ba:	6126      	str	r6, [r4, #16]
 80112bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112c0:	2108      	movs	r1, #8
 80112c2:	4620      	mov	r0, r4
 80112c4:	f000 fac6 	bl	8011854 <ucdr_check_final_buffer_behavior>
 80112c8:	b310      	cbz	r0, 8011310 <ucdr_deserialize_int64_t+0x110>
 80112ca:	7d23      	ldrb	r3, [r4, #20]
 80112cc:	2b01      	cmp	r3, #1
 80112ce:	68a3      	ldr	r3, [r4, #8]
 80112d0:	d023      	beq.n	801131a <ucdr_deserialize_int64_t+0x11a>
 80112d2:	79db      	ldrb	r3, [r3, #7]
 80112d4:	702b      	strb	r3, [r5, #0]
 80112d6:	68a3      	ldr	r3, [r4, #8]
 80112d8:	799b      	ldrb	r3, [r3, #6]
 80112da:	706b      	strb	r3, [r5, #1]
 80112dc:	68a3      	ldr	r3, [r4, #8]
 80112de:	795b      	ldrb	r3, [r3, #5]
 80112e0:	70ab      	strb	r3, [r5, #2]
 80112e2:	68a3      	ldr	r3, [r4, #8]
 80112e4:	791b      	ldrb	r3, [r3, #4]
 80112e6:	70eb      	strb	r3, [r5, #3]
 80112e8:	68a3      	ldr	r3, [r4, #8]
 80112ea:	78db      	ldrb	r3, [r3, #3]
 80112ec:	712b      	strb	r3, [r5, #4]
 80112ee:	68a3      	ldr	r3, [r4, #8]
 80112f0:	789b      	ldrb	r3, [r3, #2]
 80112f2:	716b      	strb	r3, [r5, #5]
 80112f4:	68a3      	ldr	r3, [r4, #8]
 80112f6:	785b      	ldrb	r3, [r3, #1]
 80112f8:	71ab      	strb	r3, [r5, #6]
 80112fa:	68a3      	ldr	r3, [r4, #8]
 80112fc:	781b      	ldrb	r3, [r3, #0]
 80112fe:	71eb      	strb	r3, [r5, #7]
 8011300:	2108      	movs	r1, #8
 8011302:	68a2      	ldr	r2, [r4, #8]
 8011304:	6923      	ldr	r3, [r4, #16]
 8011306:	440a      	add	r2, r1
 8011308:	7561      	strb	r1, [r4, #21]
 801130a:	440b      	add	r3, r1
 801130c:	60a2      	str	r2, [r4, #8]
 801130e:	6123      	str	r3, [r4, #16]
 8011310:	7da0      	ldrb	r0, [r4, #22]
 8011312:	f080 0001 	eor.w	r0, r0, #1
 8011316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801131a:	681a      	ldr	r2, [r3, #0]
 801131c:	685b      	ldr	r3, [r3, #4]
 801131e:	602a      	str	r2, [r5, #0]
 8011320:	606b      	str	r3, [r5, #4]
 8011322:	e7ed      	b.n	8011300 <ucdr_deserialize_int64_t+0x100>
 8011324:	68a2      	ldr	r2, [r4, #8]
 8011326:	6923      	ldr	r3, [r4, #16]
 8011328:	1b92      	subs	r2, r2, r6
 801132a:	7da0      	ldrb	r0, [r4, #22]
 801132c:	1b9b      	subs	r3, r3, r6
 801132e:	f884 8015 	strb.w	r8, [r4, #21]
 8011332:	f080 0001 	eor.w	r0, r0, #1
 8011336:	60a2      	str	r2, [r4, #8]
 8011338:	6123      	str	r3, [r4, #16]
 801133a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801133e:	68a3      	ldr	r3, [r4, #8]
 8011340:	799b      	ldrb	r3, [r3, #6]
 8011342:	706b      	strb	r3, [r5, #1]
 8011344:	1cab      	adds	r3, r5, #2
 8011346:	68a2      	ldr	r2, [r4, #8]
 8011348:	7952      	ldrb	r2, [r2, #5]
 801134a:	f803 2b01 	strb.w	r2, [r3], #1
 801134e:	68a2      	ldr	r2, [r4, #8]
 8011350:	7912      	ldrb	r2, [r2, #4]
 8011352:	f803 2b01 	strb.w	r2, [r3], #1
 8011356:	68a2      	ldr	r2, [r4, #8]
 8011358:	78d2      	ldrb	r2, [r2, #3]
 801135a:	f803 2b01 	strb.w	r2, [r3], #1
 801135e:	68a2      	ldr	r2, [r4, #8]
 8011360:	7892      	ldrb	r2, [r2, #2]
 8011362:	f803 2b01 	strb.w	r2, [r3], #1
 8011366:	68a2      	ldr	r2, [r4, #8]
 8011368:	7852      	ldrb	r2, [r2, #1]
 801136a:	f803 2b01 	strb.w	r2, [r3], #1
 801136e:	68a2      	ldr	r2, [r4, #8]
 8011370:	7812      	ldrb	r2, [r2, #0]
 8011372:	701a      	strb	r2, [r3, #0]
 8011374:	e796      	b.n	80112a4 <ucdr_deserialize_int64_t+0xa4>
 8011376:	4639      	mov	r1, r7
 8011378:	4632      	mov	r2, r6
 801137a:	4628      	mov	r0, r5
 801137c:	f00c fb7f 	bl	801da7e <memcpy>
 8011380:	464a      	mov	r2, r9
 8011382:	19a8      	adds	r0, r5, r6
 8011384:	68a1      	ldr	r1, [r4, #8]
 8011386:	f00c fb7a 	bl	801da7e <memcpy>
 801138a:	e78b      	b.n	80112a4 <ucdr_deserialize_int64_t+0xa4>

0801138c <ucdr_serialize_float>:
 801138c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011390:	4604      	mov	r4, r0
 8011392:	b082      	sub	sp, #8
 8011394:	2104      	movs	r1, #4
 8011396:	ed8d 0a01 	vstr	s0, [sp, #4]
 801139a:	f000 faaf 	bl	80118fc <ucdr_buffer_alignment>
 801139e:	4601      	mov	r1, r0
 80113a0:	4620      	mov	r0, r4
 80113a2:	7d67      	ldrb	r7, [r4, #21]
 80113a4:	f000 faf2 	bl	801198c <ucdr_advance_buffer>
 80113a8:	2104      	movs	r1, #4
 80113aa:	4620      	mov	r0, r4
 80113ac:	f000 fa46 	bl	801183c <ucdr_check_buffer_available_for>
 80113b0:	2800      	cmp	r0, #0
 80113b2:	d139      	bne.n	8011428 <ucdr_serialize_float+0x9c>
 80113b4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80113b8:	42ab      	cmp	r3, r5
 80113ba:	d930      	bls.n	801141e <ucdr_serialize_float+0x92>
 80113bc:	1b5e      	subs	r6, r3, r5
 80113be:	60a3      	str	r3, [r4, #8]
 80113c0:	6923      	ldr	r3, [r4, #16]
 80113c2:	4620      	mov	r0, r4
 80113c4:	f1c6 0804 	rsb	r8, r6, #4
 80113c8:	4433      	add	r3, r6
 80113ca:	4641      	mov	r1, r8
 80113cc:	6123      	str	r3, [r4, #16]
 80113ce:	f000 fa41 	bl	8011854 <ucdr_check_final_buffer_behavior>
 80113d2:	2800      	cmp	r0, #0
 80113d4:	d04c      	beq.n	8011470 <ucdr_serialize_float+0xe4>
 80113d6:	7d23      	ldrb	r3, [r4, #20]
 80113d8:	2b01      	cmp	r3, #1
 80113da:	d063      	beq.n	80114a4 <ucdr_serialize_float+0x118>
 80113dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80113e0:	702b      	strb	r3, [r5, #0]
 80113e2:	2e00      	cmp	r6, #0
 80113e4:	d051      	beq.n	801148a <ucdr_serialize_float+0xfe>
 80113e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80113ea:	2e01      	cmp	r6, #1
 80113ec:	706b      	strb	r3, [r5, #1]
 80113ee:	d050      	beq.n	8011492 <ucdr_serialize_float+0x106>
 80113f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80113f4:	2e02      	cmp	r6, #2
 80113f6:	70ab      	strb	r3, [r5, #2]
 80113f8:	d04f      	beq.n	801149a <ucdr_serialize_float+0x10e>
 80113fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80113fe:	70eb      	strb	r3, [r5, #3]
 8011400:	6923      	ldr	r3, [r4, #16]
 8011402:	2104      	movs	r1, #4
 8011404:	68a2      	ldr	r2, [r4, #8]
 8011406:	3304      	adds	r3, #4
 8011408:	7da0      	ldrb	r0, [r4, #22]
 801140a:	4442      	add	r2, r8
 801140c:	7561      	strb	r1, [r4, #21]
 801140e:	1b9e      	subs	r6, r3, r6
 8011410:	f080 0001 	eor.w	r0, r0, #1
 8011414:	60a2      	str	r2, [r4, #8]
 8011416:	6126      	str	r6, [r4, #16]
 8011418:	b002      	add	sp, #8
 801141a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801141e:	2104      	movs	r1, #4
 8011420:	4620      	mov	r0, r4
 8011422:	f000 fa17 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8011426:	b1d0      	cbz	r0, 801145e <ucdr_serialize_float+0xd2>
 8011428:	7d23      	ldrb	r3, [r4, #20]
 801142a:	2b01      	cmp	r3, #1
 801142c:	68a3      	ldr	r3, [r4, #8]
 801142e:	d01c      	beq.n	801146a <ucdr_serialize_float+0xde>
 8011430:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011434:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011438:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801143c:	7018      	strb	r0, [r3, #0]
 801143e:	68a3      	ldr	r3, [r4, #8]
 8011440:	705a      	strb	r2, [r3, #1]
 8011442:	68a3      	ldr	r3, [r4, #8]
 8011444:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011448:	7099      	strb	r1, [r3, #2]
 801144a:	68a3      	ldr	r3, [r4, #8]
 801144c:	70da      	strb	r2, [r3, #3]
 801144e:	2104      	movs	r1, #4
 8011450:	68a2      	ldr	r2, [r4, #8]
 8011452:	6923      	ldr	r3, [r4, #16]
 8011454:	440a      	add	r2, r1
 8011456:	7561      	strb	r1, [r4, #21]
 8011458:	440b      	add	r3, r1
 801145a:	60a2      	str	r2, [r4, #8]
 801145c:	6123      	str	r3, [r4, #16]
 801145e:	7da0      	ldrb	r0, [r4, #22]
 8011460:	f080 0001 	eor.w	r0, r0, #1
 8011464:	b002      	add	sp, #8
 8011466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801146a:	9a01      	ldr	r2, [sp, #4]
 801146c:	601a      	str	r2, [r3, #0]
 801146e:	e7ee      	b.n	801144e <ucdr_serialize_float+0xc2>
 8011470:	68a2      	ldr	r2, [r4, #8]
 8011472:	6923      	ldr	r3, [r4, #16]
 8011474:	7da0      	ldrb	r0, [r4, #22]
 8011476:	1b92      	subs	r2, r2, r6
 8011478:	1b9b      	subs	r3, r3, r6
 801147a:	7567      	strb	r7, [r4, #21]
 801147c:	f080 0001 	eor.w	r0, r0, #1
 8011480:	60a2      	str	r2, [r4, #8]
 8011482:	6123      	str	r3, [r4, #16]
 8011484:	b002      	add	sp, #8
 8011486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801148a:	68a3      	ldr	r3, [r4, #8]
 801148c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011490:	701a      	strb	r2, [r3, #0]
 8011492:	68a3      	ldr	r3, [r4, #8]
 8011494:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011498:	701a      	strb	r2, [r3, #0]
 801149a:	68a3      	ldr	r3, [r4, #8]
 801149c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80114a0:	701a      	strb	r2, [r3, #0]
 80114a2:	e7ad      	b.n	8011400 <ucdr_serialize_float+0x74>
 80114a4:	4628      	mov	r0, r5
 80114a6:	ad01      	add	r5, sp, #4
 80114a8:	4632      	mov	r2, r6
 80114aa:	4629      	mov	r1, r5
 80114ac:	f00c fae7 	bl	801da7e <memcpy>
 80114b0:	4642      	mov	r2, r8
 80114b2:	19a9      	adds	r1, r5, r6
 80114b4:	68a0      	ldr	r0, [r4, #8]
 80114b6:	f00c fae2 	bl	801da7e <memcpy>
 80114ba:	e7a1      	b.n	8011400 <ucdr_serialize_float+0x74>

080114bc <ucdr_serialize_endian_float>:
 80114bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80114c0:	4604      	mov	r4, r0
 80114c2:	b083      	sub	sp, #12
 80114c4:	460d      	mov	r5, r1
 80114c6:	2104      	movs	r1, #4
 80114c8:	ed8d 0a01 	vstr	s0, [sp, #4]
 80114cc:	f000 fa16 	bl	80118fc <ucdr_buffer_alignment>
 80114d0:	4601      	mov	r1, r0
 80114d2:	4620      	mov	r0, r4
 80114d4:	f894 8015 	ldrb.w	r8, [r4, #21]
 80114d8:	f000 fa58 	bl	801198c <ucdr_advance_buffer>
 80114dc:	2104      	movs	r1, #4
 80114de:	4620      	mov	r0, r4
 80114e0:	f000 f9ac 	bl	801183c <ucdr_check_buffer_available_for>
 80114e4:	2800      	cmp	r0, #0
 80114e6:	d138      	bne.n	801155a <ucdr_serialize_endian_float+0x9e>
 80114e8:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80114ec:	42b7      	cmp	r7, r6
 80114ee:	d92f      	bls.n	8011550 <ucdr_serialize_endian_float+0x94>
 80114f0:	6923      	ldr	r3, [r4, #16]
 80114f2:	4620      	mov	r0, r4
 80114f4:	60a7      	str	r7, [r4, #8]
 80114f6:	1bbf      	subs	r7, r7, r6
 80114f8:	443b      	add	r3, r7
 80114fa:	f1c7 0904 	rsb	r9, r7, #4
 80114fe:	6123      	str	r3, [r4, #16]
 8011500:	4649      	mov	r1, r9
 8011502:	f000 f9a7 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8011506:	2800      	cmp	r0, #0
 8011508:	d04a      	beq.n	80115a0 <ucdr_serialize_endian_float+0xe4>
 801150a:	2d01      	cmp	r5, #1
 801150c:	d063      	beq.n	80115d6 <ucdr_serialize_endian_float+0x11a>
 801150e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011512:	7033      	strb	r3, [r6, #0]
 8011514:	2f00      	cmp	r7, #0
 8011516:	d051      	beq.n	80115bc <ucdr_serialize_endian_float+0x100>
 8011518:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801151c:	2f01      	cmp	r7, #1
 801151e:	7073      	strb	r3, [r6, #1]
 8011520:	d050      	beq.n	80115c4 <ucdr_serialize_endian_float+0x108>
 8011522:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011526:	2f02      	cmp	r7, #2
 8011528:	70b3      	strb	r3, [r6, #2]
 801152a:	d04f      	beq.n	80115cc <ucdr_serialize_endian_float+0x110>
 801152c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011530:	70f3      	strb	r3, [r6, #3]
 8011532:	6923      	ldr	r3, [r4, #16]
 8011534:	2104      	movs	r1, #4
 8011536:	68a2      	ldr	r2, [r4, #8]
 8011538:	7da0      	ldrb	r0, [r4, #22]
 801153a:	3304      	adds	r3, #4
 801153c:	444a      	add	r2, r9
 801153e:	7561      	strb	r1, [r4, #21]
 8011540:	1bdb      	subs	r3, r3, r7
 8011542:	f080 0001 	eor.w	r0, r0, #1
 8011546:	60a2      	str	r2, [r4, #8]
 8011548:	6123      	str	r3, [r4, #16]
 801154a:	b003      	add	sp, #12
 801154c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011550:	2104      	movs	r1, #4
 8011552:	4620      	mov	r0, r4
 8011554:	f000 f97e 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8011558:	b1c8      	cbz	r0, 801158e <ucdr_serialize_endian_float+0xd2>
 801155a:	2d01      	cmp	r5, #1
 801155c:	68a3      	ldr	r3, [r4, #8]
 801155e:	d01c      	beq.n	801159a <ucdr_serialize_endian_float+0xde>
 8011560:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011564:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011568:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801156c:	7018      	strb	r0, [r3, #0]
 801156e:	68a3      	ldr	r3, [r4, #8]
 8011570:	705a      	strb	r2, [r3, #1]
 8011572:	68a3      	ldr	r3, [r4, #8]
 8011574:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011578:	7099      	strb	r1, [r3, #2]
 801157a:	68a3      	ldr	r3, [r4, #8]
 801157c:	70da      	strb	r2, [r3, #3]
 801157e:	2104      	movs	r1, #4
 8011580:	68a2      	ldr	r2, [r4, #8]
 8011582:	6923      	ldr	r3, [r4, #16]
 8011584:	440a      	add	r2, r1
 8011586:	7561      	strb	r1, [r4, #21]
 8011588:	440b      	add	r3, r1
 801158a:	60a2      	str	r2, [r4, #8]
 801158c:	6123      	str	r3, [r4, #16]
 801158e:	7da0      	ldrb	r0, [r4, #22]
 8011590:	f080 0001 	eor.w	r0, r0, #1
 8011594:	b003      	add	sp, #12
 8011596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801159a:	9a01      	ldr	r2, [sp, #4]
 801159c:	601a      	str	r2, [r3, #0]
 801159e:	e7ee      	b.n	801157e <ucdr_serialize_endian_float+0xc2>
 80115a0:	68a2      	ldr	r2, [r4, #8]
 80115a2:	6923      	ldr	r3, [r4, #16]
 80115a4:	7da0      	ldrb	r0, [r4, #22]
 80115a6:	1bd2      	subs	r2, r2, r7
 80115a8:	1bdb      	subs	r3, r3, r7
 80115aa:	f884 8015 	strb.w	r8, [r4, #21]
 80115ae:	f080 0001 	eor.w	r0, r0, #1
 80115b2:	60a2      	str	r2, [r4, #8]
 80115b4:	6123      	str	r3, [r4, #16]
 80115b6:	b003      	add	sp, #12
 80115b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115bc:	68a3      	ldr	r3, [r4, #8]
 80115be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80115c2:	701a      	strb	r2, [r3, #0]
 80115c4:	68a3      	ldr	r3, [r4, #8]
 80115c6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80115ca:	701a      	strb	r2, [r3, #0]
 80115cc:	68a3      	ldr	r3, [r4, #8]
 80115ce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80115d2:	701a      	strb	r2, [r3, #0]
 80115d4:	e7ad      	b.n	8011532 <ucdr_serialize_endian_float+0x76>
 80115d6:	ad01      	add	r5, sp, #4
 80115d8:	463a      	mov	r2, r7
 80115da:	4630      	mov	r0, r6
 80115dc:	4629      	mov	r1, r5
 80115de:	f00c fa4e 	bl	801da7e <memcpy>
 80115e2:	464a      	mov	r2, r9
 80115e4:	19e9      	adds	r1, r5, r7
 80115e6:	68a0      	ldr	r0, [r4, #8]
 80115e8:	f00c fa49 	bl	801da7e <memcpy>
 80115ec:	e7a1      	b.n	8011532 <ucdr_serialize_endian_float+0x76>
 80115ee:	bf00      	nop

080115f0 <ucdr_deserialize_float>:
 80115f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115f4:	4604      	mov	r4, r0
 80115f6:	460d      	mov	r5, r1
 80115f8:	2104      	movs	r1, #4
 80115fa:	f000 f97f 	bl	80118fc <ucdr_buffer_alignment>
 80115fe:	4601      	mov	r1, r0
 8011600:	4620      	mov	r0, r4
 8011602:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011606:	f000 f9c1 	bl	801198c <ucdr_advance_buffer>
 801160a:	2104      	movs	r1, #4
 801160c:	4620      	mov	r0, r4
 801160e:	f000 f915 	bl	801183c <ucdr_check_buffer_available_for>
 8011612:	2800      	cmp	r0, #0
 8011614:	d138      	bne.n	8011688 <ucdr_deserialize_float+0x98>
 8011616:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801161a:	42b7      	cmp	r7, r6
 801161c:	d92f      	bls.n	801167e <ucdr_deserialize_float+0x8e>
 801161e:	6923      	ldr	r3, [r4, #16]
 8011620:	4620      	mov	r0, r4
 8011622:	60a7      	str	r7, [r4, #8]
 8011624:	1bbf      	subs	r7, r7, r6
 8011626:	443b      	add	r3, r7
 8011628:	f1c7 0904 	rsb	r9, r7, #4
 801162c:	6123      	str	r3, [r4, #16]
 801162e:	4649      	mov	r1, r9
 8011630:	f000 f910 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8011634:	2800      	cmp	r0, #0
 8011636:	d046      	beq.n	80116c6 <ucdr_deserialize_float+0xd6>
 8011638:	7d23      	ldrb	r3, [r4, #20]
 801163a:	2b01      	cmp	r3, #1
 801163c:	d05c      	beq.n	80116f8 <ucdr_deserialize_float+0x108>
 801163e:	78f3      	ldrb	r3, [r6, #3]
 8011640:	702b      	strb	r3, [r5, #0]
 8011642:	2f00      	cmp	r7, #0
 8011644:	d04c      	beq.n	80116e0 <ucdr_deserialize_float+0xf0>
 8011646:	78b3      	ldrb	r3, [r6, #2]
 8011648:	2f01      	cmp	r7, #1
 801164a:	706b      	strb	r3, [r5, #1]
 801164c:	f105 0302 	add.w	r3, r5, #2
 8011650:	d04a      	beq.n	80116e8 <ucdr_deserialize_float+0xf8>
 8011652:	7873      	ldrb	r3, [r6, #1]
 8011654:	2f02      	cmp	r7, #2
 8011656:	70ab      	strb	r3, [r5, #2]
 8011658:	f105 0303 	add.w	r3, r5, #3
 801165c:	d048      	beq.n	80116f0 <ucdr_deserialize_float+0x100>
 801165e:	7833      	ldrb	r3, [r6, #0]
 8011660:	70eb      	strb	r3, [r5, #3]
 8011662:	6923      	ldr	r3, [r4, #16]
 8011664:	2104      	movs	r1, #4
 8011666:	68a2      	ldr	r2, [r4, #8]
 8011668:	3304      	adds	r3, #4
 801166a:	7da0      	ldrb	r0, [r4, #22]
 801166c:	444a      	add	r2, r9
 801166e:	7561      	strb	r1, [r4, #21]
 8011670:	1bdb      	subs	r3, r3, r7
 8011672:	f080 0001 	eor.w	r0, r0, #1
 8011676:	60a2      	str	r2, [r4, #8]
 8011678:	6123      	str	r3, [r4, #16]
 801167a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801167e:	2104      	movs	r1, #4
 8011680:	4620      	mov	r0, r4
 8011682:	f000 f8e7 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8011686:	b1b0      	cbz	r0, 80116b6 <ucdr_deserialize_float+0xc6>
 8011688:	7d23      	ldrb	r3, [r4, #20]
 801168a:	2b01      	cmp	r3, #1
 801168c:	68a3      	ldr	r3, [r4, #8]
 801168e:	d017      	beq.n	80116c0 <ucdr_deserialize_float+0xd0>
 8011690:	78db      	ldrb	r3, [r3, #3]
 8011692:	702b      	strb	r3, [r5, #0]
 8011694:	68a3      	ldr	r3, [r4, #8]
 8011696:	789b      	ldrb	r3, [r3, #2]
 8011698:	706b      	strb	r3, [r5, #1]
 801169a:	68a3      	ldr	r3, [r4, #8]
 801169c:	785b      	ldrb	r3, [r3, #1]
 801169e:	70ab      	strb	r3, [r5, #2]
 80116a0:	68a3      	ldr	r3, [r4, #8]
 80116a2:	781b      	ldrb	r3, [r3, #0]
 80116a4:	70eb      	strb	r3, [r5, #3]
 80116a6:	2104      	movs	r1, #4
 80116a8:	68a2      	ldr	r2, [r4, #8]
 80116aa:	6923      	ldr	r3, [r4, #16]
 80116ac:	440a      	add	r2, r1
 80116ae:	7561      	strb	r1, [r4, #21]
 80116b0:	440b      	add	r3, r1
 80116b2:	60a2      	str	r2, [r4, #8]
 80116b4:	6123      	str	r3, [r4, #16]
 80116b6:	7da0      	ldrb	r0, [r4, #22]
 80116b8:	f080 0001 	eor.w	r0, r0, #1
 80116bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	602b      	str	r3, [r5, #0]
 80116c4:	e7ef      	b.n	80116a6 <ucdr_deserialize_float+0xb6>
 80116c6:	68a2      	ldr	r2, [r4, #8]
 80116c8:	6923      	ldr	r3, [r4, #16]
 80116ca:	1bd2      	subs	r2, r2, r7
 80116cc:	7da0      	ldrb	r0, [r4, #22]
 80116ce:	1bdb      	subs	r3, r3, r7
 80116d0:	f884 8015 	strb.w	r8, [r4, #21]
 80116d4:	f080 0001 	eor.w	r0, r0, #1
 80116d8:	60a2      	str	r2, [r4, #8]
 80116da:	6123      	str	r3, [r4, #16]
 80116dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116e0:	68a3      	ldr	r3, [r4, #8]
 80116e2:	789b      	ldrb	r3, [r3, #2]
 80116e4:	706b      	strb	r3, [r5, #1]
 80116e6:	1cab      	adds	r3, r5, #2
 80116e8:	68a2      	ldr	r2, [r4, #8]
 80116ea:	7852      	ldrb	r2, [r2, #1]
 80116ec:	f803 2b01 	strb.w	r2, [r3], #1
 80116f0:	68a2      	ldr	r2, [r4, #8]
 80116f2:	7812      	ldrb	r2, [r2, #0]
 80116f4:	701a      	strb	r2, [r3, #0]
 80116f6:	e7b4      	b.n	8011662 <ucdr_deserialize_float+0x72>
 80116f8:	4631      	mov	r1, r6
 80116fa:	463a      	mov	r2, r7
 80116fc:	4628      	mov	r0, r5
 80116fe:	f00c f9be 	bl	801da7e <memcpy>
 8011702:	464a      	mov	r2, r9
 8011704:	19e8      	adds	r0, r5, r7
 8011706:	68a1      	ldr	r1, [r4, #8]
 8011708:	f00c f9b9 	bl	801da7e <memcpy>
 801170c:	e7a9      	b.n	8011662 <ucdr_deserialize_float+0x72>
 801170e:	bf00      	nop

08011710 <ucdr_deserialize_endian_float>:
 8011710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011714:	4604      	mov	r4, r0
 8011716:	460e      	mov	r6, r1
 8011718:	2104      	movs	r1, #4
 801171a:	4615      	mov	r5, r2
 801171c:	f000 f8ee 	bl	80118fc <ucdr_buffer_alignment>
 8011720:	4601      	mov	r1, r0
 8011722:	4620      	mov	r0, r4
 8011724:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011728:	f000 f930 	bl	801198c <ucdr_advance_buffer>
 801172c:	2104      	movs	r1, #4
 801172e:	4620      	mov	r0, r4
 8011730:	f000 f884 	bl	801183c <ucdr_check_buffer_available_for>
 8011734:	2800      	cmp	r0, #0
 8011736:	d13c      	bne.n	80117b2 <ucdr_deserialize_endian_float+0xa2>
 8011738:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 801173c:	42bb      	cmp	r3, r7
 801173e:	d933      	bls.n	80117a8 <ucdr_deserialize_endian_float+0x98>
 8011740:	eba3 0907 	sub.w	r9, r3, r7
 8011744:	60a3      	str	r3, [r4, #8]
 8011746:	6923      	ldr	r3, [r4, #16]
 8011748:	4620      	mov	r0, r4
 801174a:	f1c9 0a04 	rsb	sl, r9, #4
 801174e:	444b      	add	r3, r9
 8011750:	4651      	mov	r1, sl
 8011752:	6123      	str	r3, [r4, #16]
 8011754:	f000 f87e 	bl	8011854 <ucdr_check_final_buffer_behavior>
 8011758:	2800      	cmp	r0, #0
 801175a:	d048      	beq.n	80117ee <ucdr_deserialize_endian_float+0xde>
 801175c:	2e01      	cmp	r6, #1
 801175e:	d061      	beq.n	8011824 <ucdr_deserialize_endian_float+0x114>
 8011760:	78fb      	ldrb	r3, [r7, #3]
 8011762:	702b      	strb	r3, [r5, #0]
 8011764:	f1b9 0f00 	cmp.w	r9, #0
 8011768:	d050      	beq.n	801180c <ucdr_deserialize_endian_float+0xfc>
 801176a:	78bb      	ldrb	r3, [r7, #2]
 801176c:	f1b9 0f01 	cmp.w	r9, #1
 8011770:	706b      	strb	r3, [r5, #1]
 8011772:	f105 0302 	add.w	r3, r5, #2
 8011776:	d04d      	beq.n	8011814 <ucdr_deserialize_endian_float+0x104>
 8011778:	787b      	ldrb	r3, [r7, #1]
 801177a:	f1b9 0f02 	cmp.w	r9, #2
 801177e:	70ab      	strb	r3, [r5, #2]
 8011780:	f105 0303 	add.w	r3, r5, #3
 8011784:	d04a      	beq.n	801181c <ucdr_deserialize_endian_float+0x10c>
 8011786:	783b      	ldrb	r3, [r7, #0]
 8011788:	70eb      	strb	r3, [r5, #3]
 801178a:	6923      	ldr	r3, [r4, #16]
 801178c:	2104      	movs	r1, #4
 801178e:	68a2      	ldr	r2, [r4, #8]
 8011790:	3304      	adds	r3, #4
 8011792:	7da0      	ldrb	r0, [r4, #22]
 8011794:	4452      	add	r2, sl
 8011796:	7561      	strb	r1, [r4, #21]
 8011798:	eba3 0309 	sub.w	r3, r3, r9
 801179c:	f080 0001 	eor.w	r0, r0, #1
 80117a0:	60a2      	str	r2, [r4, #8]
 80117a2:	6123      	str	r3, [r4, #16]
 80117a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117a8:	2104      	movs	r1, #4
 80117aa:	4620      	mov	r0, r4
 80117ac:	f000 f852 	bl	8011854 <ucdr_check_final_buffer_behavior>
 80117b0:	b1a8      	cbz	r0, 80117de <ucdr_deserialize_endian_float+0xce>
 80117b2:	2e01      	cmp	r6, #1
 80117b4:	68a3      	ldr	r3, [r4, #8]
 80117b6:	d017      	beq.n	80117e8 <ucdr_deserialize_endian_float+0xd8>
 80117b8:	78db      	ldrb	r3, [r3, #3]
 80117ba:	702b      	strb	r3, [r5, #0]
 80117bc:	68a3      	ldr	r3, [r4, #8]
 80117be:	789b      	ldrb	r3, [r3, #2]
 80117c0:	706b      	strb	r3, [r5, #1]
 80117c2:	68a3      	ldr	r3, [r4, #8]
 80117c4:	785b      	ldrb	r3, [r3, #1]
 80117c6:	70ab      	strb	r3, [r5, #2]
 80117c8:	68a3      	ldr	r3, [r4, #8]
 80117ca:	781b      	ldrb	r3, [r3, #0]
 80117cc:	70eb      	strb	r3, [r5, #3]
 80117ce:	2104      	movs	r1, #4
 80117d0:	68a2      	ldr	r2, [r4, #8]
 80117d2:	6923      	ldr	r3, [r4, #16]
 80117d4:	440a      	add	r2, r1
 80117d6:	7561      	strb	r1, [r4, #21]
 80117d8:	440b      	add	r3, r1
 80117da:	60a2      	str	r2, [r4, #8]
 80117dc:	6123      	str	r3, [r4, #16]
 80117de:	7da0      	ldrb	r0, [r4, #22]
 80117e0:	f080 0001 	eor.w	r0, r0, #1
 80117e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	602b      	str	r3, [r5, #0]
 80117ec:	e7ef      	b.n	80117ce <ucdr_deserialize_endian_float+0xbe>
 80117ee:	68a2      	ldr	r2, [r4, #8]
 80117f0:	6923      	ldr	r3, [r4, #16]
 80117f2:	eba2 0209 	sub.w	r2, r2, r9
 80117f6:	7da0      	ldrb	r0, [r4, #22]
 80117f8:	eba3 0309 	sub.w	r3, r3, r9
 80117fc:	f884 8015 	strb.w	r8, [r4, #21]
 8011800:	f080 0001 	eor.w	r0, r0, #1
 8011804:	60a2      	str	r2, [r4, #8]
 8011806:	6123      	str	r3, [r4, #16]
 8011808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801180c:	68a3      	ldr	r3, [r4, #8]
 801180e:	789b      	ldrb	r3, [r3, #2]
 8011810:	706b      	strb	r3, [r5, #1]
 8011812:	1cab      	adds	r3, r5, #2
 8011814:	68a2      	ldr	r2, [r4, #8]
 8011816:	7852      	ldrb	r2, [r2, #1]
 8011818:	f803 2b01 	strb.w	r2, [r3], #1
 801181c:	68a2      	ldr	r2, [r4, #8]
 801181e:	7812      	ldrb	r2, [r2, #0]
 8011820:	701a      	strb	r2, [r3, #0]
 8011822:	e7b2      	b.n	801178a <ucdr_deserialize_endian_float+0x7a>
 8011824:	4639      	mov	r1, r7
 8011826:	464a      	mov	r2, r9
 8011828:	4628      	mov	r0, r5
 801182a:	f00c f928 	bl	801da7e <memcpy>
 801182e:	4652      	mov	r2, sl
 8011830:	eb05 0009 	add.w	r0, r5, r9
 8011834:	68a1      	ldr	r1, [r4, #8]
 8011836:	f00c f922 	bl	801da7e <memcpy>
 801183a:	e7a6      	b.n	801178a <ucdr_deserialize_endian_float+0x7a>

0801183c <ucdr_check_buffer_available_for>:
 801183c:	7d83      	ldrb	r3, [r0, #22]
 801183e:	b93b      	cbnz	r3, 8011850 <ucdr_check_buffer_available_for+0x14>
 8011840:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8011844:	4419      	add	r1, r3
 8011846:	4288      	cmp	r0, r1
 8011848:	bf34      	ite	cc
 801184a:	2000      	movcc	r0, #0
 801184c:	2001      	movcs	r0, #1
 801184e:	4770      	bx	lr
 8011850:	2000      	movs	r0, #0
 8011852:	4770      	bx	lr

08011854 <ucdr_check_final_buffer_behavior>:
 8011854:	7d83      	ldrb	r3, [r0, #22]
 8011856:	b943      	cbnz	r3, 801186a <ucdr_check_final_buffer_behavior+0x16>
 8011858:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 801185c:	b510      	push	{r4, lr}
 801185e:	4291      	cmp	r1, r2
 8011860:	4604      	mov	r4, r0
 8011862:	d205      	bcs.n	8011870 <ucdr_check_final_buffer_behavior+0x1c>
 8011864:	2301      	movs	r3, #1
 8011866:	4618      	mov	r0, r3
 8011868:	bd10      	pop	{r4, pc}
 801186a:	2300      	movs	r3, #0
 801186c:	4618      	mov	r0, r3
 801186e:	4770      	bx	lr
 8011870:	6982      	ldr	r2, [r0, #24]
 8011872:	b13a      	cbz	r2, 8011884 <ucdr_check_final_buffer_behavior+0x30>
 8011874:	69c1      	ldr	r1, [r0, #28]
 8011876:	4790      	blx	r2
 8011878:	f080 0301 	eor.w	r3, r0, #1
 801187c:	75a0      	strb	r0, [r4, #22]
 801187e:	b2db      	uxtb	r3, r3
 8011880:	4618      	mov	r0, r3
 8011882:	bd10      	pop	{r4, pc}
 8011884:	2001      	movs	r0, #1
 8011886:	75a0      	strb	r0, [r4, #22]
 8011888:	e7fa      	b.n	8011880 <ucdr_check_final_buffer_behavior+0x2c>
 801188a:	bf00      	nop

0801188c <ucdr_set_on_full_buffer_callback>:
 801188c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8011890:	4770      	bx	lr
 8011892:	bf00      	nop

08011894 <ucdr_init_buffer_origin_offset_endian>:
 8011894:	b410      	push	{r4}
 8011896:	9c01      	ldr	r4, [sp, #4]
 8011898:	440a      	add	r2, r1
 801189a:	6001      	str	r1, [r0, #0]
 801189c:	6042      	str	r2, [r0, #4]
 801189e:	190a      	adds	r2, r1, r4
 80118a0:	441c      	add	r4, r3
 80118a2:	6082      	str	r2, [r0, #8]
 80118a4:	2200      	movs	r2, #0
 80118a6:	e9c0 3403 	strd	r3, r4, [r0, #12]
 80118aa:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80118ae:	7542      	strb	r2, [r0, #21]
 80118b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118b4:	7582      	strb	r2, [r0, #22]
 80118b6:	7503      	strb	r3, [r0, #20]
 80118b8:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80118bc:	4770      	bx	lr
 80118be:	bf00      	nop

080118c0 <ucdr_init_buffer_origin_offset>:
 80118c0:	b510      	push	{r4, lr}
 80118c2:	b082      	sub	sp, #8
 80118c4:	9c04      	ldr	r4, [sp, #16]
 80118c6:	9400      	str	r4, [sp, #0]
 80118c8:	2401      	movs	r4, #1
 80118ca:	9401      	str	r4, [sp, #4]
 80118cc:	f7ff ffe2 	bl	8011894 <ucdr_init_buffer_origin_offset_endian>
 80118d0:	b002      	add	sp, #8
 80118d2:	bd10      	pop	{r4, pc}

080118d4 <ucdr_init_buffer_origin>:
 80118d4:	b510      	push	{r4, lr}
 80118d6:	2400      	movs	r4, #0
 80118d8:	b082      	sub	sp, #8
 80118da:	9400      	str	r4, [sp, #0]
 80118dc:	f7ff fff0 	bl	80118c0 <ucdr_init_buffer_origin_offset>
 80118e0:	b002      	add	sp, #8
 80118e2:	bd10      	pop	{r4, pc}

080118e4 <ucdr_init_buffer>:
 80118e4:	2300      	movs	r3, #0
 80118e6:	f7ff bff5 	b.w	80118d4 <ucdr_init_buffer_origin>
 80118ea:	bf00      	nop

080118ec <ucdr_alignment>:
 80118ec:	fbb0 f2f1 	udiv	r2, r0, r1
 80118f0:	fb02 0011 	mls	r0, r2, r1, r0
 80118f4:	1e4b      	subs	r3, r1, #1
 80118f6:	1a08      	subs	r0, r1, r0
 80118f8:	4018      	ands	r0, r3
 80118fa:	4770      	bx	lr

080118fc <ucdr_buffer_alignment>:
 80118fc:	7d43      	ldrb	r3, [r0, #21]
 80118fe:	428b      	cmp	r3, r1
 8011900:	d209      	bcs.n	8011916 <ucdr_buffer_alignment+0x1a>
 8011902:	6903      	ldr	r3, [r0, #16]
 8011904:	1e4a      	subs	r2, r1, #1
 8011906:	fbb3 f0f1 	udiv	r0, r3, r1
 801190a:	fb01 3010 	mls	r0, r1, r0, r3
 801190e:	1a09      	subs	r1, r1, r0
 8011910:	ea01 0002 	and.w	r0, r1, r2
 8011914:	4770      	bx	lr
 8011916:	2000      	movs	r0, #0
 8011918:	4770      	bx	lr
 801191a:	bf00      	nop

0801191c <ucdr_align_to>:
 801191c:	b538      	push	{r3, r4, r5, lr}
 801191e:	4604      	mov	r4, r0
 8011920:	460d      	mov	r5, r1
 8011922:	f7ff ffeb 	bl	80118fc <ucdr_buffer_alignment>
 8011926:	68a3      	ldr	r3, [r4, #8]
 8011928:	7565      	strb	r5, [r4, #21]
 801192a:	181a      	adds	r2, r3, r0
 801192c:	6923      	ldr	r3, [r4, #16]
 801192e:	4418      	add	r0, r3
 8011930:	6863      	ldr	r3, [r4, #4]
 8011932:	4293      	cmp	r3, r2
 8011934:	6120      	str	r0, [r4, #16]
 8011936:	bf28      	it	cs
 8011938:	4613      	movcs	r3, r2
 801193a:	60a3      	str	r3, [r4, #8]
 801193c:	bd38      	pop	{r3, r4, r5, pc}
 801193e:	bf00      	nop

08011940 <ucdr_buffer_length>:
 8011940:	6882      	ldr	r2, [r0, #8]
 8011942:	6800      	ldr	r0, [r0, #0]
 8011944:	1a10      	subs	r0, r2, r0
 8011946:	4770      	bx	lr

08011948 <ucdr_buffer_remaining>:
 8011948:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 801194c:	1a10      	subs	r0, r2, r0
 801194e:	4770      	bx	lr

08011950 <ucdr_check_final_buffer_behavior_array>:
 8011950:	b538      	push	{r3, r4, r5, lr}
 8011952:	7d83      	ldrb	r3, [r0, #22]
 8011954:	b9a3      	cbnz	r3, 8011980 <ucdr_check_final_buffer_behavior_array+0x30>
 8011956:	4604      	mov	r4, r0
 8011958:	460d      	mov	r5, r1
 801195a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801195e:	429a      	cmp	r2, r3
 8011960:	d300      	bcc.n	8011964 <ucdr_check_final_buffer_behavior_array+0x14>
 8011962:	b931      	cbnz	r1, 8011972 <ucdr_check_final_buffer_behavior_array+0x22>
 8011964:	4620      	mov	r0, r4
 8011966:	f7ff ffef 	bl	8011948 <ucdr_buffer_remaining>
 801196a:	42a8      	cmp	r0, r5
 801196c:	bf28      	it	cs
 801196e:	4628      	movcs	r0, r5
 8011970:	bd38      	pop	{r3, r4, r5, pc}
 8011972:	6983      	ldr	r3, [r0, #24]
 8011974:	b133      	cbz	r3, 8011984 <ucdr_check_final_buffer_behavior_array+0x34>
 8011976:	69c1      	ldr	r1, [r0, #28]
 8011978:	4798      	blx	r3
 801197a:	75a0      	strb	r0, [r4, #22]
 801197c:	2800      	cmp	r0, #0
 801197e:	d0f1      	beq.n	8011964 <ucdr_check_final_buffer_behavior_array+0x14>
 8011980:	2000      	movs	r0, #0
 8011982:	bd38      	pop	{r3, r4, r5, pc}
 8011984:	2301      	movs	r3, #1
 8011986:	7583      	strb	r3, [r0, #22]
 8011988:	e7fa      	b.n	8011980 <ucdr_check_final_buffer_behavior_array+0x30>
 801198a:	bf00      	nop

0801198c <ucdr_advance_buffer>:
 801198c:	b538      	push	{r3, r4, r5, lr}
 801198e:	4604      	mov	r4, r0
 8011990:	460d      	mov	r5, r1
 8011992:	f7ff ff53 	bl	801183c <ucdr_check_buffer_available_for>
 8011996:	b178      	cbz	r0, 80119b8 <ucdr_advance_buffer+0x2c>
 8011998:	6923      	ldr	r3, [r4, #16]
 801199a:	68a2      	ldr	r2, [r4, #8]
 801199c:	442b      	add	r3, r5
 801199e:	442a      	add	r2, r5
 80119a0:	6123      	str	r3, [r4, #16]
 80119a2:	2301      	movs	r3, #1
 80119a4:	60a2      	str	r2, [r4, #8]
 80119a6:	7563      	strb	r3, [r4, #21]
 80119a8:	bd38      	pop	{r3, r4, r5, pc}
 80119aa:	68a2      	ldr	r2, [r4, #8]
 80119ac:	1a2d      	subs	r5, r5, r0
 80119ae:	6923      	ldr	r3, [r4, #16]
 80119b0:	4402      	add	r2, r0
 80119b2:	4418      	add	r0, r3
 80119b4:	60a2      	str	r2, [r4, #8]
 80119b6:	6120      	str	r0, [r4, #16]
 80119b8:	4629      	mov	r1, r5
 80119ba:	2201      	movs	r2, #1
 80119bc:	4620      	mov	r0, r4
 80119be:	f7ff ffc7 	bl	8011950 <ucdr_check_final_buffer_behavior_array>
 80119c2:	2800      	cmp	r0, #0
 80119c4:	d1f1      	bne.n	80119aa <ucdr_advance_buffer+0x1e>
 80119c6:	2301      	movs	r3, #1
 80119c8:	7563      	strb	r3, [r4, #21]
 80119ca:	bd38      	pop	{r3, r4, r5, pc}

080119cc <uxr_buffer_delete_entity>:
 80119cc:	b510      	push	{r4, lr}
 80119ce:	2300      	movs	r3, #0
 80119d0:	b08e      	sub	sp, #56	; 0x38
 80119d2:	4604      	mov	r4, r0
 80119d4:	9103      	str	r1, [sp, #12]
 80119d6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80119da:	2303      	movs	r3, #3
 80119dc:	2204      	movs	r2, #4
 80119de:	9300      	str	r3, [sp, #0]
 80119e0:	ab06      	add	r3, sp, #24
 80119e2:	f001 f989 	bl	8012cf8 <uxr_prepare_stream_to_write_submessage>
 80119e6:	b918      	cbnz	r0, 80119f0 <uxr_buffer_delete_entity+0x24>
 80119e8:	4604      	mov	r4, r0
 80119ea:	4620      	mov	r0, r4
 80119ec:	b00e      	add	sp, #56	; 0x38
 80119ee:	bd10      	pop	{r4, pc}
 80119f0:	9902      	ldr	r1, [sp, #8]
 80119f2:	aa05      	add	r2, sp, #20
 80119f4:	4620      	mov	r0, r4
 80119f6:	f001 fabb 	bl	8012f70 <uxr_init_base_object_request>
 80119fa:	4604      	mov	r4, r0
 80119fc:	a905      	add	r1, sp, #20
 80119fe:	a806      	add	r0, sp, #24
 8011a00:	f002 fd44 	bl	801448c <uxr_serialize_DELETE_Payload>
 8011a04:	4620      	mov	r0, r4
 8011a06:	b00e      	add	sp, #56	; 0x38
 8011a08:	bd10      	pop	{r4, pc}
 8011a0a:	bf00      	nop

08011a0c <uxr_common_create_entity>:
 8011a0c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011a10:	b510      	push	{r4, lr}
 8011a12:	f1bc 0f01 	cmp.w	ip, #1
 8011a16:	b08c      	sub	sp, #48	; 0x30
 8011a18:	4604      	mov	r4, r0
 8011a1a:	9202      	str	r2, [sp, #8]
 8011a1c:	bf0c      	ite	eq
 8011a1e:	f003 0201 	andeq.w	r2, r3, #1
 8011a22:	2200      	movne	r2, #0
 8011a24:	330e      	adds	r3, #14
 8011a26:	9103      	str	r1, [sp, #12]
 8011a28:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8011a2c:	441a      	add	r2, r3
 8011a2e:	ab04      	add	r3, sp, #16
 8011a30:	9101      	str	r1, [sp, #4]
 8011a32:	2101      	movs	r1, #1
 8011a34:	b292      	uxth	r2, r2
 8011a36:	9100      	str	r1, [sp, #0]
 8011a38:	9903      	ldr	r1, [sp, #12]
 8011a3a:	f001 f95d 	bl	8012cf8 <uxr_prepare_stream_to_write_submessage>
 8011a3e:	b918      	cbnz	r0, 8011a48 <uxr_common_create_entity+0x3c>
 8011a40:	4604      	mov	r4, r0
 8011a42:	4620      	mov	r0, r4
 8011a44:	b00c      	add	sp, #48	; 0x30
 8011a46:	bd10      	pop	{r4, pc}
 8011a48:	9902      	ldr	r1, [sp, #8]
 8011a4a:	4620      	mov	r0, r4
 8011a4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011a4e:	f001 fa8f 	bl	8012f70 <uxr_init_base_object_request>
 8011a52:	4604      	mov	r4, r0
 8011a54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011a56:	a804      	add	r0, sp, #16
 8011a58:	f002 fc72 	bl	8014340 <uxr_serialize_CREATE_Payload>
 8011a5c:	4620      	mov	r0, r4
 8011a5e:	b00c      	add	sp, #48	; 0x30
 8011a60:	bd10      	pop	{r4, pc}
 8011a62:	bf00      	nop

08011a64 <uxr_buffer_create_participant_bin>:
 8011a64:	b570      	push	{r4, r5, r6, lr}
 8011a66:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8011a6a:	4605      	mov	r5, r0
 8011a6c:	ac11      	add	r4, sp, #68	; 0x44
 8011a6e:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 8011a72:	2303      	movs	r3, #3
 8011a74:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 8011a78:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8011a7c:	7223      	strb	r3, [r4, #8]
 8011a7e:	2300      	movs	r3, #0
 8011a80:	2201      	movs	r2, #1
 8011a82:	f88d 3014 	strb.w	r3, [sp, #20]
 8011a86:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8011a88:	7122      	strb	r2, [r4, #4]
 8011a8a:	b1cb      	cbz	r3, 8011ac0 <uxr_buffer_create_participant_bin+0x5c>
 8011a8c:	f88d 201c 	strb.w	r2, [sp, #28]
 8011a90:	9308      	str	r3, [sp, #32]
 8011a92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011a96:	a915      	add	r1, sp, #84	; 0x54
 8011a98:	a809      	add	r0, sp, #36	; 0x24
 8011a9a:	f7ff ff23 	bl	80118e4 <ucdr_init_buffer>
 8011a9e:	a905      	add	r1, sp, #20
 8011aa0:	a809      	add	r0, sp, #36	; 0x24
 8011aa2:	f002 f803 	bl	8013aac <uxr_serialize_OBJK_DomainParticipant_Binary>
 8011aa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011aa8:	9600      	str	r6, [sp, #0]
 8011aaa:	4628      	mov	r0, r5
 8011aac:	9401      	str	r4, [sp, #4]
 8011aae:	60e3      	str	r3, [r4, #12]
 8011ab0:	b29b      	uxth	r3, r3
 8011ab2:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011ab6:	f7ff ffa9 	bl	8011a0c <uxr_common_create_entity>
 8011aba:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 8011abe:	bd70      	pop	{r4, r5, r6, pc}
 8011ac0:	f88d 301c 	strb.w	r3, [sp, #28]
 8011ac4:	e7e5      	b.n	8011a92 <uxr_buffer_create_participant_bin+0x2e>
 8011ac6:	bf00      	nop

08011ac8 <uxr_buffer_create_topic_bin>:
 8011ac8:	b570      	push	{r4, r5, r6, lr}
 8011aca:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8011ace:	4605      	mov	r5, r0
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	9105      	str	r1, [sp, #20]
 8011ad4:	a997      	add	r1, sp, #604	; 0x25c
 8011ad6:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 8011ada:	ac13      	add	r4, sp, #76	; 0x4c
 8011adc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011ae0:	2302      	movs	r3, #2
 8011ae2:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8011ae6:	f000 f9cf 	bl	8011e88 <uxr_object_id_to_raw>
 8011aea:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 8011aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011af0:	a917      	add	r1, sp, #92	; 0x5c
 8011af2:	a80b      	add	r0, sp, #44	; 0x2c
 8011af4:	9306      	str	r3, [sp, #24]
 8011af6:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 8011af8:	930a      	str	r3, [sp, #40]	; 0x28
 8011afa:	2303      	movs	r3, #3
 8011afc:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8011b00:	2301      	movs	r3, #1
 8011b02:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8011b06:	2300      	movs	r3, #0
 8011b08:	f88d 301c 	strb.w	r3, [sp, #28]
 8011b0c:	f7ff feea 	bl	80118e4 <ucdr_init_buffer>
 8011b10:	a906      	add	r1, sp, #24
 8011b12:	a80b      	add	r0, sp, #44	; 0x2c
 8011b14:	f001 ffec 	bl	8013af0 <uxr_serialize_OBJK_Topic_Binary>
 8011b18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b1a:	4628      	mov	r0, r5
 8011b1c:	9600      	str	r6, [sp, #0]
 8011b1e:	9316      	str	r3, [sp, #88]	; 0x58
 8011b20:	b29b      	uxth	r3, r3
 8011b22:	9401      	str	r4, [sp, #4]
 8011b24:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011b28:	f7ff ff70 	bl	8011a0c <uxr_common_create_entity>
 8011b2c:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 8011b30:	bd70      	pop	{r4, r5, r6, pc}
 8011b32:	bf00      	nop

08011b34 <uxr_buffer_create_publisher_bin>:
 8011b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b36:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8011b3a:	2603      	movs	r6, #3
 8011b3c:	4605      	mov	r5, r0
 8011b3e:	4618      	mov	r0, r3
 8011b40:	9105      	str	r1, [sp, #20]
 8011b42:	a992      	add	r1, sp, #584	; 0x248
 8011b44:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8011b48:	ac0e      	add	r4, sp, #56	; 0x38
 8011b4a:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8011b4e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011b52:	f000 f999 	bl	8011e88 <uxr_object_id_to_raw>
 8011b56:	2300      	movs	r3, #0
 8011b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011b5c:	a912      	add	r1, sp, #72	; 0x48
 8011b5e:	a806      	add	r0, sp, #24
 8011b60:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8011b64:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8011b68:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8011b6c:	f7ff feba 	bl	80118e4 <ucdr_init_buffer>
 8011b70:	a993      	add	r1, sp, #588	; 0x24c
 8011b72:	a806      	add	r0, sp, #24
 8011b74:	f002 f870 	bl	8013c58 <uxr_serialize_OBJK_Publisher_Binary>
 8011b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b7a:	4628      	mov	r0, r5
 8011b7c:	9700      	str	r7, [sp, #0]
 8011b7e:	9311      	str	r3, [sp, #68]	; 0x44
 8011b80:	b29b      	uxth	r3, r3
 8011b82:	9401      	str	r4, [sp, #4]
 8011b84:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011b88:	f7ff ff40 	bl	8011a0c <uxr_common_create_entity>
 8011b8c:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8011b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b92:	bf00      	nop

08011b94 <uxr_buffer_create_subscriber_bin>:
 8011b94:	b570      	push	{r4, r5, r6, lr}
 8011b96:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 8011b9a:	4605      	mov	r5, r0
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	9105      	str	r1, [sp, #20]
 8011ba0:	a992      	add	r1, sp, #584	; 0x248
 8011ba2:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 8011ba6:	ac0e      	add	r4, sp, #56	; 0x38
 8011ba8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011bac:	2304      	movs	r3, #4
 8011bae:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8011bb2:	f000 f969 	bl	8011e88 <uxr_object_id_to_raw>
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011bbc:	a912      	add	r1, sp, #72	; 0x48
 8011bbe:	a806      	add	r0, sp, #24
 8011bc0:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8011bc4:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8011bc8:	2303      	movs	r3, #3
 8011bca:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8011bce:	f7ff fe89 	bl	80118e4 <ucdr_init_buffer>
 8011bd2:	a993      	add	r1, sp, #588	; 0x24c
 8011bd4:	a806      	add	r0, sp, #24
 8011bd6:	f002 f8ef 	bl	8013db8 <uxr_serialize_OBJK_Subscriber_Binary>
 8011bda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bdc:	4628      	mov	r0, r5
 8011bde:	9600      	str	r6, [sp, #0]
 8011be0:	9311      	str	r3, [sp, #68]	; 0x44
 8011be2:	b29b      	uxth	r3, r3
 8011be4:	9401      	str	r4, [sp, #4]
 8011be6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011bea:	f7ff ff0f 	bl	8011a0c <uxr_common_create_entity>
 8011bee:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 8011bf2:	bd70      	pop	{r4, r5, r6, pc}

08011bf4 <uxr_buffer_create_datawriter_bin>:
 8011bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bf8:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8011bfc:	4606      	mov	r6, r0
 8011bfe:	4618      	mov	r0, r3
 8011c00:	2703      	movs	r7, #3
 8011c02:	ac1d      	add	r4, sp, #116	; 0x74
 8011c04:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8011c08:	9105      	str	r1, [sp, #20]
 8011c0a:	a9a1      	add	r1, sp, #644	; 0x284
 8011c0c:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8011c10:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011c14:	2305      	movs	r3, #5
 8011c16:	7123      	strb	r3, [r4, #4]
 8011c18:	f000 f936 	bl	8011e88 <uxr_object_id_to_raw>
 8011c1c:	a90e      	add	r1, sp, #56	; 0x38
 8011c1e:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8011c20:	7227      	strb	r7, [r4, #8]
 8011c22:	f000 f931 	bl	8011e88 <uxr_object_id_to_raw>
 8011c26:	2300      	movs	r3, #0
 8011c28:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8011c2c:	3d00      	subs	r5, #0
 8011c2e:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 8011c32:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8011c36:	bf18      	it	ne
 8011c38:	2501      	movne	r5, #1
 8011c3a:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8011c3e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8011c42:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8011c46:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011c4a:	2301      	movs	r3, #1
 8011c4c:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8011c50:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8011c54:	bb8a      	cbnz	r2, 8011cba <uxr_buffer_create_datawriter_bin+0xc6>
 8011c56:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8011c5a:	f04f 0c13 	mov.w	ip, #19
 8011c5e:	250b      	movs	r5, #11
 8011c60:	2221      	movs	r2, #33	; 0x21
 8011c62:	2111      	movs	r1, #17
 8011c64:	2009      	movs	r0, #9
 8011c66:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011c6a:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8011c6e:	b923      	cbnz	r3, 8011c7a <uxr_buffer_create_datawriter_bin+0x86>
 8011c70:	4672      	mov	r2, lr
 8011c72:	4661      	mov	r1, ip
 8011c74:	4628      	mov	r0, r5
 8011c76:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8011c7a:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8011c7e:	2b01      	cmp	r3, #1
 8011c80:	d025      	beq.n	8011cce <uxr_buffer_create_datawriter_bin+0xda>
 8011c82:	2b03      	cmp	r3, #3
 8011c84:	d029      	beq.n	8011cda <uxr_buffer_create_datawriter_bin+0xe6>
 8011c86:	b32b      	cbz	r3, 8011cd4 <uxr_buffer_create_datawriter_bin+0xe0>
 8011c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011c8c:	a921      	add	r1, sp, #132	; 0x84
 8011c8e:	a806      	add	r0, sp, #24
 8011c90:	f7ff fe28 	bl	80118e4 <ucdr_init_buffer>
 8011c94:	a90e      	add	r1, sp, #56	; 0x38
 8011c96:	a806      	add	r0, sp, #24
 8011c98:	f002 f940 	bl	8013f1c <uxr_serialize_OBJK_DataWriter_Binary>
 8011c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c9e:	f8cd 8000 	str.w	r8, [sp]
 8011ca2:	4630      	mov	r0, r6
 8011ca4:	9401      	str	r4, [sp, #4]
 8011ca6:	60e3      	str	r3, [r4, #12]
 8011ca8:	b29b      	uxth	r3, r3
 8011caa:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011cae:	f7ff fead 	bl	8011a0c <uxr_common_create_entity>
 8011cb2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8011cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cba:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8011cbe:	f04f 0c12 	mov.w	ip, #18
 8011cc2:	250a      	movs	r5, #10
 8011cc4:	2220      	movs	r2, #32
 8011cc6:	2110      	movs	r1, #16
 8011cc8:	2008      	movs	r0, #8
 8011cca:	2702      	movs	r7, #2
 8011ccc:	e7cd      	b.n	8011c6a <uxr_buffer_create_datawriter_bin+0x76>
 8011cce:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8011cd2:	e7d9      	b.n	8011c88 <uxr_buffer_create_datawriter_bin+0x94>
 8011cd4:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8011cd8:	e7d6      	b.n	8011c88 <uxr_buffer_create_datawriter_bin+0x94>
 8011cda:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011cde:	e7d3      	b.n	8011c88 <uxr_buffer_create_datawriter_bin+0x94>

08011ce0 <uxr_buffer_create_datareader_bin>:
 8011ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ce4:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8011ce8:	4606      	mov	r6, r0
 8011cea:	4618      	mov	r0, r3
 8011cec:	2703      	movs	r7, #3
 8011cee:	ac1f      	add	r4, sp, #124	; 0x7c
 8011cf0:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 8011cf4:	9105      	str	r1, [sp, #20]
 8011cf6:	a9a3      	add	r1, sp, #652	; 0x28c
 8011cf8:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 8011cfc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011d00:	2306      	movs	r3, #6
 8011d02:	7123      	strb	r3, [r4, #4]
 8011d04:	f000 f8c0 	bl	8011e88 <uxr_object_id_to_raw>
 8011d08:	a90e      	add	r1, sp, #56	; 0x38
 8011d0a:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 8011d0c:	7227      	strb	r7, [r4, #8]
 8011d0e:	f000 f8bb 	bl	8011e88 <uxr_object_id_to_raw>
 8011d12:	2300      	movs	r3, #0
 8011d14:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8011d18:	3d00      	subs	r5, #0
 8011d1a:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 8011d1e:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8011d22:	bf18      	it	ne
 8011d24:	2501      	movne	r5, #1
 8011d26:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8011d2a:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8011d2e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8011d32:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8011d36:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011d3a:	2301      	movs	r3, #1
 8011d3c:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8011d40:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8011d44:	bb8a      	cbnz	r2, 8011daa <uxr_buffer_create_datareader_bin+0xca>
 8011d46:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8011d4a:	f04f 0c13 	mov.w	ip, #19
 8011d4e:	250b      	movs	r5, #11
 8011d50:	2221      	movs	r2, #33	; 0x21
 8011d52:	2111      	movs	r1, #17
 8011d54:	2009      	movs	r0, #9
 8011d56:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011d5a:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 8011d5e:	b923      	cbnz	r3, 8011d6a <uxr_buffer_create_datareader_bin+0x8a>
 8011d60:	4672      	mov	r2, lr
 8011d62:	4661      	mov	r1, ip
 8011d64:	4628      	mov	r0, r5
 8011d66:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8011d6a:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 8011d6e:	2b01      	cmp	r3, #1
 8011d70:	d025      	beq.n	8011dbe <uxr_buffer_create_datareader_bin+0xde>
 8011d72:	2b03      	cmp	r3, #3
 8011d74:	d029      	beq.n	8011dca <uxr_buffer_create_datareader_bin+0xea>
 8011d76:	b32b      	cbz	r3, 8011dc4 <uxr_buffer_create_datareader_bin+0xe4>
 8011d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011d7c:	a923      	add	r1, sp, #140	; 0x8c
 8011d7e:	a806      	add	r0, sp, #24
 8011d80:	f7ff fdb0 	bl	80118e4 <ucdr_init_buffer>
 8011d84:	a90e      	add	r1, sp, #56	; 0x38
 8011d86:	a806      	add	r0, sp, #24
 8011d88:	f002 f88c 	bl	8013ea4 <uxr_serialize_OBJK_DataReader_Binary>
 8011d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d8e:	f8cd 8000 	str.w	r8, [sp]
 8011d92:	4630      	mov	r0, r6
 8011d94:	9401      	str	r4, [sp, #4]
 8011d96:	60e3      	str	r3, [r4, #12]
 8011d98:	b29b      	uxth	r3, r3
 8011d9a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011d9e:	f7ff fe35 	bl	8011a0c <uxr_common_create_entity>
 8011da2:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8011da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011daa:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8011dae:	f04f 0c12 	mov.w	ip, #18
 8011db2:	250a      	movs	r5, #10
 8011db4:	2220      	movs	r2, #32
 8011db6:	2110      	movs	r1, #16
 8011db8:	2008      	movs	r0, #8
 8011dba:	2702      	movs	r7, #2
 8011dbc:	e7cd      	b.n	8011d5a <uxr_buffer_create_datareader_bin+0x7a>
 8011dbe:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8011dc2:	e7d9      	b.n	8011d78 <uxr_buffer_create_datareader_bin+0x98>
 8011dc4:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8011dc8:	e7d6      	b.n	8011d78 <uxr_buffer_create_datareader_bin+0x98>
 8011dca:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011dce:	e7d3      	b.n	8011d78 <uxr_buffer_create_datareader_bin+0x98>

08011dd0 <uxr_buffer_create_replier_bin>:
 8011dd0:	b570      	push	{r4, r5, r6, lr}
 8011dd2:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8011dd6:	4605      	mov	r5, r0
 8011dd8:	4618      	mov	r0, r3
 8011dda:	9105      	str	r1, [sp, #20]
 8011ddc:	a999      	add	r1, sp, #612	; 0x264
 8011dde:	f89d 6294 	ldrb.w	r6, [sp, #660]	; 0x294
 8011de2:	ac15      	add	r4, sp, #84	; 0x54
 8011de4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011de8:	2308      	movs	r3, #8
 8011dea:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8011dee:	f000 f84b 	bl	8011e88 <uxr_object_id_to_raw>
 8011df2:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 8011df4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011df8:	a919      	add	r1, sp, #100	; 0x64
 8011dfa:	a80d      	add	r0, sp, #52	; 0x34
 8011dfc:	9306      	str	r3, [sp, #24]
 8011dfe:	9b9f      	ldr	r3, [sp, #636]	; 0x27c
 8011e00:	9307      	str	r3, [sp, #28]
 8011e02:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 8011e04:	9308      	str	r3, [sp, #32]
 8011e06:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8011e08:	930c      	str	r3, [sp, #48]	; 0x30
 8011e0a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011e0c:	930a      	str	r3, [sp, #40]	; 0x28
 8011e0e:	2301      	movs	r3, #1
 8011e10:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8011e14:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8011e18:	2303      	movs	r3, #3
 8011e1a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8011e1e:	f7ff fd61 	bl	80118e4 <ucdr_init_buffer>
 8011e22:	a906      	add	r1, sp, #24
 8011e24:	a80d      	add	r0, sp, #52	; 0x34
 8011e26:	f002 f8a5 	bl	8013f74 <uxr_serialize_OBJK_Replier_Binary>
 8011e2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011e2c:	4628      	mov	r0, r5
 8011e2e:	9600      	str	r6, [sp, #0]
 8011e30:	9318      	str	r3, [sp, #96]	; 0x60
 8011e32:	b29b      	uxth	r3, r3
 8011e34:	9401      	str	r4, [sp, #4]
 8011e36:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011e3a:	f7ff fde7 	bl	8011a0c <uxr_common_create_entity>
 8011e3e:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 8011e42:	bd70      	pop	{r4, r5, r6, pc}

08011e44 <uxr_object_id>:
 8011e44:	b082      	sub	sp, #8
 8011e46:	2300      	movs	r3, #0
 8011e48:	f88d 1006 	strb.w	r1, [sp, #6]
 8011e4c:	f360 030f 	bfi	r3, r0, #0, #16
 8011e50:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011e54:	f362 431f 	bfi	r3, r2, #16, #16
 8011e58:	4618      	mov	r0, r3
 8011e5a:	b002      	add	sp, #8
 8011e5c:	4770      	bx	lr
 8011e5e:	bf00      	nop

08011e60 <uxr_object_id_from_raw>:
 8011e60:	7843      	ldrb	r3, [r0, #1]
 8011e62:	b082      	sub	sp, #8
 8011e64:	7801      	ldrb	r1, [r0, #0]
 8011e66:	2000      	movs	r0, #0
 8011e68:	091a      	lsrs	r2, r3, #4
 8011e6a:	f003 030f 	and.w	r3, r3, #15
 8011e6e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8011e72:	f88d 3006 	strb.w	r3, [sp, #6]
 8011e76:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011e7a:	f362 000f 	bfi	r0, r2, #0, #16
 8011e7e:	f363 401f 	bfi	r0, r3, #16, #16
 8011e82:	b002      	add	sp, #8
 8011e84:	4770      	bx	lr
 8011e86:	bf00      	nop

08011e88 <uxr_object_id_to_raw>:
 8011e88:	4602      	mov	r2, r0
 8011e8a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8011e8e:	b082      	sub	sp, #8
 8011e90:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8011e94:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8011e98:	f881 c000 	strb.w	ip, [r1]
 8011e9c:	7048      	strb	r0, [r1, #1]
 8011e9e:	b002      	add	sp, #8
 8011ea0:	4770      	bx	lr
 8011ea2:	bf00      	nop

08011ea4 <on_get_fragmentation_info>:
 8011ea4:	b500      	push	{lr}
 8011ea6:	b08b      	sub	sp, #44	; 0x2c
 8011ea8:	4601      	mov	r1, r0
 8011eaa:	2204      	movs	r2, #4
 8011eac:	a802      	add	r0, sp, #8
 8011eae:	f7ff fd19 	bl	80118e4 <ucdr_init_buffer>
 8011eb2:	f10d 0305 	add.w	r3, sp, #5
 8011eb6:	f10d 0206 	add.w	r2, sp, #6
 8011eba:	a901      	add	r1, sp, #4
 8011ebc:	a802      	add	r0, sp, #8
 8011ebe:	f001 f9e1 	bl	8013284 <uxr_read_submessage_header>
 8011ec2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011ec6:	2b0d      	cmp	r3, #13
 8011ec8:	d003      	beq.n	8011ed2 <on_get_fragmentation_info+0x2e>
 8011eca:	2000      	movs	r0, #0
 8011ecc:	b00b      	add	sp, #44	; 0x2c
 8011ece:	f85d fb04 	ldr.w	pc, [sp], #4
 8011ed2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011ed6:	f013 0f02 	tst.w	r3, #2
 8011eda:	bf14      	ite	ne
 8011edc:	2002      	movne	r0, #2
 8011ede:	2001      	moveq	r0, #1
 8011ee0:	b00b      	add	sp, #44	; 0x2c
 8011ee2:	f85d fb04 	ldr.w	pc, [sp], #4
 8011ee6:	bf00      	nop

08011ee8 <read_submessage_get_info>:
 8011ee8:	b570      	push	{r4, r5, r6, lr}
 8011eea:	2500      	movs	r5, #0
 8011eec:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8011ef0:	460e      	mov	r6, r1
 8011ef2:	4604      	mov	r4, r0
 8011ef4:	f44f 7224 	mov.w	r2, #656	; 0x290
 8011ef8:	4629      	mov	r1, r5
 8011efa:	a810      	add	r0, sp, #64	; 0x40
 8011efc:	9503      	str	r5, [sp, #12]
 8011efe:	9504      	str	r5, [sp, #16]
 8011f00:	f00b fc8c 	bl	801d81c <memset>
 8011f04:	a903      	add	r1, sp, #12
 8011f06:	4630      	mov	r0, r6
 8011f08:	f002 faaa 	bl	8014460 <uxr_deserialize_GET_INFO_Payload>
 8011f0c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8011f10:	4620      	mov	r0, r4
 8011f12:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011f16:	f001 f823 	bl	8012f60 <uxr_session_header_offset>
 8011f1a:	462b      	mov	r3, r5
 8011f1c:	220c      	movs	r2, #12
 8011f1e:	a905      	add	r1, sp, #20
 8011f20:	9000      	str	r0, [sp, #0]
 8011f22:	a808      	add	r0, sp, #32
 8011f24:	f7ff fccc 	bl	80118c0 <ucdr_init_buffer_origin_offset>
 8011f28:	a910      	add	r1, sp, #64	; 0x40
 8011f2a:	a808      	add	r0, sp, #32
 8011f2c:	f002 fb0c 	bl	8014548 <uxr_serialize_INFO_Payload>
 8011f30:	9b08      	ldr	r3, [sp, #32]
 8011f32:	462a      	mov	r2, r5
 8011f34:	4629      	mov	r1, r5
 8011f36:	4620      	mov	r0, r4
 8011f38:	f000 ffbe 	bl	8012eb8 <uxr_stamp_session_header>
 8011f3c:	a808      	add	r0, sp, #32
 8011f3e:	f7ff fcff 	bl	8011940 <ucdr_buffer_length>
 8011f42:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011f44:	4602      	mov	r2, r0
 8011f46:	a905      	add	r1, sp, #20
 8011f48:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011f4c:	47a0      	blx	r4
 8011f4e:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 8011f52:	bd70      	pop	{r4, r5, r6, pc}

08011f54 <write_submessage_acknack.isra.0>:
 8011f54:	b570      	push	{r4, r5, r6, lr}
 8011f56:	b092      	sub	sp, #72	; 0x48
 8011f58:	4605      	mov	r5, r0
 8011f5a:	460e      	mov	r6, r1
 8011f5c:	4614      	mov	r4, r2
 8011f5e:	f000 ffff 	bl	8012f60 <uxr_session_header_offset>
 8011f62:	a905      	add	r1, sp, #20
 8011f64:	9000      	str	r0, [sp, #0]
 8011f66:	2300      	movs	r3, #0
 8011f68:	a80a      	add	r0, sp, #40	; 0x28
 8011f6a:	2211      	movs	r2, #17
 8011f6c:	f7ff fca8 	bl	80118c0 <ucdr_init_buffer_origin_offset>
 8011f70:	2218      	movs	r2, #24
 8011f72:	2300      	movs	r3, #0
 8011f74:	210a      	movs	r1, #10
 8011f76:	fb02 5404 	mla	r4, r2, r4, r5
 8011f7a:	a80a      	add	r0, sp, #40	; 0x28
 8011f7c:	2205      	movs	r2, #5
 8011f7e:	3450      	adds	r4, #80	; 0x50
 8011f80:	f001 f966 	bl	8013250 <uxr_buffer_submessage_header>
 8011f84:	a903      	add	r1, sp, #12
 8011f86:	4620      	mov	r0, r4
 8011f88:	f009 f874 	bl	801b074 <uxr_compute_acknack>
 8011f8c:	ba40      	rev16	r0, r0
 8011f8e:	a903      	add	r1, sp, #12
 8011f90:	f88d 6010 	strb.w	r6, [sp, #16]
 8011f94:	f8ad 000e 	strh.w	r0, [sp, #14]
 8011f98:	a80a      	add	r0, sp, #40	; 0x28
 8011f9a:	f002 fb47 	bl	801462c <uxr_serialize_ACKNACK_Payload>
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011fa2:	4628      	mov	r0, r5
 8011fa4:	4611      	mov	r1, r2
 8011fa6:	f000 ff87 	bl	8012eb8 <uxr_stamp_session_header>
 8011faa:	a80a      	add	r0, sp, #40	; 0x28
 8011fac:	f7ff fcc8 	bl	8011940 <ucdr_buffer_length>
 8011fb0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8011fb2:	4602      	mov	r2, r0
 8011fb4:	a905      	add	r1, sp, #20
 8011fb6:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011fba:	47a0      	blx	r4
 8011fbc:	b012      	add	sp, #72	; 0x48
 8011fbe:	bd70      	pop	{r4, r5, r6, pc}

08011fc0 <uxr_init_session>:
 8011fc0:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8011ff8 <uxr_init_session+0x38>
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	b510      	push	{r4, lr}
 8011fc8:	4604      	mov	r4, r0
 8011fca:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8011fce:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 8011fd2:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 8011fd6:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 8011fda:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 8011fde:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 8011fe2:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 8011fe6:	2181      	movs	r1, #129	; 0x81
 8011fe8:	f000 feca 	bl	8012d80 <uxr_init_session_info>
 8011fec:	f104 0008 	add.w	r0, r4, #8
 8011ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ff4:	f001 b848 	b.w	8013088 <uxr_init_stream_storage>
	...

08012000 <uxr_set_status_callback>:
 8012000:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8012004:	4770      	bx	lr
 8012006:	bf00      	nop

08012008 <uxr_set_topic_callback>:
 8012008:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 801200c:	4770      	bx	lr
 801200e:	bf00      	nop

08012010 <uxr_set_request_callback>:
 8012010:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8012014:	4770      	bx	lr
 8012016:	bf00      	nop

08012018 <uxr_set_reply_callback>:
 8012018:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 801201c:	4770      	bx	lr
 801201e:	bf00      	nop

08012020 <uxr_create_output_best_effort_stream>:
 8012020:	b510      	push	{r4, lr}
 8012022:	4604      	mov	r4, r0
 8012024:	b084      	sub	sp, #16
 8012026:	e9cd 2100 	strd	r2, r1, [sp]
 801202a:	f000 ff99 	bl	8012f60 <uxr_session_header_offset>
 801202e:	4603      	mov	r3, r0
 8012030:	f104 0008 	add.w	r0, r4, #8
 8012034:	e9dd 2100 	ldrd	r2, r1, [sp]
 8012038:	b004      	add	sp, #16
 801203a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801203e:	f001 b869 	b.w	8013114 <uxr_add_output_best_effort_buffer>
 8012042:	bf00      	nop

08012044 <uxr_create_output_reliable_stream>:
 8012044:	b530      	push	{r4, r5, lr}
 8012046:	b089      	sub	sp, #36	; 0x24
 8012048:	4604      	mov	r4, r0
 801204a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801204e:	9303      	str	r3, [sp, #12]
 8012050:	f000 ff86 	bl	8012f60 <uxr_session_header_offset>
 8012054:	4605      	mov	r5, r0
 8012056:	9905      	ldr	r1, [sp, #20]
 8012058:	f104 0008 	add.w	r0, r4, #8
 801205c:	9500      	str	r5, [sp, #0]
 801205e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8012062:	f001 f86b 	bl	801313c <uxr_add_output_reliable_buffer>
 8012066:	2200      	movs	r2, #0
 8012068:	fa5f fc80 	uxtb.w	ip, r0
 801206c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8012070:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8012074:	0e03      	lsrs	r3, r0, #24
 8012076:	f36c 0207 	bfi	r2, ip, #0, #8
 801207a:	f364 220f 	bfi	r2, r4, #8, #8
 801207e:	f361 4217 	bfi	r2, r1, #16, #8
 8012082:	f363 621f 	bfi	r2, r3, #24, #8
 8012086:	4610      	mov	r0, r2
 8012088:	b009      	add	sp, #36	; 0x24
 801208a:	bd30      	pop	{r4, r5, pc}

0801208c <uxr_create_input_best_effort_stream>:
 801208c:	b082      	sub	sp, #8
 801208e:	3008      	adds	r0, #8
 8012090:	b002      	add	sp, #8
 8012092:	f001 b86d 	b.w	8013170 <uxr_add_input_best_effort_buffer>
 8012096:	bf00      	nop

08012098 <uxr_create_input_reliable_stream>:
 8012098:	b510      	push	{r4, lr}
 801209a:	4c0c      	ldr	r4, [pc, #48]	; (80120cc <uxr_create_input_reliable_stream+0x34>)
 801209c:	b084      	sub	sp, #16
 801209e:	3008      	adds	r0, #8
 80120a0:	9400      	str	r4, [sp, #0]
 80120a2:	f001 f87b 	bl	801319c <uxr_add_input_reliable_buffer>
 80120a6:	2200      	movs	r2, #0
 80120a8:	fa5f fe80 	uxtb.w	lr, r0
 80120ac:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 80120b0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80120b4:	0e03      	lsrs	r3, r0, #24
 80120b6:	f36e 0207 	bfi	r2, lr, #0, #8
 80120ba:	f36c 220f 	bfi	r2, ip, #8, #8
 80120be:	f361 4217 	bfi	r2, r1, #16, #8
 80120c2:	f363 621f 	bfi	r2, r3, #24, #8
 80120c6:	4610      	mov	r0, r2
 80120c8:	b004      	add	sp, #16
 80120ca:	bd10      	pop	{r4, pc}
 80120cc:	08011ea5 	.word	0x08011ea5

080120d0 <uxr_epoch_nanos>:
 80120d0:	b510      	push	{r4, lr}
 80120d2:	4604      	mov	r4, r0
 80120d4:	f001 f91e 	bl	8013314 <uxr_nanos>
 80120d8:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 80120dc:	1ac0      	subs	r0, r0, r3
 80120de:	eb61 0102 	sbc.w	r1, r1, r2
 80120e2:	bd10      	pop	{r4, pc}

080120e4 <uxr_flash_output_streams>:
 80120e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120e8:	7e03      	ldrb	r3, [r0, #24]
 80120ea:	b084      	sub	sp, #16
 80120ec:	4604      	mov	r4, r0
 80120ee:	b1fb      	cbz	r3, 8012130 <uxr_flash_output_streams+0x4c>
 80120f0:	f04f 0900 	mov.w	r9, #0
 80120f4:	f10d 0802 	add.w	r8, sp, #2
 80120f8:	af03      	add	r7, sp, #12
 80120fa:	ae02      	add	r6, sp, #8
 80120fc:	4648      	mov	r0, r9
 80120fe:	2201      	movs	r2, #1
 8012100:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8012104:	4611      	mov	r1, r2
 8012106:	3508      	adds	r5, #8
 8012108:	f000 ff64 	bl	8012fd4 <uxr_stream_id>
 801210c:	4684      	mov	ip, r0
 801210e:	4643      	mov	r3, r8
 8012110:	463a      	mov	r2, r7
 8012112:	4631      	mov	r1, r6
 8012114:	4628      	mov	r0, r5
 8012116:	f8cd c004 	str.w	ip, [sp, #4]
 801211a:	f009 f835 	bl	801b188 <uxr_prepare_best_effort_buffer_to_send>
 801211e:	2800      	cmp	r0, #0
 8012120:	d13d      	bne.n	801219e <uxr_flash_output_streams+0xba>
 8012122:	f109 0901 	add.w	r9, r9, #1
 8012126:	7e23      	ldrb	r3, [r4, #24]
 8012128:	fa5f f089 	uxtb.w	r0, r9
 801212c:	4283      	cmp	r3, r0
 801212e:	d8e6      	bhi.n	80120fe <uxr_flash_output_streams+0x1a>
 8012130:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8012134:	b383      	cbz	r3, 8012198 <uxr_flash_output_streams+0xb4>
 8012136:	f04f 0900 	mov.w	r9, #0
 801213a:	f10d 0802 	add.w	r8, sp, #2
 801213e:	af03      	add	r7, sp, #12
 8012140:	ae02      	add	r6, sp, #8
 8012142:	4648      	mov	r0, r9
 8012144:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8012148:	2201      	movs	r2, #1
 801214a:	2102      	movs	r1, #2
 801214c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8012150:	f000 ff40 	bl	8012fd4 <uxr_stream_id>
 8012154:	9001      	str	r0, [sp, #4]
 8012156:	3520      	adds	r5, #32
 8012158:	e00c      	b.n	8012174 <uxr_flash_output_streams+0x90>
 801215a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801215e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012162:	9b02      	ldr	r3, [sp, #8]
 8012164:	f000 fea8 	bl	8012eb8 <uxr_stamp_session_header>
 8012168:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801216a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801216e:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8012172:	47d0      	blx	sl
 8012174:	4643      	mov	r3, r8
 8012176:	463a      	mov	r2, r7
 8012178:	4631      	mov	r1, r6
 801217a:	4628      	mov	r0, r5
 801217c:	f009 fa28 	bl	801b5d0 <uxr_prepare_next_reliable_buffer_to_send>
 8012180:	4603      	mov	r3, r0
 8012182:	4620      	mov	r0, r4
 8012184:	2b00      	cmp	r3, #0
 8012186:	d1e8      	bne.n	801215a <uxr_flash_output_streams+0x76>
 8012188:	f109 0901 	add.w	r9, r9, #1
 801218c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8012190:	fa5f f089 	uxtb.w	r0, r9
 8012194:	4283      	cmp	r3, r0
 8012196:	d8d5      	bhi.n	8012144 <uxr_flash_output_streams+0x60>
 8012198:	b004      	add	sp, #16
 801219a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801219e:	9b02      	ldr	r3, [sp, #8]
 80121a0:	4620      	mov	r0, r4
 80121a2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80121a6:	f109 0901 	add.w	r9, r9, #1
 80121aa:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80121ae:	f000 fe83 	bl	8012eb8 <uxr_stamp_session_header>
 80121b2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80121b4:	9a03      	ldr	r2, [sp, #12]
 80121b6:	685d      	ldr	r5, [r3, #4]
 80121b8:	6818      	ldr	r0, [r3, #0]
 80121ba:	9902      	ldr	r1, [sp, #8]
 80121bc:	47a8      	blx	r5
 80121be:	7e23      	ldrb	r3, [r4, #24]
 80121c0:	fa5f f089 	uxtb.w	r0, r9
 80121c4:	4283      	cmp	r3, r0
 80121c6:	d89a      	bhi.n	80120fe <uxr_flash_output_streams+0x1a>
 80121c8:	e7b2      	b.n	8012130 <uxr_flash_output_streams+0x4c>
 80121ca:	bf00      	nop

080121cc <read_submessage_info>:
 80121cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121d0:	460d      	mov	r5, r1
 80121d2:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80121d6:	4606      	mov	r6, r0
 80121d8:	4669      	mov	r1, sp
 80121da:	4628      	mov	r0, r5
 80121dc:	f002 f852 	bl	8014284 <uxr_deserialize_BaseObjectReply>
 80121e0:	4604      	mov	r4, r0
 80121e2:	a902      	add	r1, sp, #8
 80121e4:	4628      	mov	r0, r5
 80121e6:	f89d 7005 	ldrb.w	r7, [sp, #5]
 80121ea:	f7fd fed3 	bl	800ff94 <ucdr_deserialize_bool>
 80121ee:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80121f2:	4004      	ands	r4, r0
 80121f4:	b2e4      	uxtb	r4, r4
 80121f6:	b95b      	cbnz	r3, 8012210 <read_submessage_info+0x44>
 80121f8:	a987      	add	r1, sp, #540	; 0x21c
 80121fa:	4628      	mov	r0, r5
 80121fc:	f7fd feca 	bl	800ff94 <ucdr_deserialize_bool>
 8012200:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 8012204:	4680      	mov	r8, r0
 8012206:	b94b      	cbnz	r3, 801221c <read_submessage_info+0x50>
 8012208:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 801220c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012210:	a903      	add	r1, sp, #12
 8012212:	4628      	mov	r0, r5
 8012214:	f001 fee2 	bl	8013fdc <uxr_deserialize_ObjectVariant>
 8012218:	4004      	ands	r4, r0
 801221a:	e7ed      	b.n	80121f8 <read_submessage_info+0x2c>
 801221c:	a988      	add	r1, sp, #544	; 0x220
 801221e:	4628      	mov	r0, r5
 8012220:	f7fd fee6 	bl	800fff0 <ucdr_deserialize_uint8_t>
 8012224:	ea14 0f08 	tst.w	r4, r8
 8012228:	d0ee      	beq.n	8012208 <read_submessage_info+0x3c>
 801222a:	2800      	cmp	r0, #0
 801222c:	d0ec      	beq.n	8012208 <read_submessage_info+0x3c>
 801222e:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8012232:	2b0d      	cmp	r3, #13
 8012234:	d1e8      	bne.n	8012208 <read_submessage_info+0x3c>
 8012236:	a98a      	add	r1, sp, #552	; 0x228
 8012238:	4628      	mov	r0, r5
 801223a:	f7fe fcff 	bl	8010c3c <ucdr_deserialize_int16_t>
 801223e:	b138      	cbz	r0, 8012250 <read_submessage_info+0x84>
 8012240:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 8012244:	2b00      	cmp	r3, #0
 8012246:	dd06      	ble.n	8012256 <read_submessage_info+0x8a>
 8012248:	2f00      	cmp	r7, #0
 801224a:	bf14      	ite	ne
 801224c:	2001      	movne	r0, #1
 801224e:	2002      	moveq	r0, #2
 8012250:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 8012254:	e7d8      	b.n	8012208 <read_submessage_info+0x3c>
 8012256:	2000      	movs	r0, #0
 8012258:	e7fa      	b.n	8012250 <read_submessage_info+0x84>
 801225a:	bf00      	nop

0801225c <read_submessage_list>:
 801225c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012260:	4604      	mov	r4, r0
 8012262:	b097      	sub	sp, #92	; 0x5c
 8012264:	460d      	mov	r5, r1
 8012266:	4ec1      	ldr	r6, [pc, #772]	; (801256c <read_submessage_list+0x310>)
 8012268:	9209      	str	r2, [sp, #36]	; 0x24
 801226a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801226e:	aa0c      	add	r2, sp, #48	; 0x30
 8012270:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8012274:	4628      	mov	r0, r5
 8012276:	f001 f805 	bl	8013284 <uxr_read_submessage_header>
 801227a:	2800      	cmp	r0, #0
 801227c:	f000 8142 	beq.w	8012504 <read_submessage_list+0x2a8>
 8012280:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8012284:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8012288:	3b02      	subs	r3, #2
 801228a:	2b0d      	cmp	r3, #13
 801228c:	d8ed      	bhi.n	801226a <read_submessage_list+0xe>
 801228e:	a101      	add	r1, pc, #4	; (adr r1, 8012294 <read_submessage_list+0x38>)
 8012290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012294:	080124fb 	.word	0x080124fb
 8012298:	0801226b 	.word	0x0801226b
 801229c:	080124eb 	.word	0x080124eb
 80122a0:	08012489 	.word	0x08012489
 80122a4:	0801247f 	.word	0x0801247f
 80122a8:	0801226b 	.word	0x0801226b
 80122ac:	0801226b 	.word	0x0801226b
 80122b0:	080123d5 	.word	0x080123d5
 80122b4:	08012367 	.word	0x08012367
 80122b8:	08012327 	.word	0x08012327
 80122bc:	0801226b 	.word	0x0801226b
 80122c0:	0801226b 	.word	0x0801226b
 80122c4:	0801226b 	.word	0x0801226b
 80122c8:	080122cd 	.word	0x080122cd
 80122cc:	a910      	add	r1, sp, #64	; 0x40
 80122ce:	4628      	mov	r0, r5
 80122d0:	f002 fa00 	bl	80146d4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80122d4:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 80122d8:	f1b8 0f00 	cmp.w	r8, #0
 80122dc:	f000 811a 	beq.w	8012514 <read_submessage_list+0x2b8>
 80122e0:	f001 f818 	bl	8013314 <uxr_nanos>
 80122e4:	4602      	mov	r2, r0
 80122e6:	460b      	mov	r3, r1
 80122e8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 80122ec:	2100      	movs	r1, #0
 80122ee:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80122f0:	9006      	str	r0, [sp, #24]
 80122f2:	468c      	mov	ip, r1
 80122f4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80122f6:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80122fa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80122fc:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8012300:	468c      	mov	ip, r1
 8012302:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012304:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8012308:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 801230c:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 8012310:	fbc7 0106 	smlal	r0, r1, r7, r6
 8012314:	e9cd 0100 	strd	r0, r1, [sp]
 8012318:	4620      	mov	r0, r4
 801231a:	47c0      	blx	r8
 801231c:	f04f 0301 	mov.w	r3, #1
 8012320:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8012324:	e7a1      	b.n	801226a <read_submessage_list+0xe>
 8012326:	a910      	add	r1, sp, #64	; 0x40
 8012328:	4628      	mov	r0, r5
 801232a:	f002 f9bf 	bl	80146ac <uxr_deserialize_HEARTBEAT_Payload>
 801232e:	2100      	movs	r1, #0
 8012330:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8012334:	f000 fe7c 	bl	8013030 <uxr_stream_id_from_raw>
 8012338:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801233c:	900f      	str	r0, [sp, #60]	; 0x3c
 801233e:	f104 0008 	add.w	r0, r4, #8
 8012342:	4641      	mov	r1, r8
 8012344:	f000 ff62 	bl	801320c <uxr_get_input_reliable_stream>
 8012348:	2800      	cmp	r0, #0
 801234a:	d08e      	beq.n	801226a <read_submessage_list+0xe>
 801234c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8012350:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8012354:	f008 fe82 	bl	801b05c <uxr_process_heartbeat>
 8012358:	4642      	mov	r2, r8
 801235a:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 801235e:	4620      	mov	r0, r4
 8012360:	f7ff fdf8 	bl	8011f54 <write_submessage_acknack.isra.0>
 8012364:	e781      	b.n	801226a <read_submessage_list+0xe>
 8012366:	a910      	add	r1, sp, #64	; 0x40
 8012368:	4628      	mov	r0, r5
 801236a:	f002 f977 	bl	801465c <uxr_deserialize_ACKNACK_Payload>
 801236e:	2100      	movs	r1, #0
 8012370:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8012374:	f000 fe5c 	bl	8013030 <uxr_stream_id_from_raw>
 8012378:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801237c:	900d      	str	r0, [sp, #52]	; 0x34
 801237e:	f104 0008 	add.w	r0, r4, #8
 8012382:	f000 ff2d 	bl	80131e0 <uxr_get_output_reliable_stream>
 8012386:	4680      	mov	r8, r0
 8012388:	2800      	cmp	r0, #0
 801238a:	f43f af6e 	beq.w	801226a <read_submessage_list+0xe>
 801238e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8012392:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8012396:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 801239a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801239e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80123a2:	b289      	uxth	r1, r1
 80123a4:	f009 f9bc 	bl	801b720 <uxr_process_acknack>
 80123a8:	4640      	mov	r0, r8
 80123aa:	f009 f97d 	bl	801b6a8 <uxr_begin_output_nack_buffer_it>
 80123ae:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 80123b2:	e005      	b.n	80123c0 <read_submessage_list+0x164>
 80123b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80123b6:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 80123ba:	e9d3 0900 	ldrd	r0, r9, [r3]
 80123be:	47c8      	blx	r9
 80123c0:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 80123c4:	aa0f      	add	r2, sp, #60	; 0x3c
 80123c6:	4651      	mov	r1, sl
 80123c8:	4640      	mov	r0, r8
 80123ca:	f009 f96f 	bl	801b6ac <uxr_next_reliable_nack_buffer_to_send>
 80123ce:	2800      	cmp	r0, #0
 80123d0:	d1f0      	bne.n	80123b4 <read_submessage_list+0x158>
 80123d2:	e74a      	b.n	801226a <read_submessage_list+0xe>
 80123d4:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80123d8:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 80123dc:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 80123e0:	4628      	mov	r0, r5
 80123e2:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 80123e6:	4651      	mov	r1, sl
 80123e8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80123ec:	f1a8 0804 	sub.w	r8, r8, #4
 80123f0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 80123f4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 80123f8:	fa1f f888 	uxth.w	r8, r8
 80123fc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8012400:	f009 090e 	and.w	r9, r9, #14
 8012404:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8012408:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 801240c:	f001 fe88 	bl	8014120 <uxr_deserialize_BaseObjectRequest>
 8012410:	4650      	mov	r0, sl
 8012412:	a90f      	add	r1, sp, #60	; 0x3c
 8012414:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8012418:	f000 fdca 	bl	8012fb0 <uxr_parse_base_object_request>
 801241c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801241e:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 8012422:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 8012426:	9110      	str	r1, [sp, #64]	; 0x40
 8012428:	f1bb 0f00 	cmp.w	fp, #0
 801242c:	d006      	beq.n	801243c <read_submessage_list+0x1e0>
 801242e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8012432:	4652      	mov	r2, sl
 8012434:	4620      	mov	r0, r4
 8012436:	9300      	str	r3, [sp, #0]
 8012438:	2300      	movs	r3, #0
 801243a:	47d8      	blx	fp
 801243c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 801243e:	b182      	cbz	r2, 8012462 <read_submessage_list+0x206>
 8012440:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8012442:	f04f 0c00 	mov.w	ip, #0
 8012446:	3902      	subs	r1, #2
 8012448:	e003      	b.n	8012452 <read_submessage_list+0x1f6>
 801244a:	f10c 0c01 	add.w	ip, ip, #1
 801244e:	4594      	cmp	ip, r2
 8012450:	d007      	beq.n	8012462 <read_submessage_list+0x206>
 8012452:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8012456:	4553      	cmp	r3, sl
 8012458:	d1f7      	bne.n	801244a <read_submessage_list+0x1ee>
 801245a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801245c:	2200      	movs	r2, #0
 801245e:	f803 200c 	strb.w	r2, [r3, ip]
 8012462:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8012466:	464b      	mov	r3, r9
 8012468:	4642      	mov	r2, r8
 801246a:	4620      	mov	r0, r4
 801246c:	9102      	str	r1, [sp, #8]
 801246e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012470:	9101      	str	r1, [sp, #4]
 8012472:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012474:	9100      	str	r1, [sp, #0]
 8012476:	4629      	mov	r1, r5
 8012478:	f009 fa14 	bl	801b8a4 <read_submessage_format>
 801247c:	e6f5      	b.n	801226a <read_submessage_list+0xe>
 801247e:	4629      	mov	r1, r5
 8012480:	4620      	mov	r0, r4
 8012482:	f7ff fea3 	bl	80121cc <read_submessage_info>
 8012486:	e6f0      	b.n	801226a <read_submessage_list+0xe>
 8012488:	2a00      	cmp	r2, #0
 801248a:	d03e      	beq.n	801250a <read_submessage_list+0x2ae>
 801248c:	a910      	add	r1, sp, #64	; 0x40
 801248e:	4628      	mov	r0, r5
 8012490:	f002 f83c 	bl	801450c <uxr_deserialize_STATUS_Payload>
 8012494:	a90e      	add	r1, sp, #56	; 0x38
 8012496:	aa0d      	add	r2, sp, #52	; 0x34
 8012498:	a810      	add	r0, sp, #64	; 0x40
 801249a:	f000 fd89 	bl	8012fb0 <uxr_parse_base_object_request>
 801249e:	990e      	ldr	r1, [sp, #56]	; 0x38
 80124a0:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 80124a4:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 80124a8:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 80124ac:	910f      	str	r1, [sp, #60]	; 0x3c
 80124ae:	f1ba 0f00 	cmp.w	sl, #0
 80124b2:	d006      	beq.n	80124c2 <read_submessage_list+0x266>
 80124b4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80124b8:	4642      	mov	r2, r8
 80124ba:	4620      	mov	r0, r4
 80124bc:	9300      	str	r3, [sp, #0]
 80124be:	464b      	mov	r3, r9
 80124c0:	47d0      	blx	sl
 80124c2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80124c4:	2a00      	cmp	r2, #0
 80124c6:	f43f aed0 	beq.w	801226a <read_submessage_list+0xe>
 80124ca:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80124cc:	2100      	movs	r1, #0
 80124ce:	3802      	subs	r0, #2
 80124d0:	e003      	b.n	80124da <read_submessage_list+0x27e>
 80124d2:	3101      	adds	r1, #1
 80124d4:	4291      	cmp	r1, r2
 80124d6:	f43f aec8 	beq.w	801226a <read_submessage_list+0xe>
 80124da:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80124de:	4543      	cmp	r3, r8
 80124e0:	d1f7      	bne.n	80124d2 <read_submessage_list+0x276>
 80124e2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80124e4:	f803 9001 	strb.w	r9, [r3, r1]
 80124e8:	e6bf      	b.n	801226a <read_submessage_list+0xe>
 80124ea:	2a00      	cmp	r2, #0
 80124ec:	f47f aebd 	bne.w	801226a <read_submessage_list+0xe>
 80124f0:	4629      	mov	r1, r5
 80124f2:	4620      	mov	r0, r4
 80124f4:	f000 fca0 	bl	8012e38 <uxr_read_create_session_status>
 80124f8:	e6b7      	b.n	801226a <read_submessage_list+0xe>
 80124fa:	4629      	mov	r1, r5
 80124fc:	4620      	mov	r0, r4
 80124fe:	f7ff fcf3 	bl	8011ee8 <read_submessage_get_info>
 8012502:	e6b2      	b.n	801226a <read_submessage_list+0xe>
 8012504:	b017      	add	sp, #92	; 0x5c
 8012506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801250a:	4629      	mov	r1, r5
 801250c:	4620      	mov	r0, r4
 801250e:	f000 fca1 	bl	8012e54 <uxr_read_delete_session_status>
 8012512:	e6aa      	b.n	801226a <read_submessage_list+0xe>
 8012514:	f000 fefe 	bl	8013314 <uxr_nanos>
 8012518:	4642      	mov	r2, r8
 801251a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801251c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801251e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8012522:	1818      	adds	r0, r3, r0
 8012524:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8012526:	eb42 0101 	adc.w	r1, r2, r1
 801252a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801252c:	4642      	mov	r2, r8
 801252e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8012532:	469c      	mov	ip, r3
 8012534:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 8012538:	fbc3 7806 	smlal	r7, r8, r3, r6
 801253c:	4643      	mov	r3, r8
 801253e:	eb1c 0c07 	adds.w	ip, ip, r7
 8012542:	eb42 0203 	adc.w	r2, r2, r3
 8012546:	ebb0 030c 	subs.w	r3, r0, ip
 801254a:	eb61 0202 	sbc.w	r2, r1, r2
 801254e:	2a00      	cmp	r2, #0
 8012550:	db08      	blt.n	8012564 <read_submessage_list+0x308>
 8012552:	085b      	lsrs	r3, r3, #1
 8012554:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8012558:	1052      	asrs	r2, r2, #1
 801255a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 801255e:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 8012562:	e6db      	b.n	801231c <read_submessage_list+0xc0>
 8012564:	3301      	adds	r3, #1
 8012566:	f142 0200 	adc.w	r2, r2, #0
 801256a:	e7f2      	b.n	8012552 <read_submessage_list+0x2f6>
 801256c:	3b9aca00 	.word	0x3b9aca00

08012570 <listen_message_reliably>:
 8012570:	1e0b      	subs	r3, r1, #0
 8012572:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012576:	bfb8      	it	lt
 8012578:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 801257c:	b09d      	sub	sp, #116	; 0x74
 801257e:	4680      	mov	r8, r0
 8012580:	9305      	str	r3, [sp, #20]
 8012582:	f000 feab 	bl	80132dc <uxr_millis>
 8012586:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 801258a:	4681      	mov	r9, r0
 801258c:	2a00      	cmp	r2, #0
 801258e:	f000 809a 	beq.w	80126c6 <listen_message_reliably+0x156>
 8012592:	2600      	movs	r6, #0
 8012594:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012598:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 801259c:	460f      	mov	r7, r1
 801259e:	4630      	mov	r0, r6
 80125a0:	9303      	str	r3, [sp, #12]
 80125a2:	e00e      	b.n	80125c2 <listen_message_reliably+0x52>
 80125a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80125a6:	3601      	adds	r6, #1
 80125a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125aa:	455a      	cmp	r2, fp
 80125ac:	9903      	ldr	r1, [sp, #12]
 80125ae:	b2f0      	uxtb	r0, r6
 80125b0:	eb73 0101 	sbcs.w	r1, r3, r1
 80125b4:	da01      	bge.n	80125ba <listen_message_reliably+0x4a>
 80125b6:	4693      	mov	fp, r2
 80125b8:	9303      	str	r3, [sp, #12]
 80125ba:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 80125be:	4283      	cmp	r3, r0
 80125c0:	d95f      	bls.n	8012682 <listen_message_reliably+0x112>
 80125c2:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80125c6:	2102      	movs	r1, #2
 80125c8:	2201      	movs	r2, #1
 80125ca:	00e4      	lsls	r4, r4, #3
 80125cc:	f000 fd02 	bl	8012fd4 <uxr_stream_id>
 80125d0:	4601      	mov	r1, r0
 80125d2:	f104 0520 	add.w	r5, r4, #32
 80125d6:	463b      	mov	r3, r7
 80125d8:	464a      	mov	r2, r9
 80125da:	9109      	str	r1, [sp, #36]	; 0x24
 80125dc:	4445      	add	r5, r8
 80125de:	4628      	mov	r0, r5
 80125e0:	f009 f836 	bl	801b650 <uxr_update_output_stream_heartbeat_timestamp>
 80125e4:	eb08 0304 	add.w	r3, r8, r4
 80125e8:	2800      	cmp	r0, #0
 80125ea:	d0db      	beq.n	80125a4 <listen_message_reliably+0x34>
 80125ec:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 80125f0:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 80125f4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80125f8:	4640      	mov	r0, r8
 80125fa:	3501      	adds	r5, #1
 80125fc:	4444      	add	r4, r8
 80125fe:	9304      	str	r3, [sp, #16]
 8012600:	f000 fcae 	bl	8012f60 <uxr_session_header_offset>
 8012604:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8012608:	2300      	movs	r3, #0
 801260a:	2211      	movs	r2, #17
 801260c:	a90c      	add	r1, sp, #48	; 0x30
 801260e:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8012612:	9000      	str	r0, [sp, #0]
 8012614:	4650      	mov	r0, sl
 8012616:	3601      	adds	r6, #1
 8012618:	f7ff f952 	bl	80118c0 <ucdr_init_buffer_origin_offset>
 801261c:	2300      	movs	r3, #0
 801261e:	2205      	movs	r2, #5
 8012620:	210b      	movs	r1, #11
 8012622:	4650      	mov	r0, sl
 8012624:	f000 fe14 	bl	8013250 <uxr_buffer_submessage_header>
 8012628:	2101      	movs	r1, #1
 801262a:	8968      	ldrh	r0, [r5, #10]
 801262c:	f009 fa04 	bl	801ba38 <uxr_seq_num_add>
 8012630:	892b      	ldrh	r3, [r5, #8]
 8012632:	4602      	mov	r2, r0
 8012634:	a90a      	add	r1, sp, #40	; 0x28
 8012636:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801263a:	4650      	mov	r0, sl
 801263c:	9b04      	ldr	r3, [sp, #16]
 801263e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8012642:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8012646:	f002 f81d 	bl	8014684 <uxr_serialize_HEARTBEAT_Payload>
 801264a:	2200      	movs	r2, #0
 801264c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801264e:	4640      	mov	r0, r8
 8012650:	4611      	mov	r1, r2
 8012652:	f000 fc31 	bl	8012eb8 <uxr_stamp_session_header>
 8012656:	4650      	mov	r0, sl
 8012658:	f7ff f972 	bl	8011940 <ucdr_buffer_length>
 801265c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8012660:	4602      	mov	r2, r0
 8012662:	a90c      	add	r1, sp, #48	; 0x30
 8012664:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012668:	47a8      	blx	r5
 801266a:	9903      	ldr	r1, [sp, #12]
 801266c:	b2f0      	uxtb	r0, r6
 801266e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8012672:	455a      	cmp	r2, fp
 8012674:	eb73 0101 	sbcs.w	r1, r3, r1
 8012678:	db9d      	blt.n	80125b6 <listen_message_reliably+0x46>
 801267a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 801267e:	4283      	cmp	r3, r0
 8012680:	d89f      	bhi.n	80125c2 <listen_message_reliably+0x52>
 8012682:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012686:	9a03      	ldr	r2, [sp, #12]
 8012688:	429a      	cmp	r2, r3
 801268a:	bf08      	it	eq
 801268c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 8012690:	d019      	beq.n	80126c6 <listen_message_reliably+0x156>
 8012692:	ebab 0309 	sub.w	r3, fp, r9
 8012696:	2b00      	cmp	r3, #0
 8012698:	9d05      	ldr	r5, [sp, #20]
 801269a:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 801269e:	aa08      	add	r2, sp, #32
 80126a0:	bf08      	it	eq
 80126a2:	2301      	moveq	r3, #1
 80126a4:	a907      	add	r1, sp, #28
 80126a6:	6884      	ldr	r4, [r0, #8]
 80126a8:	429d      	cmp	r5, r3
 80126aa:	6800      	ldr	r0, [r0, #0]
 80126ac:	bfa8      	it	ge
 80126ae:	461d      	movge	r5, r3
 80126b0:	462b      	mov	r3, r5
 80126b2:	47a0      	blx	r4
 80126b4:	b948      	cbnz	r0, 80126ca <listen_message_reliably+0x15a>
 80126b6:	9b05      	ldr	r3, [sp, #20]
 80126b8:	1b5b      	subs	r3, r3, r5
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	9305      	str	r3, [sp, #20]
 80126be:	f73f af60 	bgt.w	8012582 <listen_message_reliably+0x12>
 80126c2:	4604      	mov	r4, r0
 80126c4:	e012      	b.n	80126ec <listen_message_reliably+0x17c>
 80126c6:	9b05      	ldr	r3, [sp, #20]
 80126c8:	e7e5      	b.n	8012696 <listen_message_reliably+0x126>
 80126ca:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80126ce:	4604      	mov	r4, r0
 80126d0:	2500      	movs	r5, #0
 80126d2:	a80c      	add	r0, sp, #48	; 0x30
 80126d4:	f7ff f906 	bl	80118e4 <ucdr_init_buffer>
 80126d8:	f10d 031a 	add.w	r3, sp, #26
 80126dc:	aa06      	add	r2, sp, #24
 80126de:	a90c      	add	r1, sp, #48	; 0x30
 80126e0:	4640      	mov	r0, r8
 80126e2:	f88d 5018 	strb.w	r5, [sp, #24]
 80126e6:	f000 fbfb 	bl	8012ee0 <uxr_read_session_header>
 80126ea:	b918      	cbnz	r0, 80126f4 <listen_message_reliably+0x184>
 80126ec:	4620      	mov	r0, r4
 80126ee:	b01d      	add	sp, #116	; 0x74
 80126f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126f4:	4629      	mov	r1, r5
 80126f6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80126fa:	f000 fc99 	bl	8013030 <uxr_stream_id_from_raw>
 80126fe:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8012702:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8012706:	f3c0 2507 	ubfx	r5, r0, #8, #8
 801270a:	2e01      	cmp	r6, #1
 801270c:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8012710:	d04b      	beq.n	80127aa <listen_message_reliably+0x23a>
 8012712:	2e02      	cmp	r6, #2
 8012714:	d00f      	beq.n	8012736 <listen_message_reliably+0x1c6>
 8012716:	2e00      	cmp	r6, #0
 8012718:	d1e8      	bne.n	80126ec <listen_message_reliably+0x17c>
 801271a:	4631      	mov	r1, r6
 801271c:	4630      	mov	r0, r6
 801271e:	f000 fc87 	bl	8013030 <uxr_stream_id_from_raw>
 8012722:	4602      	mov	r2, r0
 8012724:	a90c      	add	r1, sp, #48	; 0x30
 8012726:	4640      	mov	r0, r8
 8012728:	920a      	str	r2, [sp, #40]	; 0x28
 801272a:	f7ff fd97 	bl	801225c <read_submessage_list>
 801272e:	4620      	mov	r0, r4
 8012730:	b01d      	add	sp, #116	; 0x74
 8012732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012736:	4629      	mov	r1, r5
 8012738:	f108 0008 	add.w	r0, r8, #8
 801273c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8012740:	f000 fd64 	bl	801320c <uxr_get_input_reliable_stream>
 8012744:	4607      	mov	r7, r0
 8012746:	b338      	cbz	r0, 8012798 <listen_message_reliably+0x228>
 8012748:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801274a:	a80c      	add	r0, sp, #48	; 0x30
 801274c:	9203      	str	r2, [sp, #12]
 801274e:	f7ff f8fb 	bl	8011948 <ucdr_buffer_remaining>
 8012752:	4603      	mov	r3, r0
 8012754:	f10d 0019 	add.w	r0, sp, #25
 8012758:	9a03      	ldr	r2, [sp, #12]
 801275a:	4651      	mov	r1, sl
 801275c:	9000      	str	r0, [sp, #0]
 801275e:	4638      	mov	r0, r7
 8012760:	f008 fb80 	bl	801ae64 <uxr_receive_reliable_message>
 8012764:	b1c0      	cbz	r0, 8012798 <listen_message_reliably+0x228>
 8012766:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801276a:	b393      	cbz	r3, 80127d2 <listen_message_reliably+0x262>
 801276c:	ae14      	add	r6, sp, #80	; 0x50
 801276e:	f04f 0a02 	mov.w	sl, #2
 8012772:	e00a      	b.n	801278a <listen_message_reliably+0x21a>
 8012774:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 8012778:	4631      	mov	r1, r6
 801277a:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 801277e:	4640      	mov	r0, r8
 8012780:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8012784:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012786:	f7ff fd69 	bl	801225c <read_submessage_list>
 801278a:	2204      	movs	r2, #4
 801278c:	4631      	mov	r1, r6
 801278e:	4638      	mov	r0, r7
 8012790:	f008 fbea 	bl	801af68 <uxr_next_input_reliable_buffer_available>
 8012794:	2800      	cmp	r0, #0
 8012796:	d1ed      	bne.n	8012774 <listen_message_reliably+0x204>
 8012798:	4640      	mov	r0, r8
 801279a:	462a      	mov	r2, r5
 801279c:	4649      	mov	r1, r9
 801279e:	f7ff fbd9 	bl	8011f54 <write_submessage_acknack.isra.0>
 80127a2:	4620      	mov	r0, r4
 80127a4:	b01d      	add	sp, #116	; 0x74
 80127a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127aa:	4629      	mov	r1, r5
 80127ac:	f108 0008 	add.w	r0, r8, #8
 80127b0:	f000 fd22 	bl	80131f8 <uxr_get_input_best_effort_stream>
 80127b4:	2800      	cmp	r0, #0
 80127b6:	d099      	beq.n	80126ec <listen_message_reliably+0x17c>
 80127b8:	4651      	mov	r1, sl
 80127ba:	f008 fac9 	bl	801ad50 <uxr_receive_best_effort_message>
 80127be:	2800      	cmp	r0, #0
 80127c0:	d094      	beq.n	80126ec <listen_message_reliably+0x17c>
 80127c2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 80127c6:	a90c      	add	r1, sp, #48	; 0x30
 80127c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80127ca:	4640      	mov	r0, r8
 80127cc:	f7ff fd46 	bl	801225c <read_submessage_list>
 80127d0:	e78c      	b.n	80126ec <listen_message_reliably+0x17c>
 80127d2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 80127d6:	a90c      	add	r1, sp, #48	; 0x30
 80127d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80127da:	4640      	mov	r0, r8
 80127dc:	f7ff fd3e 	bl	801225c <read_submessage_list>
 80127e0:	e7c4      	b.n	801276c <listen_message_reliably+0x1fc>
 80127e2:	bf00      	nop

080127e4 <uxr_run_session_timeout>:
 80127e4:	b570      	push	{r4, r5, r6, lr}
 80127e6:	4604      	mov	r4, r0
 80127e8:	460d      	mov	r5, r1
 80127ea:	f000 fd77 	bl	80132dc <uxr_millis>
 80127ee:	4606      	mov	r6, r0
 80127f0:	4620      	mov	r0, r4
 80127f2:	f7ff fc77 	bl	80120e4 <uxr_flash_output_streams>
 80127f6:	4629      	mov	r1, r5
 80127f8:	4620      	mov	r0, r4
 80127fa:	f7ff feb9 	bl	8012570 <listen_message_reliably>
 80127fe:	f000 fd6d 	bl	80132dc <uxr_millis>
 8012802:	1b83      	subs	r3, r0, r6
 8012804:	1ae9      	subs	r1, r5, r3
 8012806:	2900      	cmp	r1, #0
 8012808:	dcf6      	bgt.n	80127f8 <uxr_run_session_timeout+0x14>
 801280a:	f104 0008 	add.w	r0, r4, #8
 801280e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012812:	f000 bd07 	b.w	8013224 <uxr_output_streams_confirmed>
 8012816:	bf00      	nop

08012818 <uxr_run_session_until_data>:
 8012818:	b570      	push	{r4, r5, r6, lr}
 801281a:	4604      	mov	r4, r0
 801281c:	460d      	mov	r5, r1
 801281e:	f000 fd5d 	bl	80132dc <uxr_millis>
 8012822:	4606      	mov	r6, r0
 8012824:	4620      	mov	r0, r4
 8012826:	f7ff fc5d 	bl	80120e4 <uxr_flash_output_streams>
 801282a:	2300      	movs	r3, #0
 801282c:	4629      	mov	r1, r5
 801282e:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8012832:	e005      	b.n	8012840 <uxr_run_session_until_data+0x28>
 8012834:	f000 fd52 	bl	80132dc <uxr_millis>
 8012838:	1b83      	subs	r3, r0, r6
 801283a:	1ae9      	subs	r1, r5, r3
 801283c:	2900      	cmp	r1, #0
 801283e:	dd07      	ble.n	8012850 <uxr_run_session_until_data+0x38>
 8012840:	4620      	mov	r0, r4
 8012842:	f7ff fe95 	bl	8012570 <listen_message_reliably>
 8012846:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 801284a:	2800      	cmp	r0, #0
 801284c:	d0f2      	beq.n	8012834 <uxr_run_session_until_data+0x1c>
 801284e:	bd70      	pop	{r4, r5, r6, pc}
 8012850:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8012854:	bd70      	pop	{r4, r5, r6, pc}
 8012856:	bf00      	nop

08012858 <uxr_run_session_until_confirm_delivery>:
 8012858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801285c:	4606      	mov	r6, r0
 801285e:	460d      	mov	r5, r1
 8012860:	f000 fd3c 	bl	80132dc <uxr_millis>
 8012864:	4607      	mov	r7, r0
 8012866:	4630      	mov	r0, r6
 8012868:	f106 0808 	add.w	r8, r6, #8
 801286c:	f7ff fc3a 	bl	80120e4 <uxr_flash_output_streams>
 8012870:	2d00      	cmp	r5, #0
 8012872:	db10      	blt.n	8012896 <uxr_run_session_until_confirm_delivery+0x3e>
 8012874:	462c      	mov	r4, r5
 8012876:	e006      	b.n	8012886 <uxr_run_session_until_confirm_delivery+0x2e>
 8012878:	f7ff fe7a 	bl	8012570 <listen_message_reliably>
 801287c:	f000 fd2e 	bl	80132dc <uxr_millis>
 8012880:	1bc3      	subs	r3, r0, r7
 8012882:	1aec      	subs	r4, r5, r3
 8012884:	d407      	bmi.n	8012896 <uxr_run_session_until_confirm_delivery+0x3e>
 8012886:	4640      	mov	r0, r8
 8012888:	f000 fccc 	bl	8013224 <uxr_output_streams_confirmed>
 801288c:	4603      	mov	r3, r0
 801288e:	4621      	mov	r1, r4
 8012890:	4630      	mov	r0, r6
 8012892:	2b00      	cmp	r3, #0
 8012894:	d0f0      	beq.n	8012878 <uxr_run_session_until_confirm_delivery+0x20>
 8012896:	4640      	mov	r0, r8
 8012898:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801289c:	f000 bcc2 	b.w	8013224 <uxr_output_streams_confirmed>

080128a0 <uxr_run_session_until_all_status>:
 80128a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128a4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80128a8:	4606      	mov	r6, r0
 80128aa:	4688      	mov	r8, r1
 80128ac:	4692      	mov	sl, r2
 80128ae:	461f      	mov	r7, r3
 80128b0:	f7ff fc18 	bl	80120e4 <uxr_flash_output_streams>
 80128b4:	f1bb 0f00 	cmp.w	fp, #0
 80128b8:	d004      	beq.n	80128c4 <uxr_run_session_until_all_status+0x24>
 80128ba:	465a      	mov	r2, fp
 80128bc:	21ff      	movs	r1, #255	; 0xff
 80128be:	4638      	mov	r0, r7
 80128c0:	f00a ffac 	bl	801d81c <memset>
 80128c4:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 80128c8:	1e7d      	subs	r5, r7, #1
 80128ca:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 80128ce:	f000 fd05 	bl	80132dc <uxr_millis>
 80128d2:	4641      	mov	r1, r8
 80128d4:	4681      	mov	r9, r0
 80128d6:	4630      	mov	r0, r6
 80128d8:	f7ff fe4a 	bl	8012570 <listen_message_reliably>
 80128dc:	f000 fcfe 	bl	80132dc <uxr_millis>
 80128e0:	eba0 0009 	sub.w	r0, r0, r9
 80128e4:	eba8 0100 	sub.w	r1, r8, r0
 80128e8:	f1bb 0f00 	cmp.w	fp, #0
 80128ec:	d029      	beq.n	8012942 <uxr_run_session_until_all_status+0xa2>
 80128ee:	46ae      	mov	lr, r5
 80128f0:	f04f 0c00 	mov.w	ip, #0
 80128f4:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 80128f8:	2cff      	cmp	r4, #255	; 0xff
 80128fa:	d015      	beq.n	8012928 <uxr_run_session_until_all_status+0x88>
 80128fc:	f10c 0c01 	add.w	ip, ip, #1
 8012900:	45e3      	cmp	fp, ip
 8012902:	d8f7      	bhi.n	80128f4 <uxr_run_session_until_all_status+0x54>
 8012904:	2300      	movs	r3, #0
 8012906:	67f3      	str	r3, [r6, #124]	; 0x7c
 8012908:	e000      	b.n	801290c <uxr_run_session_until_all_status+0x6c>
 801290a:	b158      	cbz	r0, 8012924 <uxr_run_session_until_all_status+0x84>
 801290c:	462b      	mov	r3, r5
 801290e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8012912:	3302      	adds	r3, #2
 8012914:	2801      	cmp	r0, #1
 8012916:	eba3 0307 	sub.w	r3, r3, r7
 801291a:	bf8c      	ite	hi
 801291c:	2000      	movhi	r0, #0
 801291e:	2001      	movls	r0, #1
 8012920:	459b      	cmp	fp, r3
 8012922:	d8f2      	bhi.n	801290a <uxr_run_session_until_all_status+0x6a>
 8012924:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012928:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 801292c:	f10c 0c01 	add.w	ip, ip, #1
 8012930:	45dc      	cmp	ip, fp
 8012932:	d201      	bcs.n	8012938 <uxr_run_session_until_all_status+0x98>
 8012934:	2b00      	cmp	r3, #0
 8012936:	d0dd      	beq.n	80128f4 <uxr_run_session_until_all_status+0x54>
 8012938:	2900      	cmp	r1, #0
 801293a:	dde3      	ble.n	8012904 <uxr_run_session_until_all_status+0x64>
 801293c:	2b00      	cmp	r3, #0
 801293e:	d1ca      	bne.n	80128d6 <uxr_run_session_until_all_status+0x36>
 8012940:	e7e0      	b.n	8012904 <uxr_run_session_until_all_status+0x64>
 8012942:	2001      	movs	r0, #1
 8012944:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8012948:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801294c <wait_session_status>:
 801294c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012950:	4604      	mov	r4, r0
 8012952:	b09d      	sub	sp, #116	; 0x74
 8012954:	20ff      	movs	r0, #255	; 0xff
 8012956:	9303      	str	r3, [sp, #12]
 8012958:	7160      	strb	r0, [r4, #5]
 801295a:	2b00      	cmp	r3, #0
 801295c:	f000 80b6 	beq.w	8012acc <wait_session_status+0x180>
 8012960:	4689      	mov	r9, r1
 8012962:	4692      	mov	sl, r2
 8012964:	f04f 0b00 	mov.w	fp, #0
 8012968:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801296a:	4652      	mov	r2, sl
 801296c:	4649      	mov	r1, r9
 801296e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012972:	47a8      	blx	r5
 8012974:	f000 fcb2 	bl	80132dc <uxr_millis>
 8012978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801297c:	4605      	mov	r5, r0
 801297e:	e009      	b.n	8012994 <wait_session_status+0x48>
 8012980:	f000 fcac 	bl	80132dc <uxr_millis>
 8012984:	1b40      	subs	r0, r0, r5
 8012986:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 801298a:	2b00      	cmp	r3, #0
 801298c:	dd40      	ble.n	8012a10 <wait_session_status+0xc4>
 801298e:	7960      	ldrb	r0, [r4, #5]
 8012990:	28ff      	cmp	r0, #255	; 0xff
 8012992:	d145      	bne.n	8012a20 <wait_session_status+0xd4>
 8012994:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8012996:	a908      	add	r1, sp, #32
 8012998:	6896      	ldr	r6, [r2, #8]
 801299a:	6810      	ldr	r0, [r2, #0]
 801299c:	aa09      	add	r2, sp, #36	; 0x24
 801299e:	47b0      	blx	r6
 80129a0:	2800      	cmp	r0, #0
 80129a2:	d0ed      	beq.n	8012980 <wait_session_status+0x34>
 80129a4:	a80c      	add	r0, sp, #48	; 0x30
 80129a6:	2600      	movs	r6, #0
 80129a8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80129ac:	f7fe ff9a 	bl	80118e4 <ucdr_init_buffer>
 80129b0:	f10d 031e 	add.w	r3, sp, #30
 80129b4:	aa07      	add	r2, sp, #28
 80129b6:	a90c      	add	r1, sp, #48	; 0x30
 80129b8:	4620      	mov	r0, r4
 80129ba:	f88d 601c 	strb.w	r6, [sp, #28]
 80129be:	f000 fa8f 	bl	8012ee0 <uxr_read_session_header>
 80129c2:	2800      	cmp	r0, #0
 80129c4:	d0dc      	beq.n	8012980 <wait_session_status+0x34>
 80129c6:	4631      	mov	r1, r6
 80129c8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80129cc:	f000 fb30 	bl	8013030 <uxr_stream_id_from_raw>
 80129d0:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80129d4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80129d8:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80129dc:	2f01      	cmp	r7, #1
 80129de:	9302      	str	r3, [sp, #8]
 80129e0:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 80129e4:	d05c      	beq.n	8012aa0 <wait_session_status+0x154>
 80129e6:	2f02      	cmp	r7, #2
 80129e8:	d020      	beq.n	8012a2c <wait_session_status+0xe0>
 80129ea:	2f00      	cmp	r7, #0
 80129ec:	d1c8      	bne.n	8012980 <wait_session_status+0x34>
 80129ee:	4639      	mov	r1, r7
 80129f0:	4638      	mov	r0, r7
 80129f2:	f000 fb1d 	bl	8013030 <uxr_stream_id_from_raw>
 80129f6:	a90c      	add	r1, sp, #48	; 0x30
 80129f8:	4602      	mov	r2, r0
 80129fa:	900b      	str	r0, [sp, #44]	; 0x2c
 80129fc:	4620      	mov	r0, r4
 80129fe:	f7ff fc2d 	bl	801225c <read_submessage_list>
 8012a02:	f000 fc6b 	bl	80132dc <uxr_millis>
 8012a06:	1b40      	subs	r0, r0, r5
 8012a08:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	dcbe      	bgt.n	801298e <wait_session_status+0x42>
 8012a10:	f10b 0b01 	add.w	fp, fp, #1
 8012a14:	9b03      	ldr	r3, [sp, #12]
 8012a16:	7960      	ldrb	r0, [r4, #5]
 8012a18:	455b      	cmp	r3, fp
 8012a1a:	d001      	beq.n	8012a20 <wait_session_status+0xd4>
 8012a1c:	28ff      	cmp	r0, #255	; 0xff
 8012a1e:	d0a3      	beq.n	8012968 <wait_session_status+0x1c>
 8012a20:	38ff      	subs	r0, #255	; 0xff
 8012a22:	bf18      	it	ne
 8012a24:	2001      	movne	r0, #1
 8012a26:	b01d      	add	sp, #116	; 0x74
 8012a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a2c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8012a30:	4631      	mov	r1, r6
 8012a32:	f104 0008 	add.w	r0, r4, #8
 8012a36:	9304      	str	r3, [sp, #16]
 8012a38:	f000 fbe8 	bl	801320c <uxr_get_input_reliable_stream>
 8012a3c:	4680      	mov	r8, r0
 8012a3e:	b348      	cbz	r0, 8012a94 <wait_session_status+0x148>
 8012a40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012a42:	a80c      	add	r0, sp, #48	; 0x30
 8012a44:	9205      	str	r2, [sp, #20]
 8012a46:	f7fe ff7f 	bl	8011948 <ucdr_buffer_remaining>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	f10d 001d 	add.w	r0, sp, #29
 8012a50:	9a05      	ldr	r2, [sp, #20]
 8012a52:	9000      	str	r0, [sp, #0]
 8012a54:	4640      	mov	r0, r8
 8012a56:	9902      	ldr	r1, [sp, #8]
 8012a58:	f008 fa04 	bl	801ae64 <uxr_receive_reliable_message>
 8012a5c:	b1d0      	cbz	r0, 8012a94 <wait_session_status+0x148>
 8012a5e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d03a      	beq.n	8012adc <wait_session_status+0x190>
 8012a66:	9f04      	ldr	r7, [sp, #16]
 8012a68:	e00a      	b.n	8012a80 <wait_session_status+0x134>
 8012a6a:	f04f 0302 	mov.w	r3, #2
 8012a6e:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 8012a72:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8012a76:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8012a7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012a7c:	f7ff fbee 	bl	801225c <read_submessage_list>
 8012a80:	a914      	add	r1, sp, #80	; 0x50
 8012a82:	2204      	movs	r2, #4
 8012a84:	4640      	mov	r0, r8
 8012a86:	f008 fa6f 	bl	801af68 <uxr_next_input_reliable_buffer_available>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	a914      	add	r1, sp, #80	; 0x50
 8012a8e:	4620      	mov	r0, r4
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d1ea      	bne.n	8012a6a <wait_session_status+0x11e>
 8012a94:	4632      	mov	r2, r6
 8012a96:	9904      	ldr	r1, [sp, #16]
 8012a98:	4620      	mov	r0, r4
 8012a9a:	f7ff fa5b 	bl	8011f54 <write_submessage_acknack.isra.0>
 8012a9e:	e76f      	b.n	8012980 <wait_session_status+0x34>
 8012aa0:	4631      	mov	r1, r6
 8012aa2:	f104 0008 	add.w	r0, r4, #8
 8012aa6:	f000 fba7 	bl	80131f8 <uxr_get_input_best_effort_stream>
 8012aaa:	2800      	cmp	r0, #0
 8012aac:	f43f af68 	beq.w	8012980 <wait_session_status+0x34>
 8012ab0:	9902      	ldr	r1, [sp, #8]
 8012ab2:	f008 f94d 	bl	801ad50 <uxr_receive_best_effort_message>
 8012ab6:	2800      	cmp	r0, #0
 8012ab8:	f43f af62 	beq.w	8012980 <wait_session_status+0x34>
 8012abc:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8012ac0:	a90c      	add	r1, sp, #48	; 0x30
 8012ac2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012ac4:	4620      	mov	r0, r4
 8012ac6:	f7ff fbc9 	bl	801225c <read_submessage_list>
 8012aca:	e759      	b.n	8012980 <wait_session_status+0x34>
 8012acc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012ace:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012ad2:	47a0      	blx	r4
 8012ad4:	2001      	movs	r0, #1
 8012ad6:	b01d      	add	sp, #116	; 0x74
 8012ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012adc:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8012ae0:	a90c      	add	r1, sp, #48	; 0x30
 8012ae2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012ae4:	4620      	mov	r0, r4
 8012ae6:	f7ff fbb9 	bl	801225c <read_submessage_list>
 8012aea:	e7bc      	b.n	8012a66 <wait_session_status+0x11a>

08012aec <uxr_delete_session_retries>:
 8012aec:	b530      	push	{r4, r5, lr}
 8012aee:	b08f      	sub	sp, #60	; 0x3c
 8012af0:	4604      	mov	r4, r0
 8012af2:	460d      	mov	r5, r1
 8012af4:	f000 fa34 	bl	8012f60 <uxr_session_header_offset>
 8012af8:	2300      	movs	r3, #0
 8012afa:	2210      	movs	r2, #16
 8012afc:	a902      	add	r1, sp, #8
 8012afe:	9000      	str	r0, [sp, #0]
 8012b00:	a806      	add	r0, sp, #24
 8012b02:	f7fe fedd 	bl	80118c0 <ucdr_init_buffer_origin_offset>
 8012b06:	a906      	add	r1, sp, #24
 8012b08:	4620      	mov	r0, r4
 8012b0a:	f000 f979 	bl	8012e00 <uxr_buffer_delete_session>
 8012b0e:	2200      	movs	r2, #0
 8012b10:	9b06      	ldr	r3, [sp, #24]
 8012b12:	4620      	mov	r0, r4
 8012b14:	4611      	mov	r1, r2
 8012b16:	f000 f9cf 	bl	8012eb8 <uxr_stamp_session_header>
 8012b1a:	a806      	add	r0, sp, #24
 8012b1c:	f7fe ff10 	bl	8011940 <ucdr_buffer_length>
 8012b20:	462b      	mov	r3, r5
 8012b22:	4602      	mov	r2, r0
 8012b24:	a902      	add	r1, sp, #8
 8012b26:	4620      	mov	r0, r4
 8012b28:	f7ff ff10 	bl	801294c <wait_session_status>
 8012b2c:	b118      	cbz	r0, 8012b36 <uxr_delete_session_retries+0x4a>
 8012b2e:	7960      	ldrb	r0, [r4, #5]
 8012b30:	fab0 f080 	clz	r0, r0
 8012b34:	0940      	lsrs	r0, r0, #5
 8012b36:	b00f      	add	sp, #60	; 0x3c
 8012b38:	bd30      	pop	{r4, r5, pc}
 8012b3a:	bf00      	nop

08012b3c <uxr_create_session>:
 8012b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b40:	f100 0b08 	add.w	fp, r0, #8
 8012b44:	4604      	mov	r4, r0
 8012b46:	b0ab      	sub	sp, #172	; 0xac
 8012b48:	4658      	mov	r0, fp
 8012b4a:	465e      	mov	r6, fp
 8012b4c:	f000 faa6 	bl	801309c <uxr_reset_stream_storage>
 8012b50:	4620      	mov	r0, r4
 8012b52:	f000 fa05 	bl	8012f60 <uxr_session_header_offset>
 8012b56:	2300      	movs	r3, #0
 8012b58:	221c      	movs	r2, #28
 8012b5a:	a90b      	add	r1, sp, #44	; 0x2c
 8012b5c:	9000      	str	r0, [sp, #0]
 8012b5e:	a812      	add	r0, sp, #72	; 0x48
 8012b60:	f7fe feae 	bl	80118c0 <ucdr_init_buffer_origin_offset>
 8012b64:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012b66:	a912      	add	r1, sp, #72	; 0x48
 8012b68:	4620      	mov	r0, r4
 8012b6a:	8a1a      	ldrh	r2, [r3, #16]
 8012b6c:	3a04      	subs	r2, #4
 8012b6e:	b292      	uxth	r2, r2
 8012b70:	f000 f91c 	bl	8012dac <uxr_buffer_create_session>
 8012b74:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012b76:	4620      	mov	r0, r4
 8012b78:	f000 f98a 	bl	8012e90 <uxr_stamp_create_session_header>
 8012b7c:	a812      	add	r0, sp, #72	; 0x48
 8012b7e:	f7fe fedf 	bl	8011940 <ucdr_buffer_length>
 8012b82:	23ff      	movs	r3, #255	; 0xff
 8012b84:	4681      	mov	r9, r0
 8012b86:	7163      	strb	r3, [r4, #5]
 8012b88:	230a      	movs	r3, #10
 8012b8a:	9303      	str	r3, [sp, #12]
 8012b8c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012b8e:	464a      	mov	r2, r9
 8012b90:	a90b      	add	r1, sp, #44	; 0x2c
 8012b92:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012b96:	47a8      	blx	r5
 8012b98:	f000 fba0 	bl	80132dc <uxr_millis>
 8012b9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012ba0:	4605      	mov	r5, r0
 8012ba2:	e009      	b.n	8012bb8 <uxr_create_session+0x7c>
 8012ba4:	f000 fb9a 	bl	80132dc <uxr_millis>
 8012ba8:	1b40      	subs	r0, r0, r5
 8012baa:	7962      	ldrb	r2, [r4, #5]
 8012bac:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	dd38      	ble.n	8012c26 <uxr_create_session+0xea>
 8012bb4:	2aff      	cmp	r2, #255	; 0xff
 8012bb6:	d13c      	bne.n	8012c32 <uxr_create_session+0xf6>
 8012bb8:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8012bba:	a907      	add	r1, sp, #28
 8012bbc:	6897      	ldr	r7, [r2, #8]
 8012bbe:	6810      	ldr	r0, [r2, #0]
 8012bc0:	aa08      	add	r2, sp, #32
 8012bc2:	47b8      	blx	r7
 8012bc4:	2800      	cmp	r0, #0
 8012bc6:	d0ed      	beq.n	8012ba4 <uxr_create_session+0x68>
 8012bc8:	a81a      	add	r0, sp, #104	; 0x68
 8012bca:	2700      	movs	r7, #0
 8012bcc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8012bd0:	f7fe fe88 	bl	80118e4 <ucdr_init_buffer>
 8012bd4:	f10d 031a 	add.w	r3, sp, #26
 8012bd8:	aa06      	add	r2, sp, #24
 8012bda:	a91a      	add	r1, sp, #104	; 0x68
 8012bdc:	4620      	mov	r0, r4
 8012bde:	f88d 7018 	strb.w	r7, [sp, #24]
 8012be2:	f000 f97d 	bl	8012ee0 <uxr_read_session_header>
 8012be6:	2800      	cmp	r0, #0
 8012be8:	d0dc      	beq.n	8012ba4 <uxr_create_session+0x68>
 8012bea:	4639      	mov	r1, r7
 8012bec:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8012bf0:	f000 fa1e 	bl	8013030 <uxr_stream_id_from_raw>
 8012bf4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8012bf8:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8012bfc:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8012c00:	2f01      	cmp	r7, #1
 8012c02:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8012c06:	d053      	beq.n	8012cb0 <uxr_create_session+0x174>
 8012c08:	2f02      	cmp	r7, #2
 8012c0a:	d018      	beq.n	8012c3e <uxr_create_session+0x102>
 8012c0c:	2f00      	cmp	r7, #0
 8012c0e:	d1c9      	bne.n	8012ba4 <uxr_create_session+0x68>
 8012c10:	4639      	mov	r1, r7
 8012c12:	4638      	mov	r0, r7
 8012c14:	f000 fa0c 	bl	8013030 <uxr_stream_id_from_raw>
 8012c18:	a91a      	add	r1, sp, #104	; 0x68
 8012c1a:	4602      	mov	r2, r0
 8012c1c:	900a      	str	r0, [sp, #40]	; 0x28
 8012c1e:	4620      	mov	r0, r4
 8012c20:	f7ff fb1c 	bl	801225c <read_submessage_list>
 8012c24:	e7be      	b.n	8012ba4 <uxr_create_session+0x68>
 8012c26:	9b03      	ldr	r3, [sp, #12]
 8012c28:	3b01      	subs	r3, #1
 8012c2a:	9303      	str	r3, [sp, #12]
 8012c2c:	d001      	beq.n	8012c32 <uxr_create_session+0xf6>
 8012c2e:	2aff      	cmp	r2, #255	; 0xff
 8012c30:	d0ac      	beq.n	8012b8c <uxr_create_session+0x50>
 8012c32:	2a00      	cmp	r2, #0
 8012c34:	d051      	beq.n	8012cda <uxr_create_session+0x19e>
 8012c36:	2000      	movs	r0, #0
 8012c38:	b02b      	add	sp, #172	; 0xac
 8012c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c3e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8012c42:	4641      	mov	r1, r8
 8012c44:	4630      	mov	r0, r6
 8012c46:	9304      	str	r3, [sp, #16]
 8012c48:	f000 fae0 	bl	801320c <uxr_get_input_reliable_stream>
 8012c4c:	4682      	mov	sl, r0
 8012c4e:	b348      	cbz	r0, 8012ca4 <uxr_create_session+0x168>
 8012c50:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012c52:	a81a      	add	r0, sp, #104	; 0x68
 8012c54:	9205      	str	r2, [sp, #20]
 8012c56:	f7fe fe77 	bl	8011948 <ucdr_buffer_remaining>
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	f10d 0019 	add.w	r0, sp, #25
 8012c60:	9a05      	ldr	r2, [sp, #20]
 8012c62:	4659      	mov	r1, fp
 8012c64:	9000      	str	r0, [sp, #0]
 8012c66:	4650      	mov	r0, sl
 8012c68:	f008 f8fc 	bl	801ae64 <uxr_receive_reliable_message>
 8012c6c:	b1d0      	cbz	r0, 8012ca4 <uxr_create_session+0x168>
 8012c6e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d038      	beq.n	8012ce8 <uxr_create_session+0x1ac>
 8012c76:	9f04      	ldr	r7, [sp, #16]
 8012c78:	e00a      	b.n	8012c90 <uxr_create_session+0x154>
 8012c7a:	f04f 0302 	mov.w	r3, #2
 8012c7e:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 8012c82:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 8012c86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012c8c:	f7ff fae6 	bl	801225c <read_submessage_list>
 8012c90:	a922      	add	r1, sp, #136	; 0x88
 8012c92:	2204      	movs	r2, #4
 8012c94:	4650      	mov	r0, sl
 8012c96:	f008 f967 	bl	801af68 <uxr_next_input_reliable_buffer_available>
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	a922      	add	r1, sp, #136	; 0x88
 8012c9e:	4620      	mov	r0, r4
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d1ea      	bne.n	8012c7a <uxr_create_session+0x13e>
 8012ca4:	4642      	mov	r2, r8
 8012ca6:	9904      	ldr	r1, [sp, #16]
 8012ca8:	4620      	mov	r0, r4
 8012caa:	f7ff f953 	bl	8011f54 <write_submessage_acknack.isra.0>
 8012cae:	e779      	b.n	8012ba4 <uxr_create_session+0x68>
 8012cb0:	4641      	mov	r1, r8
 8012cb2:	4630      	mov	r0, r6
 8012cb4:	f000 faa0 	bl	80131f8 <uxr_get_input_best_effort_stream>
 8012cb8:	2800      	cmp	r0, #0
 8012cba:	f43f af73 	beq.w	8012ba4 <uxr_create_session+0x68>
 8012cbe:	4659      	mov	r1, fp
 8012cc0:	f008 f846 	bl	801ad50 <uxr_receive_best_effort_message>
 8012cc4:	2800      	cmp	r0, #0
 8012cc6:	f43f af6d 	beq.w	8012ba4 <uxr_create_session+0x68>
 8012cca:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8012cce:	a91a      	add	r1, sp, #104	; 0x68
 8012cd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012cd2:	4620      	mov	r0, r4
 8012cd4:	f7ff fac2 	bl	801225c <read_submessage_list>
 8012cd8:	e764      	b.n	8012ba4 <uxr_create_session+0x68>
 8012cda:	4630      	mov	r0, r6
 8012cdc:	f000 f9de 	bl	801309c <uxr_reset_stream_storage>
 8012ce0:	2001      	movs	r0, #1
 8012ce2:	b02b      	add	sp, #172	; 0xac
 8012ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ce8:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8012cec:	a91a      	add	r1, sp, #104	; 0x68
 8012cee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012cf0:	4620      	mov	r0, r4
 8012cf2:	f7ff fab3 	bl	801225c <read_submessage_list>
 8012cf6:	e7be      	b.n	8012c76 <uxr_create_session+0x13a>

08012cf8 <uxr_prepare_stream_to_write_submessage>:
 8012cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cfc:	b082      	sub	sp, #8
 8012cfe:	4604      	mov	r4, r0
 8012d00:	4610      	mov	r0, r2
 8012d02:	4615      	mov	r5, r2
 8012d04:	461e      	mov	r6, r3
 8012d06:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8012d0a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8012d0e:	f105 0904 	add.w	r9, r5, #4
 8012d12:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8012d16:	9101      	str	r1, [sp, #4]
 8012d18:	f000 fada 	bl	80132d0 <uxr_submessage_padding>
 8012d1c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012d20:	4481      	add	r9, r0
 8012d22:	2b01      	cmp	r3, #1
 8012d24:	d01d      	beq.n	8012d62 <uxr_prepare_stream_to_write_submessage+0x6a>
 8012d26:	2b02      	cmp	r3, #2
 8012d28:	d116      	bne.n	8012d58 <uxr_prepare_stream_to_write_submessage+0x60>
 8012d2a:	f104 0008 	add.w	r0, r4, #8
 8012d2e:	4651      	mov	r1, sl
 8012d30:	f000 fa56 	bl	80131e0 <uxr_get_output_reliable_stream>
 8012d34:	4604      	mov	r4, r0
 8012d36:	b158      	cbz	r0, 8012d50 <uxr_prepare_stream_to_write_submessage+0x58>
 8012d38:	4649      	mov	r1, r9
 8012d3a:	4632      	mov	r2, r6
 8012d3c:	f008 fada 	bl	801b2f4 <uxr_prepare_reliable_buffer_to_write>
 8012d40:	4604      	mov	r4, r0
 8012d42:	b12c      	cbz	r4, 8012d50 <uxr_prepare_stream_to_write_submessage+0x58>
 8012d44:	4643      	mov	r3, r8
 8012d46:	b2aa      	uxth	r2, r5
 8012d48:	4639      	mov	r1, r7
 8012d4a:	4630      	mov	r0, r6
 8012d4c:	f000 fa80 	bl	8013250 <uxr_buffer_submessage_header>
 8012d50:	4620      	mov	r0, r4
 8012d52:	b002      	add	sp, #8
 8012d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d58:	2400      	movs	r4, #0
 8012d5a:	4620      	mov	r0, r4
 8012d5c:	b002      	add	sp, #8
 8012d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d62:	f104 0008 	add.w	r0, r4, #8
 8012d66:	4651      	mov	r1, sl
 8012d68:	f000 fa32 	bl	80131d0 <uxr_get_output_best_effort_stream>
 8012d6c:	4604      	mov	r4, r0
 8012d6e:	2800      	cmp	r0, #0
 8012d70:	d0ee      	beq.n	8012d50 <uxr_prepare_stream_to_write_submessage+0x58>
 8012d72:	4649      	mov	r1, r9
 8012d74:	4632      	mov	r2, r6
 8012d76:	f008 f9e7 	bl	801b148 <uxr_prepare_best_effort_buffer_to_write>
 8012d7a:	4604      	mov	r4, r0
 8012d7c:	e7e1      	b.n	8012d42 <uxr_prepare_stream_to_write_submessage+0x4a>
 8012d7e:	bf00      	nop

08012d80 <uxr_init_session_info>:
 8012d80:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8012d84:	23ff      	movs	r3, #255	; 0xff
 8012d86:	7102      	strb	r2, [r0, #4]
 8012d88:	f880 c001 	strb.w	ip, [r0, #1]
 8012d8c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8012d90:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8012d94:	7001      	strb	r1, [r0, #0]
 8012d96:	f880 c002 	strb.w	ip, [r0, #2]
 8012d9a:	7143      	strb	r3, [r0, #5]
 8012d9c:	70c2      	strb	r2, [r0, #3]
 8012d9e:	b500      	push	{lr}
 8012da0:	f04f 0e09 	mov.w	lr, #9
 8012da4:	f8a0 e006 	strh.w	lr, [r0, #6]
 8012da8:	f85d fb04 	ldr.w	pc, [sp], #4

08012dac <uxr_buffer_create_session>:
 8012dac:	b530      	push	{r4, r5, lr}
 8012dae:	2300      	movs	r3, #0
 8012db0:	b089      	sub	sp, #36	; 0x24
 8012db2:	4d12      	ldr	r5, [pc, #72]	; (8012dfc <uxr_buffer_create_session+0x50>)
 8012db4:	460c      	mov	r4, r1
 8012db6:	9307      	str	r3, [sp, #28]
 8012db8:	4619      	mov	r1, r3
 8012dba:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012dbe:	2201      	movs	r2, #1
 8012dc0:	9301      	str	r3, [sp, #4]
 8012dc2:	80c2      	strh	r2, [r0, #6]
 8012dc4:	f88d 2004 	strb.w	r2, [sp, #4]
 8012dc8:	682a      	ldr	r2, [r5, #0]
 8012dca:	9303      	str	r3, [sp, #12]
 8012dcc:	9200      	str	r2, [sp, #0]
 8012dce:	88aa      	ldrh	r2, [r5, #4]
 8012dd0:	9306      	str	r3, [sp, #24]
 8012dd2:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012dd6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8012dda:	9202      	str	r2, [sp, #8]
 8012ddc:	7802      	ldrb	r2, [r0, #0]
 8012dde:	4620      	mov	r0, r4
 8012de0:	f88d 200c 	strb.w	r2, [sp, #12]
 8012de4:	2210      	movs	r2, #16
 8012de6:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8012dea:	f000 fa31 	bl	8013250 <uxr_buffer_submessage_header>
 8012dee:	4669      	mov	r1, sp
 8012df0:	4620      	mov	r0, r4
 8012df2:	f001 faa3 	bl	801433c <uxr_serialize_CREATE_CLIENT_Payload>
 8012df6:	b009      	add	sp, #36	; 0x24
 8012df8:	bd30      	pop	{r4, r5, pc}
 8012dfa:	bf00      	nop
 8012dfc:	0801e8c0 	.word	0x0801e8c0

08012e00 <uxr_buffer_delete_session>:
 8012e00:	4a0c      	ldr	r2, [pc, #48]	; (8012e34 <uxr_buffer_delete_session+0x34>)
 8012e02:	2302      	movs	r3, #2
 8012e04:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8012e08:	b510      	push	{r4, lr}
 8012e0a:	460c      	mov	r4, r1
 8012e0c:	b082      	sub	sp, #8
 8012e0e:	8911      	ldrh	r1, [r2, #8]
 8012e10:	2204      	movs	r2, #4
 8012e12:	80c3      	strh	r3, [r0, #6]
 8012e14:	2300      	movs	r3, #0
 8012e16:	f8ad 1006 	strh.w	r1, [sp, #6]
 8012e1a:	4620      	mov	r0, r4
 8012e1c:	2103      	movs	r1, #3
 8012e1e:	f8ad c004 	strh.w	ip, [sp, #4]
 8012e22:	f000 fa15 	bl	8013250 <uxr_buffer_submessage_header>
 8012e26:	a901      	add	r1, sp, #4
 8012e28:	4620      	mov	r0, r4
 8012e2a:	f001 fb2f 	bl	801448c <uxr_serialize_DELETE_Payload>
 8012e2e:	b002      	add	sp, #8
 8012e30:	bd10      	pop	{r4, pc}
 8012e32:	bf00      	nop
 8012e34:	0801e8c0 	.word	0x0801e8c0

08012e38 <uxr_read_create_session_status>:
 8012e38:	b510      	push	{r4, lr}
 8012e3a:	460b      	mov	r3, r1
 8012e3c:	b088      	sub	sp, #32
 8012e3e:	4604      	mov	r4, r0
 8012e40:	a901      	add	r1, sp, #4
 8012e42:	4618      	mov	r0, r3
 8012e44:	f001 fb32 	bl	80144ac <uxr_deserialize_STATUS_AGENT_Payload>
 8012e48:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012e4c:	7163      	strb	r3, [r4, #5]
 8012e4e:	b008      	add	sp, #32
 8012e50:	bd10      	pop	{r4, pc}
 8012e52:	bf00      	nop

08012e54 <uxr_read_delete_session_status>:
 8012e54:	b510      	push	{r4, lr}
 8012e56:	b084      	sub	sp, #16
 8012e58:	4604      	mov	r4, r0
 8012e5a:	4608      	mov	r0, r1
 8012e5c:	a902      	add	r1, sp, #8
 8012e5e:	f001 fb55 	bl	801450c <uxr_deserialize_STATUS_Payload>
 8012e62:	88e3      	ldrh	r3, [r4, #6]
 8012e64:	2b02      	cmp	r3, #2
 8012e66:	d001      	beq.n	8012e6c <uxr_read_delete_session_status+0x18>
 8012e68:	b004      	add	sp, #16
 8012e6a:	bd10      	pop	{r4, pc}
 8012e6c:	f10d 000a 	add.w	r0, sp, #10
 8012e70:	f7fe fff6 	bl	8011e60 <uxr_object_id_from_raw>
 8012e74:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012e78:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8012e7c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012e80:	b29b      	uxth	r3, r3
 8012e82:	2b02      	cmp	r3, #2
 8012e84:	d1f0      	bne.n	8012e68 <uxr_read_delete_session_status+0x14>
 8012e86:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8012e8a:	7163      	strb	r3, [r4, #5]
 8012e8c:	e7ec      	b.n	8012e68 <uxr_read_delete_session_status+0x14>
 8012e8e:	bf00      	nop

08012e90 <uxr_stamp_create_session_header>:
 8012e90:	b510      	push	{r4, lr}
 8012e92:	2208      	movs	r2, #8
 8012e94:	b08a      	sub	sp, #40	; 0x28
 8012e96:	4604      	mov	r4, r0
 8012e98:	eb0d 0002 	add.w	r0, sp, r2
 8012e9c:	f7fe fd22 	bl	80118e4 <ucdr_init_buffer>
 8012ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	a802      	add	r0, sp, #8
 8012ea8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8012eac:	9400      	str	r4, [sp, #0]
 8012eae:	461a      	mov	r2, r3
 8012eb0:	f000 fbca 	bl	8013648 <uxr_serialize_message_header>
 8012eb4:	b00a      	add	sp, #40	; 0x28
 8012eb6:	bd10      	pop	{r4, pc}

08012eb8 <uxr_stamp_session_header>:
 8012eb8:	b530      	push	{r4, r5, lr}
 8012eba:	b08d      	sub	sp, #52	; 0x34
 8012ebc:	4604      	mov	r4, r0
 8012ebe:	460d      	mov	r5, r1
 8012ec0:	4619      	mov	r1, r3
 8012ec2:	a804      	add	r0, sp, #16
 8012ec4:	9203      	str	r2, [sp, #12]
 8012ec6:	2208      	movs	r2, #8
 8012ec8:	f7fe fd0c 	bl	80118e4 <ucdr_init_buffer>
 8012ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ed0:	9b03      	ldr	r3, [sp, #12]
 8012ed2:	462a      	mov	r2, r5
 8012ed4:	a804      	add	r0, sp, #16
 8012ed6:	9400      	str	r4, [sp, #0]
 8012ed8:	f000 fbb6 	bl	8013648 <uxr_serialize_message_header>
 8012edc:	b00d      	add	sp, #52	; 0x34
 8012ede:	bd30      	pop	{r4, r5, pc}

08012ee0 <uxr_read_session_header>:
 8012ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ee4:	4607      	mov	r7, r0
 8012ee6:	b084      	sub	sp, #16
 8012ee8:	4608      	mov	r0, r1
 8012eea:	460c      	mov	r4, r1
 8012eec:	4615      	mov	r5, r2
 8012eee:	461e      	mov	r6, r3
 8012ef0:	f7fe fd2a 	bl	8011948 <ucdr_buffer_remaining>
 8012ef4:	2808      	cmp	r0, #8
 8012ef6:	d803      	bhi.n	8012f00 <uxr_read_session_header+0x20>
 8012ef8:	2000      	movs	r0, #0
 8012efa:	b004      	add	sp, #16
 8012efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f00:	f10d 080c 	add.w	r8, sp, #12
 8012f04:	4633      	mov	r3, r6
 8012f06:	462a      	mov	r2, r5
 8012f08:	4620      	mov	r0, r4
 8012f0a:	f10d 010b 	add.w	r1, sp, #11
 8012f0e:	f8cd 8000 	str.w	r8, [sp]
 8012f12:	f000 fbb7 	bl	8013684 <uxr_deserialize_message_header>
 8012f16:	783a      	ldrb	r2, [r7, #0]
 8012f18:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8012f1c:	4293      	cmp	r3, r2
 8012f1e:	d1eb      	bne.n	8012ef8 <uxr_read_session_header+0x18>
 8012f20:	061b      	lsls	r3, r3, #24
 8012f22:	d41b      	bmi.n	8012f5c <uxr_read_session_header+0x7c>
 8012f24:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8012f28:	787b      	ldrb	r3, [r7, #1]
 8012f2a:	429a      	cmp	r2, r3
 8012f2c:	d003      	beq.n	8012f36 <uxr_read_session_header+0x56>
 8012f2e:	2001      	movs	r0, #1
 8012f30:	f080 0001 	eor.w	r0, r0, #1
 8012f34:	e7e1      	b.n	8012efa <uxr_read_session_header+0x1a>
 8012f36:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8012f3a:	1cb8      	adds	r0, r7, #2
 8012f3c:	78bb      	ldrb	r3, [r7, #2]
 8012f3e:	429a      	cmp	r2, r3
 8012f40:	d1f5      	bne.n	8012f2e <uxr_read_session_header+0x4e>
 8012f42:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8012f46:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8012f4a:	429a      	cmp	r2, r3
 8012f4c:	d1ef      	bne.n	8012f2e <uxr_read_session_header+0x4e>
 8012f4e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8012f52:	7843      	ldrb	r3, [r0, #1]
 8012f54:	429a      	cmp	r2, r3
 8012f56:	d1ea      	bne.n	8012f2e <uxr_read_session_header+0x4e>
 8012f58:	2000      	movs	r0, #0
 8012f5a:	e7e9      	b.n	8012f30 <uxr_read_session_header+0x50>
 8012f5c:	2001      	movs	r0, #1
 8012f5e:	e7cc      	b.n	8012efa <uxr_read_session_header+0x1a>

08012f60 <uxr_session_header_offset>:
 8012f60:	f990 3000 	ldrsb.w	r3, [r0]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	bfac      	ite	ge
 8012f68:	2008      	movge	r0, #8
 8012f6a:	2004      	movlt	r0, #4
 8012f6c:	4770      	bx	lr
 8012f6e:	bf00      	nop

08012f70 <uxr_init_base_object_request>:
 8012f70:	b510      	push	{r4, lr}
 8012f72:	b082      	sub	sp, #8
 8012f74:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8012f78:	9101      	str	r1, [sp, #4]
 8012f7a:	88c3      	ldrh	r3, [r0, #6]
 8012f7c:	f1a3 010a 	sub.w	r1, r3, #10
 8012f80:	b289      	uxth	r1, r1
 8012f82:	42a1      	cmp	r1, r4
 8012f84:	d80f      	bhi.n	8012fa6 <uxr_init_base_object_request+0x36>
 8012f86:	3301      	adds	r3, #1
 8012f88:	b29c      	uxth	r4, r3
 8012f8a:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8012f8e:	b2db      	uxtb	r3, r3
 8012f90:	80c4      	strh	r4, [r0, #6]
 8012f92:	1c91      	adds	r1, r2, #2
 8012f94:	9801      	ldr	r0, [sp, #4]
 8012f96:	f882 c000 	strb.w	ip, [r2]
 8012f9a:	7053      	strb	r3, [r2, #1]
 8012f9c:	f7fe ff74 	bl	8011e88 <uxr_object_id_to_raw>
 8012fa0:	4620      	mov	r0, r4
 8012fa2:	b002      	add	sp, #8
 8012fa4:	bd10      	pop	{r4, pc}
 8012fa6:	230a      	movs	r3, #10
 8012fa8:	f04f 0c00 	mov.w	ip, #0
 8012fac:	461c      	mov	r4, r3
 8012fae:	e7ef      	b.n	8012f90 <uxr_init_base_object_request+0x20>

08012fb0 <uxr_parse_base_object_request>:
 8012fb0:	b570      	push	{r4, r5, r6, lr}
 8012fb2:	4604      	mov	r4, r0
 8012fb4:	3002      	adds	r0, #2
 8012fb6:	460d      	mov	r5, r1
 8012fb8:	4616      	mov	r6, r2
 8012fba:	f7fe ff51 	bl	8011e60 <uxr_object_id_from_raw>
 8012fbe:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8012fc2:	8028      	strh	r0, [r5, #0]
 8012fc4:	806b      	strh	r3, [r5, #2]
 8012fc6:	7822      	ldrb	r2, [r4, #0]
 8012fc8:	7863      	ldrb	r3, [r4, #1]
 8012fca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012fce:	8033      	strh	r3, [r6, #0]
 8012fd0:	bd70      	pop	{r4, r5, r6, pc}
 8012fd2:	bf00      	nop

08012fd4 <uxr_stream_id>:
 8012fd4:	2901      	cmp	r1, #1
 8012fd6:	4684      	mov	ip, r0
 8012fd8:	b500      	push	{lr}
 8012fda:	b083      	sub	sp, #12
 8012fdc:	d01f      	beq.n	801301e <uxr_stream_id+0x4a>
 8012fde:	2902      	cmp	r1, #2
 8012fe0:	f04f 0e00 	mov.w	lr, #0
 8012fe4:	d020      	beq.n	8013028 <uxr_stream_id+0x54>
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	2000      	movs	r0, #0
 8012fea:	f36e 0307 	bfi	r3, lr, #0, #8
 8012fee:	f36c 230f 	bfi	r3, ip, #8, #8
 8012ff2:	f361 4317 	bfi	r3, r1, #16, #8
 8012ff6:	f362 631f 	bfi	r3, r2, #24, #8
 8012ffa:	fa5f fc83 	uxtb.w	ip, r3
 8012ffe:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013002:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013006:	0e1b      	lsrs	r3, r3, #24
 8013008:	f36c 0007 	bfi	r0, ip, #0, #8
 801300c:	f361 200f 	bfi	r0, r1, #8, #8
 8013010:	f362 4017 	bfi	r0, r2, #16, #8
 8013014:	f363 601f 	bfi	r0, r3, #24, #8
 8013018:	b003      	add	sp, #12
 801301a:	f85d fb04 	ldr.w	pc, [sp], #4
 801301e:	f100 0e01 	add.w	lr, r0, #1
 8013022:	fa5f fe8e 	uxtb.w	lr, lr
 8013026:	e7de      	b.n	8012fe6 <uxr_stream_id+0x12>
 8013028:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 801302c:	e7db      	b.n	8012fe6 <uxr_stream_id+0x12>
 801302e:	bf00      	nop

08013030 <uxr_stream_id_from_raw>:
 8013030:	b082      	sub	sp, #8
 8013032:	b130      	cbz	r0, 8013042 <uxr_stream_id_from_raw+0x12>
 8013034:	0603      	lsls	r3, r0, #24
 8013036:	d421      	bmi.n	801307c <uxr_stream_id_from_raw+0x4c>
 8013038:	1e42      	subs	r2, r0, #1
 801303a:	f04f 0c01 	mov.w	ip, #1
 801303e:	b2d2      	uxtb	r2, r2
 8013040:	e001      	b.n	8013046 <uxr_stream_id_from_raw+0x16>
 8013042:	4684      	mov	ip, r0
 8013044:	4602      	mov	r2, r0
 8013046:	2300      	movs	r3, #0
 8013048:	f360 0307 	bfi	r3, r0, #0, #8
 801304c:	2000      	movs	r0, #0
 801304e:	f362 230f 	bfi	r3, r2, #8, #8
 8013052:	f36c 4317 	bfi	r3, ip, #16, #8
 8013056:	f361 631f 	bfi	r3, r1, #24, #8
 801305a:	fa5f fc83 	uxtb.w	ip, r3
 801305e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013062:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013066:	0e1b      	lsrs	r3, r3, #24
 8013068:	f36c 0007 	bfi	r0, ip, #0, #8
 801306c:	f361 200f 	bfi	r0, r1, #8, #8
 8013070:	f362 4017 	bfi	r0, r2, #16, #8
 8013074:	f363 601f 	bfi	r0, r3, #24, #8
 8013078:	b002      	add	sp, #8
 801307a:	4770      	bx	lr
 801307c:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8013080:	f04f 0c02 	mov.w	ip, #2
 8013084:	e7df      	b.n	8013046 <uxr_stream_id_from_raw+0x16>
 8013086:	bf00      	nop

08013088 <uxr_init_stream_storage>:
 8013088:	2300      	movs	r3, #0
 801308a:	7403      	strb	r3, [r0, #16]
 801308c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8013090:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8013094:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8013098:	4770      	bx	lr
 801309a:	bf00      	nop

0801309c <uxr_reset_stream_storage>:
 801309c:	b570      	push	{r4, r5, r6, lr}
 801309e:	7c03      	ldrb	r3, [r0, #16]
 80130a0:	4604      	mov	r4, r0
 80130a2:	b14b      	cbz	r3, 80130b8 <uxr_reset_stream_storage+0x1c>
 80130a4:	4606      	mov	r6, r0
 80130a6:	2500      	movs	r5, #0
 80130a8:	4630      	mov	r0, r6
 80130aa:	3501      	adds	r5, #1
 80130ac:	f008 f846 	bl	801b13c <uxr_reset_output_best_effort_stream>
 80130b0:	7c23      	ldrb	r3, [r4, #16]
 80130b2:	3610      	adds	r6, #16
 80130b4:	42ab      	cmp	r3, r5
 80130b6:	d8f7      	bhi.n	80130a8 <uxr_reset_stream_storage+0xc>
 80130b8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80130bc:	b15b      	cbz	r3, 80130d6 <uxr_reset_stream_storage+0x3a>
 80130be:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80130c2:	2500      	movs	r5, #0
 80130c4:	4630      	mov	r0, r6
 80130c6:	3501      	adds	r5, #1
 80130c8:	f007 fe3e 	bl	801ad48 <uxr_reset_input_best_effort_stream>
 80130cc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80130d0:	3602      	adds	r6, #2
 80130d2:	42ab      	cmp	r3, r5
 80130d4:	d8f6      	bhi.n	80130c4 <uxr_reset_stream_storage+0x28>
 80130d6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80130da:	b15b      	cbz	r3, 80130f4 <uxr_reset_stream_storage+0x58>
 80130dc:	f104 0618 	add.w	r6, r4, #24
 80130e0:	2500      	movs	r5, #0
 80130e2:	4630      	mov	r0, r6
 80130e4:	3501      	adds	r5, #1
 80130e6:	f008 f8d7 	bl	801b298 <uxr_reset_output_reliable_stream>
 80130ea:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80130ee:	3628      	adds	r6, #40	; 0x28
 80130f0:	42ab      	cmp	r3, r5
 80130f2:	d8f6      	bhi.n	80130e2 <uxr_reset_stream_storage+0x46>
 80130f4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80130f8:	b15b      	cbz	r3, 8013112 <uxr_reset_stream_storage+0x76>
 80130fa:	f104 0648 	add.w	r6, r4, #72	; 0x48
 80130fe:	2500      	movs	r5, #0
 8013100:	4630      	mov	r0, r6
 8013102:	3501      	adds	r5, #1
 8013104:	f007 fe8c 	bl	801ae20 <uxr_reset_input_reliable_stream>
 8013108:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801310c:	3618      	adds	r6, #24
 801310e:	42ab      	cmp	r3, r5
 8013110:	d8f6      	bhi.n	8013100 <uxr_reset_stream_storage+0x64>
 8013112:	bd70      	pop	{r4, r5, r6, pc}

08013114 <uxr_add_output_best_effort_buffer>:
 8013114:	b510      	push	{r4, lr}
 8013116:	7c04      	ldrb	r4, [r0, #16]
 8013118:	b082      	sub	sp, #8
 801311a:	f104 0c01 	add.w	ip, r4, #1
 801311e:	f880 c010 	strb.w	ip, [r0, #16]
 8013122:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8013126:	f007 ffff 	bl	801b128 <uxr_init_output_best_effort_stream>
 801312a:	2201      	movs	r2, #1
 801312c:	4620      	mov	r0, r4
 801312e:	4611      	mov	r1, r2
 8013130:	b002      	add	sp, #8
 8013132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013136:	f7ff bf4d 	b.w	8012fd4 <uxr_stream_id>
 801313a:	bf00      	nop

0801313c <uxr_add_output_reliable_buffer>:
 801313c:	b510      	push	{r4, lr}
 801313e:	b084      	sub	sp, #16
 8013140:	4684      	mov	ip, r0
 8013142:	2028      	movs	r0, #40	; 0x28
 8013144:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8013148:	9400      	str	r4, [sp, #0]
 801314a:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 801314e:	fb00 c004 	mla	r0, r0, r4, ip
 8013152:	f104 0e01 	add.w	lr, r4, #1
 8013156:	3018      	adds	r0, #24
 8013158:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 801315c:	f008 f864 	bl	801b228 <uxr_init_output_reliable_stream>
 8013160:	2201      	movs	r2, #1
 8013162:	2102      	movs	r1, #2
 8013164:	4620      	mov	r0, r4
 8013166:	b004      	add	sp, #16
 8013168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801316c:	f7ff bf32 	b.w	8012fd4 <uxr_stream_id>

08013170 <uxr_add_input_best_effort_buffer>:
 8013170:	b510      	push	{r4, lr}
 8013172:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8013176:	b082      	sub	sp, #8
 8013178:	1c62      	adds	r2, r4, #1
 801317a:	f104 0321 	add.w	r3, r4, #33	; 0x21
 801317e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8013182:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8013186:	f007 fddb 	bl	801ad40 <uxr_init_input_best_effort_stream>
 801318a:	2200      	movs	r2, #0
 801318c:	2101      	movs	r1, #1
 801318e:	4620      	mov	r0, r4
 8013190:	b002      	add	sp, #8
 8013192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013196:	f7ff bf1d 	b.w	8012fd4 <uxr_stream_id>
 801319a:	bf00      	nop

0801319c <uxr_add_input_reliable_buffer>:
 801319c:	b510      	push	{r4, lr}
 801319e:	b084      	sub	sp, #16
 80131a0:	4684      	mov	ip, r0
 80131a2:	2018      	movs	r0, #24
 80131a4:	9c06      	ldr	r4, [sp, #24]
 80131a6:	9400      	str	r4, [sp, #0]
 80131a8:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 80131ac:	fb00 c004 	mla	r0, r0, r4, ip
 80131b0:	f104 0e01 	add.w	lr, r4, #1
 80131b4:	3048      	adds	r0, #72	; 0x48
 80131b6:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 80131ba:	f007 fe0b 	bl	801add4 <uxr_init_input_reliable_stream>
 80131be:	2200      	movs	r2, #0
 80131c0:	2102      	movs	r1, #2
 80131c2:	4620      	mov	r0, r4
 80131c4:	b004      	add	sp, #16
 80131c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131ca:	f7ff bf03 	b.w	8012fd4 <uxr_stream_id>
 80131ce:	bf00      	nop

080131d0 <uxr_get_output_best_effort_stream>:
 80131d0:	7c03      	ldrb	r3, [r0, #16]
 80131d2:	428b      	cmp	r3, r1
 80131d4:	bf8c      	ite	hi
 80131d6:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80131da:	2000      	movls	r0, #0
 80131dc:	4770      	bx	lr
 80131de:	bf00      	nop

080131e0 <uxr_get_output_reliable_stream>:
 80131e0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80131e4:	428b      	cmp	r3, r1
 80131e6:	d904      	bls.n	80131f2 <uxr_get_output_reliable_stream+0x12>
 80131e8:	2328      	movs	r3, #40	; 0x28
 80131ea:	fb03 0001 	mla	r0, r3, r1, r0
 80131ee:	3018      	adds	r0, #24
 80131f0:	4770      	bx	lr
 80131f2:	2000      	movs	r0, #0
 80131f4:	4770      	bx	lr
 80131f6:	bf00      	nop

080131f8 <uxr_get_input_best_effort_stream>:
 80131f8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80131fc:	428b      	cmp	r3, r1
 80131fe:	d903      	bls.n	8013208 <uxr_get_input_best_effort_stream+0x10>
 8013200:	3121      	adds	r1, #33	; 0x21
 8013202:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8013206:	4770      	bx	lr
 8013208:	2000      	movs	r0, #0
 801320a:	4770      	bx	lr

0801320c <uxr_get_input_reliable_stream>:
 801320c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8013210:	428b      	cmp	r3, r1
 8013212:	d904      	bls.n	801321e <uxr_get_input_reliable_stream+0x12>
 8013214:	2318      	movs	r3, #24
 8013216:	fb03 0001 	mla	r0, r3, r1, r0
 801321a:	3048      	adds	r0, #72	; 0x48
 801321c:	4770      	bx	lr
 801321e:	2000      	movs	r0, #0
 8013220:	4770      	bx	lr
 8013222:	bf00      	nop

08013224 <uxr_output_streams_confirmed>:
 8013224:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8013228:	b183      	cbz	r3, 801324c <uxr_output_streams_confirmed+0x28>
 801322a:	b570      	push	{r4, r5, r6, lr}
 801322c:	4606      	mov	r6, r0
 801322e:	f100 0518 	add.w	r5, r0, #24
 8013232:	2400      	movs	r4, #0
 8013234:	e000      	b.n	8013238 <uxr_output_streams_confirmed+0x14>
 8013236:	b140      	cbz	r0, 801324a <uxr_output_streams_confirmed+0x26>
 8013238:	4628      	mov	r0, r5
 801323a:	3401      	adds	r4, #1
 801323c:	f008 faa0 	bl	801b780 <uxr_is_output_up_to_date>
 8013240:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8013244:	3528      	adds	r5, #40	; 0x28
 8013246:	42a3      	cmp	r3, r4
 8013248:	d8f5      	bhi.n	8013236 <uxr_output_streams_confirmed+0x12>
 801324a:	bd70      	pop	{r4, r5, r6, pc}
 801324c:	2001      	movs	r0, #1
 801324e:	4770      	bx	lr

08013250 <uxr_buffer_submessage_header>:
 8013250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013252:	460e      	mov	r6, r1
 8013254:	2104      	movs	r1, #4
 8013256:	4604      	mov	r4, r0
 8013258:	4615      	mov	r5, r2
 801325a:	461f      	mov	r7, r3
 801325c:	f7fe fb5e 	bl	801191c <ucdr_align_to>
 8013260:	2301      	movs	r3, #1
 8013262:	4631      	mov	r1, r6
 8013264:	4620      	mov	r0, r4
 8013266:	ea47 0203 	orr.w	r2, r7, r3
 801326a:	7523      	strb	r3, [r4, #20]
 801326c:	462b      	mov	r3, r5
 801326e:	f000 fa29 	bl	80136c4 <uxr_serialize_submessage_header>
 8013272:	4620      	mov	r0, r4
 8013274:	f7fe fb68 	bl	8011948 <ucdr_buffer_remaining>
 8013278:	42a8      	cmp	r0, r5
 801327a:	bf34      	ite	cc
 801327c:	2000      	movcc	r0, #0
 801327e:	2001      	movcs	r0, #1
 8013280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013282:	bf00      	nop

08013284 <uxr_read_submessage_header>:
 8013284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013288:	4604      	mov	r4, r0
 801328a:	460d      	mov	r5, r1
 801328c:	2104      	movs	r1, #4
 801328e:	4616      	mov	r6, r2
 8013290:	4698      	mov	r8, r3
 8013292:	f7fe fb43 	bl	801191c <ucdr_align_to>
 8013296:	4620      	mov	r0, r4
 8013298:	f7fe fb56 	bl	8011948 <ucdr_buffer_remaining>
 801329c:	2803      	cmp	r0, #3
 801329e:	bf8c      	ite	hi
 80132a0:	2701      	movhi	r7, #1
 80132a2:	2700      	movls	r7, #0
 80132a4:	d802      	bhi.n	80132ac <uxr_read_submessage_header+0x28>
 80132a6:	4638      	mov	r0, r7
 80132a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132ac:	4633      	mov	r3, r6
 80132ae:	4642      	mov	r2, r8
 80132b0:	4620      	mov	r0, r4
 80132b2:	4629      	mov	r1, r5
 80132b4:	f000 fa1a 	bl	80136ec <uxr_deserialize_submessage_header>
 80132b8:	f898 3000 	ldrb.w	r3, [r8]
 80132bc:	4638      	mov	r0, r7
 80132be:	f003 0201 	and.w	r2, r3, #1
 80132c2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80132c6:	f888 3000 	strb.w	r3, [r8]
 80132ca:	7522      	strb	r2, [r4, #20]
 80132cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080132d0 <uxr_submessage_padding>:
 80132d0:	f010 0003 	ands.w	r0, r0, #3
 80132d4:	bf18      	it	ne
 80132d6:	f1c0 0004 	rsbne	r0, r0, #4
 80132da:	4770      	bx	lr

080132dc <uxr_millis>:
 80132dc:	b510      	push	{r4, lr}
 80132de:	b084      	sub	sp, #16
 80132e0:	2001      	movs	r0, #1
 80132e2:	4669      	mov	r1, sp
 80132e4:	f7ef fefc 	bl	80030e0 <clock_gettime>
 80132e8:	4908      	ldr	r1, [pc, #32]	; (801330c <uxr_millis+0x30>)
 80132ea:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80132ee:	fba0 0301 	umull	r0, r3, r0, r1
 80132f2:	1900      	adds	r0, r0, r4
 80132f4:	fb01 3102 	mla	r1, r1, r2, r3
 80132f8:	4a05      	ldr	r2, [pc, #20]	; (8013310 <uxr_millis+0x34>)
 80132fa:	f04f 0300 	mov.w	r3, #0
 80132fe:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8013302:	f7ed f805 	bl	8000310 <__aeabi_ldivmod>
 8013306:	b004      	add	sp, #16
 8013308:	bd10      	pop	{r4, pc}
 801330a:	bf00      	nop
 801330c:	3b9aca00 	.word	0x3b9aca00
 8013310:	000f4240 	.word	0x000f4240

08013314 <uxr_nanos>:
 8013314:	b510      	push	{r4, lr}
 8013316:	b084      	sub	sp, #16
 8013318:	2001      	movs	r0, #1
 801331a:	4669      	mov	r1, sp
 801331c:	f7ef fee0 	bl	80030e0 <clock_gettime>
 8013320:	4a06      	ldr	r2, [pc, #24]	; (801333c <uxr_nanos+0x28>)
 8013322:	9800      	ldr	r0, [sp, #0]
 8013324:	9902      	ldr	r1, [sp, #8]
 8013326:	fba0 0302 	umull	r0, r3, r0, r2
 801332a:	9c01      	ldr	r4, [sp, #4]
 801332c:	1840      	adds	r0, r0, r1
 801332e:	fb02 3304 	mla	r3, r2, r4, r3
 8013332:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8013336:	b004      	add	sp, #16
 8013338:	bd10      	pop	{r4, pc}
 801333a:	bf00      	nop
 801333c:	3b9aca00 	.word	0x3b9aca00

08013340 <on_full_output_buffer_fragmented>:
 8013340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013344:	460c      	mov	r4, r1
 8013346:	b08a      	sub	sp, #40	; 0x28
 8013348:	4606      	mov	r6, r0
 801334a:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 801334e:	f104 0008 	add.w	r0, r4, #8
 8013352:	f7ff ff45 	bl	80131e0 <uxr_get_output_reliable_stream>
 8013356:	4605      	mov	r5, r0
 8013358:	f008 fa1c 	bl	801b794 <get_available_free_slots>
 801335c:	b968      	cbnz	r0, 801337a <on_full_output_buffer_fragmented+0x3a>
 801335e:	4620      	mov	r0, r4
 8013360:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 8013364:	4798      	blx	r3
 8013366:	b918      	cbnz	r0, 8013370 <on_full_output_buffer_fragmented+0x30>
 8013368:	2001      	movs	r0, #1
 801336a:	b00a      	add	sp, #40	; 0x28
 801336c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013370:	4628      	mov	r0, r5
 8013372:	f008 fa0f 	bl	801b794 <get_available_free_slots>
 8013376:	2800      	cmp	r0, #0
 8013378:	d0f6      	beq.n	8013368 <on_full_output_buffer_fragmented+0x28>
 801337a:	8929      	ldrh	r1, [r5, #8]
 801337c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8013380:	89eb      	ldrh	r3, [r5, #14]
 8013382:	7b28      	ldrb	r0, [r5, #12]
 8013384:	686f      	ldr	r7, [r5, #4]
 8013386:	1a12      	subs	r2, r2, r0
 8013388:	fbb3 f0f1 	udiv	r0, r3, r1
 801338c:	fbb7 f7f1 	udiv	r7, r7, r1
 8013390:	fb01 3110 	mls	r1, r1, r0, r3
 8013394:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8013398:	b289      	uxth	r1, r1
 801339a:	fb07 f101 	mul.w	r1, r7, r1
 801339e:	3f04      	subs	r7, #4
 80133a0:	443a      	add	r2, r7
 80133a2:	3104      	adds	r1, #4
 80133a4:	fa1f f882 	uxth.w	r8, r2
 80133a8:	463a      	mov	r2, r7
 80133aa:	eba3 0308 	sub.w	r3, r3, r8
 80133ae:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 80133b2:	682b      	ldr	r3, [r5, #0]
 80133b4:	4419      	add	r1, r3
 80133b6:	2300      	movs	r3, #0
 80133b8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80133bc:	9000      	str	r0, [sp, #0]
 80133be:	a802      	add	r0, sp, #8
 80133c0:	f7fe fa7e 	bl	80118c0 <ucdr_init_buffer_origin_offset>
 80133c4:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80133c8:	f102 0308 	add.w	r3, r2, #8
 80133cc:	42bb      	cmp	r3, r7
 80133ce:	d927      	bls.n	8013420 <on_full_output_buffer_fragmented+0xe0>
 80133d0:	4642      	mov	r2, r8
 80133d2:	2300      	movs	r3, #0
 80133d4:	210d      	movs	r1, #13
 80133d6:	a802      	add	r0, sp, #8
 80133d8:	f7ff ff3a 	bl	8013250 <uxr_buffer_submessage_header>
 80133dc:	8929      	ldrh	r1, [r5, #8]
 80133de:	89eb      	ldrh	r3, [r5, #14]
 80133e0:	686a      	ldr	r2, [r5, #4]
 80133e2:	fbb3 f0f1 	udiv	r0, r3, r1
 80133e6:	fbb2 f2f1 	udiv	r2, r2, r1
 80133ea:	fb01 3310 	mls	r3, r1, r0, r3
 80133ee:	b29b      	uxth	r3, r3
 80133f0:	fb02 f303 	mul.w	r3, r2, r3
 80133f4:	682a      	ldr	r2, [r5, #0]
 80133f6:	50d7      	str	r7, [r2, r3]
 80133f8:	2101      	movs	r1, #1
 80133fa:	89e8      	ldrh	r0, [r5, #14]
 80133fc:	f008 fb1c 	bl	801ba38 <uxr_seq_num_add>
 8013400:	9904      	ldr	r1, [sp, #16]
 8013402:	9a03      	ldr	r2, [sp, #12]
 8013404:	81e8      	strh	r0, [r5, #14]
 8013406:	4630      	mov	r0, r6
 8013408:	1a52      	subs	r2, r2, r1
 801340a:	f7fe fa6b 	bl	80118e4 <ucdr_init_buffer>
 801340e:	4630      	mov	r0, r6
 8013410:	4622      	mov	r2, r4
 8013412:	490f      	ldr	r1, [pc, #60]	; (8013450 <on_full_output_buffer_fragmented+0x110>)
 8013414:	f7fe fa3a 	bl	801188c <ucdr_set_on_full_buffer_callback>
 8013418:	2000      	movs	r0, #0
 801341a:	b00a      	add	sp, #40	; 0x28
 801341c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013420:	b292      	uxth	r2, r2
 8013422:	2302      	movs	r3, #2
 8013424:	210d      	movs	r1, #13
 8013426:	a802      	add	r0, sp, #8
 8013428:	f7ff ff12 	bl	8013250 <uxr_buffer_submessage_header>
 801342c:	8928      	ldrh	r0, [r5, #8]
 801342e:	89eb      	ldrh	r3, [r5, #14]
 8013430:	6869      	ldr	r1, [r5, #4]
 8013432:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8013436:	fbb3 f7f0 	udiv	r7, r3, r0
 801343a:	fbb1 f1f0 	udiv	r1, r1, r0
 801343e:	fb00 3317 	mls	r3, r0, r7, r3
 8013442:	3208      	adds	r2, #8
 8013444:	b29b      	uxth	r3, r3
 8013446:	fb01 f303 	mul.w	r3, r1, r3
 801344a:	6829      	ldr	r1, [r5, #0]
 801344c:	50ca      	str	r2, [r1, r3]
 801344e:	e7d3      	b.n	80133f8 <on_full_output_buffer_fragmented+0xb8>
 8013450:	08013341 	.word	0x08013341

08013454 <uxr_prepare_output_stream>:
 8013454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013456:	b087      	sub	sp, #28
 8013458:	2707      	movs	r7, #7
 801345a:	2500      	movs	r5, #0
 801345c:	461c      	mov	r4, r3
 801345e:	4606      	mov	r6, r0
 8013460:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8013464:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013466:	e9cd 7500 	strd	r7, r5, [sp]
 801346a:	3204      	adds	r2, #4
 801346c:	f7ff fc44 	bl	8012cf8 <uxr_prepare_stream_to_write_submessage>
 8013470:	f080 0201 	eor.w	r2, r0, #1
 8013474:	b2d2      	uxtb	r2, r2
 8013476:	75a2      	strb	r2, [r4, #22]
 8013478:	b112      	cbz	r2, 8013480 <uxr_prepare_output_stream+0x2c>
 801347a:	4628      	mov	r0, r5
 801347c:	b007      	add	sp, #28
 801347e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013480:	aa05      	add	r2, sp, #20
 8013482:	9902      	ldr	r1, [sp, #8]
 8013484:	4630      	mov	r0, r6
 8013486:	f7ff fd73 	bl	8012f70 <uxr_init_base_object_request>
 801348a:	a905      	add	r1, sp, #20
 801348c:	4605      	mov	r5, r0
 801348e:	4620      	mov	r0, r4
 8013490:	f001 f8bc 	bl	801460c <uxr_serialize_WRITE_DATA_Payload_Data>
 8013494:	69a6      	ldr	r6, [r4, #24]
 8013496:	69e7      	ldr	r7, [r4, #28]
 8013498:	4620      	mov	r0, r4
 801349a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801349e:	1a52      	subs	r2, r2, r1
 80134a0:	f7fe fa20 	bl	80118e4 <ucdr_init_buffer>
 80134a4:	4620      	mov	r0, r4
 80134a6:	463a      	mov	r2, r7
 80134a8:	4631      	mov	r1, r6
 80134aa:	f7fe f9ef 	bl	801188c <ucdr_set_on_full_buffer_callback>
 80134ae:	4628      	mov	r0, r5
 80134b0:	b007      	add	sp, #28
 80134b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080134b4 <uxr_prepare_output_stream_fragmented>:
 80134b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134b8:	b091      	sub	sp, #68	; 0x44
 80134ba:	4605      	mov	r5, r0
 80134bc:	3008      	adds	r0, #8
 80134be:	461e      	mov	r6, r3
 80134c0:	9105      	str	r1, [sp, #20]
 80134c2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80134c6:	9204      	str	r2, [sp, #16]
 80134c8:	f7ff fe8a 	bl	80131e0 <uxr_get_output_reliable_stream>
 80134cc:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80134d0:	2b01      	cmp	r3, #1
 80134d2:	f000 8093 	beq.w	80135fc <uxr_prepare_output_stream_fragmented+0x148>
 80134d6:	4604      	mov	r4, r0
 80134d8:	2800      	cmp	r0, #0
 80134da:	f000 808f 	beq.w	80135fc <uxr_prepare_output_stream_fragmented+0x148>
 80134de:	f008 f959 	bl	801b794 <get_available_free_slots>
 80134e2:	2800      	cmp	r0, #0
 80134e4:	f000 8085 	beq.w	80135f2 <uxr_prepare_output_stream_fragmented+0x13e>
 80134e8:	8923      	ldrh	r3, [r4, #8]
 80134ea:	89e7      	ldrh	r7, [r4, #14]
 80134ec:	6862      	ldr	r2, [r4, #4]
 80134ee:	fbb7 f9f3 	udiv	r9, r7, r3
 80134f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80134f6:	fb03 7919 	mls	r9, r3, r9, r7
 80134fa:	6823      	ldr	r3, [r4, #0]
 80134fc:	f1a2 0b04 	sub.w	fp, r2, #4
 8013500:	9203      	str	r2, [sp, #12]
 8013502:	fa1f f989 	uxth.w	r9, r9
 8013506:	fb02 f909 	mul.w	r9, r2, r9
 801350a:	f109 0904 	add.w	r9, r9, #4
 801350e:	4499      	add	r9, r3
 8013510:	7b23      	ldrb	r3, [r4, #12]
 8013512:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8013516:	4543      	cmp	r3, r8
 8013518:	d37c      	bcc.n	8013614 <uxr_prepare_output_stream_fragmented+0x160>
 801351a:	f1ab 0a04 	sub.w	sl, fp, #4
 801351e:	465a      	mov	r2, fp
 8013520:	4649      	mov	r1, r9
 8013522:	a808      	add	r0, sp, #32
 8013524:	ebaa 0a03 	sub.w	sl, sl, r3
 8013528:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801352a:	f8cd 8000 	str.w	r8, [sp]
 801352e:	3308      	adds	r3, #8
 8013530:	fa1f fa8a 	uxth.w	sl, sl
 8013534:	9302      	str	r3, [sp, #8]
 8013536:	2300      	movs	r3, #0
 8013538:	f7fe f9c2 	bl	80118c0 <ucdr_init_buffer_origin_offset>
 801353c:	9b02      	ldr	r3, [sp, #8]
 801353e:	4652      	mov	r2, sl
 8013540:	210d      	movs	r1, #13
 8013542:	455b      	cmp	r3, fp
 8013544:	bf34      	ite	cc
 8013546:	2302      	movcc	r3, #2
 8013548:	2300      	movcs	r3, #0
 801354a:	a808      	add	r0, sp, #32
 801354c:	f7ff fe80 	bl	8013250 <uxr_buffer_submessage_header>
 8013550:	8921      	ldrh	r1, [r4, #8]
 8013552:	6863      	ldr	r3, [r4, #4]
 8013554:	4638      	mov	r0, r7
 8013556:	fbb7 f2f1 	udiv	r2, r7, r1
 801355a:	fbb3 f3f1 	udiv	r3, r3, r1
 801355e:	fb01 7212 	mls	r2, r1, r2, r7
 8013562:	2101      	movs	r1, #1
 8013564:	b292      	uxth	r2, r2
 8013566:	fb02 f303 	mul.w	r3, r2, r3
 801356a:	6822      	ldr	r2, [r4, #0]
 801356c:	f842 b003 	str.w	fp, [r2, r3]
 8013570:	f008 fa62 	bl	801ba38 <uxr_seq_num_add>
 8013574:	9b03      	ldr	r3, [sp, #12]
 8013576:	f108 0104 	add.w	r1, r8, #4
 801357a:	4607      	mov	r7, r0
 801357c:	f1a3 0208 	sub.w	r2, r3, #8
 8013580:	4630      	mov	r0, r6
 8013582:	4449      	add	r1, r9
 8013584:	eba2 0208 	sub.w	r2, r2, r8
 8013588:	f7fe f9ac 	bl	80118e4 <ucdr_init_buffer>
 801358c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801358e:	2107      	movs	r1, #7
 8013590:	81e7      	strh	r7, [r4, #14]
 8013592:	1d1a      	adds	r2, r3, #4
 8013594:	2300      	movs	r3, #0
 8013596:	4630      	mov	r0, r6
 8013598:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801359c:	bf28      	it	cs
 801359e:	461a      	movcs	r2, r3
 80135a0:	b292      	uxth	r2, r2
 80135a2:	f7ff fe55 	bl	8013250 <uxr_buffer_submessage_header>
 80135a6:	aa07      	add	r2, sp, #28
 80135a8:	9904      	ldr	r1, [sp, #16]
 80135aa:	4628      	mov	r0, r5
 80135ac:	f7ff fce0 	bl	8012f70 <uxr_init_base_object_request>
 80135b0:	4604      	mov	r4, r0
 80135b2:	b320      	cbz	r0, 80135fe <uxr_prepare_output_stream_fragmented+0x14a>
 80135b4:	a907      	add	r1, sp, #28
 80135b6:	4630      	mov	r0, r6
 80135b8:	f001 f828 	bl	801460c <uxr_serialize_WRITE_DATA_Payload_Data>
 80135bc:	4630      	mov	r0, r6
 80135be:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80135c2:	1a52      	subs	r2, r2, r1
 80135c4:	f7fe f98e 	bl	80118e4 <ucdr_init_buffer>
 80135c8:	9b05      	ldr	r3, [sp, #20]
 80135ca:	9a02      	ldr	r2, [sp, #8]
 80135cc:	4630      	mov	r0, r6
 80135ce:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 80135d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80135d4:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 80135d8:	462a      	mov	r2, r5
 80135da:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 80135de:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80135e0:	4918      	ldr	r1, [pc, #96]	; (8013644 <uxr_prepare_output_stream_fragmented+0x190>)
 80135e2:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 80135e6:	f7fe f951 	bl	801188c <ucdr_set_on_full_buffer_callback>
 80135ea:	4620      	mov	r0, r4
 80135ec:	b011      	add	sp, #68	; 0x44
 80135ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80135f4:	4628      	mov	r0, r5
 80135f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80135f8:	4798      	blx	r3
 80135fa:	b920      	cbnz	r0, 8013606 <uxr_prepare_output_stream_fragmented+0x152>
 80135fc:	2400      	movs	r4, #0
 80135fe:	4620      	mov	r0, r4
 8013600:	b011      	add	sp, #68	; 0x44
 8013602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013606:	4620      	mov	r0, r4
 8013608:	f008 f8c4 	bl	801b794 <get_available_free_slots>
 801360c:	2800      	cmp	r0, #0
 801360e:	f47f af6b 	bne.w	80134e8 <uxr_prepare_output_stream_fragmented+0x34>
 8013612:	e7f3      	b.n	80135fc <uxr_prepare_output_stream_fragmented+0x148>
 8013614:	4638      	mov	r0, r7
 8013616:	2101      	movs	r1, #1
 8013618:	f008 fa0e 	bl	801ba38 <uxr_seq_num_add>
 801361c:	8922      	ldrh	r2, [r4, #8]
 801361e:	6863      	ldr	r3, [r4, #4]
 8013620:	4607      	mov	r7, r0
 8013622:	fbb3 f9f2 	udiv	r9, r3, r2
 8013626:	fbb0 f3f2 	udiv	r3, r0, r2
 801362a:	fb02 0313 	mls	r3, r2, r3, r0
 801362e:	b29b      	uxth	r3, r3
 8013630:	fb03 f909 	mul.w	r9, r3, r9
 8013634:	6823      	ldr	r3, [r4, #0]
 8013636:	f109 0904 	add.w	r9, r9, #4
 801363a:	4499      	add	r9, r3
 801363c:	7b23      	ldrb	r3, [r4, #12]
 801363e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8013642:	e76a      	b.n	801351a <uxr_prepare_output_stream_fragmented+0x66>
 8013644:	08013341 	.word	0x08013341

08013648 <uxr_serialize_message_header>:
 8013648:	b5f0      	push	{r4, r5, r6, r7, lr}
 801364a:	4616      	mov	r6, r2
 801364c:	b083      	sub	sp, #12
 801364e:	4604      	mov	r4, r0
 8013650:	460d      	mov	r5, r1
 8013652:	9301      	str	r3, [sp, #4]
 8013654:	9f08      	ldr	r7, [sp, #32]
 8013656:	f7fc fcb5 	bl	800ffc4 <ucdr_serialize_uint8_t>
 801365a:	4631      	mov	r1, r6
 801365c:	4620      	mov	r0, r4
 801365e:	f7fc fcb1 	bl	800ffc4 <ucdr_serialize_uint8_t>
 8013662:	9a01      	ldr	r2, [sp, #4]
 8013664:	2101      	movs	r1, #1
 8013666:	4620      	mov	r0, r4
 8013668:	f7fc fd58 	bl	801011c <ucdr_serialize_endian_uint16_t>
 801366c:	062b      	lsls	r3, r5, #24
 801366e:	d501      	bpl.n	8013674 <uxr_serialize_message_header+0x2c>
 8013670:	b003      	add	sp, #12
 8013672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013674:	2204      	movs	r2, #4
 8013676:	4639      	mov	r1, r7
 8013678:	4620      	mov	r0, r4
 801367a:	b003      	add	sp, #12
 801367c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013680:	f7fc ba54 	b.w	800fb2c <ucdr_serialize_array_uint8_t>

08013684 <uxr_deserialize_message_header>:
 8013684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013686:	4616      	mov	r6, r2
 8013688:	b083      	sub	sp, #12
 801368a:	4604      	mov	r4, r0
 801368c:	460d      	mov	r5, r1
 801368e:	9301      	str	r3, [sp, #4]
 8013690:	9f08      	ldr	r7, [sp, #32]
 8013692:	f7fc fcad 	bl	800fff0 <ucdr_deserialize_uint8_t>
 8013696:	4631      	mov	r1, r6
 8013698:	4620      	mov	r0, r4
 801369a:	f7fc fca9 	bl	800fff0 <ucdr_deserialize_uint8_t>
 801369e:	9a01      	ldr	r2, [sp, #4]
 80136a0:	2101      	movs	r1, #1
 80136a2:	4620      	mov	r0, r4
 80136a4:	f7fc fe2e 	bl	8010304 <ucdr_deserialize_endian_uint16_t>
 80136a8:	f995 3000 	ldrsb.w	r3, [r5]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	da01      	bge.n	80136b4 <uxr_deserialize_message_header+0x30>
 80136b0:	b003      	add	sp, #12
 80136b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136b4:	2204      	movs	r2, #4
 80136b6:	4639      	mov	r1, r7
 80136b8:	4620      	mov	r0, r4
 80136ba:	b003      	add	sp, #12
 80136bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80136c0:	f7fc ba98 	b.w	800fbf4 <ucdr_deserialize_array_uint8_t>

080136c4 <uxr_serialize_submessage_header>:
 80136c4:	b530      	push	{r4, r5, lr}
 80136c6:	4615      	mov	r5, r2
 80136c8:	b083      	sub	sp, #12
 80136ca:	4604      	mov	r4, r0
 80136cc:	9301      	str	r3, [sp, #4]
 80136ce:	f7fc fc79 	bl	800ffc4 <ucdr_serialize_uint8_t>
 80136d2:	4629      	mov	r1, r5
 80136d4:	4620      	mov	r0, r4
 80136d6:	f7fc fc75 	bl	800ffc4 <ucdr_serialize_uint8_t>
 80136da:	9a01      	ldr	r2, [sp, #4]
 80136dc:	2101      	movs	r1, #1
 80136de:	4620      	mov	r0, r4
 80136e0:	b003      	add	sp, #12
 80136e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80136e6:	f7fc bd19 	b.w	801011c <ucdr_serialize_endian_uint16_t>
 80136ea:	bf00      	nop

080136ec <uxr_deserialize_submessage_header>:
 80136ec:	b530      	push	{r4, r5, lr}
 80136ee:	4615      	mov	r5, r2
 80136f0:	b083      	sub	sp, #12
 80136f2:	4604      	mov	r4, r0
 80136f4:	9301      	str	r3, [sp, #4]
 80136f6:	f7fc fc7b 	bl	800fff0 <ucdr_deserialize_uint8_t>
 80136fa:	4629      	mov	r1, r5
 80136fc:	4620      	mov	r0, r4
 80136fe:	f7fc fc77 	bl	800fff0 <ucdr_deserialize_uint8_t>
 8013702:	9a01      	ldr	r2, [sp, #4]
 8013704:	2101      	movs	r1, #1
 8013706:	4620      	mov	r0, r4
 8013708:	b003      	add	sp, #12
 801370a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801370e:	f7fc bdf9 	b.w	8010304 <ucdr_deserialize_endian_uint16_t>
 8013712:	bf00      	nop

08013714 <uxr_serialize_CLIENT_Representation>:
 8013714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013718:	2204      	movs	r2, #4
 801371a:	460e      	mov	r6, r1
 801371c:	4605      	mov	r5, r0
 801371e:	f7fc fa05 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 8013722:	4607      	mov	r7, r0
 8013724:	2202      	movs	r2, #2
 8013726:	1d31      	adds	r1, r6, #4
 8013728:	4628      	mov	r0, r5
 801372a:	f7fc f9ff 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 801372e:	4038      	ands	r0, r7
 8013730:	2202      	movs	r2, #2
 8013732:	1db1      	adds	r1, r6, #6
 8013734:	b2c7      	uxtb	r7, r0
 8013736:	4628      	mov	r0, r5
 8013738:	f7fc f9f8 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 801373c:	2204      	movs	r2, #4
 801373e:	4007      	ands	r7, r0
 8013740:	f106 0108 	add.w	r1, r6, #8
 8013744:	4628      	mov	r0, r5
 8013746:	f7fc f9f1 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 801374a:	4007      	ands	r7, r0
 801374c:	7b31      	ldrb	r1, [r6, #12]
 801374e:	4628      	mov	r0, r5
 8013750:	f7fc fc38 	bl	800ffc4 <ucdr_serialize_uint8_t>
 8013754:	7b71      	ldrb	r1, [r6, #13]
 8013756:	4007      	ands	r7, r0
 8013758:	4628      	mov	r0, r5
 801375a:	f7fc fc05 	bl	800ff68 <ucdr_serialize_bool>
 801375e:	7b73      	ldrb	r3, [r6, #13]
 8013760:	ea07 0800 	and.w	r8, r7, r0
 8013764:	b93b      	cbnz	r3, 8013776 <uxr_serialize_CLIENT_Representation+0x62>
 8013766:	8bb1      	ldrh	r1, [r6, #28]
 8013768:	4628      	mov	r0, r5
 801376a:	f7fc fc57 	bl	801001c <ucdr_serialize_uint16_t>
 801376e:	ea08 0000 	and.w	r0, r8, r0
 8013772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013776:	6931      	ldr	r1, [r6, #16]
 8013778:	4628      	mov	r0, r5
 801377a:	f7fc fe39 	bl	80103f0 <ucdr_serialize_uint32_t>
 801377e:	6933      	ldr	r3, [r6, #16]
 8013780:	b1e3      	cbz	r3, 80137bc <uxr_serialize_CLIENT_Representation+0xa8>
 8013782:	b1c0      	cbz	r0, 80137b6 <uxr_serialize_CLIENT_Representation+0xa2>
 8013784:	4637      	mov	r7, r6
 8013786:	f04f 0900 	mov.w	r9, #0
 801378a:	e000      	b.n	801378e <uxr_serialize_CLIENT_Representation+0x7a>
 801378c:	b19c      	cbz	r4, 80137b6 <uxr_serialize_CLIENT_Representation+0xa2>
 801378e:	6979      	ldr	r1, [r7, #20]
 8013790:	4628      	mov	r0, r5
 8013792:	f007 f9ff 	bl	801ab94 <ucdr_serialize_string>
 8013796:	69b9      	ldr	r1, [r7, #24]
 8013798:	4604      	mov	r4, r0
 801379a:	4628      	mov	r0, r5
 801379c:	f007 f9fa 	bl	801ab94 <ucdr_serialize_string>
 80137a0:	f109 0901 	add.w	r9, r9, #1
 80137a4:	6933      	ldr	r3, [r6, #16]
 80137a6:	4004      	ands	r4, r0
 80137a8:	3708      	adds	r7, #8
 80137aa:	4599      	cmp	r9, r3
 80137ac:	b2e4      	uxtb	r4, r4
 80137ae:	d3ed      	bcc.n	801378c <uxr_serialize_CLIENT_Representation+0x78>
 80137b0:	ea08 0804 	and.w	r8, r8, r4
 80137b4:	e7d7      	b.n	8013766 <uxr_serialize_CLIENT_Representation+0x52>
 80137b6:	f04f 0800 	mov.w	r8, #0
 80137ba:	e7d4      	b.n	8013766 <uxr_serialize_CLIENT_Representation+0x52>
 80137bc:	ea08 0800 	and.w	r8, r8, r0
 80137c0:	e7d1      	b.n	8013766 <uxr_serialize_CLIENT_Representation+0x52>
 80137c2:	bf00      	nop

080137c4 <uxr_deserialize_CLIENT_Representation>:
 80137c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137c8:	2204      	movs	r2, #4
 80137ca:	460c      	mov	r4, r1
 80137cc:	4605      	mov	r5, r0
 80137ce:	f7fc fa11 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 80137d2:	4607      	mov	r7, r0
 80137d4:	2202      	movs	r2, #2
 80137d6:	1d21      	adds	r1, r4, #4
 80137d8:	4628      	mov	r0, r5
 80137da:	f7fc fa0b 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 80137de:	4038      	ands	r0, r7
 80137e0:	2202      	movs	r2, #2
 80137e2:	1da1      	adds	r1, r4, #6
 80137e4:	b2c6      	uxtb	r6, r0
 80137e6:	4628      	mov	r0, r5
 80137e8:	f7fc fa04 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 80137ec:	2204      	movs	r2, #4
 80137ee:	4006      	ands	r6, r0
 80137f0:	f104 0108 	add.w	r1, r4, #8
 80137f4:	4628      	mov	r0, r5
 80137f6:	f7fc f9fd 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 80137fa:	4006      	ands	r6, r0
 80137fc:	f104 010c 	add.w	r1, r4, #12
 8013800:	4628      	mov	r0, r5
 8013802:	f7fc fbf5 	bl	800fff0 <ucdr_deserialize_uint8_t>
 8013806:	f104 010d 	add.w	r1, r4, #13
 801380a:	ea06 0700 	and.w	r7, r6, r0
 801380e:	4628      	mov	r0, r5
 8013810:	f7fc fbc0 	bl	800ff94 <ucdr_deserialize_bool>
 8013814:	7b63      	ldrb	r3, [r4, #13]
 8013816:	4007      	ands	r7, r0
 8013818:	b93b      	cbnz	r3, 801382a <uxr_deserialize_CLIENT_Representation+0x66>
 801381a:	f104 011c 	add.w	r1, r4, #28
 801381e:	4628      	mov	r0, r5
 8013820:	f7fc fcfc 	bl	801021c <ucdr_deserialize_uint16_t>
 8013824:	4038      	ands	r0, r7
 8013826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801382a:	f104 0110 	add.w	r1, r4, #16
 801382e:	4628      	mov	r0, r5
 8013830:	f7fc ff0e 	bl	8010650 <ucdr_deserialize_uint32_t>
 8013834:	6923      	ldr	r3, [r4, #16]
 8013836:	2b01      	cmp	r3, #1
 8013838:	d903      	bls.n	8013842 <uxr_deserialize_CLIENT_Representation+0x7e>
 801383a:	2301      	movs	r3, #1
 801383c:	2700      	movs	r7, #0
 801383e:	75ab      	strb	r3, [r5, #22]
 8013840:	e7eb      	b.n	801381a <uxr_deserialize_CLIENT_Representation+0x56>
 8013842:	b30b      	cbz	r3, 8013888 <uxr_deserialize_CLIENT_Representation+0xc4>
 8013844:	b1f0      	cbz	r0, 8013884 <uxr_deserialize_CLIENT_Representation+0xc0>
 8013846:	46a0      	mov	r8, r4
 8013848:	f04f 0900 	mov.w	r9, #0
 801384c:	e000      	b.n	8013850 <uxr_deserialize_CLIENT_Representation+0x8c>
 801384e:	b1ce      	cbz	r6, 8013884 <uxr_deserialize_CLIENT_Representation+0xc0>
 8013850:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013854:	f108 0808 	add.w	r8, r8, #8
 8013858:	f44f 7200 	mov.w	r2, #512	; 0x200
 801385c:	4628      	mov	r0, r5
 801385e:	f007 f9a9 	bl	801abb4 <ucdr_deserialize_string>
 8013862:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013866:	4606      	mov	r6, r0
 8013868:	f44f 7200 	mov.w	r2, #512	; 0x200
 801386c:	4628      	mov	r0, r5
 801386e:	f109 0901 	add.w	r9, r9, #1
 8013872:	f007 f99f 	bl	801abb4 <ucdr_deserialize_string>
 8013876:	6923      	ldr	r3, [r4, #16]
 8013878:	4006      	ands	r6, r0
 801387a:	4599      	cmp	r9, r3
 801387c:	b2f6      	uxtb	r6, r6
 801387e:	d3e6      	bcc.n	801384e <uxr_deserialize_CLIENT_Representation+0x8a>
 8013880:	4037      	ands	r7, r6
 8013882:	e7ca      	b.n	801381a <uxr_deserialize_CLIENT_Representation+0x56>
 8013884:	2700      	movs	r7, #0
 8013886:	e7c8      	b.n	801381a <uxr_deserialize_CLIENT_Representation+0x56>
 8013888:	4007      	ands	r7, r0
 801388a:	e7c6      	b.n	801381a <uxr_deserialize_CLIENT_Representation+0x56>

0801388c <uxr_serialize_AGENT_Representation>:
 801388c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013890:	2204      	movs	r2, #4
 8013892:	460f      	mov	r7, r1
 8013894:	4605      	mov	r5, r0
 8013896:	f7fc f949 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 801389a:	4604      	mov	r4, r0
 801389c:	2202      	movs	r2, #2
 801389e:	1d39      	adds	r1, r7, #4
 80138a0:	4628      	mov	r0, r5
 80138a2:	f7fc f943 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 80138a6:	4020      	ands	r0, r4
 80138a8:	2202      	movs	r2, #2
 80138aa:	1db9      	adds	r1, r7, #6
 80138ac:	b2c4      	uxtb	r4, r0
 80138ae:	4628      	mov	r0, r5
 80138b0:	f7fc f93c 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 80138b4:	7a39      	ldrb	r1, [r7, #8]
 80138b6:	4004      	ands	r4, r0
 80138b8:	4628      	mov	r0, r5
 80138ba:	f7fc fb55 	bl	800ff68 <ucdr_serialize_bool>
 80138be:	7a3b      	ldrb	r3, [r7, #8]
 80138c0:	ea00 0804 	and.w	r8, r0, r4
 80138c4:	b913      	cbnz	r3, 80138cc <uxr_serialize_AGENT_Representation+0x40>
 80138c6:	4640      	mov	r0, r8
 80138c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138cc:	68f9      	ldr	r1, [r7, #12]
 80138ce:	4628      	mov	r0, r5
 80138d0:	f7fc fd8e 	bl	80103f0 <ucdr_serialize_uint32_t>
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	b303      	cbz	r3, 801391a <uxr_serialize_AGENT_Representation+0x8e>
 80138d8:	b1d0      	cbz	r0, 8013910 <uxr_serialize_AGENT_Representation+0x84>
 80138da:	463e      	mov	r6, r7
 80138dc:	f04f 0900 	mov.w	r9, #0
 80138e0:	e000      	b.n	80138e4 <uxr_serialize_AGENT_Representation+0x58>
 80138e2:	b1ac      	cbz	r4, 8013910 <uxr_serialize_AGENT_Representation+0x84>
 80138e4:	6931      	ldr	r1, [r6, #16]
 80138e6:	4628      	mov	r0, r5
 80138e8:	f007 f954 	bl	801ab94 <ucdr_serialize_string>
 80138ec:	6971      	ldr	r1, [r6, #20]
 80138ee:	4604      	mov	r4, r0
 80138f0:	4628      	mov	r0, r5
 80138f2:	f007 f94f 	bl	801ab94 <ucdr_serialize_string>
 80138f6:	f109 0901 	add.w	r9, r9, #1
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	4004      	ands	r4, r0
 80138fe:	3608      	adds	r6, #8
 8013900:	4599      	cmp	r9, r3
 8013902:	b2e4      	uxtb	r4, r4
 8013904:	d3ed      	bcc.n	80138e2 <uxr_serialize_AGENT_Representation+0x56>
 8013906:	ea08 0804 	and.w	r8, r8, r4
 801390a:	4640      	mov	r0, r8
 801390c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013910:	f04f 0800 	mov.w	r8, #0
 8013914:	4640      	mov	r0, r8
 8013916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801391a:	ea08 0800 	and.w	r8, r8, r0
 801391e:	e7d2      	b.n	80138c6 <uxr_serialize_AGENT_Representation+0x3a>

08013920 <uxr_serialize_DATAWRITER_Representation>:
 8013920:	b570      	push	{r4, r5, r6, lr}
 8013922:	460d      	mov	r5, r1
 8013924:	7809      	ldrb	r1, [r1, #0]
 8013926:	4606      	mov	r6, r0
 8013928:	f7fc fb4c 	bl	800ffc4 <ucdr_serialize_uint8_t>
 801392c:	4604      	mov	r4, r0
 801392e:	b130      	cbz	r0, 801393e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013930:	782b      	ldrb	r3, [r5, #0]
 8013932:	2b02      	cmp	r3, #2
 8013934:	d00c      	beq.n	8013950 <uxr_serialize_DATAWRITER_Representation+0x30>
 8013936:	2b03      	cmp	r3, #3
 8013938:	d010      	beq.n	801395c <uxr_serialize_DATAWRITER_Representation+0x3c>
 801393a:	2b01      	cmp	r3, #1
 801393c:	d008      	beq.n	8013950 <uxr_serialize_DATAWRITER_Representation+0x30>
 801393e:	2202      	movs	r2, #2
 8013940:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8013944:	4630      	mov	r0, r6
 8013946:	f7fc f8f1 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 801394a:	4020      	ands	r0, r4
 801394c:	b2c0      	uxtb	r0, r0
 801394e:	bd70      	pop	{r4, r5, r6, pc}
 8013950:	6869      	ldr	r1, [r5, #4]
 8013952:	4630      	mov	r0, r6
 8013954:	f007 f91e 	bl	801ab94 <ucdr_serialize_string>
 8013958:	4604      	mov	r4, r0
 801395a:	e7f0      	b.n	801393e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801395c:	4629      	mov	r1, r5
 801395e:	4630      	mov	r0, r6
 8013960:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8013964:	3104      	adds	r1, #4
 8013966:	f007 f8e9 	bl	801ab3c <ucdr_serialize_sequence_uint8_t>
 801396a:	4604      	mov	r4, r0
 801396c:	e7e7      	b.n	801393e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801396e:	bf00      	nop

08013970 <uxr_serialize_ObjectVariant.part.0>:
 8013970:	b570      	push	{r4, r5, r6, lr}
 8013972:	780b      	ldrb	r3, [r1, #0]
 8013974:	460c      	mov	r4, r1
 8013976:	4605      	mov	r5, r0
 8013978:	3b01      	subs	r3, #1
 801397a:	2b0d      	cmp	r3, #13
 801397c:	d854      	bhi.n	8013a28 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801397e:	e8df f003 	tbb	[pc, r3]
 8013982:	0730      	.short	0x0730
 8013984:	07071b1b 	.word	0x07071b1b
 8013988:	0c530707 	.word	0x0c530707
 801398c:	494e0c0c 	.word	0x494e0c0c
 8013990:	3104      	adds	r1, #4
 8013992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013996:	f7ff bfc3 	b.w	8013920 <uxr_serialize_DATAWRITER_Representation>
 801399a:	7909      	ldrb	r1, [r1, #4]
 801399c:	f7fc fb12 	bl	800ffc4 <ucdr_serialize_uint8_t>
 80139a0:	b1e8      	cbz	r0, 80139de <uxr_serialize_ObjectVariant.part.0+0x6e>
 80139a2:	7923      	ldrb	r3, [r4, #4]
 80139a4:	2b01      	cmp	r3, #1
 80139a6:	d001      	beq.n	80139ac <uxr_serialize_ObjectVariant.part.0+0x3c>
 80139a8:	2b02      	cmp	r3, #2
 80139aa:	d13d      	bne.n	8013a28 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80139ac:	68a1      	ldr	r1, [r4, #8]
 80139ae:	4628      	mov	r0, r5
 80139b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80139b4:	f007 b8ee 	b.w	801ab94 <ucdr_serialize_string>
 80139b8:	7909      	ldrb	r1, [r1, #4]
 80139ba:	f7fc fb03 	bl	800ffc4 <ucdr_serialize_uint8_t>
 80139be:	4606      	mov	r6, r0
 80139c0:	b120      	cbz	r0, 80139cc <uxr_serialize_ObjectVariant.part.0+0x5c>
 80139c2:	7923      	ldrb	r3, [r4, #4]
 80139c4:	2b02      	cmp	r3, #2
 80139c6:	d039      	beq.n	8013a3c <uxr_serialize_ObjectVariant.part.0+0xcc>
 80139c8:	2b03      	cmp	r3, #3
 80139ca:	d02f      	beq.n	8013a2c <uxr_serialize_ObjectVariant.part.0+0xbc>
 80139cc:	2202      	movs	r2, #2
 80139ce:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80139d2:	4628      	mov	r0, r5
 80139d4:	f7fc f8aa 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 80139d8:	4030      	ands	r0, r6
 80139da:	b2c0      	uxtb	r0, r0
 80139dc:	bd70      	pop	{r4, r5, r6, pc}
 80139de:	2000      	movs	r0, #0
 80139e0:	bd70      	pop	{r4, r5, r6, pc}
 80139e2:	7909      	ldrb	r1, [r1, #4]
 80139e4:	f7fc faee 	bl	800ffc4 <ucdr_serialize_uint8_t>
 80139e8:	4606      	mov	r6, r0
 80139ea:	b158      	cbz	r0, 8013a04 <uxr_serialize_ObjectVariant.part.0+0x94>
 80139ec:	7923      	ldrb	r3, [r4, #4]
 80139ee:	2b02      	cmp	r3, #2
 80139f0:	d003      	beq.n	80139fa <uxr_serialize_ObjectVariant.part.0+0x8a>
 80139f2:	2b03      	cmp	r3, #3
 80139f4:	d028      	beq.n	8013a48 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80139f6:	2b01      	cmp	r3, #1
 80139f8:	d104      	bne.n	8013a04 <uxr_serialize_ObjectVariant.part.0+0x94>
 80139fa:	68a1      	ldr	r1, [r4, #8]
 80139fc:	4628      	mov	r0, r5
 80139fe:	f007 f8c9 	bl	801ab94 <ucdr_serialize_string>
 8013a02:	4606      	mov	r6, r0
 8013a04:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8013a08:	4628      	mov	r0, r5
 8013a0a:	f7fd f817 	bl	8010a3c <ucdr_serialize_int16_t>
 8013a0e:	4030      	ands	r0, r6
 8013a10:	b2c0      	uxtb	r0, r0
 8013a12:	bd70      	pop	{r4, r5, r6, pc}
 8013a14:	3104      	adds	r1, #4
 8013a16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a1a:	f7ff be7b 	b.w	8013714 <uxr_serialize_CLIENT_Representation>
 8013a1e:	3104      	adds	r1, #4
 8013a20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a24:	f7ff bf32 	b.w	801388c <uxr_serialize_AGENT_Representation>
 8013a28:	2001      	movs	r0, #1
 8013a2a:	bd70      	pop	{r4, r5, r6, pc}
 8013a2c:	68a2      	ldr	r2, [r4, #8]
 8013a2e:	f104 010c 	add.w	r1, r4, #12
 8013a32:	4628      	mov	r0, r5
 8013a34:	f007 f882 	bl	801ab3c <ucdr_serialize_sequence_uint8_t>
 8013a38:	4606      	mov	r6, r0
 8013a3a:	e7c7      	b.n	80139cc <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013a3c:	68a1      	ldr	r1, [r4, #8]
 8013a3e:	4628      	mov	r0, r5
 8013a40:	f007 f8a8 	bl	801ab94 <ucdr_serialize_string>
 8013a44:	4606      	mov	r6, r0
 8013a46:	e7c1      	b.n	80139cc <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013a48:	68a2      	ldr	r2, [r4, #8]
 8013a4a:	f104 010c 	add.w	r1, r4, #12
 8013a4e:	4628      	mov	r0, r5
 8013a50:	f007 f874 	bl	801ab3c <ucdr_serialize_sequence_uint8_t>
 8013a54:	4606      	mov	r6, r0
 8013a56:	e7d5      	b.n	8013a04 <uxr_serialize_ObjectVariant.part.0+0x94>

08013a58 <uxr_deserialize_DATAWRITER_Representation>:
 8013a58:	b570      	push	{r4, r5, r6, lr}
 8013a5a:	4606      	mov	r6, r0
 8013a5c:	460d      	mov	r5, r1
 8013a5e:	f7fc fac7 	bl	800fff0 <ucdr_deserialize_uint8_t>
 8013a62:	4604      	mov	r4, r0
 8013a64:	b130      	cbz	r0, 8013a74 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013a66:	782b      	ldrb	r3, [r5, #0]
 8013a68:	2b02      	cmp	r3, #2
 8013a6a:	d00c      	beq.n	8013a86 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013a6c:	2b03      	cmp	r3, #3
 8013a6e:	d012      	beq.n	8013a96 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8013a70:	2b01      	cmp	r3, #1
 8013a72:	d008      	beq.n	8013a86 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013a74:	2202      	movs	r2, #2
 8013a76:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8013a7a:	4630      	mov	r0, r6
 8013a7c:	f7fc f8ba 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 8013a80:	4020      	ands	r0, r4
 8013a82:	b2c0      	uxtb	r0, r0
 8013a84:	bd70      	pop	{r4, r5, r6, pc}
 8013a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a8a:	6869      	ldr	r1, [r5, #4]
 8013a8c:	4630      	mov	r0, r6
 8013a8e:	f007 f891 	bl	801abb4 <ucdr_deserialize_string>
 8013a92:	4604      	mov	r4, r0
 8013a94:	e7ee      	b.n	8013a74 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013a96:	1d2b      	adds	r3, r5, #4
 8013a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a9c:	f105 0108 	add.w	r1, r5, #8
 8013aa0:	4630      	mov	r0, r6
 8013aa2:	f007 f85d 	bl	801ab60 <ucdr_deserialize_sequence_uint8_t>
 8013aa6:	4604      	mov	r4, r0
 8013aa8:	e7e4      	b.n	8013a74 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013aaa:	bf00      	nop

08013aac <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8013aac:	b570      	push	{r4, r5, r6, lr}
 8013aae:	460d      	mov	r5, r1
 8013ab0:	7809      	ldrb	r1, [r1, #0]
 8013ab2:	4606      	mov	r6, r0
 8013ab4:	f7fc fa58 	bl	800ff68 <ucdr_serialize_bool>
 8013ab8:	782b      	ldrb	r3, [r5, #0]
 8013aba:	4604      	mov	r4, r0
 8013abc:	b94b      	cbnz	r3, 8013ad2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8013abe:	7a29      	ldrb	r1, [r5, #8]
 8013ac0:	4630      	mov	r0, r6
 8013ac2:	f7fc fa51 	bl	800ff68 <ucdr_serialize_bool>
 8013ac6:	7a2b      	ldrb	r3, [r5, #8]
 8013ac8:	4004      	ands	r4, r0
 8013aca:	b2e4      	uxtb	r4, r4
 8013acc:	b943      	cbnz	r3, 8013ae0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8013ace:	4620      	mov	r0, r4
 8013ad0:	bd70      	pop	{r4, r5, r6, pc}
 8013ad2:	6869      	ldr	r1, [r5, #4]
 8013ad4:	4630      	mov	r0, r6
 8013ad6:	f007 f85d 	bl	801ab94 <ucdr_serialize_string>
 8013ada:	4004      	ands	r4, r0
 8013adc:	b2e4      	uxtb	r4, r4
 8013ade:	e7ee      	b.n	8013abe <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8013ae0:	68e9      	ldr	r1, [r5, #12]
 8013ae2:	4630      	mov	r0, r6
 8013ae4:	f007 f856 	bl	801ab94 <ucdr_serialize_string>
 8013ae8:	4004      	ands	r4, r0
 8013aea:	4620      	mov	r0, r4
 8013aec:	bd70      	pop	{r4, r5, r6, pc}
 8013aee:	bf00      	nop

08013af0 <uxr_serialize_OBJK_Topic_Binary>:
 8013af0:	b570      	push	{r4, r5, r6, lr}
 8013af2:	460d      	mov	r5, r1
 8013af4:	4606      	mov	r6, r0
 8013af6:	6809      	ldr	r1, [r1, #0]
 8013af8:	f007 f84c 	bl	801ab94 <ucdr_serialize_string>
 8013afc:	4604      	mov	r4, r0
 8013afe:	7929      	ldrb	r1, [r5, #4]
 8013b00:	4630      	mov	r0, r6
 8013b02:	f7fc fa31 	bl	800ff68 <ucdr_serialize_bool>
 8013b06:	792b      	ldrb	r3, [r5, #4]
 8013b08:	4004      	ands	r4, r0
 8013b0a:	b2e4      	uxtb	r4, r4
 8013b0c:	b943      	cbnz	r3, 8013b20 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8013b0e:	7b29      	ldrb	r1, [r5, #12]
 8013b10:	4630      	mov	r0, r6
 8013b12:	f7fc fa29 	bl	800ff68 <ucdr_serialize_bool>
 8013b16:	7b2b      	ldrb	r3, [r5, #12]
 8013b18:	4004      	ands	r4, r0
 8013b1a:	b93b      	cbnz	r3, 8013b2c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8013b1c:	4620      	mov	r0, r4
 8013b1e:	bd70      	pop	{r4, r5, r6, pc}
 8013b20:	68a9      	ldr	r1, [r5, #8]
 8013b22:	4630      	mov	r0, r6
 8013b24:	f007 f836 	bl	801ab94 <ucdr_serialize_string>
 8013b28:	4004      	ands	r4, r0
 8013b2a:	e7f0      	b.n	8013b0e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8013b2c:	6929      	ldr	r1, [r5, #16]
 8013b2e:	4630      	mov	r0, r6
 8013b30:	f007 f830 	bl	801ab94 <ucdr_serialize_string>
 8013b34:	4004      	ands	r4, r0
 8013b36:	b2e4      	uxtb	r4, r4
 8013b38:	4620      	mov	r0, r4
 8013b3a:	bd70      	pop	{r4, r5, r6, pc}

08013b3c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8013b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b40:	460c      	mov	r4, r1
 8013b42:	7809      	ldrb	r1, [r1, #0]
 8013b44:	4606      	mov	r6, r0
 8013b46:	f7fc fa0f 	bl	800ff68 <ucdr_serialize_bool>
 8013b4a:	7823      	ldrb	r3, [r4, #0]
 8013b4c:	4605      	mov	r5, r0
 8013b4e:	b96b      	cbnz	r3, 8013b6c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8013b50:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8013b54:	4630      	mov	r0, r6
 8013b56:	f7fc fa07 	bl	800ff68 <ucdr_serialize_bool>
 8013b5a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8013b5e:	4005      	ands	r5, r0
 8013b60:	b2ed      	uxtb	r5, r5
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d169      	bne.n	8013c3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8013b66:	4628      	mov	r0, r5
 8013b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b6c:	6861      	ldr	r1, [r4, #4]
 8013b6e:	4630      	mov	r0, r6
 8013b70:	f7fc fc3e 	bl	80103f0 <ucdr_serialize_uint32_t>
 8013b74:	6863      	ldr	r3, [r4, #4]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d06b      	beq.n	8013c52 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8013b7a:	2800      	cmp	r0, #0
 8013b7c:	d067      	beq.n	8013c4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013b7e:	68a1      	ldr	r1, [r4, #8]
 8013b80:	4630      	mov	r0, r6
 8013b82:	f007 f807 	bl	801ab94 <ucdr_serialize_string>
 8013b86:	6863      	ldr	r3, [r4, #4]
 8013b88:	2b01      	cmp	r3, #1
 8013b8a:	d953      	bls.n	8013c34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013b8c:	2800      	cmp	r0, #0
 8013b8e:	d05e      	beq.n	8013c4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013b90:	68e1      	ldr	r1, [r4, #12]
 8013b92:	4630      	mov	r0, r6
 8013b94:	f006 fffe 	bl	801ab94 <ucdr_serialize_string>
 8013b98:	6863      	ldr	r3, [r4, #4]
 8013b9a:	2b02      	cmp	r3, #2
 8013b9c:	d94a      	bls.n	8013c34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013b9e:	2800      	cmp	r0, #0
 8013ba0:	d055      	beq.n	8013c4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013ba2:	6921      	ldr	r1, [r4, #16]
 8013ba4:	4630      	mov	r0, r6
 8013ba6:	f006 fff5 	bl	801ab94 <ucdr_serialize_string>
 8013baa:	6863      	ldr	r3, [r4, #4]
 8013bac:	2b03      	cmp	r3, #3
 8013bae:	d941      	bls.n	8013c34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013bb0:	2800      	cmp	r0, #0
 8013bb2:	d04c      	beq.n	8013c4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013bb4:	6961      	ldr	r1, [r4, #20]
 8013bb6:	4630      	mov	r0, r6
 8013bb8:	f006 ffec 	bl	801ab94 <ucdr_serialize_string>
 8013bbc:	6863      	ldr	r3, [r4, #4]
 8013bbe:	2b04      	cmp	r3, #4
 8013bc0:	d938      	bls.n	8013c34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013bc2:	2800      	cmp	r0, #0
 8013bc4:	d043      	beq.n	8013c4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013bc6:	69a1      	ldr	r1, [r4, #24]
 8013bc8:	4630      	mov	r0, r6
 8013bca:	f006 ffe3 	bl	801ab94 <ucdr_serialize_string>
 8013bce:	6863      	ldr	r3, [r4, #4]
 8013bd0:	2b05      	cmp	r3, #5
 8013bd2:	d92f      	bls.n	8013c34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013bd4:	2800      	cmp	r0, #0
 8013bd6:	d03a      	beq.n	8013c4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013bd8:	69e1      	ldr	r1, [r4, #28]
 8013bda:	4630      	mov	r0, r6
 8013bdc:	f006 ffda 	bl	801ab94 <ucdr_serialize_string>
 8013be0:	6863      	ldr	r3, [r4, #4]
 8013be2:	2b06      	cmp	r3, #6
 8013be4:	d926      	bls.n	8013c34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013be6:	b390      	cbz	r0, 8013c4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013be8:	6a21      	ldr	r1, [r4, #32]
 8013bea:	4630      	mov	r0, r6
 8013bec:	f006 ffd2 	bl	801ab94 <ucdr_serialize_string>
 8013bf0:	6863      	ldr	r3, [r4, #4]
 8013bf2:	2b07      	cmp	r3, #7
 8013bf4:	d91e      	bls.n	8013c34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013bf6:	b350      	cbz	r0, 8013c4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013bf8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013bfa:	4630      	mov	r0, r6
 8013bfc:	f006 ffca 	bl	801ab94 <ucdr_serialize_string>
 8013c00:	6863      	ldr	r3, [r4, #4]
 8013c02:	2b08      	cmp	r3, #8
 8013c04:	d916      	bls.n	8013c34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013c06:	b310      	cbz	r0, 8013c4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013c08:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013c0a:	4630      	mov	r0, r6
 8013c0c:	f006 ffc2 	bl	801ab94 <ucdr_serialize_string>
 8013c10:	6863      	ldr	r3, [r4, #4]
 8013c12:	2b09      	cmp	r3, #9
 8013c14:	d90e      	bls.n	8013c34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013c16:	b1d0      	cbz	r0, 8013c4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013c18:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8013c1c:	2709      	movs	r7, #9
 8013c1e:	e000      	b.n	8013c22 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8013c20:	b1a8      	cbz	r0, 8013c4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013c22:	f858 1b04 	ldr.w	r1, [r8], #4
 8013c26:	4630      	mov	r0, r6
 8013c28:	f006 ffb4 	bl	801ab94 <ucdr_serialize_string>
 8013c2c:	3701      	adds	r7, #1
 8013c2e:	6862      	ldr	r2, [r4, #4]
 8013c30:	4297      	cmp	r7, r2
 8013c32:	d3f5      	bcc.n	8013c20 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8013c34:	4005      	ands	r5, r0
 8013c36:	b2ed      	uxtb	r5, r5
 8013c38:	e78a      	b.n	8013b50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013c3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013c3c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8013c40:	4630      	mov	r0, r6
 8013c42:	f006 ff7b 	bl	801ab3c <ucdr_serialize_sequence_uint8_t>
 8013c46:	4005      	ands	r5, r0
 8013c48:	4628      	mov	r0, r5
 8013c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c4e:	2500      	movs	r5, #0
 8013c50:	e77e      	b.n	8013b50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013c52:	4028      	ands	r0, r5
 8013c54:	b2c5      	uxtb	r5, r0
 8013c56:	e77b      	b.n	8013b50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08013c58 <uxr_serialize_OBJK_Publisher_Binary>:
 8013c58:	b570      	push	{r4, r5, r6, lr}
 8013c5a:	460d      	mov	r5, r1
 8013c5c:	7809      	ldrb	r1, [r1, #0]
 8013c5e:	4606      	mov	r6, r0
 8013c60:	f7fc f982 	bl	800ff68 <ucdr_serialize_bool>
 8013c64:	782b      	ldrb	r3, [r5, #0]
 8013c66:	4604      	mov	r4, r0
 8013c68:	b94b      	cbnz	r3, 8013c7e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8013c6a:	7a29      	ldrb	r1, [r5, #8]
 8013c6c:	4630      	mov	r0, r6
 8013c6e:	f7fc f97b 	bl	800ff68 <ucdr_serialize_bool>
 8013c72:	7a2b      	ldrb	r3, [r5, #8]
 8013c74:	4004      	ands	r4, r0
 8013c76:	b2e4      	uxtb	r4, r4
 8013c78:	b943      	cbnz	r3, 8013c8c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8013c7a:	4620      	mov	r0, r4
 8013c7c:	bd70      	pop	{r4, r5, r6, pc}
 8013c7e:	6869      	ldr	r1, [r5, #4]
 8013c80:	4630      	mov	r0, r6
 8013c82:	f006 ff87 	bl	801ab94 <ucdr_serialize_string>
 8013c86:	4004      	ands	r4, r0
 8013c88:	b2e4      	uxtb	r4, r4
 8013c8a:	e7ee      	b.n	8013c6a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8013c8c:	f105 010c 	add.w	r1, r5, #12
 8013c90:	4630      	mov	r0, r6
 8013c92:	f7ff ff53 	bl	8013b3c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8013c96:	4004      	ands	r4, r0
 8013c98:	4620      	mov	r0, r4
 8013c9a:	bd70      	pop	{r4, r5, r6, pc}

08013c9c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8013c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ca0:	460c      	mov	r4, r1
 8013ca2:	7809      	ldrb	r1, [r1, #0]
 8013ca4:	4606      	mov	r6, r0
 8013ca6:	f7fc f95f 	bl	800ff68 <ucdr_serialize_bool>
 8013caa:	7823      	ldrb	r3, [r4, #0]
 8013cac:	4605      	mov	r5, r0
 8013cae:	b96b      	cbnz	r3, 8013ccc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8013cb0:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8013cb4:	4630      	mov	r0, r6
 8013cb6:	f7fc f957 	bl	800ff68 <ucdr_serialize_bool>
 8013cba:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8013cbe:	4005      	ands	r5, r0
 8013cc0:	b2ed      	uxtb	r5, r5
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d169      	bne.n	8013d9a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8013cc6:	4628      	mov	r0, r5
 8013cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ccc:	6861      	ldr	r1, [r4, #4]
 8013cce:	4630      	mov	r0, r6
 8013cd0:	f7fc fb8e 	bl	80103f0 <ucdr_serialize_uint32_t>
 8013cd4:	6863      	ldr	r3, [r4, #4]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d06b      	beq.n	8013db2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8013cda:	2800      	cmp	r0, #0
 8013cdc:	d067      	beq.n	8013dae <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013cde:	68a1      	ldr	r1, [r4, #8]
 8013ce0:	4630      	mov	r0, r6
 8013ce2:	f006 ff57 	bl	801ab94 <ucdr_serialize_string>
 8013ce6:	6863      	ldr	r3, [r4, #4]
 8013ce8:	2b01      	cmp	r3, #1
 8013cea:	d953      	bls.n	8013d94 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013cec:	2800      	cmp	r0, #0
 8013cee:	d05e      	beq.n	8013dae <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013cf0:	68e1      	ldr	r1, [r4, #12]
 8013cf2:	4630      	mov	r0, r6
 8013cf4:	f006 ff4e 	bl	801ab94 <ucdr_serialize_string>
 8013cf8:	6863      	ldr	r3, [r4, #4]
 8013cfa:	2b02      	cmp	r3, #2
 8013cfc:	d94a      	bls.n	8013d94 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013cfe:	2800      	cmp	r0, #0
 8013d00:	d055      	beq.n	8013dae <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013d02:	6921      	ldr	r1, [r4, #16]
 8013d04:	4630      	mov	r0, r6
 8013d06:	f006 ff45 	bl	801ab94 <ucdr_serialize_string>
 8013d0a:	6863      	ldr	r3, [r4, #4]
 8013d0c:	2b03      	cmp	r3, #3
 8013d0e:	d941      	bls.n	8013d94 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013d10:	2800      	cmp	r0, #0
 8013d12:	d04c      	beq.n	8013dae <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013d14:	6961      	ldr	r1, [r4, #20]
 8013d16:	4630      	mov	r0, r6
 8013d18:	f006 ff3c 	bl	801ab94 <ucdr_serialize_string>
 8013d1c:	6863      	ldr	r3, [r4, #4]
 8013d1e:	2b04      	cmp	r3, #4
 8013d20:	d938      	bls.n	8013d94 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013d22:	2800      	cmp	r0, #0
 8013d24:	d043      	beq.n	8013dae <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013d26:	69a1      	ldr	r1, [r4, #24]
 8013d28:	4630      	mov	r0, r6
 8013d2a:	f006 ff33 	bl	801ab94 <ucdr_serialize_string>
 8013d2e:	6863      	ldr	r3, [r4, #4]
 8013d30:	2b05      	cmp	r3, #5
 8013d32:	d92f      	bls.n	8013d94 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013d34:	2800      	cmp	r0, #0
 8013d36:	d03a      	beq.n	8013dae <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013d38:	69e1      	ldr	r1, [r4, #28]
 8013d3a:	4630      	mov	r0, r6
 8013d3c:	f006 ff2a 	bl	801ab94 <ucdr_serialize_string>
 8013d40:	6863      	ldr	r3, [r4, #4]
 8013d42:	2b06      	cmp	r3, #6
 8013d44:	d926      	bls.n	8013d94 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013d46:	b390      	cbz	r0, 8013dae <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013d48:	6a21      	ldr	r1, [r4, #32]
 8013d4a:	4630      	mov	r0, r6
 8013d4c:	f006 ff22 	bl	801ab94 <ucdr_serialize_string>
 8013d50:	6863      	ldr	r3, [r4, #4]
 8013d52:	2b07      	cmp	r3, #7
 8013d54:	d91e      	bls.n	8013d94 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013d56:	b350      	cbz	r0, 8013dae <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013d58:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013d5a:	4630      	mov	r0, r6
 8013d5c:	f006 ff1a 	bl	801ab94 <ucdr_serialize_string>
 8013d60:	6863      	ldr	r3, [r4, #4]
 8013d62:	2b08      	cmp	r3, #8
 8013d64:	d916      	bls.n	8013d94 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013d66:	b310      	cbz	r0, 8013dae <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013d68:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013d6a:	4630      	mov	r0, r6
 8013d6c:	f006 ff12 	bl	801ab94 <ucdr_serialize_string>
 8013d70:	6863      	ldr	r3, [r4, #4]
 8013d72:	2b09      	cmp	r3, #9
 8013d74:	d90e      	bls.n	8013d94 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013d76:	b1d0      	cbz	r0, 8013dae <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013d78:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8013d7c:	2709      	movs	r7, #9
 8013d7e:	e000      	b.n	8013d82 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8013d80:	b1a8      	cbz	r0, 8013dae <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013d82:	f858 1b04 	ldr.w	r1, [r8], #4
 8013d86:	4630      	mov	r0, r6
 8013d88:	f006 ff04 	bl	801ab94 <ucdr_serialize_string>
 8013d8c:	3701      	adds	r7, #1
 8013d8e:	6862      	ldr	r2, [r4, #4]
 8013d90:	4297      	cmp	r7, r2
 8013d92:	d3f5      	bcc.n	8013d80 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8013d94:	4005      	ands	r5, r0
 8013d96:	b2ed      	uxtb	r5, r5
 8013d98:	e78a      	b.n	8013cb0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013d9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013d9c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8013da0:	4630      	mov	r0, r6
 8013da2:	f006 fecb 	bl	801ab3c <ucdr_serialize_sequence_uint8_t>
 8013da6:	4005      	ands	r5, r0
 8013da8:	4628      	mov	r0, r5
 8013daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dae:	2500      	movs	r5, #0
 8013db0:	e77e      	b.n	8013cb0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013db2:	4028      	ands	r0, r5
 8013db4:	b2c5      	uxtb	r5, r0
 8013db6:	e77b      	b.n	8013cb0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08013db8 <uxr_serialize_OBJK_Subscriber_Binary>:
 8013db8:	b570      	push	{r4, r5, r6, lr}
 8013dba:	460d      	mov	r5, r1
 8013dbc:	7809      	ldrb	r1, [r1, #0]
 8013dbe:	4606      	mov	r6, r0
 8013dc0:	f7fc f8d2 	bl	800ff68 <ucdr_serialize_bool>
 8013dc4:	782b      	ldrb	r3, [r5, #0]
 8013dc6:	4604      	mov	r4, r0
 8013dc8:	b94b      	cbnz	r3, 8013dde <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8013dca:	7a29      	ldrb	r1, [r5, #8]
 8013dcc:	4630      	mov	r0, r6
 8013dce:	f7fc f8cb 	bl	800ff68 <ucdr_serialize_bool>
 8013dd2:	7a2b      	ldrb	r3, [r5, #8]
 8013dd4:	4004      	ands	r4, r0
 8013dd6:	b2e4      	uxtb	r4, r4
 8013dd8:	b943      	cbnz	r3, 8013dec <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8013dda:	4620      	mov	r0, r4
 8013ddc:	bd70      	pop	{r4, r5, r6, pc}
 8013dde:	6869      	ldr	r1, [r5, #4]
 8013de0:	4630      	mov	r0, r6
 8013de2:	f006 fed7 	bl	801ab94 <ucdr_serialize_string>
 8013de6:	4004      	ands	r4, r0
 8013de8:	b2e4      	uxtb	r4, r4
 8013dea:	e7ee      	b.n	8013dca <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8013dec:	f105 010c 	add.w	r1, r5, #12
 8013df0:	4630      	mov	r0, r6
 8013df2:	f7ff ff53 	bl	8013c9c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8013df6:	4004      	ands	r4, r0
 8013df8:	4620      	mov	r0, r4
 8013dfa:	bd70      	pop	{r4, r5, r6, pc}

08013dfc <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8013dfc:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8013e00:	4688      	mov	r8, r1
 8013e02:	4681      	mov	r9, r0
 8013e04:	8809      	ldrh	r1, [r1, #0]
 8013e06:	f7fc f909 	bl	801001c <ucdr_serialize_uint16_t>
 8013e0a:	4606      	mov	r6, r0
 8013e0c:	f898 1002 	ldrb.w	r1, [r8, #2]
 8013e10:	4648      	mov	r0, r9
 8013e12:	f7fc f8a9 	bl	800ff68 <ucdr_serialize_bool>
 8013e16:	f898 3002 	ldrb.w	r3, [r8, #2]
 8013e1a:	4006      	ands	r6, r0
 8013e1c:	b2f5      	uxtb	r5, r6
 8013e1e:	b9eb      	cbnz	r3, 8013e5c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8013e20:	f898 1006 	ldrb.w	r1, [r8, #6]
 8013e24:	4648      	mov	r0, r9
 8013e26:	f7fc f89f 	bl	800ff68 <ucdr_serialize_bool>
 8013e2a:	f898 3006 	ldrb.w	r3, [r8, #6]
 8013e2e:	4005      	ands	r5, r0
 8013e30:	bb7b      	cbnz	r3, 8013e92 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8013e32:	f898 100c 	ldrb.w	r1, [r8, #12]
 8013e36:	4648      	mov	r0, r9
 8013e38:	f7fc f896 	bl	800ff68 <ucdr_serialize_bool>
 8013e3c:	f898 300c 	ldrb.w	r3, [r8, #12]
 8013e40:	4005      	ands	r5, r0
 8013e42:	b9f3      	cbnz	r3, 8013e82 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8013e44:	f898 1014 	ldrb.w	r1, [r8, #20]
 8013e48:	4648      	mov	r0, r9
 8013e4a:	f7fc f88d 	bl	800ff68 <ucdr_serialize_bool>
 8013e4e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8013e52:	4005      	ands	r5, r0
 8013e54:	b94b      	cbnz	r3, 8013e6a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8013e56:	4628      	mov	r0, r5
 8013e58:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013e5c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8013e60:	4648      	mov	r0, r9
 8013e62:	f7fc f8db 	bl	801001c <ucdr_serialize_uint16_t>
 8013e66:	4005      	ands	r5, r0
 8013e68:	e7da      	b.n	8013e20 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8013e6a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8013e6e:	f108 011c 	add.w	r1, r8, #28
 8013e72:	4648      	mov	r0, r9
 8013e74:	f006 fe62 	bl	801ab3c <ucdr_serialize_sequence_uint8_t>
 8013e78:	4028      	ands	r0, r5
 8013e7a:	b2c5      	uxtb	r5, r0
 8013e7c:	4628      	mov	r0, r5
 8013e7e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013e82:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013e86:	4648      	mov	r0, r9
 8013e88:	f7fc fab2 	bl	80103f0 <ucdr_serialize_uint32_t>
 8013e8c:	4028      	ands	r0, r5
 8013e8e:	b2c5      	uxtb	r5, r0
 8013e90:	e7d8      	b.n	8013e44 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8013e92:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8013e96:	4648      	mov	r0, r9
 8013e98:	f7fc faaa 	bl	80103f0 <ucdr_serialize_uint32_t>
 8013e9c:	4028      	ands	r0, r5
 8013e9e:	b2c5      	uxtb	r5, r0
 8013ea0:	e7c7      	b.n	8013e32 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8013ea2:	bf00      	nop

08013ea4 <uxr_serialize_OBJK_DataReader_Binary>:
 8013ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ea6:	2202      	movs	r2, #2
 8013ea8:	460c      	mov	r4, r1
 8013eaa:	4606      	mov	r6, r0
 8013eac:	f7fb fe3e 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 8013eb0:	4605      	mov	r5, r0
 8013eb2:	78a1      	ldrb	r1, [r4, #2]
 8013eb4:	4630      	mov	r0, r6
 8013eb6:	f7fc f857 	bl	800ff68 <ucdr_serialize_bool>
 8013eba:	78a3      	ldrb	r3, [r4, #2]
 8013ebc:	4005      	ands	r5, r0
 8013ebe:	b2ed      	uxtb	r5, r5
 8013ec0:	b90b      	cbnz	r3, 8013ec6 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8013ec2:	4628      	mov	r0, r5
 8013ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ec6:	f104 0108 	add.w	r1, r4, #8
 8013eca:	4630      	mov	r0, r6
 8013ecc:	f7ff ff96 	bl	8013dfc <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013ed0:	4607      	mov	r7, r0
 8013ed2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013ed6:	4630      	mov	r0, r6
 8013ed8:	f7fc f846 	bl	800ff68 <ucdr_serialize_bool>
 8013edc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013ee0:	4038      	ands	r0, r7
 8013ee2:	b2c7      	uxtb	r7, r0
 8013ee4:	b95b      	cbnz	r3, 8013efe <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8013ee6:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8013eea:	4630      	mov	r0, r6
 8013eec:	f7fc f83c 	bl	800ff68 <ucdr_serialize_bool>
 8013ef0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013ef4:	4007      	ands	r7, r0
 8013ef6:	b94b      	cbnz	r3, 8013f0c <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8013ef8:	403d      	ands	r5, r7
 8013efa:	4628      	mov	r0, r5
 8013efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013efe:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8013f02:	4630      	mov	r0, r6
 8013f04:	f7fc fcca 	bl	801089c <ucdr_serialize_uint64_t>
 8013f08:	4007      	ands	r7, r0
 8013f0a:	e7ec      	b.n	8013ee6 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8013f0c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013f0e:	4630      	mov	r0, r6
 8013f10:	f006 fe40 	bl	801ab94 <ucdr_serialize_string>
 8013f14:	4007      	ands	r7, r0
 8013f16:	b2ff      	uxtb	r7, r7
 8013f18:	e7ee      	b.n	8013ef8 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8013f1a:	bf00      	nop

08013f1c <uxr_serialize_OBJK_DataWriter_Binary>:
 8013f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f1e:	2202      	movs	r2, #2
 8013f20:	460d      	mov	r5, r1
 8013f22:	4606      	mov	r6, r0
 8013f24:	f7fb fe02 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 8013f28:	4604      	mov	r4, r0
 8013f2a:	78a9      	ldrb	r1, [r5, #2]
 8013f2c:	4630      	mov	r0, r6
 8013f2e:	f7fc f81b 	bl	800ff68 <ucdr_serialize_bool>
 8013f32:	78ab      	ldrb	r3, [r5, #2]
 8013f34:	4004      	ands	r4, r0
 8013f36:	b2e4      	uxtb	r4, r4
 8013f38:	b90b      	cbnz	r3, 8013f3e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8013f3a:	4620      	mov	r0, r4
 8013f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f3e:	f105 0108 	add.w	r1, r5, #8
 8013f42:	4630      	mov	r0, r6
 8013f44:	f7ff ff5a 	bl	8013dfc <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013f48:	4607      	mov	r7, r0
 8013f4a:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8013f4e:	4630      	mov	r0, r6
 8013f50:	f7fc f80a 	bl	800ff68 <ucdr_serialize_bool>
 8013f54:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8013f58:	4038      	ands	r0, r7
 8013f5a:	b2c7      	uxtb	r7, r0
 8013f5c:	b913      	cbnz	r3, 8013f64 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8013f5e:	403c      	ands	r4, r7
 8013f60:	4620      	mov	r0, r4
 8013f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f64:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8013f68:	4630      	mov	r0, r6
 8013f6a:	f7fc fc97 	bl	801089c <ucdr_serialize_uint64_t>
 8013f6e:	4007      	ands	r7, r0
 8013f70:	e7f5      	b.n	8013f5e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8013f72:	bf00      	nop

08013f74 <uxr_serialize_OBJK_Replier_Binary>:
 8013f74:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8013f78:	460f      	mov	r7, r1
 8013f7a:	4680      	mov	r8, r0
 8013f7c:	6809      	ldr	r1, [r1, #0]
 8013f7e:	f006 fe09 	bl	801ab94 <ucdr_serialize_string>
 8013f82:	4605      	mov	r5, r0
 8013f84:	6879      	ldr	r1, [r7, #4]
 8013f86:	4640      	mov	r0, r8
 8013f88:	f006 fe04 	bl	801ab94 <ucdr_serialize_string>
 8013f8c:	4005      	ands	r5, r0
 8013f8e:	68b9      	ldr	r1, [r7, #8]
 8013f90:	4640      	mov	r0, r8
 8013f92:	b2ec      	uxtb	r4, r5
 8013f94:	f006 fdfe 	bl	801ab94 <ucdr_serialize_string>
 8013f98:	7b39      	ldrb	r1, [r7, #12]
 8013f9a:	4004      	ands	r4, r0
 8013f9c:	4640      	mov	r0, r8
 8013f9e:	f7fb ffe3 	bl	800ff68 <ucdr_serialize_bool>
 8013fa2:	7b3b      	ldrb	r3, [r7, #12]
 8013fa4:	4004      	ands	r4, r0
 8013fa6:	b94b      	cbnz	r3, 8013fbc <uxr_serialize_OBJK_Replier_Binary+0x48>
 8013fa8:	7d39      	ldrb	r1, [r7, #20]
 8013faa:	4640      	mov	r0, r8
 8013fac:	f7fb ffdc 	bl	800ff68 <ucdr_serialize_bool>
 8013fb0:	7d3b      	ldrb	r3, [r7, #20]
 8013fb2:	4004      	ands	r4, r0
 8013fb4:	b943      	cbnz	r3, 8013fc8 <uxr_serialize_OBJK_Replier_Binary+0x54>
 8013fb6:	4620      	mov	r0, r4
 8013fb8:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8013fbc:	6939      	ldr	r1, [r7, #16]
 8013fbe:	4640      	mov	r0, r8
 8013fc0:	f006 fde8 	bl	801ab94 <ucdr_serialize_string>
 8013fc4:	4004      	ands	r4, r0
 8013fc6:	e7ef      	b.n	8013fa8 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8013fc8:	69b9      	ldr	r1, [r7, #24]
 8013fca:	4640      	mov	r0, r8
 8013fcc:	f006 fde2 	bl	801ab94 <ucdr_serialize_string>
 8013fd0:	4004      	ands	r4, r0
 8013fd2:	b2e4      	uxtb	r4, r4
 8013fd4:	4620      	mov	r0, r4
 8013fd6:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8013fda:	bf00      	nop

08013fdc <uxr_deserialize_ObjectVariant>:
 8013fdc:	b570      	push	{r4, r5, r6, lr}
 8013fde:	4605      	mov	r5, r0
 8013fe0:	460e      	mov	r6, r1
 8013fe2:	f7fc f805 	bl	800fff0 <ucdr_deserialize_uint8_t>
 8013fe6:	b168      	cbz	r0, 8014004 <uxr_deserialize_ObjectVariant+0x28>
 8013fe8:	7833      	ldrb	r3, [r6, #0]
 8013fea:	4604      	mov	r4, r0
 8013fec:	3b01      	subs	r3, #1
 8013fee:	2b0d      	cmp	r3, #13
 8013ff0:	d809      	bhi.n	8014006 <uxr_deserialize_ObjectVariant+0x2a>
 8013ff2:	e8df f003 	tbb	[pc, r3]
 8013ff6:	0a41      	.short	0x0a41
 8013ff8:	0a0a2323 	.word	0x0a0a2323
 8013ffc:	10080a0a 	.word	0x10080a0a
 8014000:	565c1010 	.word	0x565c1010
 8014004:	2400      	movs	r4, #0
 8014006:	4620      	mov	r0, r4
 8014008:	bd70      	pop	{r4, r5, r6, pc}
 801400a:	1d31      	adds	r1, r6, #4
 801400c:	4628      	mov	r0, r5
 801400e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014012:	f7ff bd21 	b.w	8013a58 <uxr_deserialize_DATAWRITER_Representation>
 8014016:	1d31      	adds	r1, r6, #4
 8014018:	4628      	mov	r0, r5
 801401a:	f7fb ffe9 	bl	800fff0 <ucdr_deserialize_uint8_t>
 801401e:	2800      	cmp	r0, #0
 8014020:	d0f0      	beq.n	8014004 <uxr_deserialize_ObjectVariant+0x28>
 8014022:	7933      	ldrb	r3, [r6, #4]
 8014024:	2b01      	cmp	r3, #1
 8014026:	d001      	beq.n	801402c <uxr_deserialize_ObjectVariant+0x50>
 8014028:	2b02      	cmp	r3, #2
 801402a:	d1ec      	bne.n	8014006 <uxr_deserialize_ObjectVariant+0x2a>
 801402c:	68b1      	ldr	r1, [r6, #8]
 801402e:	4628      	mov	r0, r5
 8014030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014034:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014038:	f006 bdbc 	b.w	801abb4 <ucdr_deserialize_string>
 801403c:	1d31      	adds	r1, r6, #4
 801403e:	4628      	mov	r0, r5
 8014040:	f7fb ffd6 	bl	800fff0 <ucdr_deserialize_uint8_t>
 8014044:	4604      	mov	r4, r0
 8014046:	b170      	cbz	r0, 8014066 <uxr_deserialize_ObjectVariant+0x8a>
 8014048:	7933      	ldrb	r3, [r6, #4]
 801404a:	2b02      	cmp	r3, #2
 801404c:	d04c      	beq.n	80140e8 <uxr_deserialize_ObjectVariant+0x10c>
 801404e:	2b03      	cmp	r3, #3
 8014050:	d109      	bne.n	8014066 <uxr_deserialize_ObjectVariant+0x8a>
 8014052:	f106 0308 	add.w	r3, r6, #8
 8014056:	f44f 7200 	mov.w	r2, #512	; 0x200
 801405a:	f106 010c 	add.w	r1, r6, #12
 801405e:	4628      	mov	r0, r5
 8014060:	f006 fd7e 	bl	801ab60 <ucdr_deserialize_sequence_uint8_t>
 8014064:	4604      	mov	r4, r0
 8014066:	2202      	movs	r2, #2
 8014068:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801406c:	4628      	mov	r0, r5
 801406e:	f7fb fdc1 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 8014072:	4020      	ands	r0, r4
 8014074:	b2c4      	uxtb	r4, r0
 8014076:	e7c6      	b.n	8014006 <uxr_deserialize_ObjectVariant+0x2a>
 8014078:	1d31      	adds	r1, r6, #4
 801407a:	4628      	mov	r0, r5
 801407c:	f7fb ffb8 	bl	800fff0 <ucdr_deserialize_uint8_t>
 8014080:	4604      	mov	r4, r0
 8014082:	b130      	cbz	r0, 8014092 <uxr_deserialize_ObjectVariant+0xb6>
 8014084:	7933      	ldrb	r3, [r6, #4]
 8014086:	2b02      	cmp	r3, #2
 8014088:	d036      	beq.n	80140f8 <uxr_deserialize_ObjectVariant+0x11c>
 801408a:	2b03      	cmp	r3, #3
 801408c:	d03c      	beq.n	8014108 <uxr_deserialize_ObjectVariant+0x12c>
 801408e:	2b01      	cmp	r3, #1
 8014090:	d032      	beq.n	80140f8 <uxr_deserialize_ObjectVariant+0x11c>
 8014092:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8014096:	4628      	mov	r0, r5
 8014098:	f7fc fdd0 	bl	8010c3c <ucdr_deserialize_int16_t>
 801409c:	4020      	ands	r0, r4
 801409e:	b2c4      	uxtb	r4, r0
 80140a0:	e7b1      	b.n	8014006 <uxr_deserialize_ObjectVariant+0x2a>
 80140a2:	1d31      	adds	r1, r6, #4
 80140a4:	4628      	mov	r0, r5
 80140a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80140aa:	f7ff bb8b 	b.w	80137c4 <uxr_deserialize_CLIENT_Representation>
 80140ae:	2204      	movs	r2, #4
 80140b0:	4628      	mov	r0, r5
 80140b2:	18b1      	adds	r1, r6, r2
 80140b4:	f7fb fd9e 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 80140b8:	4604      	mov	r4, r0
 80140ba:	2202      	movs	r2, #2
 80140bc:	f106 0108 	add.w	r1, r6, #8
 80140c0:	4628      	mov	r0, r5
 80140c2:	f7fb fd97 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 80140c6:	4004      	ands	r4, r0
 80140c8:	2202      	movs	r2, #2
 80140ca:	f106 010a 	add.w	r1, r6, #10
 80140ce:	4628      	mov	r0, r5
 80140d0:	b2e4      	uxtb	r4, r4
 80140d2:	f7fb fd8f 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 80140d6:	4603      	mov	r3, r0
 80140d8:	f106 010c 	add.w	r1, r6, #12
 80140dc:	4628      	mov	r0, r5
 80140de:	401c      	ands	r4, r3
 80140e0:	f7fb ff58 	bl	800ff94 <ucdr_deserialize_bool>
 80140e4:	4004      	ands	r4, r0
 80140e6:	e78e      	b.n	8014006 <uxr_deserialize_ObjectVariant+0x2a>
 80140e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80140ec:	68b1      	ldr	r1, [r6, #8]
 80140ee:	4628      	mov	r0, r5
 80140f0:	f006 fd60 	bl	801abb4 <ucdr_deserialize_string>
 80140f4:	4604      	mov	r4, r0
 80140f6:	e7b6      	b.n	8014066 <uxr_deserialize_ObjectVariant+0x8a>
 80140f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80140fc:	68b1      	ldr	r1, [r6, #8]
 80140fe:	4628      	mov	r0, r5
 8014100:	f006 fd58 	bl	801abb4 <ucdr_deserialize_string>
 8014104:	4604      	mov	r4, r0
 8014106:	e7c4      	b.n	8014092 <uxr_deserialize_ObjectVariant+0xb6>
 8014108:	f106 0308 	add.w	r3, r6, #8
 801410c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014110:	f106 010c 	add.w	r1, r6, #12
 8014114:	4628      	mov	r0, r5
 8014116:	f006 fd23 	bl	801ab60 <ucdr_deserialize_sequence_uint8_t>
 801411a:	4604      	mov	r4, r0
 801411c:	e7b9      	b.n	8014092 <uxr_deserialize_ObjectVariant+0xb6>
 801411e:	bf00      	nop

08014120 <uxr_deserialize_BaseObjectRequest>:
 8014120:	b570      	push	{r4, r5, r6, lr}
 8014122:	2202      	movs	r2, #2
 8014124:	4605      	mov	r5, r0
 8014126:	460e      	mov	r6, r1
 8014128:	f7fb fd64 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 801412c:	2202      	movs	r2, #2
 801412e:	4604      	mov	r4, r0
 8014130:	4628      	mov	r0, r5
 8014132:	18b1      	adds	r1, r6, r2
 8014134:	f7fb fd5e 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 8014138:	4020      	ands	r0, r4
 801413a:	b2c0      	uxtb	r0, r0
 801413c:	bd70      	pop	{r4, r5, r6, pc}
 801413e:	bf00      	nop

08014140 <uxr_serialize_ActivityInfoVariant>:
 8014140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014144:	460e      	mov	r6, r1
 8014146:	7809      	ldrb	r1, [r1, #0]
 8014148:	4680      	mov	r8, r0
 801414a:	f7fb ff3b 	bl	800ffc4 <ucdr_serialize_uint8_t>
 801414e:	4607      	mov	r7, r0
 8014150:	b138      	cbz	r0, 8014162 <uxr_serialize_ActivityInfoVariant+0x22>
 8014152:	7833      	ldrb	r3, [r6, #0]
 8014154:	2b06      	cmp	r3, #6
 8014156:	f000 8081 	beq.w	801425c <uxr_serialize_ActivityInfoVariant+0x11c>
 801415a:	2b0d      	cmp	r3, #13
 801415c:	d014      	beq.n	8014188 <uxr_serialize_ActivityInfoVariant+0x48>
 801415e:	2b05      	cmp	r3, #5
 8014160:	d002      	beq.n	8014168 <uxr_serialize_ActivityInfoVariant+0x28>
 8014162:	4638      	mov	r0, r7
 8014164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014168:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801416c:	4640      	mov	r0, r8
 801416e:	f7fc fc65 	bl	8010a3c <ucdr_serialize_int16_t>
 8014172:	4607      	mov	r7, r0
 8014174:	4640      	mov	r0, r8
 8014176:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801417a:	f7fc fb8f 	bl	801089c <ucdr_serialize_uint64_t>
 801417e:	4038      	ands	r0, r7
 8014180:	b2c7      	uxtb	r7, r0
 8014182:	4638      	mov	r0, r7
 8014184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014188:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801418c:	4640      	mov	r0, r8
 801418e:	f7fc fc55 	bl	8010a3c <ucdr_serialize_int16_t>
 8014192:	68f1      	ldr	r1, [r6, #12]
 8014194:	4607      	mov	r7, r0
 8014196:	4640      	mov	r0, r8
 8014198:	f7fc f92a 	bl	80103f0 <ucdr_serialize_uint32_t>
 801419c:	68f3      	ldr	r3, [r6, #12]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d0ed      	beq.n	801417e <uxr_serialize_ActivityInfoVariant+0x3e>
 80141a2:	b318      	cbz	r0, 80141ec <uxr_serialize_ActivityInfoVariant+0xac>
 80141a4:	f106 090c 	add.w	r9, r6, #12
 80141a8:	2400      	movs	r4, #0
 80141aa:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80141ae:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 80141b2:	7c29      	ldrb	r1, [r5, #16]
 80141b4:	4640      	mov	r0, r8
 80141b6:	f7fb ff05 	bl	800ffc4 <ucdr_serialize_uint8_t>
 80141ba:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 80141be:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80141c2:	2800      	cmp	r0, #0
 80141c4:	d051      	beq.n	801426a <uxr_serialize_ActivityInfoVariant+0x12a>
 80141c6:	7c2b      	ldrb	r3, [r5, #16]
 80141c8:	00c9      	lsls	r1, r1, #3
 80141ca:	2b03      	cmp	r3, #3
 80141cc:	d854      	bhi.n	8014278 <uxr_serialize_ActivityInfoVariant+0x138>
 80141ce:	e8df f003 	tbb	[pc, r3]
 80141d2:	2133      	.short	0x2133
 80141d4:	020f      	.short	0x020f
 80141d6:	4449      	add	r1, r9
 80141d8:	4640      	mov	r0, r8
 80141da:	6889      	ldr	r1, [r1, #8]
 80141dc:	f006 fcda 	bl	801ab94 <ucdr_serialize_string>
 80141e0:	3401      	adds	r4, #1
 80141e2:	68f2      	ldr	r2, [r6, #12]
 80141e4:	4294      	cmp	r4, r2
 80141e6:	d244      	bcs.n	8014272 <uxr_serialize_ActivityInfoVariant+0x132>
 80141e8:	2800      	cmp	r0, #0
 80141ea:	d1de      	bne.n	80141aa <uxr_serialize_ActivityInfoVariant+0x6a>
 80141ec:	2700      	movs	r7, #0
 80141ee:	e7b8      	b.n	8014162 <uxr_serialize_ActivityInfoVariant+0x22>
 80141f0:	3108      	adds	r1, #8
 80141f2:	44a2      	add	sl, r4
 80141f4:	2210      	movs	r2, #16
 80141f6:	4640      	mov	r0, r8
 80141f8:	4449      	add	r1, r9
 80141fa:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80141fe:	f7fb fc95 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 8014202:	4605      	mov	r5, r0
 8014204:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 8014208:	4640      	mov	r0, r8
 801420a:	f7fc f8f1 	bl	80103f0 <ucdr_serialize_uint32_t>
 801420e:	4028      	ands	r0, r5
 8014210:	b2c0      	uxtb	r0, r0
 8014212:	e7e5      	b.n	80141e0 <uxr_serialize_ActivityInfoVariant+0xa0>
 8014214:	3108      	adds	r1, #8
 8014216:	44a2      	add	sl, r4
 8014218:	2204      	movs	r2, #4
 801421a:	4640      	mov	r0, r8
 801421c:	4449      	add	r1, r9
 801421e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8014222:	f7fb fc83 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 8014226:	4605      	mov	r5, r0
 8014228:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801422c:	4640      	mov	r0, r8
 801422e:	f7fb fef5 	bl	801001c <ucdr_serialize_uint16_t>
 8014232:	4028      	ands	r0, r5
 8014234:	b2c0      	uxtb	r0, r0
 8014236:	e7d3      	b.n	80141e0 <uxr_serialize_ActivityInfoVariant+0xa0>
 8014238:	3108      	adds	r1, #8
 801423a:	44a2      	add	sl, r4
 801423c:	2202      	movs	r2, #2
 801423e:	4640      	mov	r0, r8
 8014240:	4449      	add	r1, r9
 8014242:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8014246:	f7fb fc71 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 801424a:	4605      	mov	r5, r0
 801424c:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8014250:	4640      	mov	r0, r8
 8014252:	f7fb feb7 	bl	800ffc4 <ucdr_serialize_uint8_t>
 8014256:	4028      	ands	r0, r5
 8014258:	b2c0      	uxtb	r0, r0
 801425a:	e7c1      	b.n	80141e0 <uxr_serialize_ActivityInfoVariant+0xa0>
 801425c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8014260:	4640      	mov	r0, r8
 8014262:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014266:	f7fc bbe9 	b.w	8010a3c <ucdr_serialize_int16_t>
 801426a:	3401      	adds	r4, #1
 801426c:	68f2      	ldr	r2, [r6, #12]
 801426e:	42a2      	cmp	r2, r4
 8014270:	d8bc      	bhi.n	80141ec <uxr_serialize_ActivityInfoVariant+0xac>
 8014272:	4007      	ands	r7, r0
 8014274:	b2ff      	uxtb	r7, r7
 8014276:	e774      	b.n	8014162 <uxr_serialize_ActivityInfoVariant+0x22>
 8014278:	3401      	adds	r4, #1
 801427a:	68f3      	ldr	r3, [r6, #12]
 801427c:	3518      	adds	r5, #24
 801427e:	429c      	cmp	r4, r3
 8014280:	d397      	bcc.n	80141b2 <uxr_serialize_ActivityInfoVariant+0x72>
 8014282:	e76e      	b.n	8014162 <uxr_serialize_ActivityInfoVariant+0x22>

08014284 <uxr_deserialize_BaseObjectReply>:
 8014284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014288:	2202      	movs	r2, #2
 801428a:	4606      	mov	r6, r0
 801428c:	460f      	mov	r7, r1
 801428e:	f7fb fcb1 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 8014292:	2202      	movs	r2, #2
 8014294:	4605      	mov	r5, r0
 8014296:	4630      	mov	r0, r6
 8014298:	18b9      	adds	r1, r7, r2
 801429a:	f7fb fcab 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 801429e:	4680      	mov	r8, r0
 80142a0:	1d39      	adds	r1, r7, #4
 80142a2:	4630      	mov	r0, r6
 80142a4:	f7fb fea4 	bl	800fff0 <ucdr_deserialize_uint8_t>
 80142a8:	ea05 0508 	and.w	r5, r5, r8
 80142ac:	4604      	mov	r4, r0
 80142ae:	1d79      	adds	r1, r7, #5
 80142b0:	4630      	mov	r0, r6
 80142b2:	402c      	ands	r4, r5
 80142b4:	f7fb fe9c 	bl	800fff0 <ucdr_deserialize_uint8_t>
 80142b8:	4020      	ands	r0, r4
 80142ba:	b2c0      	uxtb	r0, r0
 80142bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080142c0 <uxr_serialize_ReadSpecification>:
 80142c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142c2:	460e      	mov	r6, r1
 80142c4:	4607      	mov	r7, r0
 80142c6:	7809      	ldrb	r1, [r1, #0]
 80142c8:	f7fb fe7c 	bl	800ffc4 <ucdr_serialize_uint8_t>
 80142cc:	4604      	mov	r4, r0
 80142ce:	7871      	ldrb	r1, [r6, #1]
 80142d0:	4638      	mov	r0, r7
 80142d2:	f7fb fe77 	bl	800ffc4 <ucdr_serialize_uint8_t>
 80142d6:	4004      	ands	r4, r0
 80142d8:	78b1      	ldrb	r1, [r6, #2]
 80142da:	4638      	mov	r0, r7
 80142dc:	f7fb fe44 	bl	800ff68 <ucdr_serialize_bool>
 80142e0:	78b3      	ldrb	r3, [r6, #2]
 80142e2:	b2e4      	uxtb	r4, r4
 80142e4:	4004      	ands	r4, r0
 80142e6:	b943      	cbnz	r3, 80142fa <uxr_serialize_ReadSpecification+0x3a>
 80142e8:	7a31      	ldrb	r1, [r6, #8]
 80142ea:	4638      	mov	r0, r7
 80142ec:	f7fb fe3c 	bl	800ff68 <ucdr_serialize_bool>
 80142f0:	7a33      	ldrb	r3, [r6, #8]
 80142f2:	4004      	ands	r4, r0
 80142f4:	b93b      	cbnz	r3, 8014306 <uxr_serialize_ReadSpecification+0x46>
 80142f6:	4620      	mov	r0, r4
 80142f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142fa:	6871      	ldr	r1, [r6, #4]
 80142fc:	4638      	mov	r0, r7
 80142fe:	f006 fc49 	bl	801ab94 <ucdr_serialize_string>
 8014302:	4004      	ands	r4, r0
 8014304:	e7f0      	b.n	80142e8 <uxr_serialize_ReadSpecification+0x28>
 8014306:	8971      	ldrh	r1, [r6, #10]
 8014308:	4638      	mov	r0, r7
 801430a:	f7fb fe87 	bl	801001c <ucdr_serialize_uint16_t>
 801430e:	4605      	mov	r5, r0
 8014310:	89b1      	ldrh	r1, [r6, #12]
 8014312:	4638      	mov	r0, r7
 8014314:	f7fb fe82 	bl	801001c <ucdr_serialize_uint16_t>
 8014318:	4005      	ands	r5, r0
 801431a:	89f1      	ldrh	r1, [r6, #14]
 801431c:	4638      	mov	r0, r7
 801431e:	b2ed      	uxtb	r5, r5
 8014320:	f7fb fe7c 	bl	801001c <ucdr_serialize_uint16_t>
 8014324:	8a31      	ldrh	r1, [r6, #16]
 8014326:	4025      	ands	r5, r4
 8014328:	4604      	mov	r4, r0
 801432a:	4638      	mov	r0, r7
 801432c:	4025      	ands	r5, r4
 801432e:	f7fb fe75 	bl	801001c <ucdr_serialize_uint16_t>
 8014332:	ea00 0405 	and.w	r4, r0, r5
 8014336:	4620      	mov	r0, r4
 8014338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801433a:	bf00      	nop

0801433c <uxr_serialize_CREATE_CLIENT_Payload>:
 801433c:	f7ff b9ea 	b.w	8013714 <uxr_serialize_CLIENT_Representation>

08014340 <uxr_serialize_CREATE_Payload>:
 8014340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014342:	2202      	movs	r2, #2
 8014344:	4607      	mov	r7, r0
 8014346:	460e      	mov	r6, r1
 8014348:	f7fb fbf0 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 801434c:	2202      	movs	r2, #2
 801434e:	4605      	mov	r5, r0
 8014350:	4638      	mov	r0, r7
 8014352:	18b1      	adds	r1, r6, r2
 8014354:	f7fb fbea 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 8014358:	7931      	ldrb	r1, [r6, #4]
 801435a:	4604      	mov	r4, r0
 801435c:	4638      	mov	r0, r7
 801435e:	f7fb fe31 	bl	800ffc4 <ucdr_serialize_uint8_t>
 8014362:	b170      	cbz	r0, 8014382 <uxr_serialize_CREATE_Payload+0x42>
 8014364:	7933      	ldrb	r3, [r6, #4]
 8014366:	402c      	ands	r4, r5
 8014368:	3b01      	subs	r3, #1
 801436a:	b2e4      	uxtb	r4, r4
 801436c:	2b0d      	cmp	r3, #13
 801436e:	d809      	bhi.n	8014384 <uxr_serialize_CREATE_Payload+0x44>
 8014370:	e8df f003 	tbb	[pc, r3]
 8014374:	23230a4c 	.word	0x23230a4c
 8014378:	0a0a0a0a 	.word	0x0a0a0a0a
 801437c:	12121208 	.word	0x12121208
 8014380:	3e45      	.short	0x3e45
 8014382:	2400      	movs	r4, #0
 8014384:	4620      	mov	r0, r4
 8014386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014388:	f106 0108 	add.w	r1, r6, #8
 801438c:	4638      	mov	r0, r7
 801438e:	f7ff fac7 	bl	8013920 <uxr_serialize_DATAWRITER_Representation>
 8014392:	4004      	ands	r4, r0
 8014394:	4620      	mov	r0, r4
 8014396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014398:	7a31      	ldrb	r1, [r6, #8]
 801439a:	4638      	mov	r0, r7
 801439c:	f7fb fe12 	bl	800ffc4 <ucdr_serialize_uint8_t>
 80143a0:	2800      	cmp	r0, #0
 80143a2:	d0ee      	beq.n	8014382 <uxr_serialize_CREATE_Payload+0x42>
 80143a4:	7a33      	ldrb	r3, [r6, #8]
 80143a6:	2b01      	cmp	r3, #1
 80143a8:	d001      	beq.n	80143ae <uxr_serialize_CREATE_Payload+0x6e>
 80143aa:	2b02      	cmp	r3, #2
 80143ac:	d1ea      	bne.n	8014384 <uxr_serialize_CREATE_Payload+0x44>
 80143ae:	68f1      	ldr	r1, [r6, #12]
 80143b0:	4638      	mov	r0, r7
 80143b2:	f006 fbef 	bl	801ab94 <ucdr_serialize_string>
 80143b6:	4004      	ands	r4, r0
 80143b8:	e7e4      	b.n	8014384 <uxr_serialize_CREATE_Payload+0x44>
 80143ba:	7a31      	ldrb	r1, [r6, #8]
 80143bc:	4638      	mov	r0, r7
 80143be:	f7fb fe01 	bl	800ffc4 <ucdr_serialize_uint8_t>
 80143c2:	4605      	mov	r5, r0
 80143c4:	b158      	cbz	r0, 80143de <uxr_serialize_CREATE_Payload+0x9e>
 80143c6:	7a33      	ldrb	r3, [r6, #8]
 80143c8:	2b02      	cmp	r3, #2
 80143ca:	d034      	beq.n	8014436 <uxr_serialize_CREATE_Payload+0xf6>
 80143cc:	2b03      	cmp	r3, #3
 80143ce:	d106      	bne.n	80143de <uxr_serialize_CREATE_Payload+0x9e>
 80143d0:	68f2      	ldr	r2, [r6, #12]
 80143d2:	f106 0110 	add.w	r1, r6, #16
 80143d6:	4638      	mov	r0, r7
 80143d8:	f006 fbb0 	bl	801ab3c <ucdr_serialize_sequence_uint8_t>
 80143dc:	4605      	mov	r5, r0
 80143de:	2202      	movs	r2, #2
 80143e0:	f506 7104 	add.w	r1, r6, #528	; 0x210
 80143e4:	4638      	mov	r0, r7
 80143e6:	f7fb fba1 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 80143ea:	4028      	ands	r0, r5
 80143ec:	4004      	ands	r4, r0
 80143ee:	e7c9      	b.n	8014384 <uxr_serialize_CREATE_Payload+0x44>
 80143f0:	f106 0108 	add.w	r1, r6, #8
 80143f4:	4638      	mov	r0, r7
 80143f6:	f7ff f98d 	bl	8013714 <uxr_serialize_CLIENT_Representation>
 80143fa:	4004      	ands	r4, r0
 80143fc:	e7c2      	b.n	8014384 <uxr_serialize_CREATE_Payload+0x44>
 80143fe:	f106 0108 	add.w	r1, r6, #8
 8014402:	4638      	mov	r0, r7
 8014404:	f7ff fa42 	bl	801388c <uxr_serialize_AGENT_Representation>
 8014408:	4004      	ands	r4, r0
 801440a:	e7bb      	b.n	8014384 <uxr_serialize_CREATE_Payload+0x44>
 801440c:	7a31      	ldrb	r1, [r6, #8]
 801440e:	4638      	mov	r0, r7
 8014410:	f7fb fdd8 	bl	800ffc4 <ucdr_serialize_uint8_t>
 8014414:	4605      	mov	r5, r0
 8014416:	b130      	cbz	r0, 8014426 <uxr_serialize_CREATE_Payload+0xe6>
 8014418:	7a33      	ldrb	r3, [r6, #8]
 801441a:	2b02      	cmp	r3, #2
 801441c:	d011      	beq.n	8014442 <uxr_serialize_CREATE_Payload+0x102>
 801441e:	2b03      	cmp	r3, #3
 8014420:	d015      	beq.n	801444e <uxr_serialize_CREATE_Payload+0x10e>
 8014422:	2b01      	cmp	r3, #1
 8014424:	d00d      	beq.n	8014442 <uxr_serialize_CREATE_Payload+0x102>
 8014426:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 801442a:	4638      	mov	r0, r7
 801442c:	f7fc fb06 	bl	8010a3c <ucdr_serialize_int16_t>
 8014430:	4028      	ands	r0, r5
 8014432:	4004      	ands	r4, r0
 8014434:	e7a6      	b.n	8014384 <uxr_serialize_CREATE_Payload+0x44>
 8014436:	68f1      	ldr	r1, [r6, #12]
 8014438:	4638      	mov	r0, r7
 801443a:	f006 fbab 	bl	801ab94 <ucdr_serialize_string>
 801443e:	4605      	mov	r5, r0
 8014440:	e7cd      	b.n	80143de <uxr_serialize_CREATE_Payload+0x9e>
 8014442:	68f1      	ldr	r1, [r6, #12]
 8014444:	4638      	mov	r0, r7
 8014446:	f006 fba5 	bl	801ab94 <ucdr_serialize_string>
 801444a:	4605      	mov	r5, r0
 801444c:	e7eb      	b.n	8014426 <uxr_serialize_CREATE_Payload+0xe6>
 801444e:	68f2      	ldr	r2, [r6, #12]
 8014450:	f106 0110 	add.w	r1, r6, #16
 8014454:	4638      	mov	r0, r7
 8014456:	f006 fb71 	bl	801ab3c <ucdr_serialize_sequence_uint8_t>
 801445a:	4605      	mov	r5, r0
 801445c:	e7e3      	b.n	8014426 <uxr_serialize_CREATE_Payload+0xe6>
 801445e:	bf00      	nop

08014460 <uxr_deserialize_GET_INFO_Payload>:
 8014460:	b570      	push	{r4, r5, r6, lr}
 8014462:	2202      	movs	r2, #2
 8014464:	4605      	mov	r5, r0
 8014466:	460e      	mov	r6, r1
 8014468:	f7fb fbc4 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 801446c:	2202      	movs	r2, #2
 801446e:	4604      	mov	r4, r0
 8014470:	4628      	mov	r0, r5
 8014472:	18b1      	adds	r1, r6, r2
 8014474:	f7fb fbbe 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 8014478:	4603      	mov	r3, r0
 801447a:	1d31      	adds	r1, r6, #4
 801447c:	4628      	mov	r0, r5
 801447e:	401c      	ands	r4, r3
 8014480:	f7fc f8e6 	bl	8010650 <ucdr_deserialize_uint32_t>
 8014484:	b2e4      	uxtb	r4, r4
 8014486:	4020      	ands	r0, r4
 8014488:	bd70      	pop	{r4, r5, r6, pc}
 801448a:	bf00      	nop

0801448c <uxr_serialize_DELETE_Payload>:
 801448c:	b570      	push	{r4, r5, r6, lr}
 801448e:	2202      	movs	r2, #2
 8014490:	4605      	mov	r5, r0
 8014492:	460e      	mov	r6, r1
 8014494:	f7fb fb4a 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 8014498:	2202      	movs	r2, #2
 801449a:	4604      	mov	r4, r0
 801449c:	4628      	mov	r0, r5
 801449e:	18b1      	adds	r1, r6, r2
 80144a0:	f7fb fb44 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 80144a4:	4020      	ands	r0, r4
 80144a6:	b2c0      	uxtb	r0, r0
 80144a8:	bd70      	pop	{r4, r5, r6, pc}
 80144aa:	bf00      	nop

080144ac <uxr_deserialize_STATUS_AGENT_Payload>:
 80144ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80144b0:	460e      	mov	r6, r1
 80144b2:	4605      	mov	r5, r0
 80144b4:	f7fb fd9c 	bl	800fff0 <ucdr_deserialize_uint8_t>
 80144b8:	4604      	mov	r4, r0
 80144ba:	1c71      	adds	r1, r6, #1
 80144bc:	4628      	mov	r0, r5
 80144be:	f7fb fd97 	bl	800fff0 <ucdr_deserialize_uint8_t>
 80144c2:	2204      	movs	r2, #4
 80144c4:	4681      	mov	r9, r0
 80144c6:	4628      	mov	r0, r5
 80144c8:	18b1      	adds	r1, r6, r2
 80144ca:	f7fb fb93 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 80144ce:	f106 0108 	add.w	r1, r6, #8
 80144d2:	4680      	mov	r8, r0
 80144d4:	2202      	movs	r2, #2
 80144d6:	4628      	mov	r0, r5
 80144d8:	f7fb fb8c 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 80144dc:	ea04 0309 	and.w	r3, r4, r9
 80144e0:	4607      	mov	r7, r0
 80144e2:	2202      	movs	r2, #2
 80144e4:	b2db      	uxtb	r3, r3
 80144e6:	f106 010a 	add.w	r1, r6, #10
 80144ea:	4628      	mov	r0, r5
 80144ec:	ea03 0408 	and.w	r4, r3, r8
 80144f0:	f7fb fb80 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 80144f4:	4603      	mov	r3, r0
 80144f6:	4628      	mov	r0, r5
 80144f8:	403c      	ands	r4, r7
 80144fa:	f106 010c 	add.w	r1, r6, #12
 80144fe:	461d      	mov	r5, r3
 8014500:	f7fb fd48 	bl	800ff94 <ucdr_deserialize_bool>
 8014504:	4025      	ands	r5, r4
 8014506:	4028      	ands	r0, r5
 8014508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801450c <uxr_deserialize_STATUS_Payload>:
 801450c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014510:	2202      	movs	r2, #2
 8014512:	4606      	mov	r6, r0
 8014514:	460f      	mov	r7, r1
 8014516:	f7fb fb6d 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 801451a:	2202      	movs	r2, #2
 801451c:	4605      	mov	r5, r0
 801451e:	4630      	mov	r0, r6
 8014520:	18b9      	adds	r1, r7, r2
 8014522:	f7fb fb67 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 8014526:	4680      	mov	r8, r0
 8014528:	1d39      	adds	r1, r7, #4
 801452a:	4630      	mov	r0, r6
 801452c:	f7fb fd60 	bl	800fff0 <ucdr_deserialize_uint8_t>
 8014530:	ea05 0508 	and.w	r5, r5, r8
 8014534:	4604      	mov	r4, r0
 8014536:	1d79      	adds	r1, r7, #5
 8014538:	4630      	mov	r0, r6
 801453a:	402c      	ands	r4, r5
 801453c:	f7fb fd58 	bl	800fff0 <ucdr_deserialize_uint8_t>
 8014540:	4020      	ands	r0, r4
 8014542:	b2c0      	uxtb	r0, r0
 8014544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014548 <uxr_serialize_INFO_Payload>:
 8014548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801454c:	2202      	movs	r2, #2
 801454e:	460c      	mov	r4, r1
 8014550:	4605      	mov	r5, r0
 8014552:	f7fb faeb 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 8014556:	2202      	movs	r2, #2
 8014558:	4680      	mov	r8, r0
 801455a:	4628      	mov	r0, r5
 801455c:	18a1      	adds	r1, r4, r2
 801455e:	f7fb fae5 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 8014562:	4607      	mov	r7, r0
 8014564:	7921      	ldrb	r1, [r4, #4]
 8014566:	4628      	mov	r0, r5
 8014568:	f7fb fd2c 	bl	800ffc4 <ucdr_serialize_uint8_t>
 801456c:	ea08 0807 	and.w	r8, r8, r7
 8014570:	4606      	mov	r6, r0
 8014572:	7961      	ldrb	r1, [r4, #5]
 8014574:	4628      	mov	r0, r5
 8014576:	ea06 0608 	and.w	r6, r6, r8
 801457a:	f7fb fd23 	bl	800ffc4 <ucdr_serialize_uint8_t>
 801457e:	7a21      	ldrb	r1, [r4, #8]
 8014580:	4030      	ands	r0, r6
 8014582:	b2c7      	uxtb	r7, r0
 8014584:	4628      	mov	r0, r5
 8014586:	f7fb fcef 	bl	800ff68 <ucdr_serialize_bool>
 801458a:	7a23      	ldrb	r3, [r4, #8]
 801458c:	4606      	mov	r6, r0
 801458e:	b96b      	cbnz	r3, 80145ac <uxr_serialize_INFO_Payload+0x64>
 8014590:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 8014594:	4628      	mov	r0, r5
 8014596:	f7fb fce7 	bl	800ff68 <ucdr_serialize_bool>
 801459a:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 801459e:	4030      	ands	r0, r6
 80145a0:	b2c6      	uxtb	r6, r0
 80145a2:	b983      	cbnz	r3, 80145c6 <uxr_serialize_INFO_Payload+0x7e>
 80145a4:	ea06 0007 	and.w	r0, r6, r7
 80145a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145ac:	7b21      	ldrb	r1, [r4, #12]
 80145ae:	4628      	mov	r0, r5
 80145b0:	f7fb fd08 	bl	800ffc4 <ucdr_serialize_uint8_t>
 80145b4:	b188      	cbz	r0, 80145da <uxr_serialize_INFO_Payload+0x92>
 80145b6:	f104 010c 	add.w	r1, r4, #12
 80145ba:	4628      	mov	r0, r5
 80145bc:	f7ff f9d8 	bl	8013970 <uxr_serialize_ObjectVariant.part.0>
 80145c0:	4030      	ands	r0, r6
 80145c2:	b2c6      	uxtb	r6, r0
 80145c4:	e7e4      	b.n	8014590 <uxr_serialize_INFO_Payload+0x48>
 80145c6:	f504 7108 	add.w	r1, r4, #544	; 0x220
 80145ca:	4628      	mov	r0, r5
 80145cc:	f7ff fdb8 	bl	8014140 <uxr_serialize_ActivityInfoVariant>
 80145d0:	4006      	ands	r6, r0
 80145d2:	ea06 0007 	and.w	r0, r6, r7
 80145d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145da:	4606      	mov	r6, r0
 80145dc:	e7d8      	b.n	8014590 <uxr_serialize_INFO_Payload+0x48>
 80145de:	bf00      	nop

080145e0 <uxr_serialize_READ_DATA_Payload>:
 80145e0:	b570      	push	{r4, r5, r6, lr}
 80145e2:	2202      	movs	r2, #2
 80145e4:	4605      	mov	r5, r0
 80145e6:	460e      	mov	r6, r1
 80145e8:	f7fb faa0 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 80145ec:	2202      	movs	r2, #2
 80145ee:	4604      	mov	r4, r0
 80145f0:	4628      	mov	r0, r5
 80145f2:	18b1      	adds	r1, r6, r2
 80145f4:	f7fb fa9a 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 80145f8:	4603      	mov	r3, r0
 80145fa:	1d31      	adds	r1, r6, #4
 80145fc:	4628      	mov	r0, r5
 80145fe:	401c      	ands	r4, r3
 8014600:	f7ff fe5e 	bl	80142c0 <uxr_serialize_ReadSpecification>
 8014604:	b2e4      	uxtb	r4, r4
 8014606:	4020      	ands	r0, r4
 8014608:	bd70      	pop	{r4, r5, r6, pc}
 801460a:	bf00      	nop

0801460c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801460c:	b570      	push	{r4, r5, r6, lr}
 801460e:	2202      	movs	r2, #2
 8014610:	4605      	mov	r5, r0
 8014612:	460e      	mov	r6, r1
 8014614:	f7fb fa8a 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 8014618:	2202      	movs	r2, #2
 801461a:	4604      	mov	r4, r0
 801461c:	4628      	mov	r0, r5
 801461e:	18b1      	adds	r1, r6, r2
 8014620:	f7fb fa84 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 8014624:	4020      	ands	r0, r4
 8014626:	b2c0      	uxtb	r0, r0
 8014628:	bd70      	pop	{r4, r5, r6, pc}
 801462a:	bf00      	nop

0801462c <uxr_serialize_ACKNACK_Payload>:
 801462c:	b570      	push	{r4, r5, r6, lr}
 801462e:	460c      	mov	r4, r1
 8014630:	4605      	mov	r5, r0
 8014632:	460e      	mov	r6, r1
 8014634:	f834 1b02 	ldrh.w	r1, [r4], #2
 8014638:	f7fb fcf0 	bl	801001c <ucdr_serialize_uint16_t>
 801463c:	2202      	movs	r2, #2
 801463e:	4621      	mov	r1, r4
 8014640:	4604      	mov	r4, r0
 8014642:	4628      	mov	r0, r5
 8014644:	f7fb fa72 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 8014648:	4603      	mov	r3, r0
 801464a:	7931      	ldrb	r1, [r6, #4]
 801464c:	4628      	mov	r0, r5
 801464e:	401c      	ands	r4, r3
 8014650:	f7fb fcb8 	bl	800ffc4 <ucdr_serialize_uint8_t>
 8014654:	b2e4      	uxtb	r4, r4
 8014656:	4020      	ands	r0, r4
 8014658:	bd70      	pop	{r4, r5, r6, pc}
 801465a:	bf00      	nop

0801465c <uxr_deserialize_ACKNACK_Payload>:
 801465c:	b570      	push	{r4, r5, r6, lr}
 801465e:	460e      	mov	r6, r1
 8014660:	4605      	mov	r5, r0
 8014662:	f7fb fddb 	bl	801021c <ucdr_deserialize_uint16_t>
 8014666:	2202      	movs	r2, #2
 8014668:	4604      	mov	r4, r0
 801466a:	4628      	mov	r0, r5
 801466c:	18b1      	adds	r1, r6, r2
 801466e:	f7fb fac1 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 8014672:	4603      	mov	r3, r0
 8014674:	1d31      	adds	r1, r6, #4
 8014676:	4628      	mov	r0, r5
 8014678:	401c      	ands	r4, r3
 801467a:	f7fb fcb9 	bl	800fff0 <ucdr_deserialize_uint8_t>
 801467e:	b2e4      	uxtb	r4, r4
 8014680:	4020      	ands	r0, r4
 8014682:	bd70      	pop	{r4, r5, r6, pc}

08014684 <uxr_serialize_HEARTBEAT_Payload>:
 8014684:	b570      	push	{r4, r5, r6, lr}
 8014686:	460d      	mov	r5, r1
 8014688:	4606      	mov	r6, r0
 801468a:	8809      	ldrh	r1, [r1, #0]
 801468c:	f7fb fcc6 	bl	801001c <ucdr_serialize_uint16_t>
 8014690:	8869      	ldrh	r1, [r5, #2]
 8014692:	4604      	mov	r4, r0
 8014694:	4630      	mov	r0, r6
 8014696:	f7fb fcc1 	bl	801001c <ucdr_serialize_uint16_t>
 801469a:	4603      	mov	r3, r0
 801469c:	7929      	ldrb	r1, [r5, #4]
 801469e:	4630      	mov	r0, r6
 80146a0:	401c      	ands	r4, r3
 80146a2:	f7fb fc8f 	bl	800ffc4 <ucdr_serialize_uint8_t>
 80146a6:	b2e4      	uxtb	r4, r4
 80146a8:	4020      	ands	r0, r4
 80146aa:	bd70      	pop	{r4, r5, r6, pc}

080146ac <uxr_deserialize_HEARTBEAT_Payload>:
 80146ac:	b570      	push	{r4, r5, r6, lr}
 80146ae:	460e      	mov	r6, r1
 80146b0:	4605      	mov	r5, r0
 80146b2:	f7fb fdb3 	bl	801021c <ucdr_deserialize_uint16_t>
 80146b6:	4604      	mov	r4, r0
 80146b8:	1cb1      	adds	r1, r6, #2
 80146ba:	4628      	mov	r0, r5
 80146bc:	f7fb fdae 	bl	801021c <ucdr_deserialize_uint16_t>
 80146c0:	4603      	mov	r3, r0
 80146c2:	1d31      	adds	r1, r6, #4
 80146c4:	4628      	mov	r0, r5
 80146c6:	401c      	ands	r4, r3
 80146c8:	f7fb fc92 	bl	800fff0 <ucdr_deserialize_uint8_t>
 80146cc:	b2e4      	uxtb	r4, r4
 80146ce:	4020      	ands	r0, r4
 80146d0:	bd70      	pop	{r4, r5, r6, pc}
 80146d2:	bf00      	nop

080146d4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80146d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146d8:	460e      	mov	r6, r1
 80146da:	4605      	mov	r5, r0
 80146dc:	f7fc fc30 	bl	8010f40 <ucdr_deserialize_int32_t>
 80146e0:	4607      	mov	r7, r0
 80146e2:	1d31      	adds	r1, r6, #4
 80146e4:	4628      	mov	r0, r5
 80146e6:	f7fb ffb3 	bl	8010650 <ucdr_deserialize_uint32_t>
 80146ea:	4680      	mov	r8, r0
 80146ec:	f106 0108 	add.w	r1, r6, #8
 80146f0:	4628      	mov	r0, r5
 80146f2:	f7fc fc25 	bl	8010f40 <ucdr_deserialize_int32_t>
 80146f6:	ea07 0708 	and.w	r7, r7, r8
 80146fa:	4604      	mov	r4, r0
 80146fc:	f106 010c 	add.w	r1, r6, #12
 8014700:	4628      	mov	r0, r5
 8014702:	403c      	ands	r4, r7
 8014704:	f7fb ffa4 	bl	8010650 <ucdr_deserialize_uint32_t>
 8014708:	f106 0110 	add.w	r1, r6, #16
 801470c:	4004      	ands	r4, r0
 801470e:	4628      	mov	r0, r5
 8014710:	f7fc fc16 	bl	8010f40 <ucdr_deserialize_int32_t>
 8014714:	4603      	mov	r3, r0
 8014716:	b2e4      	uxtb	r4, r4
 8014718:	4628      	mov	r0, r5
 801471a:	461d      	mov	r5, r3
 801471c:	f106 0114 	add.w	r1, r6, #20
 8014720:	f7fb ff96 	bl	8010650 <ucdr_deserialize_uint32_t>
 8014724:	402c      	ands	r4, r5
 8014726:	4020      	ands	r0, r4
 8014728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801472c <uxr_serialize_SampleIdentity>:
 801472c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014730:	4604      	mov	r4, r0
 8014732:	460d      	mov	r5, r1
 8014734:	220c      	movs	r2, #12
 8014736:	f7fb f9f9 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 801473a:	2203      	movs	r2, #3
 801473c:	f105 010c 	add.w	r1, r5, #12
 8014740:	4607      	mov	r7, r0
 8014742:	4620      	mov	r0, r4
 8014744:	f7fb f9f2 	bl	800fb2c <ucdr_serialize_array_uint8_t>
 8014748:	7be9      	ldrb	r1, [r5, #15]
 801474a:	4680      	mov	r8, r0
 801474c:	4620      	mov	r0, r4
 801474e:	f7fb fc39 	bl	800ffc4 <ucdr_serialize_uint8_t>
 8014752:	6929      	ldr	r1, [r5, #16]
 8014754:	4606      	mov	r6, r0
 8014756:	4620      	mov	r0, r4
 8014758:	f7fc fb5a 	bl	8010e10 <ucdr_serialize_int32_t>
 801475c:	ea07 0708 	and.w	r7, r7, r8
 8014760:	4603      	mov	r3, r0
 8014762:	4620      	mov	r0, r4
 8014764:	403e      	ands	r6, r7
 8014766:	6969      	ldr	r1, [r5, #20]
 8014768:	461c      	mov	r4, r3
 801476a:	f7fb fe41 	bl	80103f0 <ucdr_serialize_uint32_t>
 801476e:	4034      	ands	r4, r6
 8014770:	4020      	ands	r0, r4
 8014772:	b2c0      	uxtb	r0, r0
 8014774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014778 <uxr_deserialize_SampleIdentity>:
 8014778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801477c:	4604      	mov	r4, r0
 801477e:	460d      	mov	r5, r1
 8014780:	220c      	movs	r2, #12
 8014782:	f7fb fa37 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 8014786:	2203      	movs	r2, #3
 8014788:	f105 010c 	add.w	r1, r5, #12
 801478c:	4607      	mov	r7, r0
 801478e:	4620      	mov	r0, r4
 8014790:	f7fb fa30 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 8014794:	f105 010f 	add.w	r1, r5, #15
 8014798:	4680      	mov	r8, r0
 801479a:	4620      	mov	r0, r4
 801479c:	f7fb fc28 	bl	800fff0 <ucdr_deserialize_uint8_t>
 80147a0:	f105 0110 	add.w	r1, r5, #16
 80147a4:	4606      	mov	r6, r0
 80147a6:	4620      	mov	r0, r4
 80147a8:	f7fc fbca 	bl	8010f40 <ucdr_deserialize_int32_t>
 80147ac:	ea07 0708 	and.w	r7, r7, r8
 80147b0:	4603      	mov	r3, r0
 80147b2:	4620      	mov	r0, r4
 80147b4:	403e      	ands	r6, r7
 80147b6:	f105 0114 	add.w	r1, r5, #20
 80147ba:	461c      	mov	r4, r3
 80147bc:	f7fb ff48 	bl	8010650 <ucdr_deserialize_uint32_t>
 80147c0:	4034      	ands	r4, r6
 80147c2:	4020      	ands	r0, r4
 80147c4:	b2c0      	uxtb	r0, r0
 80147c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147ca:	bf00      	nop

080147cc <racs_services__srv__Control_Event__get_type_description.part.0>:
 80147cc:	b510      	push	{r4, lr}
 80147ce:	2000      	movs	r0, #0
 80147d0:	4c13      	ldr	r4, [pc, #76]	; (8014820 <racs_services__srv__Control_Event__get_type_description.part.0+0x54>)
 80147d2:	f006 f955 	bl	801aa80 <builtin_interfaces__msg__Time__get_type_description>
 80147d6:	300c      	adds	r0, #12
 80147d8:	4b12      	ldr	r3, [pc, #72]	; (8014824 <racs_services__srv__Control_Event__get_type_description.part.0+0x58>)
 80147da:	c807      	ldmia	r0, {r0, r1, r2}
 80147dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80147e0:	7823      	ldrb	r3, [r4, #0]
 80147e2:	b90b      	cbnz	r3, 80147e8 <racs_services__srv__Control_Event__get_type_description.part.0+0x1c>
 80147e4:	2301      	movs	r3, #1
 80147e6:	7023      	strb	r3, [r4, #0]
 80147e8:	4a0f      	ldr	r2, [pc, #60]	; (8014828 <racs_services__srv__Control_Event__get_type_description.part.0+0x5c>)
 80147ea:	4b10      	ldr	r3, [pc, #64]	; (801482c <racs_services__srv__Control_Event__get_type_description.part.0+0x60>)
 80147ec:	4c10      	ldr	r4, [pc, #64]	; (8014830 <racs_services__srv__Control_Event__get_type_description.part.0+0x64>)
 80147ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80147f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80147f4:	7823      	ldrb	r3, [r4, #0]
 80147f6:	b90b      	cbnz	r3, 80147fc <racs_services__srv__Control_Event__get_type_description.part.0+0x30>
 80147f8:	2301      	movs	r3, #1
 80147fa:	7023      	strb	r3, [r4, #0]
 80147fc:	4b0d      	ldr	r3, [pc, #52]	; (8014834 <racs_services__srv__Control_Event__get_type_description.part.0+0x68>)
 80147fe:	4c0e      	ldr	r4, [pc, #56]	; (8014838 <racs_services__srv__Control_Event__get_type_description.part.0+0x6c>)
 8014800:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014804:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014808:	2000      	movs	r0, #0
 801480a:	3418      	adds	r4, #24
 801480c:	f006 f8d8 	bl	801a9c0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8014810:	300c      	adds	r0, #12
 8014812:	4b0a      	ldr	r3, [pc, #40]	; (801483c <racs_services__srv__Control_Event__get_type_description.part.0+0x70>)
 8014814:	c807      	ldmia	r0, {r0, r1, r2}
 8014816:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801481a:	2201      	movs	r2, #1
 801481c:	701a      	strb	r2, [r3, #0]
 801481e:	bd10      	pop	{r4, pc}
 8014820:	20010670 	.word	0x20010670
 8014824:	20000f20 	.word	0x20000f20
 8014828:	0801fa04 	.word	0x0801fa04
 801482c:	20000f38 	.word	0x20000f38
 8014830:	2001066e 	.word	0x2001066e
 8014834:	0801f9e0 	.word	0x0801f9e0
 8014838:	20000f50 	.word	0x20000f50
 801483c:	2001066d 	.word	0x2001066d

08014840 <racs_services__srv__Control__get_type_hash>:
 8014840:	4800      	ldr	r0, [pc, #0]	; (8014844 <racs_services__srv__Control__get_type_hash+0x4>)
 8014842:	4770      	bx	lr
 8014844:	20000df0 	.word	0x20000df0

08014848 <racs_services__srv__Control_Request__get_type_hash>:
 8014848:	4800      	ldr	r0, [pc, #0]	; (801484c <racs_services__srv__Control_Request__get_type_hash+0x4>)
 801484a:	4770      	bx	lr
 801484c:	20000dcc 	.word	0x20000dcc

08014850 <racs_services__srv__Control_Response__get_type_hash>:
 8014850:	4800      	ldr	r0, [pc, #0]	; (8014854 <racs_services__srv__Control_Response__get_type_hash+0x4>)
 8014852:	4770      	bx	lr
 8014854:	20000da8 	.word	0x20000da8

08014858 <racs_services__srv__Control_Event__get_type_hash>:
 8014858:	4800      	ldr	r0, [pc, #0]	; (801485c <racs_services__srv__Control_Event__get_type_hash+0x4>)
 801485a:	4770      	bx	lr
 801485c:	20000d84 	.word	0x20000d84

08014860 <racs_services__srv__Control__get_type_description>:
 8014860:	b538      	push	{r3, r4, r5, lr}
 8014862:	4d1c      	ldr	r5, [pc, #112]	; (80148d4 <racs_services__srv__Control__get_type_description+0x74>)
 8014864:	7828      	ldrb	r0, [r5, #0]
 8014866:	b108      	cbz	r0, 801486c <racs_services__srv__Control__get_type_description+0xc>
 8014868:	481b      	ldr	r0, [pc, #108]	; (80148d8 <racs_services__srv__Control__get_type_description+0x78>)
 801486a:	bd38      	pop	{r3, r4, r5, pc}
 801486c:	f006 f908 	bl	801aa80 <builtin_interfaces__msg__Time__get_type_description>
 8014870:	300c      	adds	r0, #12
 8014872:	4b1a      	ldr	r3, [pc, #104]	; (80148dc <racs_services__srv__Control__get_type_description+0x7c>)
 8014874:	c807      	ldmia	r0, {r0, r1, r2}
 8014876:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801487a:	4b19      	ldr	r3, [pc, #100]	; (80148e0 <racs_services__srv__Control__get_type_description+0x80>)
 801487c:	781b      	ldrb	r3, [r3, #0]
 801487e:	b32b      	cbz	r3, 80148cc <racs_services__srv__Control__get_type_description+0x6c>
 8014880:	4a18      	ldr	r2, [pc, #96]	; (80148e4 <racs_services__srv__Control__get_type_description+0x84>)
 8014882:	4b19      	ldr	r3, [pc, #100]	; (80148e8 <racs_services__srv__Control__get_type_description+0x88>)
 8014884:	4c19      	ldr	r4, [pc, #100]	; (80148ec <racs_services__srv__Control__get_type_description+0x8c>)
 8014886:	ca07      	ldmia	r2, {r0, r1, r2}
 8014888:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801488c:	7823      	ldrb	r3, [r4, #0]
 801488e:	b90b      	cbnz	r3, 8014894 <racs_services__srv__Control__get_type_description+0x34>
 8014890:	2301      	movs	r3, #1
 8014892:	7023      	strb	r3, [r4, #0]
 8014894:	4a16      	ldr	r2, [pc, #88]	; (80148f0 <racs_services__srv__Control__get_type_description+0x90>)
 8014896:	4b17      	ldr	r3, [pc, #92]	; (80148f4 <racs_services__srv__Control__get_type_description+0x94>)
 8014898:	4c17      	ldr	r4, [pc, #92]	; (80148f8 <racs_services__srv__Control__get_type_description+0x98>)
 801489a:	ca07      	ldmia	r2, {r0, r1, r2}
 801489c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80148a0:	7823      	ldrb	r3, [r4, #0]
 80148a2:	b90b      	cbnz	r3, 80148a8 <racs_services__srv__Control__get_type_description+0x48>
 80148a4:	2301      	movs	r3, #1
 80148a6:	7023      	strb	r3, [r4, #0]
 80148a8:	4b14      	ldr	r3, [pc, #80]	; (80148fc <racs_services__srv__Control__get_type_description+0x9c>)
 80148aa:	4c15      	ldr	r4, [pc, #84]	; (8014900 <racs_services__srv__Control__get_type_description+0xa0>)
 80148ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80148b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80148b4:	2000      	movs	r0, #0
 80148b6:	3418      	adds	r4, #24
 80148b8:	f006 f882 	bl	801a9c0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 80148bc:	300c      	adds	r0, #12
 80148be:	2301      	movs	r3, #1
 80148c0:	c807      	ldmia	r0, {r0, r1, r2}
 80148c2:	702b      	strb	r3, [r5, #0]
 80148c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80148c8:	4803      	ldr	r0, [pc, #12]	; (80148d8 <racs_services__srv__Control__get_type_description+0x78>)
 80148ca:	bd38      	pop	{r3, r4, r5, pc}
 80148cc:	f7ff ff7e 	bl	80147cc <racs_services__srv__Control_Event__get_type_description.part.0>
 80148d0:	e7d6      	b.n	8014880 <racs_services__srv__Control__get_type_description+0x20>
 80148d2:	bf00      	nop
 80148d4:	20010671 	.word	0x20010671
 80148d8:	0801fa1c 	.word	0x0801fa1c
 80148dc:	20001248 	.word	0x20001248
 80148e0:	2001066d 	.word	0x2001066d
 80148e4:	0801f9bc 	.word	0x0801f9bc
 80148e8:	20001260 	.word	0x20001260
 80148ec:	20010670 	.word	0x20010670
 80148f0:	0801fa04 	.word	0x0801fa04
 80148f4:	20001278 	.word	0x20001278
 80148f8:	2001066e 	.word	0x2001066e
 80148fc:	0801f9e0 	.word	0x0801f9e0
 8014900:	20001290 	.word	0x20001290

08014904 <racs_services__srv__Control_Request__get_type_description>:
 8014904:	4b03      	ldr	r3, [pc, #12]	; (8014914 <racs_services__srv__Control_Request__get_type_description+0x10>)
 8014906:	781a      	ldrb	r2, [r3, #0]
 8014908:	b90a      	cbnz	r2, 801490e <racs_services__srv__Control_Request__get_type_description+0xa>
 801490a:	2201      	movs	r2, #1
 801490c:	701a      	strb	r2, [r3, #0]
 801490e:	4802      	ldr	r0, [pc, #8]	; (8014918 <racs_services__srv__Control_Request__get_type_description+0x14>)
 8014910:	4770      	bx	lr
 8014912:	bf00      	nop
 8014914:	20010670 	.word	0x20010670
 8014918:	0801f9f8 	.word	0x0801f9f8

0801491c <racs_services__srv__Control_Response__get_type_description>:
 801491c:	4b03      	ldr	r3, [pc, #12]	; (801492c <racs_services__srv__Control_Response__get_type_description+0x10>)
 801491e:	781a      	ldrb	r2, [r3, #0]
 8014920:	b90a      	cbnz	r2, 8014926 <racs_services__srv__Control_Response__get_type_description+0xa>
 8014922:	2201      	movs	r2, #1
 8014924:	701a      	strb	r2, [r3, #0]
 8014926:	4802      	ldr	r0, [pc, #8]	; (8014930 <racs_services__srv__Control_Response__get_type_description+0x14>)
 8014928:	4770      	bx	lr
 801492a:	bf00      	nop
 801492c:	2001066e 	.word	0x2001066e
 8014930:	0801f9d4 	.word	0x0801f9d4

08014934 <racs_services__srv__Control_Event__get_type_description>:
 8014934:	b508      	push	{r3, lr}
 8014936:	4b04      	ldr	r3, [pc, #16]	; (8014948 <racs_services__srv__Control_Event__get_type_description+0x14>)
 8014938:	781b      	ldrb	r3, [r3, #0]
 801493a:	b10b      	cbz	r3, 8014940 <racs_services__srv__Control_Event__get_type_description+0xc>
 801493c:	4803      	ldr	r0, [pc, #12]	; (801494c <racs_services__srv__Control_Event__get_type_description+0x18>)
 801493e:	bd08      	pop	{r3, pc}
 8014940:	f7ff ff44 	bl	80147cc <racs_services__srv__Control_Event__get_type_description.part.0>
 8014944:	4801      	ldr	r0, [pc, #4]	; (801494c <racs_services__srv__Control_Event__get_type_description+0x18>)
 8014946:	bd08      	pop	{r3, pc}
 8014948:	2001066d 	.word	0x2001066d
 801494c:	0801f9b0 	.word	0x0801f9b0

08014950 <racs_services__srv__Control__get_type_description_sources>:
 8014950:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014954:	4b2c      	ldr	r3, [pc, #176]	; (8014a08 <racs_services__srv__Control__get_type_description_sources+0xb8>)
 8014956:	f893 9000 	ldrb.w	r9, [r3]
 801495a:	f1b9 0f00 	cmp.w	r9, #0
 801495e:	d002      	beq.n	8014966 <racs_services__srv__Control__get_type_description_sources+0x16>
 8014960:	482a      	ldr	r0, [pc, #168]	; (8014a0c <racs_services__srv__Control__get_type_description_sources+0xbc>)
 8014962:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014966:	4d2a      	ldr	r5, [pc, #168]	; (8014a10 <racs_services__srv__Control__get_type_description_sources+0xc0>)
 8014968:	4c2a      	ldr	r4, [pc, #168]	; (8014a14 <racs_services__srv__Control__get_type_description_sources+0xc4>)
 801496a:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8014a1c <racs_services__srv__Control__get_type_description_sources+0xcc>
 801496e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8014a20 <racs_services__srv__Control__get_type_description_sources+0xd0>
 8014972:	4e29      	ldr	r6, [pc, #164]	; (8014a18 <racs_services__srv__Control__get_type_description_sources+0xc8>)
 8014974:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014976:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801497a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801497c:	682b      	ldr	r3, [r5, #0]
 801497e:	4625      	mov	r5, r4
 8014980:	4648      	mov	r0, r9
 8014982:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 8014986:	f845 3b04 	str.w	r3, [r5], #4
 801498a:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 801498e:	f006 f883 	bl	801aa98 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8014992:	4684      	mov	ip, r0
 8014994:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 8014998:	3494      	adds	r4, #148	; 0x94
 801499a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801499e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80149a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80149a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80149a6:	f8dc 3000 	ldr.w	r3, [ip]
 80149aa:	602b      	str	r3, [r5, #0]
 80149ac:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80149b0:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 80149b4:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80149b8:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 80149bc:	f8db 3000 	ldr.w	r3, [fp]
 80149c0:	f8ca 3000 	str.w	r3, [sl]
 80149c4:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80149c8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80149ca:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80149ce:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80149d0:	f8d8 3000 	ldr.w	r3, [r8]
 80149d4:	603b      	str	r3, [r7, #0]
 80149d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80149d8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80149dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80149de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80149e2:	6833      	ldr	r3, [r6, #0]
 80149e4:	4648      	mov	r0, r9
 80149e6:	f8ce 3000 	str.w	r3, [lr]
 80149ea:	f006 f801 	bl	801a9f0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 80149ee:	2301      	movs	r3, #1
 80149f0:	4a05      	ldr	r2, [pc, #20]	; (8014a08 <racs_services__srv__Control__get_type_description_sources+0xb8>)
 80149f2:	4605      	mov	r5, r0
 80149f4:	7013      	strb	r3, [r2, #0]
 80149f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80149f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80149fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80149fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80149fe:	682b      	ldr	r3, [r5, #0]
 8014a00:	4802      	ldr	r0, [pc, #8]	; (8014a0c <racs_services__srv__Control__get_type_description_sources+0xbc>)
 8014a02:	6023      	str	r3, [r4, #0]
 8014a04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a08:	2001066c 	.word	0x2001066c
 8014a0c:	0801faf4 	.word	0x0801faf4
 8014a10:	0801faac 	.word	0x0801faac
 8014a14:	20010728 	.word	0x20010728
 8014a18:	0801fa64 	.word	0x0801fa64
 8014a1c:	0801fa40 	.word	0x0801fa40
 8014a20:	0801fa88 	.word	0x0801fa88

08014a24 <racs_services__srv__Control_Request__get_type_description_sources>:
 8014a24:	4b09      	ldr	r3, [pc, #36]	; (8014a4c <racs_services__srv__Control_Request__get_type_description_sources+0x28>)
 8014a26:	781a      	ldrb	r2, [r3, #0]
 8014a28:	b96a      	cbnz	r2, 8014a46 <racs_services__srv__Control_Request__get_type_description_sources+0x22>
 8014a2a:	2201      	movs	r2, #1
 8014a2c:	b430      	push	{r4, r5}
 8014a2e:	4d08      	ldr	r5, [pc, #32]	; (8014a50 <racs_services__srv__Control_Request__get_type_description_sources+0x2c>)
 8014a30:	4c08      	ldr	r4, [pc, #32]	; (8014a54 <racs_services__srv__Control_Request__get_type_description_sources+0x30>)
 8014a32:	701a      	strb	r2, [r3, #0]
 8014a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014a3c:	682b      	ldr	r3, [r5, #0]
 8014a3e:	4806      	ldr	r0, [pc, #24]	; (8014a58 <racs_services__srv__Control_Request__get_type_description_sources+0x34>)
 8014a40:	6023      	str	r3, [r4, #0]
 8014a42:	bc30      	pop	{r4, r5}
 8014a44:	4770      	bx	lr
 8014a46:	4804      	ldr	r0, [pc, #16]	; (8014a58 <racs_services__srv__Control_Request__get_type_description_sources+0x34>)
 8014a48:	4770      	bx	lr
 8014a4a:	bf00      	nop
 8014a4c:	20010673 	.word	0x20010673
 8014a50:	0801fa88 	.word	0x0801fa88
 8014a54:	20010824 	.word	0x20010824
 8014a58:	0801fae8 	.word	0x0801fae8

08014a5c <racs_services__srv__Control_Response__get_type_description_sources>:
 8014a5c:	4b09      	ldr	r3, [pc, #36]	; (8014a84 <racs_services__srv__Control_Response__get_type_description_sources+0x28>)
 8014a5e:	781a      	ldrb	r2, [r3, #0]
 8014a60:	b96a      	cbnz	r2, 8014a7e <racs_services__srv__Control_Response__get_type_description_sources+0x22>
 8014a62:	2201      	movs	r2, #1
 8014a64:	b430      	push	{r4, r5}
 8014a66:	4d08      	ldr	r5, [pc, #32]	; (8014a88 <racs_services__srv__Control_Response__get_type_description_sources+0x2c>)
 8014a68:	4c08      	ldr	r4, [pc, #32]	; (8014a8c <racs_services__srv__Control_Response__get_type_description_sources+0x30>)
 8014a6a:	701a      	strb	r2, [r3, #0]
 8014a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014a74:	682b      	ldr	r3, [r5, #0]
 8014a76:	4806      	ldr	r0, [pc, #24]	; (8014a90 <racs_services__srv__Control_Response__get_type_description_sources+0x34>)
 8014a78:	6023      	str	r3, [r4, #0]
 8014a7a:	bc30      	pop	{r4, r5}
 8014a7c:	4770      	bx	lr
 8014a7e:	4804      	ldr	r0, [pc, #16]	; (8014a90 <racs_services__srv__Control_Response__get_type_description_sources+0x34>)
 8014a80:	4770      	bx	lr
 8014a82:	bf00      	nop
 8014a84:	20010672 	.word	0x20010672
 8014a88:	0801fa64 	.word	0x0801fa64
 8014a8c:	20010800 	.word	0x20010800
 8014a90:	0801fadc 	.word	0x0801fadc

08014a94 <racs_services__srv__Control_Event__get_type_description_sources>:
 8014a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a98:	4e27      	ldr	r6, [pc, #156]	; (8014b38 <racs_services__srv__Control_Event__get_type_description_sources+0xa4>)
 8014a9a:	f896 8000 	ldrb.w	r8, [r6]
 8014a9e:	f1b8 0f00 	cmp.w	r8, #0
 8014aa2:	d002      	beq.n	8014aaa <racs_services__srv__Control_Event__get_type_description_sources+0x16>
 8014aa4:	4825      	ldr	r0, [pc, #148]	; (8014b3c <racs_services__srv__Control_Event__get_type_description_sources+0xa8>)
 8014aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014aaa:	4d25      	ldr	r5, [pc, #148]	; (8014b40 <racs_services__srv__Control_Event__get_type_description_sources+0xac>)
 8014aac:	4c25      	ldr	r4, [pc, #148]	; (8014b44 <racs_services__srv__Control_Event__get_type_description_sources+0xb0>)
 8014aae:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8014b4c <racs_services__srv__Control_Event__get_type_description_sources+0xb8>
 8014ab2:	4f25      	ldr	r7, [pc, #148]	; (8014b48 <racs_services__srv__Control_Event__get_type_description_sources+0xb4>)
 8014ab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ab8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014aba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014abc:	682b      	ldr	r3, [r5, #0]
 8014abe:	4625      	mov	r5, r4
 8014ac0:	4640      	mov	r0, r8
 8014ac2:	f104 0928 	add.w	r9, r4, #40	; 0x28
 8014ac6:	f845 3b04 	str.w	r3, [r5], #4
 8014aca:	f005 ffe5 	bl	801aa98 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8014ace:	4684      	mov	ip, r0
 8014ad0:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 8014ad4:	3470      	adds	r4, #112	; 0x70
 8014ad6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014ada:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014adc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014ae0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014ae2:	f8dc 3000 	ldr.w	r3, [ip]
 8014ae6:	602b      	str	r3, [r5, #0]
 8014ae8:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8014aec:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8014af0:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8014af4:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8014af8:	f8da 3000 	ldr.w	r3, [sl]
 8014afc:	f8c9 3000 	str.w	r3, [r9]
 8014b00:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014b02:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014b06:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014b08:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014b0c:	683b      	ldr	r3, [r7, #0]
 8014b0e:	4640      	mov	r0, r8
 8014b10:	f8ce 3000 	str.w	r3, [lr]
 8014b14:	f005 ff6c 	bl	801a9f0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8014b18:	2301      	movs	r3, #1
 8014b1a:	4684      	mov	ip, r0
 8014b1c:	7033      	strb	r3, [r6, #0]
 8014b1e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b24:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b2a:	f8dc 3000 	ldr.w	r3, [ip]
 8014b2e:	4803      	ldr	r0, [pc, #12]	; (8014b3c <racs_services__srv__Control_Event__get_type_description_sources+0xa8>)
 8014b30:	6023      	str	r3, [r4, #0]
 8014b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b36:	bf00      	nop
 8014b38:	2001066f 	.word	0x2001066f
 8014b3c:	0801fad0 	.word	0x0801fad0
 8014b40:	0801fa40 	.word	0x0801fa40
 8014b44:	20010674 	.word	0x20010674
 8014b48:	0801fa64 	.word	0x0801fa64
 8014b4c:	0801fa88 	.word	0x0801fa88

08014b50 <racs_services__srv__Control_Event__fini.part.0>:
 8014b50:	b510      	push	{r4, lr}
 8014b52:	b086      	sub	sp, #24
 8014b54:	4604      	mov	r4, r0
 8014b56:	f005 ff89 	bl	801aa6c <service_msgs__msg__ServiceEventInfo__fini>
 8014b5a:	a801      	add	r0, sp, #4
 8014b5c:	f7f9 ff3a 	bl	800e9d4 <rcutils_get_default_allocator>
 8014b60:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014b62:	b130      	cbz	r0, 8014b72 <racs_services__srv__Control_Event__fini.part.0+0x22>
 8014b64:	9b02      	ldr	r3, [sp, #8]
 8014b66:	9905      	ldr	r1, [sp, #20]
 8014b68:	4798      	blx	r3
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8014b70:	6323      	str	r3, [r4, #48]	; 0x30
 8014b72:	a801      	add	r0, sp, #4
 8014b74:	f7f9 ff2e 	bl	800e9d4 <rcutils_get_default_allocator>
 8014b78:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014b7a:	b130      	cbz	r0, 8014b8a <racs_services__srv__Control_Event__fini.part.0+0x3a>
 8014b7c:	9b02      	ldr	r3, [sp, #8]
 8014b7e:	9905      	ldr	r1, [sp, #20]
 8014b80:	4798      	blx	r3
 8014b82:	2300      	movs	r3, #0
 8014b84:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8014b88:	63e3      	str	r3, [r4, #60]	; 0x3c
 8014b8a:	b006      	add	sp, #24
 8014b8c:	bd10      	pop	{r4, pc}
 8014b8e:	bf00      	nop

08014b90 <racs_services__srv__Control_Request__init>:
 8014b90:	3800      	subs	r0, #0
 8014b92:	bf18      	it	ne
 8014b94:	2001      	movne	r0, #1
 8014b96:	4770      	bx	lr

08014b98 <racs_services__srv__Control_Request__fini>:
 8014b98:	4770      	bx	lr
 8014b9a:	bf00      	nop

08014b9c <racs_services__srv__Control_Request__copy>:
 8014b9c:	b168      	cbz	r0, 8014bba <racs_services__srv__Control_Request__copy+0x1e>
 8014b9e:	b161      	cbz	r1, 8014bba <racs_services__srv__Control_Request__copy+0x1e>
 8014ba0:	220c      	movs	r2, #12
 8014ba2:	b508      	push	{r3, lr}
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	4608      	mov	r0, r1
 8014ba8:	f833 1b02 	ldrh.w	r1, [r3], #2
 8014bac:	f820 1b02 	strh.w	r1, [r0], #2
 8014bb0:	4619      	mov	r1, r3
 8014bb2:	f008 fe19 	bl	801d7e8 <memmove>
 8014bb6:	2001      	movs	r0, #1
 8014bb8:	bd08      	pop	{r3, pc}
 8014bba:	2000      	movs	r0, #0
 8014bbc:	4770      	bx	lr
 8014bbe:	bf00      	nop

08014bc0 <racs_services__srv__Control_Request__Sequence__init>:
 8014bc0:	b530      	push	{r4, r5, lr}
 8014bc2:	4604      	mov	r4, r0
 8014bc4:	b087      	sub	sp, #28
 8014bc6:	b148      	cbz	r0, 8014bdc <racs_services__srv__Control_Request__Sequence__init+0x1c>
 8014bc8:	460d      	mov	r5, r1
 8014bca:	a801      	add	r0, sp, #4
 8014bcc:	f7f9 ff02 	bl	800e9d4 <rcutils_get_default_allocator>
 8014bd0:	b935      	cbnz	r5, 8014be0 <racs_services__srv__Control_Request__Sequence__init+0x20>
 8014bd2:	462b      	mov	r3, r5
 8014bd4:	2001      	movs	r0, #1
 8014bd6:	60a5      	str	r5, [r4, #8]
 8014bd8:	e9c4 3500 	strd	r3, r5, [r4]
 8014bdc:	b007      	add	sp, #28
 8014bde:	bd30      	pop	{r4, r5, pc}
 8014be0:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8014be4:	210e      	movs	r1, #14
 8014be6:	4628      	mov	r0, r5
 8014be8:	4798      	blx	r3
 8014bea:	4603      	mov	r3, r0
 8014bec:	2800      	cmp	r0, #0
 8014bee:	d1f1      	bne.n	8014bd4 <racs_services__srv__Control_Request__Sequence__init+0x14>
 8014bf0:	e7f4      	b.n	8014bdc <racs_services__srv__Control_Request__Sequence__init+0x1c>
 8014bf2:	bf00      	nop

08014bf4 <racs_services__srv__Control_Request__Sequence__fini>:
 8014bf4:	b180      	cbz	r0, 8014c18 <racs_services__srv__Control_Request__Sequence__fini+0x24>
 8014bf6:	b510      	push	{r4, lr}
 8014bf8:	b086      	sub	sp, #24
 8014bfa:	4604      	mov	r4, r0
 8014bfc:	a801      	add	r0, sp, #4
 8014bfe:	f7f9 fee9 	bl	800e9d4 <rcutils_get_default_allocator>
 8014c02:	6820      	ldr	r0, [r4, #0]
 8014c04:	b130      	cbz	r0, 8014c14 <racs_services__srv__Control_Request__Sequence__fini+0x20>
 8014c06:	9b02      	ldr	r3, [sp, #8]
 8014c08:	9905      	ldr	r1, [sp, #20]
 8014c0a:	4798      	blx	r3
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	e9c4 3300 	strd	r3, r3, [r4]
 8014c12:	60a3      	str	r3, [r4, #8]
 8014c14:	b006      	add	sp, #24
 8014c16:	bd10      	pop	{r4, pc}
 8014c18:	4770      	bx	lr
 8014c1a:	bf00      	nop

08014c1c <racs_services__srv__Control_Response__init>:
 8014c1c:	3800      	subs	r0, #0
 8014c1e:	bf18      	it	ne
 8014c20:	2001      	movne	r0, #1
 8014c22:	4770      	bx	lr

08014c24 <racs_services__srv__Control_Response__fini>:
 8014c24:	4770      	bx	lr
 8014c26:	bf00      	nop

08014c28 <racs_services__srv__Control_Response__copy>:
 8014c28:	b120      	cbz	r0, 8014c34 <racs_services__srv__Control_Response__copy+0xc>
 8014c2a:	b119      	cbz	r1, 8014c34 <racs_services__srv__Control_Response__copy+0xc>
 8014c2c:	7803      	ldrb	r3, [r0, #0]
 8014c2e:	2001      	movs	r0, #1
 8014c30:	700b      	strb	r3, [r1, #0]
 8014c32:	4770      	bx	lr
 8014c34:	2000      	movs	r0, #0
 8014c36:	4770      	bx	lr

08014c38 <racs_services__srv__Control_Response__Sequence__init>:
 8014c38:	b530      	push	{r4, r5, lr}
 8014c3a:	4604      	mov	r4, r0
 8014c3c:	b087      	sub	sp, #28
 8014c3e:	b148      	cbz	r0, 8014c54 <racs_services__srv__Control_Response__Sequence__init+0x1c>
 8014c40:	460d      	mov	r5, r1
 8014c42:	a801      	add	r0, sp, #4
 8014c44:	f7f9 fec6 	bl	800e9d4 <rcutils_get_default_allocator>
 8014c48:	b935      	cbnz	r5, 8014c58 <racs_services__srv__Control_Response__Sequence__init+0x20>
 8014c4a:	462b      	mov	r3, r5
 8014c4c:	2001      	movs	r0, #1
 8014c4e:	60a5      	str	r5, [r4, #8]
 8014c50:	e9c4 3500 	strd	r3, r5, [r4]
 8014c54:	b007      	add	sp, #28
 8014c56:	bd30      	pop	{r4, r5, pc}
 8014c58:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8014c5c:	2101      	movs	r1, #1
 8014c5e:	4628      	mov	r0, r5
 8014c60:	4798      	blx	r3
 8014c62:	4603      	mov	r3, r0
 8014c64:	2800      	cmp	r0, #0
 8014c66:	d1f1      	bne.n	8014c4c <racs_services__srv__Control_Response__Sequence__init+0x14>
 8014c68:	e7f4      	b.n	8014c54 <racs_services__srv__Control_Response__Sequence__init+0x1c>
 8014c6a:	bf00      	nop

08014c6c <racs_services__srv__Control_Response__Sequence__fini>:
 8014c6c:	b180      	cbz	r0, 8014c90 <racs_services__srv__Control_Response__Sequence__fini+0x24>
 8014c6e:	b510      	push	{r4, lr}
 8014c70:	b086      	sub	sp, #24
 8014c72:	4604      	mov	r4, r0
 8014c74:	a801      	add	r0, sp, #4
 8014c76:	f7f9 fead 	bl	800e9d4 <rcutils_get_default_allocator>
 8014c7a:	6820      	ldr	r0, [r4, #0]
 8014c7c:	b130      	cbz	r0, 8014c8c <racs_services__srv__Control_Response__Sequence__fini+0x20>
 8014c7e:	9b02      	ldr	r3, [sp, #8]
 8014c80:	9905      	ldr	r1, [sp, #20]
 8014c82:	4798      	blx	r3
 8014c84:	2300      	movs	r3, #0
 8014c86:	e9c4 3300 	strd	r3, r3, [r4]
 8014c8a:	60a3      	str	r3, [r4, #8]
 8014c8c:	b006      	add	sp, #24
 8014c8e:	bd10      	pop	{r4, pc}
 8014c90:	4770      	bx	lr
 8014c92:	bf00      	nop

08014c94 <racs_services__srv__Control_Event__init>:
 8014c94:	b570      	push	{r4, r5, r6, lr}
 8014c96:	4604      	mov	r4, r0
 8014c98:	b086      	sub	sp, #24
 8014c9a:	b1c8      	cbz	r0, 8014cd0 <racs_services__srv__Control_Event__init+0x3c>
 8014c9c:	f005 fed4 	bl	801aa48 <service_msgs__msg__ServiceEventInfo__init>
 8014ca0:	4605      	mov	r5, r0
 8014ca2:	b178      	cbz	r0, 8014cc4 <racs_services__srv__Control_Event__init+0x30>
 8014ca4:	2600      	movs	r6, #0
 8014ca6:	a801      	add	r0, sp, #4
 8014ca8:	f7f9 fe94 	bl	800e9d4 <rcutils_get_default_allocator>
 8014cac:	a801      	add	r0, sp, #4
 8014cae:	6326      	str	r6, [r4, #48]	; 0x30
 8014cb0:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
 8014cb4:	f7f9 fe8e 	bl	800e9d4 <rcutils_get_default_allocator>
 8014cb8:	4628      	mov	r0, r5
 8014cba:	63e6      	str	r6, [r4, #60]	; 0x3c
 8014cbc:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
 8014cc0:	b006      	add	sp, #24
 8014cc2:	bd70      	pop	{r4, r5, r6, pc}
 8014cc4:	4620      	mov	r0, r4
 8014cc6:	f7ff ff43 	bl	8014b50 <racs_services__srv__Control_Event__fini.part.0>
 8014cca:	4628      	mov	r0, r5
 8014ccc:	b006      	add	sp, #24
 8014cce:	bd70      	pop	{r4, r5, r6, pc}
 8014cd0:	4605      	mov	r5, r0
 8014cd2:	4628      	mov	r0, r5
 8014cd4:	b006      	add	sp, #24
 8014cd6:	bd70      	pop	{r4, r5, r6, pc}

08014cd8 <racs_services__srv__Control_Event__fini>:
 8014cd8:	b1f0      	cbz	r0, 8014d18 <racs_services__srv__Control_Event__fini+0x40>
 8014cda:	b510      	push	{r4, lr}
 8014cdc:	b086      	sub	sp, #24
 8014cde:	4604      	mov	r4, r0
 8014ce0:	f005 fec4 	bl	801aa6c <service_msgs__msg__ServiceEventInfo__fini>
 8014ce4:	a801      	add	r0, sp, #4
 8014ce6:	f7f9 fe75 	bl	800e9d4 <rcutils_get_default_allocator>
 8014cea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014cec:	b130      	cbz	r0, 8014cfc <racs_services__srv__Control_Event__fini+0x24>
 8014cee:	9b02      	ldr	r3, [sp, #8]
 8014cf0:	9905      	ldr	r1, [sp, #20]
 8014cf2:	4798      	blx	r3
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8014cfa:	6323      	str	r3, [r4, #48]	; 0x30
 8014cfc:	a801      	add	r0, sp, #4
 8014cfe:	f7f9 fe69 	bl	800e9d4 <rcutils_get_default_allocator>
 8014d02:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014d04:	b130      	cbz	r0, 8014d14 <racs_services__srv__Control_Event__fini+0x3c>
 8014d06:	9b02      	ldr	r3, [sp, #8]
 8014d08:	9905      	ldr	r1, [sp, #20]
 8014d0a:	4798      	blx	r3
 8014d0c:	2300      	movs	r3, #0
 8014d0e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8014d12:	63e3      	str	r3, [r4, #60]	; 0x3c
 8014d14:	b006      	add	sp, #24
 8014d16:	bd10      	pop	{r4, pc}
 8014d18:	4770      	bx	lr
 8014d1a:	bf00      	nop

08014d1c <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control>:
 8014d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d20:	2900      	cmp	r1, #0
 8014d22:	d04d      	beq.n	8014dc0 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0xa4>
 8014d24:	4605      	mov	r5, r0
 8014d26:	2800      	cmp	r0, #0
 8014d28:	d04a      	beq.n	8014dc0 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0xa4>
 8014d2a:	460e      	mov	r6, r1
 8014d2c:	4698      	mov	r8, r3
 8014d2e:	2040      	movs	r0, #64	; 0x40
 8014d30:	680b      	ldr	r3, [r1, #0]
 8014d32:	6909      	ldr	r1, [r1, #16]
 8014d34:	4617      	mov	r7, r2
 8014d36:	4798      	blx	r3
 8014d38:	4604      	mov	r4, r0
 8014d3a:	f7ff ffab 	bl	8014c94 <racs_services__srv__Control_Event__init>
 8014d3e:	4684      	mov	ip, r0
 8014d40:	b370      	cbz	r0, 8014da0 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x84>
 8014d42:	782b      	ldrb	r3, [r5, #0]
 8014d44:	7023      	strb	r3, [r4, #0]
 8014d46:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8014d4a:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8014d4e:	e9c4 2301 	strd	r2, r3, [r4, #4]
 8014d52:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8014d56:	68e8      	ldr	r0, [r5, #12]
 8014d58:	6929      	ldr	r1, [r5, #16]
 8014d5a:	696a      	ldr	r2, [r5, #20]
 8014d5c:	69ab      	ldr	r3, [r5, #24]
 8014d5e:	60e0      	str	r0, [r4, #12]
 8014d60:	6121      	str	r1, [r4, #16]
 8014d62:	6162      	str	r2, [r4, #20]
 8014d64:	61a3      	str	r3, [r4, #24]
 8014d66:	b157      	cbz	r7, 8014d7e <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x62>
 8014d68:	2101      	movs	r1, #1
 8014d6a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014d6e:	f7ff ff27 	bl	8014bc0 <racs_services__srv__Control_Request__Sequence__init>
 8014d72:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8014d74:	4638      	mov	r0, r7
 8014d76:	f7ff ff11 	bl	8014b9c <racs_services__srv__Control_Request__copy>
 8014d7a:	4603      	mov	r3, r0
 8014d7c:	b1c0      	cbz	r0, 8014db0 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x94>
 8014d7e:	f1b8 0f00 	cmp.w	r8, #0
 8014d82:	d00a      	beq.n	8014d9a <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x7e>
 8014d84:	2101      	movs	r1, #1
 8014d86:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8014d8a:	f7ff ff55 	bl	8014c38 <racs_services__srv__Control_Response__Sequence__init>
 8014d8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014d90:	4640      	mov	r0, r8
 8014d92:	f7ff ff49 	bl	8014c28 <racs_services__srv__Control_Response__copy>
 8014d96:	4603      	mov	r3, r0
 8014d98:	b150      	cbz	r0, 8014db0 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x94>
 8014d9a:	4620      	mov	r0, r4
 8014d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014da0:	4620      	mov	r0, r4
 8014da2:	4664      	mov	r4, ip
 8014da4:	6873      	ldr	r3, [r6, #4]
 8014da6:	6931      	ldr	r1, [r6, #16]
 8014da8:	4798      	blx	r3
 8014daa:	4620      	mov	r0, r4
 8014dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014db0:	4620      	mov	r0, r4
 8014db2:	461c      	mov	r4, r3
 8014db4:	6872      	ldr	r2, [r6, #4]
 8014db6:	6931      	ldr	r1, [r6, #16]
 8014db8:	4790      	blx	r2
 8014dba:	4620      	mov	r0, r4
 8014dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dc0:	2400      	movs	r4, #0
 8014dc2:	4620      	mov	r0, r4
 8014dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014dc8 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control>:
 8014dc8:	b1b9      	cbz	r1, 8014dfa <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x32>
 8014dca:	b538      	push	{r3, r4, r5, lr}
 8014dcc:	4605      	mov	r5, r0
 8014dce:	b190      	cbz	r0, 8014df6 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x2e>
 8014dd0:	460c      	mov	r4, r1
 8014dd2:	f7ff ff81 	bl	8014cd8 <racs_services__srv__Control_Event__fini>
 8014dd6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8014dd8:	b110      	cbz	r0, 8014de0 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x18>
 8014dda:	6863      	ldr	r3, [r4, #4]
 8014ddc:	6921      	ldr	r1, [r4, #16]
 8014dde:	4798      	blx	r3
 8014de0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8014de2:	b110      	cbz	r0, 8014dea <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x22>
 8014de4:	6863      	ldr	r3, [r4, #4]
 8014de6:	6921      	ldr	r1, [r4, #16]
 8014de8:	4798      	blx	r3
 8014dea:	4628      	mov	r0, r5
 8014dec:	6863      	ldr	r3, [r4, #4]
 8014dee:	6921      	ldr	r1, [r4, #16]
 8014df0:	4798      	blx	r3
 8014df2:	2001      	movs	r0, #1
 8014df4:	bd38      	pop	{r3, r4, r5, pc}
 8014df6:	2000      	movs	r0, #0
 8014df8:	bd38      	pop	{r3, r4, r5, pc}
 8014dfa:	2000      	movs	r0, #0
 8014dfc:	4770      	bx	lr
 8014dfe:	bf00      	nop

08014e00 <racs_services__msg__Debug__get_type_hash>:
 8014e00:	4800      	ldr	r0, [pc, #0]	; (8014e04 <racs_services__msg__Debug__get_type_hash+0x4>)
 8014e02:	4770      	bx	lr
 8014e04:	2000133c 	.word	0x2000133c

08014e08 <racs_services__msg__Debug__get_type_description>:
 8014e08:	4b03      	ldr	r3, [pc, #12]	; (8014e18 <racs_services__msg__Debug__get_type_description+0x10>)
 8014e0a:	781a      	ldrb	r2, [r3, #0]
 8014e0c:	b90a      	cbnz	r2, 8014e12 <racs_services__msg__Debug__get_type_description+0xa>
 8014e0e:	2201      	movs	r2, #1
 8014e10:	701a      	strb	r2, [r3, #0]
 8014e12:	4802      	ldr	r0, [pc, #8]	; (8014e1c <racs_services__msg__Debug__get_type_description+0x14>)
 8014e14:	4770      	bx	lr
 8014e16:	bf00      	nop
 8014e18:	20010849 	.word	0x20010849
 8014e1c:	0801fb00 	.word	0x0801fb00

08014e20 <racs_services__msg__Debug__get_type_description_sources>:
 8014e20:	4b09      	ldr	r3, [pc, #36]	; (8014e48 <racs_services__msg__Debug__get_type_description_sources+0x28>)
 8014e22:	781a      	ldrb	r2, [r3, #0]
 8014e24:	b96a      	cbnz	r2, 8014e42 <racs_services__msg__Debug__get_type_description_sources+0x22>
 8014e26:	2201      	movs	r2, #1
 8014e28:	b430      	push	{r4, r5}
 8014e2a:	4d08      	ldr	r5, [pc, #32]	; (8014e4c <racs_services__msg__Debug__get_type_description_sources+0x2c>)
 8014e2c:	4c08      	ldr	r4, [pc, #32]	; (8014e50 <racs_services__msg__Debug__get_type_description_sources+0x30>)
 8014e2e:	701a      	strb	r2, [r3, #0]
 8014e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014e34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014e38:	682b      	ldr	r3, [r5, #0]
 8014e3a:	4806      	ldr	r0, [pc, #24]	; (8014e54 <racs_services__msg__Debug__get_type_description_sources+0x34>)
 8014e3c:	6023      	str	r3, [r4, #0]
 8014e3e:	bc30      	pop	{r4, r5}
 8014e40:	4770      	bx	lr
 8014e42:	4804      	ldr	r0, [pc, #16]	; (8014e54 <racs_services__msg__Debug__get_type_description_sources+0x34>)
 8014e44:	4770      	bx	lr
 8014e46:	bf00      	nop
 8014e48:	20010848 	.word	0x20010848
 8014e4c:	0801fb24 	.word	0x0801fb24
 8014e50:	2001084c 	.word	0x2001084c
 8014e54:	0801fb48 	.word	0x0801fb48

08014e58 <racs_services__msg__Debug__init>:
 8014e58:	3800      	subs	r0, #0
 8014e5a:	bf18      	it	ne
 8014e5c:	2001      	movne	r0, #1
 8014e5e:	4770      	bx	lr

08014e60 <racs_services__msg__Debug__fini>:
 8014e60:	4770      	bx	lr
 8014e62:	bf00      	nop

08014e64 <racs_services__msg__DirectAccess__get_type_hash>:
 8014e64:	4800      	ldr	r0, [pc, #0]	; (8014e68 <racs_services__msg__DirectAccess__get_type_hash+0x4>)
 8014e66:	4770      	bx	lr
 8014e68:	200013e0 	.word	0x200013e0

08014e6c <racs_services__msg__DirectAccess__get_type_description>:
 8014e6c:	4b03      	ldr	r3, [pc, #12]	; (8014e7c <racs_services__msg__DirectAccess__get_type_description+0x10>)
 8014e6e:	781a      	ldrb	r2, [r3, #0]
 8014e70:	b90a      	cbnz	r2, 8014e76 <racs_services__msg__DirectAccess__get_type_description+0xa>
 8014e72:	2201      	movs	r2, #1
 8014e74:	701a      	strb	r2, [r3, #0]
 8014e76:	4802      	ldr	r0, [pc, #8]	; (8014e80 <racs_services__msg__DirectAccess__get_type_description+0x14>)
 8014e78:	4770      	bx	lr
 8014e7a:	bf00      	nop
 8014e7c:	20010871 	.word	0x20010871
 8014e80:	0801fb54 	.word	0x0801fb54

08014e84 <racs_services__msg__DirectAccess__get_type_description_sources>:
 8014e84:	4b09      	ldr	r3, [pc, #36]	; (8014eac <racs_services__msg__DirectAccess__get_type_description_sources+0x28>)
 8014e86:	781a      	ldrb	r2, [r3, #0]
 8014e88:	b96a      	cbnz	r2, 8014ea6 <racs_services__msg__DirectAccess__get_type_description_sources+0x22>
 8014e8a:	2201      	movs	r2, #1
 8014e8c:	b430      	push	{r4, r5}
 8014e8e:	4d08      	ldr	r5, [pc, #32]	; (8014eb0 <racs_services__msg__DirectAccess__get_type_description_sources+0x2c>)
 8014e90:	4c08      	ldr	r4, [pc, #32]	; (8014eb4 <racs_services__msg__DirectAccess__get_type_description_sources+0x30>)
 8014e92:	701a      	strb	r2, [r3, #0]
 8014e94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014e9c:	682b      	ldr	r3, [r5, #0]
 8014e9e:	4806      	ldr	r0, [pc, #24]	; (8014eb8 <racs_services__msg__DirectAccess__get_type_description_sources+0x34>)
 8014ea0:	6023      	str	r3, [r4, #0]
 8014ea2:	bc30      	pop	{r4, r5}
 8014ea4:	4770      	bx	lr
 8014ea6:	4804      	ldr	r0, [pc, #16]	; (8014eb8 <racs_services__msg__DirectAccess__get_type_description_sources+0x34>)
 8014ea8:	4770      	bx	lr
 8014eaa:	bf00      	nop
 8014eac:	20010870 	.word	0x20010870
 8014eb0:	0801fb78 	.word	0x0801fb78
 8014eb4:	20010874 	.word	0x20010874
 8014eb8:	0801fb9c 	.word	0x0801fb9c

08014ebc <racs_services__msg__DirectAccess__init>:
 8014ebc:	3800      	subs	r0, #0
 8014ebe:	bf18      	it	ne
 8014ec0:	2001      	movne	r0, #1
 8014ec2:	4770      	bx	lr

08014ec4 <racs_services__msg__DirectAccess__fini>:
 8014ec4:	4770      	bx	lr
 8014ec6:	bf00      	nop

08014ec8 <racs_services__msg__Encoder__get_type_hash>:
 8014ec8:	4800      	ldr	r0, [pc, #0]	; (8014ecc <racs_services__msg__Encoder__get_type_hash+0x4>)
 8014eca:	4770      	bx	lr
 8014ecc:	200014ec 	.word	0x200014ec

08014ed0 <racs_services__msg__Encoder__get_type_description>:
 8014ed0:	4b03      	ldr	r3, [pc, #12]	; (8014ee0 <racs_services__msg__Encoder__get_type_description+0x10>)
 8014ed2:	781a      	ldrb	r2, [r3, #0]
 8014ed4:	b90a      	cbnz	r2, 8014eda <racs_services__msg__Encoder__get_type_description+0xa>
 8014ed6:	2201      	movs	r2, #1
 8014ed8:	701a      	strb	r2, [r3, #0]
 8014eda:	4802      	ldr	r0, [pc, #8]	; (8014ee4 <racs_services__msg__Encoder__get_type_description+0x14>)
 8014edc:	4770      	bx	lr
 8014ede:	bf00      	nop
 8014ee0:	20010899 	.word	0x20010899
 8014ee4:	0801fba8 	.word	0x0801fba8

08014ee8 <racs_services__msg__Encoder__get_type_description_sources>:
 8014ee8:	4b09      	ldr	r3, [pc, #36]	; (8014f10 <racs_services__msg__Encoder__get_type_description_sources+0x28>)
 8014eea:	781a      	ldrb	r2, [r3, #0]
 8014eec:	b96a      	cbnz	r2, 8014f0a <racs_services__msg__Encoder__get_type_description_sources+0x22>
 8014eee:	2201      	movs	r2, #1
 8014ef0:	b430      	push	{r4, r5}
 8014ef2:	4d08      	ldr	r5, [pc, #32]	; (8014f14 <racs_services__msg__Encoder__get_type_description_sources+0x2c>)
 8014ef4:	4c08      	ldr	r4, [pc, #32]	; (8014f18 <racs_services__msg__Encoder__get_type_description_sources+0x30>)
 8014ef6:	701a      	strb	r2, [r3, #0]
 8014ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f00:	682b      	ldr	r3, [r5, #0]
 8014f02:	4806      	ldr	r0, [pc, #24]	; (8014f1c <racs_services__msg__Encoder__get_type_description_sources+0x34>)
 8014f04:	6023      	str	r3, [r4, #0]
 8014f06:	bc30      	pop	{r4, r5}
 8014f08:	4770      	bx	lr
 8014f0a:	4804      	ldr	r0, [pc, #16]	; (8014f1c <racs_services__msg__Encoder__get_type_description_sources+0x34>)
 8014f0c:	4770      	bx	lr
 8014f0e:	bf00      	nop
 8014f10:	20010898 	.word	0x20010898
 8014f14:	0801fbcc 	.word	0x0801fbcc
 8014f18:	2001089c 	.word	0x2001089c
 8014f1c:	0801fbf0 	.word	0x0801fbf0

08014f20 <racs_services__msg__Encoder__init>:
 8014f20:	3800      	subs	r0, #0
 8014f22:	bf18      	it	ne
 8014f24:	2001      	movne	r0, #1
 8014f26:	4770      	bx	lr

08014f28 <racs_services__msg__Encoder__fini>:
 8014f28:	4770      	bx	lr
 8014f2a:	bf00      	nop

08014f2c <racs_services__msg__Feedback__get_type_hash>:
 8014f2c:	4800      	ldr	r0, [pc, #0]	; (8014f30 <racs_services__msg__Feedback__get_type_hash+0x4>)
 8014f2e:	4770      	bx	lr
 8014f30:	2000159c 	.word	0x2000159c

08014f34 <racs_services__msg__Feedback__get_type_description>:
 8014f34:	4b03      	ldr	r3, [pc, #12]	; (8014f44 <racs_services__msg__Feedback__get_type_description+0x10>)
 8014f36:	781a      	ldrb	r2, [r3, #0]
 8014f38:	b90a      	cbnz	r2, 8014f3e <racs_services__msg__Feedback__get_type_description+0xa>
 8014f3a:	2201      	movs	r2, #1
 8014f3c:	701a      	strb	r2, [r3, #0]
 8014f3e:	4802      	ldr	r0, [pc, #8]	; (8014f48 <racs_services__msg__Feedback__get_type_description+0x14>)
 8014f40:	4770      	bx	lr
 8014f42:	bf00      	nop
 8014f44:	200108c1 	.word	0x200108c1
 8014f48:	0801fbfc 	.word	0x0801fbfc

08014f4c <racs_services__msg__Feedback__get_type_description_sources>:
 8014f4c:	4b09      	ldr	r3, [pc, #36]	; (8014f74 <racs_services__msg__Feedback__get_type_description_sources+0x28>)
 8014f4e:	781a      	ldrb	r2, [r3, #0]
 8014f50:	b96a      	cbnz	r2, 8014f6e <racs_services__msg__Feedback__get_type_description_sources+0x22>
 8014f52:	2201      	movs	r2, #1
 8014f54:	b430      	push	{r4, r5}
 8014f56:	4d08      	ldr	r5, [pc, #32]	; (8014f78 <racs_services__msg__Feedback__get_type_description_sources+0x2c>)
 8014f58:	4c08      	ldr	r4, [pc, #32]	; (8014f7c <racs_services__msg__Feedback__get_type_description_sources+0x30>)
 8014f5a:	701a      	strb	r2, [r3, #0]
 8014f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f64:	682b      	ldr	r3, [r5, #0]
 8014f66:	4806      	ldr	r0, [pc, #24]	; (8014f80 <racs_services__msg__Feedback__get_type_description_sources+0x34>)
 8014f68:	6023      	str	r3, [r4, #0]
 8014f6a:	bc30      	pop	{r4, r5}
 8014f6c:	4770      	bx	lr
 8014f6e:	4804      	ldr	r0, [pc, #16]	; (8014f80 <racs_services__msg__Feedback__get_type_description_sources+0x34>)
 8014f70:	4770      	bx	lr
 8014f72:	bf00      	nop
 8014f74:	200108c0 	.word	0x200108c0
 8014f78:	0801fc20 	.word	0x0801fc20
 8014f7c:	200108c4 	.word	0x200108c4
 8014f80:	0801fc44 	.word	0x0801fc44

08014f84 <racs_services__msg__Feedback__init>:
 8014f84:	3800      	subs	r0, #0
 8014f86:	bf18      	it	ne
 8014f88:	2001      	movne	r0, #1
 8014f8a:	4770      	bx	lr

08014f8c <racs_services__msg__Feedback__fini>:
 8014f8c:	4770      	bx	lr
 8014f8e:	bf00      	nop

08014f90 <racs_services__srv__Setup_Event__get_type_description.part.0>:
 8014f90:	b510      	push	{r4, lr}
 8014f92:	2000      	movs	r0, #0
 8014f94:	4c13      	ldr	r4, [pc, #76]	; (8014fe4 <racs_services__srv__Setup_Event__get_type_description.part.0+0x54>)
 8014f96:	f005 fd73 	bl	801aa80 <builtin_interfaces__msg__Time__get_type_description>
 8014f9a:	300c      	adds	r0, #12
 8014f9c:	4b12      	ldr	r3, [pc, #72]	; (8014fe8 <racs_services__srv__Setup_Event__get_type_description.part.0+0x58>)
 8014f9e:	c807      	ldmia	r0, {r0, r1, r2}
 8014fa0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014fa4:	7823      	ldrb	r3, [r4, #0]
 8014fa6:	b90b      	cbnz	r3, 8014fac <racs_services__srv__Setup_Event__get_type_description.part.0+0x1c>
 8014fa8:	2301      	movs	r3, #1
 8014faa:	7023      	strb	r3, [r4, #0]
 8014fac:	4a0f      	ldr	r2, [pc, #60]	; (8014fec <racs_services__srv__Setup_Event__get_type_description.part.0+0x5c>)
 8014fae:	4b10      	ldr	r3, [pc, #64]	; (8014ff0 <racs_services__srv__Setup_Event__get_type_description.part.0+0x60>)
 8014fb0:	4c10      	ldr	r4, [pc, #64]	; (8014ff4 <racs_services__srv__Setup_Event__get_type_description.part.0+0x64>)
 8014fb2:	ca07      	ldmia	r2, {r0, r1, r2}
 8014fb4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014fb8:	7823      	ldrb	r3, [r4, #0]
 8014fba:	b90b      	cbnz	r3, 8014fc0 <racs_services__srv__Setup_Event__get_type_description.part.0+0x30>
 8014fbc:	2301      	movs	r3, #1
 8014fbe:	7023      	strb	r3, [r4, #0]
 8014fc0:	4b0d      	ldr	r3, [pc, #52]	; (8014ff8 <racs_services__srv__Setup_Event__get_type_description.part.0+0x68>)
 8014fc2:	4c0e      	ldr	r4, [pc, #56]	; (8014ffc <racs_services__srv__Setup_Event__get_type_description.part.0+0x6c>)
 8014fc4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014fc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014fcc:	2000      	movs	r0, #0
 8014fce:	3418      	adds	r4, #24
 8014fd0:	f005 fcf6 	bl	801a9c0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8014fd4:	300c      	adds	r0, #12
 8014fd6:	4b0a      	ldr	r3, [pc, #40]	; (8015000 <racs_services__srv__Setup_Event__get_type_description.part.0+0x70>)
 8014fd8:	c807      	ldmia	r0, {r0, r1, r2}
 8014fda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014fde:	2201      	movs	r2, #1
 8014fe0:	701a      	strb	r2, [r3, #0]
 8014fe2:	bd10      	pop	{r4, pc}
 8014fe4:	200108ec 	.word	0x200108ec
 8014fe8:	20001868 	.word	0x20001868
 8014fec:	0801fca4 	.word	0x0801fca4
 8014ff0:	20001880 	.word	0x20001880
 8014ff4:	200108ea 	.word	0x200108ea
 8014ff8:	0801fc80 	.word	0x0801fc80
 8014ffc:	20001898 	.word	0x20001898
 8015000:	200108e9 	.word	0x200108e9

08015004 <racs_services__srv__Setup__get_type_hash>:
 8015004:	4800      	ldr	r0, [pc, #0]	; (8015008 <racs_services__srv__Setup__get_type_hash+0x4>)
 8015006:	4770      	bx	lr
 8015008:	20001738 	.word	0x20001738

0801500c <racs_services__srv__Setup_Request__get_type_hash>:
 801500c:	4800      	ldr	r0, [pc, #0]	; (8015010 <racs_services__srv__Setup_Request__get_type_hash+0x4>)
 801500e:	4770      	bx	lr
 8015010:	20001714 	.word	0x20001714

08015014 <racs_services__srv__Setup_Response__get_type_hash>:
 8015014:	4800      	ldr	r0, [pc, #0]	; (8015018 <racs_services__srv__Setup_Response__get_type_hash+0x4>)
 8015016:	4770      	bx	lr
 8015018:	200016f0 	.word	0x200016f0

0801501c <racs_services__srv__Setup_Event__get_type_hash>:
 801501c:	4800      	ldr	r0, [pc, #0]	; (8015020 <racs_services__srv__Setup_Event__get_type_hash+0x4>)
 801501e:	4770      	bx	lr
 8015020:	200016cc 	.word	0x200016cc

08015024 <racs_services__srv__Setup__get_type_description>:
 8015024:	b538      	push	{r3, r4, r5, lr}
 8015026:	4d1c      	ldr	r5, [pc, #112]	; (8015098 <racs_services__srv__Setup__get_type_description+0x74>)
 8015028:	7828      	ldrb	r0, [r5, #0]
 801502a:	b108      	cbz	r0, 8015030 <racs_services__srv__Setup__get_type_description+0xc>
 801502c:	481b      	ldr	r0, [pc, #108]	; (801509c <racs_services__srv__Setup__get_type_description+0x78>)
 801502e:	bd38      	pop	{r3, r4, r5, pc}
 8015030:	f005 fd26 	bl	801aa80 <builtin_interfaces__msg__Time__get_type_description>
 8015034:	300c      	adds	r0, #12
 8015036:	4b1a      	ldr	r3, [pc, #104]	; (80150a0 <racs_services__srv__Setup__get_type_description+0x7c>)
 8015038:	c807      	ldmia	r0, {r0, r1, r2}
 801503a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801503e:	4b19      	ldr	r3, [pc, #100]	; (80150a4 <racs_services__srv__Setup__get_type_description+0x80>)
 8015040:	781b      	ldrb	r3, [r3, #0]
 8015042:	b32b      	cbz	r3, 8015090 <racs_services__srv__Setup__get_type_description+0x6c>
 8015044:	4a18      	ldr	r2, [pc, #96]	; (80150a8 <racs_services__srv__Setup__get_type_description+0x84>)
 8015046:	4b19      	ldr	r3, [pc, #100]	; (80150ac <racs_services__srv__Setup__get_type_description+0x88>)
 8015048:	4c19      	ldr	r4, [pc, #100]	; (80150b0 <racs_services__srv__Setup__get_type_description+0x8c>)
 801504a:	ca07      	ldmia	r2, {r0, r1, r2}
 801504c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015050:	7823      	ldrb	r3, [r4, #0]
 8015052:	b90b      	cbnz	r3, 8015058 <racs_services__srv__Setup__get_type_description+0x34>
 8015054:	2301      	movs	r3, #1
 8015056:	7023      	strb	r3, [r4, #0]
 8015058:	4a16      	ldr	r2, [pc, #88]	; (80150b4 <racs_services__srv__Setup__get_type_description+0x90>)
 801505a:	4b17      	ldr	r3, [pc, #92]	; (80150b8 <racs_services__srv__Setup__get_type_description+0x94>)
 801505c:	4c17      	ldr	r4, [pc, #92]	; (80150bc <racs_services__srv__Setup__get_type_description+0x98>)
 801505e:	ca07      	ldmia	r2, {r0, r1, r2}
 8015060:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015064:	7823      	ldrb	r3, [r4, #0]
 8015066:	b90b      	cbnz	r3, 801506c <racs_services__srv__Setup__get_type_description+0x48>
 8015068:	2301      	movs	r3, #1
 801506a:	7023      	strb	r3, [r4, #0]
 801506c:	4b14      	ldr	r3, [pc, #80]	; (80150c0 <racs_services__srv__Setup__get_type_description+0x9c>)
 801506e:	4c15      	ldr	r4, [pc, #84]	; (80150c4 <racs_services__srv__Setup__get_type_description+0xa0>)
 8015070:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015074:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015078:	2000      	movs	r0, #0
 801507a:	3418      	adds	r4, #24
 801507c:	f005 fca0 	bl	801a9c0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8015080:	300c      	adds	r0, #12
 8015082:	2301      	movs	r3, #1
 8015084:	c807      	ldmia	r0, {r0, r1, r2}
 8015086:	702b      	strb	r3, [r5, #0]
 8015088:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801508c:	4803      	ldr	r0, [pc, #12]	; (801509c <racs_services__srv__Setup__get_type_description+0x78>)
 801508e:	bd38      	pop	{r3, r4, r5, pc}
 8015090:	f7ff ff7e 	bl	8014f90 <racs_services__srv__Setup_Event__get_type_description.part.0>
 8015094:	e7d6      	b.n	8015044 <racs_services__srv__Setup__get_type_description+0x20>
 8015096:	bf00      	nop
 8015098:	200108ed 	.word	0x200108ed
 801509c:	0801fcbc 	.word	0x0801fcbc
 80150a0:	20001cb0 	.word	0x20001cb0
 80150a4:	200108e9 	.word	0x200108e9
 80150a8:	0801fc5c 	.word	0x0801fc5c
 80150ac:	20001cc8 	.word	0x20001cc8
 80150b0:	200108ec 	.word	0x200108ec
 80150b4:	0801fca4 	.word	0x0801fca4
 80150b8:	20001ce0 	.word	0x20001ce0
 80150bc:	200108ea 	.word	0x200108ea
 80150c0:	0801fc80 	.word	0x0801fc80
 80150c4:	20001cf8 	.word	0x20001cf8

080150c8 <racs_services__srv__Setup_Request__get_type_description>:
 80150c8:	4b03      	ldr	r3, [pc, #12]	; (80150d8 <racs_services__srv__Setup_Request__get_type_description+0x10>)
 80150ca:	781a      	ldrb	r2, [r3, #0]
 80150cc:	b90a      	cbnz	r2, 80150d2 <racs_services__srv__Setup_Request__get_type_description+0xa>
 80150ce:	2201      	movs	r2, #1
 80150d0:	701a      	strb	r2, [r3, #0]
 80150d2:	4802      	ldr	r0, [pc, #8]	; (80150dc <racs_services__srv__Setup_Request__get_type_description+0x14>)
 80150d4:	4770      	bx	lr
 80150d6:	bf00      	nop
 80150d8:	200108ec 	.word	0x200108ec
 80150dc:	0801fc98 	.word	0x0801fc98

080150e0 <racs_services__srv__Setup_Response__get_type_description>:
 80150e0:	4b03      	ldr	r3, [pc, #12]	; (80150f0 <racs_services__srv__Setup_Response__get_type_description+0x10>)
 80150e2:	781a      	ldrb	r2, [r3, #0]
 80150e4:	b90a      	cbnz	r2, 80150ea <racs_services__srv__Setup_Response__get_type_description+0xa>
 80150e6:	2201      	movs	r2, #1
 80150e8:	701a      	strb	r2, [r3, #0]
 80150ea:	4802      	ldr	r0, [pc, #8]	; (80150f4 <racs_services__srv__Setup_Response__get_type_description+0x14>)
 80150ec:	4770      	bx	lr
 80150ee:	bf00      	nop
 80150f0:	200108ea 	.word	0x200108ea
 80150f4:	0801fc74 	.word	0x0801fc74

080150f8 <racs_services__srv__Setup_Event__get_type_description>:
 80150f8:	b508      	push	{r3, lr}
 80150fa:	4b04      	ldr	r3, [pc, #16]	; (801510c <racs_services__srv__Setup_Event__get_type_description+0x14>)
 80150fc:	781b      	ldrb	r3, [r3, #0]
 80150fe:	b10b      	cbz	r3, 8015104 <racs_services__srv__Setup_Event__get_type_description+0xc>
 8015100:	4803      	ldr	r0, [pc, #12]	; (8015110 <racs_services__srv__Setup_Event__get_type_description+0x18>)
 8015102:	bd08      	pop	{r3, pc}
 8015104:	f7ff ff44 	bl	8014f90 <racs_services__srv__Setup_Event__get_type_description.part.0>
 8015108:	4801      	ldr	r0, [pc, #4]	; (8015110 <racs_services__srv__Setup_Event__get_type_description+0x18>)
 801510a:	bd08      	pop	{r3, pc}
 801510c:	200108e9 	.word	0x200108e9
 8015110:	0801fc50 	.word	0x0801fc50

08015114 <racs_services__srv__Setup__get_type_description_sources>:
 8015114:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015118:	4b2c      	ldr	r3, [pc, #176]	; (80151cc <racs_services__srv__Setup__get_type_description_sources+0xb8>)
 801511a:	f893 9000 	ldrb.w	r9, [r3]
 801511e:	f1b9 0f00 	cmp.w	r9, #0
 8015122:	d002      	beq.n	801512a <racs_services__srv__Setup__get_type_description_sources+0x16>
 8015124:	482a      	ldr	r0, [pc, #168]	; (80151d0 <racs_services__srv__Setup__get_type_description_sources+0xbc>)
 8015126:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801512a:	4d2a      	ldr	r5, [pc, #168]	; (80151d4 <racs_services__srv__Setup__get_type_description_sources+0xc0>)
 801512c:	4c2a      	ldr	r4, [pc, #168]	; (80151d8 <racs_services__srv__Setup__get_type_description_sources+0xc4>)
 801512e:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 80151e0 <racs_services__srv__Setup__get_type_description_sources+0xcc>
 8015132:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80151e4 <racs_services__srv__Setup__get_type_description_sources+0xd0>
 8015136:	4e29      	ldr	r6, [pc, #164]	; (80151dc <racs_services__srv__Setup__get_type_description_sources+0xc8>)
 8015138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801513a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801513c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801513e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015140:	682b      	ldr	r3, [r5, #0]
 8015142:	4625      	mov	r5, r4
 8015144:	4648      	mov	r0, r9
 8015146:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 801514a:	f845 3b04 	str.w	r3, [r5], #4
 801514e:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 8015152:	f005 fca1 	bl	801aa98 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8015156:	4684      	mov	ip, r0
 8015158:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 801515c:	3494      	adds	r4, #148	; 0x94
 801515e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015164:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801516a:	f8dc 3000 	ldr.w	r3, [ip]
 801516e:	602b      	str	r3, [r5, #0]
 8015170:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8015174:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8015178:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 801517c:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8015180:	f8db 3000 	ldr.w	r3, [fp]
 8015184:	f8ca 3000 	str.w	r3, [sl]
 8015188:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 801518c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801518e:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8015192:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015194:	f8d8 3000 	ldr.w	r3, [r8]
 8015198:	603b      	str	r3, [r7, #0]
 801519a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801519c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80151a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80151a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80151a6:	6833      	ldr	r3, [r6, #0]
 80151a8:	4648      	mov	r0, r9
 80151aa:	f8ce 3000 	str.w	r3, [lr]
 80151ae:	f005 fc1f 	bl	801a9f0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 80151b2:	2301      	movs	r3, #1
 80151b4:	4a05      	ldr	r2, [pc, #20]	; (80151cc <racs_services__srv__Setup__get_type_description_sources+0xb8>)
 80151b6:	4605      	mov	r5, r0
 80151b8:	7013      	strb	r3, [r2, #0]
 80151ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80151bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80151be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80151c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80151c2:	682b      	ldr	r3, [r5, #0]
 80151c4:	4802      	ldr	r0, [pc, #8]	; (80151d0 <racs_services__srv__Setup__get_type_description_sources+0xbc>)
 80151c6:	6023      	str	r3, [r4, #0]
 80151c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151cc:	200108e8 	.word	0x200108e8
 80151d0:	0801fd94 	.word	0x0801fd94
 80151d4:	0801fd4c 	.word	0x0801fd4c
 80151d8:	200109a4 	.word	0x200109a4
 80151dc:	0801fd04 	.word	0x0801fd04
 80151e0:	0801fce0 	.word	0x0801fce0
 80151e4:	0801fd28 	.word	0x0801fd28

080151e8 <racs_services__srv__Setup_Request__get_type_description_sources>:
 80151e8:	4b09      	ldr	r3, [pc, #36]	; (8015210 <racs_services__srv__Setup_Request__get_type_description_sources+0x28>)
 80151ea:	781a      	ldrb	r2, [r3, #0]
 80151ec:	b96a      	cbnz	r2, 801520a <racs_services__srv__Setup_Request__get_type_description_sources+0x22>
 80151ee:	2201      	movs	r2, #1
 80151f0:	b430      	push	{r4, r5}
 80151f2:	4d08      	ldr	r5, [pc, #32]	; (8015214 <racs_services__srv__Setup_Request__get_type_description_sources+0x2c>)
 80151f4:	4c08      	ldr	r4, [pc, #32]	; (8015218 <racs_services__srv__Setup_Request__get_type_description_sources+0x30>)
 80151f6:	701a      	strb	r2, [r3, #0]
 80151f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80151fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80151fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80151fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015200:	682b      	ldr	r3, [r5, #0]
 8015202:	4806      	ldr	r0, [pc, #24]	; (801521c <racs_services__srv__Setup_Request__get_type_description_sources+0x34>)
 8015204:	6023      	str	r3, [r4, #0]
 8015206:	bc30      	pop	{r4, r5}
 8015208:	4770      	bx	lr
 801520a:	4804      	ldr	r0, [pc, #16]	; (801521c <racs_services__srv__Setup_Request__get_type_description_sources+0x34>)
 801520c:	4770      	bx	lr
 801520e:	bf00      	nop
 8015210:	200108ef 	.word	0x200108ef
 8015214:	0801fd28 	.word	0x0801fd28
 8015218:	20010aa0 	.word	0x20010aa0
 801521c:	0801fd88 	.word	0x0801fd88

08015220 <racs_services__srv__Setup_Response__get_type_description_sources>:
 8015220:	4b09      	ldr	r3, [pc, #36]	; (8015248 <racs_services__srv__Setup_Response__get_type_description_sources+0x28>)
 8015222:	781a      	ldrb	r2, [r3, #0]
 8015224:	b96a      	cbnz	r2, 8015242 <racs_services__srv__Setup_Response__get_type_description_sources+0x22>
 8015226:	2201      	movs	r2, #1
 8015228:	b430      	push	{r4, r5}
 801522a:	4d08      	ldr	r5, [pc, #32]	; (801524c <racs_services__srv__Setup_Response__get_type_description_sources+0x2c>)
 801522c:	4c08      	ldr	r4, [pc, #32]	; (8015250 <racs_services__srv__Setup_Response__get_type_description_sources+0x30>)
 801522e:	701a      	strb	r2, [r3, #0]
 8015230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015238:	682b      	ldr	r3, [r5, #0]
 801523a:	4806      	ldr	r0, [pc, #24]	; (8015254 <racs_services__srv__Setup_Response__get_type_description_sources+0x34>)
 801523c:	6023      	str	r3, [r4, #0]
 801523e:	bc30      	pop	{r4, r5}
 8015240:	4770      	bx	lr
 8015242:	4804      	ldr	r0, [pc, #16]	; (8015254 <racs_services__srv__Setup_Response__get_type_description_sources+0x34>)
 8015244:	4770      	bx	lr
 8015246:	bf00      	nop
 8015248:	200108ee 	.word	0x200108ee
 801524c:	0801fd04 	.word	0x0801fd04
 8015250:	20010a7c 	.word	0x20010a7c
 8015254:	0801fd7c 	.word	0x0801fd7c

08015258 <racs_services__srv__Setup_Event__get_type_description_sources>:
 8015258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801525c:	4e27      	ldr	r6, [pc, #156]	; (80152fc <racs_services__srv__Setup_Event__get_type_description_sources+0xa4>)
 801525e:	f896 8000 	ldrb.w	r8, [r6]
 8015262:	f1b8 0f00 	cmp.w	r8, #0
 8015266:	d002      	beq.n	801526e <racs_services__srv__Setup_Event__get_type_description_sources+0x16>
 8015268:	4825      	ldr	r0, [pc, #148]	; (8015300 <racs_services__srv__Setup_Event__get_type_description_sources+0xa8>)
 801526a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801526e:	4d25      	ldr	r5, [pc, #148]	; (8015304 <racs_services__srv__Setup_Event__get_type_description_sources+0xac>)
 8015270:	4c25      	ldr	r4, [pc, #148]	; (8015308 <racs_services__srv__Setup_Event__get_type_description_sources+0xb0>)
 8015272:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8015310 <racs_services__srv__Setup_Event__get_type_description_sources+0xb8>
 8015276:	4f25      	ldr	r7, [pc, #148]	; (801530c <racs_services__srv__Setup_Event__get_type_description_sources+0xb4>)
 8015278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801527a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801527c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801527e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015280:	682b      	ldr	r3, [r5, #0]
 8015282:	4625      	mov	r5, r4
 8015284:	4640      	mov	r0, r8
 8015286:	f104 0928 	add.w	r9, r4, #40	; 0x28
 801528a:	f845 3b04 	str.w	r3, [r5], #4
 801528e:	f005 fc03 	bl	801aa98 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8015292:	4684      	mov	ip, r0
 8015294:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 8015298:	3470      	adds	r4, #112	; 0x70
 801529a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801529e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80152a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80152a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80152a6:	f8dc 3000 	ldr.w	r3, [ip]
 80152aa:	602b      	str	r3, [r5, #0]
 80152ac:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 80152b0:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 80152b4:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 80152b8:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 80152bc:	f8da 3000 	ldr.w	r3, [sl]
 80152c0:	f8c9 3000 	str.w	r3, [r9]
 80152c4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80152c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80152ca:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80152cc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80152d0:	683b      	ldr	r3, [r7, #0]
 80152d2:	4640      	mov	r0, r8
 80152d4:	f8ce 3000 	str.w	r3, [lr]
 80152d8:	f005 fb8a 	bl	801a9f0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 80152dc:	2301      	movs	r3, #1
 80152de:	4684      	mov	ip, r0
 80152e0:	7033      	strb	r3, [r6, #0]
 80152e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80152e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80152e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80152ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80152ee:	f8dc 3000 	ldr.w	r3, [ip]
 80152f2:	4803      	ldr	r0, [pc, #12]	; (8015300 <racs_services__srv__Setup_Event__get_type_description_sources+0xa8>)
 80152f4:	6023      	str	r3, [r4, #0]
 80152f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152fa:	bf00      	nop
 80152fc:	200108eb 	.word	0x200108eb
 8015300:	0801fd70 	.word	0x0801fd70
 8015304:	0801fce0 	.word	0x0801fce0
 8015308:	200108f0 	.word	0x200108f0
 801530c:	0801fd04 	.word	0x0801fd04
 8015310:	0801fd28 	.word	0x0801fd28

08015314 <racs_services__srv__Setup_Event__fini.part.0>:
 8015314:	b510      	push	{r4, lr}
 8015316:	b086      	sub	sp, #24
 8015318:	4604      	mov	r4, r0
 801531a:	f005 fba7 	bl	801aa6c <service_msgs__msg__ServiceEventInfo__fini>
 801531e:	a801      	add	r0, sp, #4
 8015320:	f7f9 fb58 	bl	800e9d4 <rcutils_get_default_allocator>
 8015324:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015326:	b130      	cbz	r0, 8015336 <racs_services__srv__Setup_Event__fini.part.0+0x22>
 8015328:	9b02      	ldr	r3, [sp, #8]
 801532a:	9905      	ldr	r1, [sp, #20]
 801532c:	4798      	blx	r3
 801532e:	2300      	movs	r3, #0
 8015330:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8015334:	6323      	str	r3, [r4, #48]	; 0x30
 8015336:	a801      	add	r0, sp, #4
 8015338:	f7f9 fb4c 	bl	800e9d4 <rcutils_get_default_allocator>
 801533c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801533e:	b130      	cbz	r0, 801534e <racs_services__srv__Setup_Event__fini.part.0+0x3a>
 8015340:	9b02      	ldr	r3, [sp, #8]
 8015342:	9905      	ldr	r1, [sp, #20]
 8015344:	4798      	blx	r3
 8015346:	2300      	movs	r3, #0
 8015348:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 801534c:	63e3      	str	r3, [r4, #60]	; 0x3c
 801534e:	b006      	add	sp, #24
 8015350:	bd10      	pop	{r4, pc}
 8015352:	bf00      	nop

08015354 <racs_services__srv__Setup_Request__init>:
 8015354:	3800      	subs	r0, #0
 8015356:	bf18      	it	ne
 8015358:	2001      	movne	r0, #1
 801535a:	4770      	bx	lr

0801535c <racs_services__srv__Setup_Request__fini>:
 801535c:	4770      	bx	lr
 801535e:	bf00      	nop

08015360 <racs_services__srv__Setup_Request__copy>:
 8015360:	4603      	mov	r3, r0
 8015362:	b1a0      	cbz	r0, 801538e <racs_services__srv__Setup_Request__copy+0x2e>
 8015364:	b199      	cbz	r1, 801538e <racs_services__srv__Setup_Request__copy+0x2e>
 8015366:	7802      	ldrb	r2, [r0, #0]
 8015368:	2001      	movs	r0, #1
 801536a:	700a      	strb	r2, [r1, #0]
 801536c:	689a      	ldr	r2, [r3, #8]
 801536e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8015372:	608a      	str	r2, [r1, #8]
 8015374:	691a      	ldr	r2, [r3, #16]
 8015376:	f8c1 c004 	str.w	ip, [r1, #4]
 801537a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801537e:	610a      	str	r2, [r1, #16]
 8015380:	695a      	ldr	r2, [r3, #20]
 8015382:	699b      	ldr	r3, [r3, #24]
 8015384:	f8c1 c00c 	str.w	ip, [r1, #12]
 8015388:	614a      	str	r2, [r1, #20]
 801538a:	618b      	str	r3, [r1, #24]
 801538c:	4770      	bx	lr
 801538e:	2000      	movs	r0, #0
 8015390:	4770      	bx	lr
 8015392:	bf00      	nop

08015394 <racs_services__srv__Setup_Request__Sequence__init>:
 8015394:	b530      	push	{r4, r5, lr}
 8015396:	4604      	mov	r4, r0
 8015398:	b087      	sub	sp, #28
 801539a:	b148      	cbz	r0, 80153b0 <racs_services__srv__Setup_Request__Sequence__init+0x1c>
 801539c:	460d      	mov	r5, r1
 801539e:	a801      	add	r0, sp, #4
 80153a0:	f7f9 fb18 	bl	800e9d4 <rcutils_get_default_allocator>
 80153a4:	b935      	cbnz	r5, 80153b4 <racs_services__srv__Setup_Request__Sequence__init+0x20>
 80153a6:	462b      	mov	r3, r5
 80153a8:	2001      	movs	r0, #1
 80153aa:	60a5      	str	r5, [r4, #8]
 80153ac:	e9c4 3500 	strd	r3, r5, [r4]
 80153b0:	b007      	add	sp, #28
 80153b2:	bd30      	pop	{r4, r5, pc}
 80153b4:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80153b8:	211c      	movs	r1, #28
 80153ba:	4628      	mov	r0, r5
 80153bc:	4798      	blx	r3
 80153be:	4603      	mov	r3, r0
 80153c0:	2800      	cmp	r0, #0
 80153c2:	d1f1      	bne.n	80153a8 <racs_services__srv__Setup_Request__Sequence__init+0x14>
 80153c4:	e7f4      	b.n	80153b0 <racs_services__srv__Setup_Request__Sequence__init+0x1c>
 80153c6:	bf00      	nop

080153c8 <racs_services__srv__Setup_Request__Sequence__fini>:
 80153c8:	b180      	cbz	r0, 80153ec <racs_services__srv__Setup_Request__Sequence__fini+0x24>
 80153ca:	b510      	push	{r4, lr}
 80153cc:	b086      	sub	sp, #24
 80153ce:	4604      	mov	r4, r0
 80153d0:	a801      	add	r0, sp, #4
 80153d2:	f7f9 faff 	bl	800e9d4 <rcutils_get_default_allocator>
 80153d6:	6820      	ldr	r0, [r4, #0]
 80153d8:	b130      	cbz	r0, 80153e8 <racs_services__srv__Setup_Request__Sequence__fini+0x20>
 80153da:	9b02      	ldr	r3, [sp, #8]
 80153dc:	9905      	ldr	r1, [sp, #20]
 80153de:	4798      	blx	r3
 80153e0:	2300      	movs	r3, #0
 80153e2:	e9c4 3300 	strd	r3, r3, [r4]
 80153e6:	60a3      	str	r3, [r4, #8]
 80153e8:	b006      	add	sp, #24
 80153ea:	bd10      	pop	{r4, pc}
 80153ec:	4770      	bx	lr
 80153ee:	bf00      	nop

080153f0 <racs_services__srv__Setup_Response__init>:
 80153f0:	3800      	subs	r0, #0
 80153f2:	bf18      	it	ne
 80153f4:	2001      	movne	r0, #1
 80153f6:	4770      	bx	lr

080153f8 <racs_services__srv__Setup_Response__fini>:
 80153f8:	4770      	bx	lr
 80153fa:	bf00      	nop

080153fc <racs_services__srv__Setup_Response__copy>:
 80153fc:	b120      	cbz	r0, 8015408 <racs_services__srv__Setup_Response__copy+0xc>
 80153fe:	b119      	cbz	r1, 8015408 <racs_services__srv__Setup_Response__copy+0xc>
 8015400:	7803      	ldrb	r3, [r0, #0]
 8015402:	2001      	movs	r0, #1
 8015404:	700b      	strb	r3, [r1, #0]
 8015406:	4770      	bx	lr
 8015408:	2000      	movs	r0, #0
 801540a:	4770      	bx	lr

0801540c <racs_services__srv__Setup_Response__Sequence__init>:
 801540c:	b530      	push	{r4, r5, lr}
 801540e:	4604      	mov	r4, r0
 8015410:	b087      	sub	sp, #28
 8015412:	b148      	cbz	r0, 8015428 <racs_services__srv__Setup_Response__Sequence__init+0x1c>
 8015414:	460d      	mov	r5, r1
 8015416:	a801      	add	r0, sp, #4
 8015418:	f7f9 fadc 	bl	800e9d4 <rcutils_get_default_allocator>
 801541c:	b935      	cbnz	r5, 801542c <racs_services__srv__Setup_Response__Sequence__init+0x20>
 801541e:	462b      	mov	r3, r5
 8015420:	2001      	movs	r0, #1
 8015422:	60a5      	str	r5, [r4, #8]
 8015424:	e9c4 3500 	strd	r3, r5, [r4]
 8015428:	b007      	add	sp, #28
 801542a:	bd30      	pop	{r4, r5, pc}
 801542c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8015430:	2101      	movs	r1, #1
 8015432:	4628      	mov	r0, r5
 8015434:	4798      	blx	r3
 8015436:	4603      	mov	r3, r0
 8015438:	2800      	cmp	r0, #0
 801543a:	d1f1      	bne.n	8015420 <racs_services__srv__Setup_Response__Sequence__init+0x14>
 801543c:	e7f4      	b.n	8015428 <racs_services__srv__Setup_Response__Sequence__init+0x1c>
 801543e:	bf00      	nop

08015440 <racs_services__srv__Setup_Response__Sequence__fini>:
 8015440:	b180      	cbz	r0, 8015464 <racs_services__srv__Setup_Response__Sequence__fini+0x24>
 8015442:	b510      	push	{r4, lr}
 8015444:	b086      	sub	sp, #24
 8015446:	4604      	mov	r4, r0
 8015448:	a801      	add	r0, sp, #4
 801544a:	f7f9 fac3 	bl	800e9d4 <rcutils_get_default_allocator>
 801544e:	6820      	ldr	r0, [r4, #0]
 8015450:	b130      	cbz	r0, 8015460 <racs_services__srv__Setup_Response__Sequence__fini+0x20>
 8015452:	9b02      	ldr	r3, [sp, #8]
 8015454:	9905      	ldr	r1, [sp, #20]
 8015456:	4798      	blx	r3
 8015458:	2300      	movs	r3, #0
 801545a:	e9c4 3300 	strd	r3, r3, [r4]
 801545e:	60a3      	str	r3, [r4, #8]
 8015460:	b006      	add	sp, #24
 8015462:	bd10      	pop	{r4, pc}
 8015464:	4770      	bx	lr
 8015466:	bf00      	nop

08015468 <racs_services__srv__Setup_Event__init>:
 8015468:	b570      	push	{r4, r5, r6, lr}
 801546a:	4604      	mov	r4, r0
 801546c:	b086      	sub	sp, #24
 801546e:	b1c8      	cbz	r0, 80154a4 <racs_services__srv__Setup_Event__init+0x3c>
 8015470:	f005 faea 	bl	801aa48 <service_msgs__msg__ServiceEventInfo__init>
 8015474:	4605      	mov	r5, r0
 8015476:	b178      	cbz	r0, 8015498 <racs_services__srv__Setup_Event__init+0x30>
 8015478:	2600      	movs	r6, #0
 801547a:	a801      	add	r0, sp, #4
 801547c:	f7f9 faaa 	bl	800e9d4 <rcutils_get_default_allocator>
 8015480:	a801      	add	r0, sp, #4
 8015482:	6326      	str	r6, [r4, #48]	; 0x30
 8015484:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
 8015488:	f7f9 faa4 	bl	800e9d4 <rcutils_get_default_allocator>
 801548c:	4628      	mov	r0, r5
 801548e:	63e6      	str	r6, [r4, #60]	; 0x3c
 8015490:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
 8015494:	b006      	add	sp, #24
 8015496:	bd70      	pop	{r4, r5, r6, pc}
 8015498:	4620      	mov	r0, r4
 801549a:	f7ff ff3b 	bl	8015314 <racs_services__srv__Setup_Event__fini.part.0>
 801549e:	4628      	mov	r0, r5
 80154a0:	b006      	add	sp, #24
 80154a2:	bd70      	pop	{r4, r5, r6, pc}
 80154a4:	4605      	mov	r5, r0
 80154a6:	4628      	mov	r0, r5
 80154a8:	b006      	add	sp, #24
 80154aa:	bd70      	pop	{r4, r5, r6, pc}

080154ac <racs_services__srv__Setup_Event__fini>:
 80154ac:	b1f0      	cbz	r0, 80154ec <racs_services__srv__Setup_Event__fini+0x40>
 80154ae:	b510      	push	{r4, lr}
 80154b0:	b086      	sub	sp, #24
 80154b2:	4604      	mov	r4, r0
 80154b4:	f005 fada 	bl	801aa6c <service_msgs__msg__ServiceEventInfo__fini>
 80154b8:	a801      	add	r0, sp, #4
 80154ba:	f7f9 fa8b 	bl	800e9d4 <rcutils_get_default_allocator>
 80154be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80154c0:	b130      	cbz	r0, 80154d0 <racs_services__srv__Setup_Event__fini+0x24>
 80154c2:	9b02      	ldr	r3, [sp, #8]
 80154c4:	9905      	ldr	r1, [sp, #20]
 80154c6:	4798      	blx	r3
 80154c8:	2300      	movs	r3, #0
 80154ca:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 80154ce:	6323      	str	r3, [r4, #48]	; 0x30
 80154d0:	a801      	add	r0, sp, #4
 80154d2:	f7f9 fa7f 	bl	800e9d4 <rcutils_get_default_allocator>
 80154d6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80154d8:	b130      	cbz	r0, 80154e8 <racs_services__srv__Setup_Event__fini+0x3c>
 80154da:	9b02      	ldr	r3, [sp, #8]
 80154dc:	9905      	ldr	r1, [sp, #20]
 80154de:	4798      	blx	r3
 80154e0:	2300      	movs	r3, #0
 80154e2:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80154e6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80154e8:	b006      	add	sp, #24
 80154ea:	bd10      	pop	{r4, pc}
 80154ec:	4770      	bx	lr
 80154ee:	bf00      	nop

080154f0 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup>:
 80154f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154f4:	2900      	cmp	r1, #0
 80154f6:	d04d      	beq.n	8015594 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0xa4>
 80154f8:	4605      	mov	r5, r0
 80154fa:	2800      	cmp	r0, #0
 80154fc:	d04a      	beq.n	8015594 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0xa4>
 80154fe:	460e      	mov	r6, r1
 8015500:	4698      	mov	r8, r3
 8015502:	2040      	movs	r0, #64	; 0x40
 8015504:	680b      	ldr	r3, [r1, #0]
 8015506:	6909      	ldr	r1, [r1, #16]
 8015508:	4617      	mov	r7, r2
 801550a:	4798      	blx	r3
 801550c:	4604      	mov	r4, r0
 801550e:	f7ff ffab 	bl	8015468 <racs_services__srv__Setup_Event__init>
 8015512:	4684      	mov	ip, r0
 8015514:	b370      	cbz	r0, 8015574 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x84>
 8015516:	782b      	ldrb	r3, [r5, #0]
 8015518:	7023      	strb	r3, [r4, #0]
 801551a:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 801551e:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8015522:	e9c4 2301 	strd	r2, r3, [r4, #4]
 8015526:	e9c4 0108 	strd	r0, r1, [r4, #32]
 801552a:	68e8      	ldr	r0, [r5, #12]
 801552c:	6929      	ldr	r1, [r5, #16]
 801552e:	696a      	ldr	r2, [r5, #20]
 8015530:	69ab      	ldr	r3, [r5, #24]
 8015532:	60e0      	str	r0, [r4, #12]
 8015534:	6121      	str	r1, [r4, #16]
 8015536:	6162      	str	r2, [r4, #20]
 8015538:	61a3      	str	r3, [r4, #24]
 801553a:	b157      	cbz	r7, 8015552 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x62>
 801553c:	2101      	movs	r1, #1
 801553e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015542:	f7ff ff27 	bl	8015394 <racs_services__srv__Setup_Request__Sequence__init>
 8015546:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8015548:	4638      	mov	r0, r7
 801554a:	f7ff ff09 	bl	8015360 <racs_services__srv__Setup_Request__copy>
 801554e:	4603      	mov	r3, r0
 8015550:	b1c0      	cbz	r0, 8015584 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x94>
 8015552:	f1b8 0f00 	cmp.w	r8, #0
 8015556:	d00a      	beq.n	801556e <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x7e>
 8015558:	2101      	movs	r1, #1
 801555a:	f104 0034 	add.w	r0, r4, #52	; 0x34
 801555e:	f7ff ff55 	bl	801540c <racs_services__srv__Setup_Response__Sequence__init>
 8015562:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015564:	4640      	mov	r0, r8
 8015566:	f7ff ff49 	bl	80153fc <racs_services__srv__Setup_Response__copy>
 801556a:	4603      	mov	r3, r0
 801556c:	b150      	cbz	r0, 8015584 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x94>
 801556e:	4620      	mov	r0, r4
 8015570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015574:	4620      	mov	r0, r4
 8015576:	4664      	mov	r4, ip
 8015578:	6873      	ldr	r3, [r6, #4]
 801557a:	6931      	ldr	r1, [r6, #16]
 801557c:	4798      	blx	r3
 801557e:	4620      	mov	r0, r4
 8015580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015584:	4620      	mov	r0, r4
 8015586:	461c      	mov	r4, r3
 8015588:	6872      	ldr	r2, [r6, #4]
 801558a:	6931      	ldr	r1, [r6, #16]
 801558c:	4790      	blx	r2
 801558e:	4620      	mov	r0, r4
 8015590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015594:	2400      	movs	r4, #0
 8015596:	4620      	mov	r0, r4
 8015598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801559c <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup>:
 801559c:	b1b9      	cbz	r1, 80155ce <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x32>
 801559e:	b538      	push	{r3, r4, r5, lr}
 80155a0:	4605      	mov	r5, r0
 80155a2:	b190      	cbz	r0, 80155ca <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x2e>
 80155a4:	460c      	mov	r4, r1
 80155a6:	f7ff ff81 	bl	80154ac <racs_services__srv__Setup_Event__fini>
 80155aa:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80155ac:	b110      	cbz	r0, 80155b4 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x18>
 80155ae:	6863      	ldr	r3, [r4, #4]
 80155b0:	6921      	ldr	r1, [r4, #16]
 80155b2:	4798      	blx	r3
 80155b4:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80155b6:	b110      	cbz	r0, 80155be <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x22>
 80155b8:	6863      	ldr	r3, [r4, #4]
 80155ba:	6921      	ldr	r1, [r4, #16]
 80155bc:	4798      	blx	r3
 80155be:	4628      	mov	r0, r5
 80155c0:	6863      	ldr	r3, [r4, #4]
 80155c2:	6921      	ldr	r1, [r4, #16]
 80155c4:	4798      	blx	r3
 80155c6:	2001      	movs	r0, #1
 80155c8:	bd38      	pop	{r3, r4, r5, pc}
 80155ca:	2000      	movs	r0, #0
 80155cc:	bd38      	pop	{r3, r4, r5, pc}
 80155ce:	2000      	movs	r0, #0
 80155d0:	4770      	bx	lr
 80155d2:	bf00      	nop

080155d4 <rcl_client_get_rmw_handle>:
 80155d4:	b118      	cbz	r0, 80155de <rcl_client_get_rmw_handle+0xa>
 80155d6:	6800      	ldr	r0, [r0, #0]
 80155d8:	b108      	cbz	r0, 80155de <rcl_client_get_rmw_handle+0xa>
 80155da:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 80155de:	4770      	bx	lr

080155e0 <rcl_send_request>:
 80155e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155e2:	b08b      	sub	sp, #44	; 0x2c
 80155e4:	b1e8      	cbz	r0, 8015622 <rcl_send_request+0x42>
 80155e6:	4604      	mov	r4, r0
 80155e8:	6800      	ldr	r0, [r0, #0]
 80155ea:	b1d0      	cbz	r0, 8015622 <rcl_send_request+0x42>
 80155ec:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80155f0:	b1bb      	cbz	r3, 8015622 <rcl_send_request+0x42>
 80155f2:	460f      	mov	r7, r1
 80155f4:	b1d1      	cbz	r1, 801562c <rcl_send_request+0x4c>
 80155f6:	4615      	mov	r5, r2
 80155f8:	b1c2      	cbz	r2, 801562c <rcl_send_request+0x4c>
 80155fa:	2105      	movs	r1, #5
 80155fc:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8015600:	f003 fa12 	bl	8018a28 <__atomic_load_8>
 8015604:	6823      	ldr	r3, [r4, #0]
 8015606:	462a      	mov	r2, r5
 8015608:	e9c5 0100 	strd	r0, r1, [r5]
 801560c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8015610:	4639      	mov	r1, r7
 8015612:	f004 fbd3 	bl	8019dbc <rmw_send_request>
 8015616:	4606      	mov	r6, r0
 8015618:	b160      	cbz	r0, 8015634 <rcl_send_request+0x54>
 801561a:	2601      	movs	r6, #1
 801561c:	4630      	mov	r0, r6
 801561e:	b00b      	add	sp, #44	; 0x2c
 8015620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015622:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8015626:	4630      	mov	r0, r6
 8015628:	b00b      	add	sp, #44	; 0x2c
 801562a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801562c:	260b      	movs	r6, #11
 801562e:	4630      	mov	r0, r6
 8015630:	b00b      	add	sp, #44	; 0x2c
 8015632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015634:	6820      	ldr	r0, [r4, #0]
 8015636:	2305      	movs	r3, #5
 8015638:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801563c:	9300      	str	r3, [sp, #0]
 801563e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015642:	f003 fa5d 	bl	8018b00 <__atomic_exchange_8>
 8015646:	6823      	ldr	r3, [r4, #0]
 8015648:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 801564c:	2a00      	cmp	r2, #0
 801564e:	d0e5      	beq.n	801561c <rcl_send_request+0x3c>
 8015650:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8015654:	a905      	add	r1, sp, #20
 8015656:	f003 ffcd 	bl	80195f4 <rmw_get_gid_for_client>
 801565a:	b970      	cbnz	r0, 801567a <rcl_send_request+0x9a>
 801565c:	6820      	ldr	r0, [r4, #0]
 801565e:	ab06      	add	r3, sp, #24
 8015660:	4631      	mov	r1, r6
 8015662:	463a      	mov	r2, r7
 8015664:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
 8015668:	9302      	str	r3, [sp, #8]
 801566a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801566e:	e9cd 4500 	strd	r4, r5, [sp]
 8015672:	f001 f845 	bl	8016700 <rcl_send_service_event_message>
 8015676:	4606      	mov	r6, r0
 8015678:	e7d0      	b.n	801561c <rcl_send_request+0x3c>
 801567a:	f000 f877 	bl	801576c <rcl_convert_rmw_ret_to_rcl_ret>
 801567e:	4606      	mov	r6, r0
 8015680:	e7cc      	b.n	801561c <rcl_send_request+0x3c>
 8015682:	bf00      	nop
 8015684:	0000      	movs	r0, r0
	...

08015688 <rcl_take_response>:
 8015688:	b5f0      	push	{r4, r5, r6, r7, lr}
 801568a:	468e      	mov	lr, r1
 801568c:	b095      	sub	sp, #84	; 0x54
 801568e:	460c      	mov	r4, r1
 8015690:	4616      	mov	r6, r2
 8015692:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 8015696:	4605      	mov	r5, r0
 8015698:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801569c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80156a0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80156a4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80156a8:	2d00      	cmp	r5, #0
 80156aa:	d042      	beq.n	8015732 <rcl_take_response+0xaa>
 80156ac:	682b      	ldr	r3, [r5, #0]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d03f      	beq.n	8015732 <rcl_take_response+0xaa>
 80156b2:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80156b6:	2800      	cmp	r0, #0
 80156b8:	d03b      	beq.n	8015732 <rcl_take_response+0xaa>
 80156ba:	2e00      	cmp	r6, #0
 80156bc:	d03c      	beq.n	8015738 <rcl_take_response+0xb0>
 80156be:	2300      	movs	r3, #0
 80156c0:	4632      	mov	r2, r6
 80156c2:	a90a      	add	r1, sp, #40	; 0x28
 80156c4:	f88d 3013 	strb.w	r3, [sp, #19]
 80156c8:	f10d 0313 	add.w	r3, sp, #19
 80156cc:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8015750 <rcl_take_response+0xc8>
 80156d0:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80156d4:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80156d8:	f004 fc78 	bl	8019fcc <rmw_take_response>
 80156dc:	4607      	mov	r7, r0
 80156de:	bb68      	cbnz	r0, 801573c <rcl_take_response+0xb4>
 80156e0:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80156e4:	b363      	cbz	r3, 8015740 <rcl_take_response+0xb8>
 80156e6:	682b      	ldr	r3, [r5, #0]
 80156e8:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 80156ec:	b19a      	cbz	r2, 8015716 <rcl_take_response+0x8e>
 80156ee:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80156f2:	a905      	add	r1, sp, #20
 80156f4:	f003 ff7e 	bl	80195f4 <rmw_get_gid_for_client>
 80156f8:	bb28      	cbnz	r0, 8015746 <rcl_take_response+0xbe>
 80156fa:	6829      	ldr	r1, [r5, #0]
 80156fc:	ab06      	add	r3, sp, #24
 80156fe:	4632      	mov	r2, r6
 8015700:	f8d1 0118 	ldr.w	r0, [r1, #280]	; 0x118
 8015704:	2103      	movs	r1, #3
 8015706:	9302      	str	r3, [sp, #8]
 8015708:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 801570c:	e9cd 6700 	strd	r6, r7, [sp]
 8015710:	f000 fff6 	bl	8016700 <rcl_send_service_event_message>
 8015714:	4607      	mov	r7, r0
 8015716:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 801571a:	46a4      	mov	ip, r4
 801571c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015720:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015724:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015728:	e88c 0003 	stmia.w	ip, {r0, r1}
 801572c:	4638      	mov	r0, r7
 801572e:	b015      	add	sp, #84	; 0x54
 8015730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015732:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 8015736:	e7ee      	b.n	8015716 <rcl_take_response+0x8e>
 8015738:	270b      	movs	r7, #11
 801573a:	e7ec      	b.n	8015716 <rcl_take_response+0x8e>
 801573c:	2701      	movs	r7, #1
 801573e:	e7ea      	b.n	8015716 <rcl_take_response+0x8e>
 8015740:	f240 17f5 	movw	r7, #501	; 0x1f5
 8015744:	e7e7      	b.n	8015716 <rcl_take_response+0x8e>
 8015746:	f000 f811 	bl	801576c <rcl_convert_rmw_ret_to_rcl_ret>
 801574a:	4607      	mov	r7, r0
 801574c:	e7e3      	b.n	8015716 <rcl_take_response+0x8e>
 801574e:	bf00      	nop
	...

08015758 <rcl_client_is_valid>:
 8015758:	b130      	cbz	r0, 8015768 <rcl_client_is_valid+0x10>
 801575a:	6800      	ldr	r0, [r0, #0]
 801575c:	b120      	cbz	r0, 8015768 <rcl_client_is_valid+0x10>
 801575e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8015762:	3800      	subs	r0, #0
 8015764:	bf18      	it	ne
 8015766:	2001      	movne	r0, #1
 8015768:	4770      	bx	lr
 801576a:	bf00      	nop

0801576c <rcl_convert_rmw_ret_to_rcl_ret>:
 801576c:	280b      	cmp	r0, #11
 801576e:	dc0d      	bgt.n	801578c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8015770:	2800      	cmp	r0, #0
 8015772:	db09      	blt.n	8015788 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015774:	280b      	cmp	r0, #11
 8015776:	d807      	bhi.n	8015788 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015778:	e8df f000 	tbb	[pc, r0]
 801577c:	07060607 	.word	0x07060607
 8015780:	06060606 	.word	0x06060606
 8015784:	07070606 	.word	0x07070606
 8015788:	2001      	movs	r0, #1
 801578a:	4770      	bx	lr
 801578c:	28cb      	cmp	r0, #203	; 0xcb
 801578e:	bf18      	it	ne
 8015790:	2001      	movne	r0, #1
 8015792:	4770      	bx	lr

08015794 <rcl_get_zero_initialized_context>:
 8015794:	4a03      	ldr	r2, [pc, #12]	; (80157a4 <rcl_get_zero_initialized_context+0x10>)
 8015796:	4603      	mov	r3, r0
 8015798:	e892 0003 	ldmia.w	r2, {r0, r1}
 801579c:	e883 0003 	stmia.w	r3, {r0, r1}
 80157a0:	4618      	mov	r0, r3
 80157a2:	4770      	bx	lr
 80157a4:	0801fda0 	.word	0x0801fda0

080157a8 <rcl_context_is_valid>:
 80157a8:	b118      	cbz	r0, 80157b2 <rcl_context_is_valid+0xa>
 80157aa:	6840      	ldr	r0, [r0, #4]
 80157ac:	3800      	subs	r0, #0
 80157ae:	bf18      	it	ne
 80157b0:	2001      	movne	r0, #1
 80157b2:	4770      	bx	lr

080157b4 <__cleanup_context>:
 80157b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80157b8:	4606      	mov	r6, r0
 80157ba:	2300      	movs	r3, #0
 80157bc:	6800      	ldr	r0, [r0, #0]
 80157be:	6073      	str	r3, [r6, #4]
 80157c0:	2800      	cmp	r0, #0
 80157c2:	d049      	beq.n	8015858 <__cleanup_context+0xa4>
 80157c4:	6947      	ldr	r7, [r0, #20]
 80157c6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80157ca:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80157ce:	b137      	cbz	r7, 80157de <__cleanup_context+0x2a>
 80157d0:	3014      	adds	r0, #20
 80157d2:	f000 f9e7 	bl	8015ba4 <rcl_init_options_fini>
 80157d6:	4607      	mov	r7, r0
 80157d8:	2800      	cmp	r0, #0
 80157da:	d144      	bne.n	8015866 <__cleanup_context+0xb2>
 80157dc:	6830      	ldr	r0, [r6, #0]
 80157de:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80157e0:	b143      	cbz	r3, 80157f4 <__cleanup_context+0x40>
 80157e2:	3028      	adds	r0, #40	; 0x28
 80157e4:	f004 f930 	bl	8019a48 <rmw_context_fini>
 80157e8:	b118      	cbz	r0, 80157f2 <__cleanup_context+0x3e>
 80157ea:	2f00      	cmp	r7, #0
 80157ec:	d03e      	beq.n	801586c <__cleanup_context+0xb8>
 80157ee:	f7f9 f923 	bl	800ea38 <rcutils_reset_error>
 80157f2:	6830      	ldr	r0, [r6, #0]
 80157f4:	6a03      	ldr	r3, [r0, #32]
 80157f6:	b1db      	cbz	r3, 8015830 <__cleanup_context+0x7c>
 80157f8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80157fc:	2a01      	cmp	r2, #1
 80157fe:	f17c 0100 	sbcs.w	r1, ip, #0
 8015802:	db11      	blt.n	8015828 <__cleanup_context+0x74>
 8015804:	2400      	movs	r4, #0
 8015806:	4625      	mov	r5, r4
 8015808:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801580c:	4649      	mov	r1, r9
 801580e:	b1b8      	cbz	r0, 8015840 <__cleanup_context+0x8c>
 8015810:	47c0      	blx	r8
 8015812:	6833      	ldr	r3, [r6, #0]
 8015814:	3401      	adds	r4, #1
 8015816:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801581a:	f145 0500 	adc.w	r5, r5, #0
 801581e:	6a1b      	ldr	r3, [r3, #32]
 8015820:	4294      	cmp	r4, r2
 8015822:	eb75 010c 	sbcs.w	r1, r5, ip
 8015826:	dbef      	blt.n	8015808 <__cleanup_context+0x54>
 8015828:	4618      	mov	r0, r3
 801582a:	4649      	mov	r1, r9
 801582c:	47c0      	blx	r8
 801582e:	6830      	ldr	r0, [r6, #0]
 8015830:	4649      	mov	r1, r9
 8015832:	47c0      	blx	r8
 8015834:	2300      	movs	r3, #0
 8015836:	4638      	mov	r0, r7
 8015838:	e9c6 3300 	strd	r3, r3, [r6]
 801583c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015840:	3401      	adds	r4, #1
 8015842:	f145 0500 	adc.w	r5, r5, #0
 8015846:	4294      	cmp	r4, r2
 8015848:	eb75 010c 	sbcs.w	r1, r5, ip
 801584c:	dbdc      	blt.n	8015808 <__cleanup_context+0x54>
 801584e:	4618      	mov	r0, r3
 8015850:	4649      	mov	r1, r9
 8015852:	47c0      	blx	r8
 8015854:	6830      	ldr	r0, [r6, #0]
 8015856:	e7eb      	b.n	8015830 <__cleanup_context+0x7c>
 8015858:	4607      	mov	r7, r0
 801585a:	2300      	movs	r3, #0
 801585c:	4638      	mov	r0, r7
 801585e:	e9c6 3300 	strd	r3, r3, [r6]
 8015862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015866:	f7f9 f8e7 	bl	800ea38 <rcutils_reset_error>
 801586a:	e7b7      	b.n	80157dc <__cleanup_context+0x28>
 801586c:	f7ff ff7e 	bl	801576c <rcl_convert_rmw_ret_to_rcl_ret>
 8015870:	4607      	mov	r7, r0
 8015872:	e7bc      	b.n	80157ee <__cleanup_context+0x3a>

08015874 <rcl_init>:
 8015874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015878:	1e05      	subs	r5, r0, #0
 801587a:	b0a7      	sub	sp, #156	; 0x9c
 801587c:	460e      	mov	r6, r1
 801587e:	4690      	mov	r8, r2
 8015880:	461f      	mov	r7, r3
 8015882:	f340 80a0 	ble.w	80159c6 <rcl_init+0x152>
 8015886:	2900      	cmp	r1, #0
 8015888:	f000 80a0 	beq.w	80159cc <rcl_init+0x158>
 801588c:	f1a1 0e04 	sub.w	lr, r1, #4
 8015890:	f04f 0c00 	mov.w	ip, #0
 8015894:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8015898:	f10c 0c01 	add.w	ip, ip, #1
 801589c:	2c00      	cmp	r4, #0
 801589e:	f000 8095 	beq.w	80159cc <rcl_init+0x158>
 80158a2:	4565      	cmp	r5, ip
 80158a4:	d1f6      	bne.n	8015894 <rcl_init+0x20>
 80158a6:	f1b8 0f00 	cmp.w	r8, #0
 80158aa:	f000 808f 	beq.w	80159cc <rcl_init+0x158>
 80158ae:	f8d8 4000 	ldr.w	r4, [r8]
 80158b2:	2c00      	cmp	r4, #0
 80158b4:	f000 808a 	beq.w	80159cc <rcl_init+0x158>
 80158b8:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 80158bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80158be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158c2:	6823      	ldr	r3, [r4, #0]
 80158c4:	a821      	add	r0, sp, #132	; 0x84
 80158c6:	f8cc 3000 	str.w	r3, [ip]
 80158ca:	f7f9 f891 	bl	800e9f0 <rcutils_allocator_is_valid>
 80158ce:	f080 0001 	eor.w	r0, r0, #1
 80158d2:	b2c0      	uxtb	r0, r0
 80158d4:	2800      	cmp	r0, #0
 80158d6:	d179      	bne.n	80159cc <rcl_init+0x158>
 80158d8:	2f00      	cmp	r7, #0
 80158da:	d077      	beq.n	80159cc <rcl_init+0x158>
 80158dc:	683b      	ldr	r3, [r7, #0]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d179      	bne.n	80159d6 <rcl_init+0x162>
 80158e2:	2198      	movs	r1, #152	; 0x98
 80158e4:	2001      	movs	r0, #1
 80158e6:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 80158ea:	4798      	blx	r3
 80158ec:	4604      	mov	r4, r0
 80158ee:	6038      	str	r0, [r7, #0]
 80158f0:	2800      	cmp	r0, #0
 80158f2:	f000 80cd 	beq.w	8015a90 <rcl_init+0x21c>
 80158f6:	a802      	add	r0, sp, #8
 80158f8:	f003 fbea 	bl	80190d0 <rmw_get_zero_initialized_context>
 80158fc:	a902      	add	r1, sp, #8
 80158fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015902:	2270      	movs	r2, #112	; 0x70
 8015904:	f008 f8bb 	bl	801da7e <memcpy>
 8015908:	f8d7 e000 	ldr.w	lr, [r7]
 801590c:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 8015910:	4674      	mov	r4, lr
 8015912:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015918:	f8dc 3000 	ldr.w	r3, [ip]
 801591c:	f10e 0114 	add.w	r1, lr, #20
 8015920:	4640      	mov	r0, r8
 8015922:	6023      	str	r3, [r4, #0]
 8015924:	f000 f968 	bl	8015bf8 <rcl_init_options_copy>
 8015928:	4604      	mov	r4, r0
 801592a:	2800      	cmp	r0, #0
 801592c:	d144      	bne.n	80159b8 <rcl_init+0x144>
 801592e:	f8d7 9000 	ldr.w	r9, [r7]
 8015932:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 8015936:	f8c9 0020 	str.w	r0, [r9, #32]
 801593a:	f8c9 5018 	str.w	r5, [r9, #24]
 801593e:	f8c9 a01c 	str.w	sl, [r9, #28]
 8015942:	2d00      	cmp	r5, #0
 8015944:	d04e      	beq.n	80159e4 <rcl_init+0x170>
 8015946:	2e00      	cmp	r6, #0
 8015948:	d04c      	beq.n	80159e4 <rcl_init+0x170>
 801594a:	2104      	movs	r1, #4
 801594c:	4628      	mov	r0, r5
 801594e:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 8015952:	4798      	blx	r3
 8015954:	f8c9 0020 	str.w	r0, [r9, #32]
 8015958:	f8d7 9000 	ldr.w	r9, [r7]
 801595c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8015960:	46cb      	mov	fp, r9
 8015962:	b343      	cbz	r3, 80159b6 <rcl_init+0x142>
 8015964:	2d01      	cmp	r5, #1
 8015966:	f17a 0300 	sbcs.w	r3, sl, #0
 801596a:	db3b      	blt.n	80159e4 <rcl_init+0x170>
 801596c:	2400      	movs	r4, #0
 801596e:	3e04      	subs	r6, #4
 8015970:	46a1      	mov	r9, r4
 8015972:	e00b      	b.n	801598c <rcl_init+0x118>
 8015974:	6831      	ldr	r1, [r6, #0]
 8015976:	f008 f882 	bl	801da7e <memcpy>
 801597a:	3401      	adds	r4, #1
 801597c:	f149 0900 	adc.w	r9, r9, #0
 8015980:	45ca      	cmp	sl, r9
 8015982:	bf08      	it	eq
 8015984:	42a5      	cmpeq	r5, r4
 8015986:	d02b      	beq.n	80159e0 <rcl_init+0x16c>
 8015988:	f8d7 b000 	ldr.w	fp, [r7]
 801598c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8015990:	f7ea fcb6 	bl	8000300 <strlen>
 8015994:	1c42      	adds	r2, r0, #1
 8015996:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015998:	4610      	mov	r0, r2
 801599a:	9925      	ldr	r1, [sp, #148]	; 0x94
 801599c:	f8db b020 	ldr.w	fp, [fp, #32]
 80159a0:	9201      	str	r2, [sp, #4]
 80159a2:	4798      	blx	r3
 80159a4:	683b      	ldr	r3, [r7, #0]
 80159a6:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
 80159aa:	6a1b      	ldr	r3, [r3, #32]
 80159ac:	9a01      	ldr	r2, [sp, #4]
 80159ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80159b2:	2800      	cmp	r0, #0
 80159b4:	d1de      	bne.n	8015974 <rcl_init+0x100>
 80159b6:	240a      	movs	r4, #10
 80159b8:	4638      	mov	r0, r7
 80159ba:	f7ff fefb 	bl	80157b4 <__cleanup_context>
 80159be:	4620      	mov	r0, r4
 80159c0:	b027      	add	sp, #156	; 0x9c
 80159c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159c6:	2900      	cmp	r1, #0
 80159c8:	f43f af6d 	beq.w	80158a6 <rcl_init+0x32>
 80159cc:	240b      	movs	r4, #11
 80159ce:	4620      	mov	r0, r4
 80159d0:	b027      	add	sp, #156	; 0x9c
 80159d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159d6:	2464      	movs	r4, #100	; 0x64
 80159d8:	4620      	mov	r0, r4
 80159da:	b027      	add	sp, #156	; 0x9c
 80159dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159e0:	f8d7 9000 	ldr.w	r9, [r7]
 80159e4:	493f      	ldr	r1, [pc, #252]	; (8015ae4 <rcl_init+0x270>)
 80159e6:	680b      	ldr	r3, [r1, #0]
 80159e8:	3301      	adds	r3, #1
 80159ea:	d04c      	beq.n	8015a86 <rcl_init+0x212>
 80159ec:	461a      	mov	r2, r3
 80159ee:	2000      	movs	r0, #0
 80159f0:	600b      	str	r3, [r1, #0]
 80159f2:	f8d9 5014 	ldr.w	r5, [r9, #20]
 80159f6:	607b      	str	r3, [r7, #4]
 80159f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80159fa:	3301      	adds	r3, #1
 80159fc:	e9c5 2006 	strd	r2, r0, [r5, #24]
 8015a00:	d05d      	beq.n	8015abe <rcl_init+0x24a>
 8015a02:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d044      	beq.n	8015a94 <rcl_init+0x220>
 8015a0a:	2b01      	cmp	r3, #1
 8015a0c:	d04e      	beq.n	8015aac <rcl_init+0x238>
 8015a0e:	f8d8 3000 	ldr.w	r3, [r8]
 8015a12:	f105 0634 	add.w	r6, r5, #52	; 0x34
 8015a16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d05a      	beq.n	8015ad4 <rcl_init+0x260>
 8015a1e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8015a20:	b953      	cbnz	r3, 8015a38 <rcl_init+0x1c4>
 8015a22:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8015a26:	2801      	cmp	r0, #1
 8015a28:	d008      	beq.n	8015a3c <rcl_init+0x1c8>
 8015a2a:	a921      	add	r1, sp, #132	; 0x84
 8015a2c:	4630      	mov	r0, r6
 8015a2e:	f006 fceb 	bl	801c408 <rcl_get_discovery_static_peers>
 8015a32:	4604      	mov	r4, r0
 8015a34:	2800      	cmp	r0, #0
 8015a36:	d1bf      	bne.n	80159b8 <rcl_init+0x144>
 8015a38:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8015a3c:	f006 fcda 	bl	801c3f4 <rcl_automatic_discovery_range_to_string>
 8015a40:	683b      	ldr	r3, [r7, #0]
 8015a42:	aa20      	add	r2, sp, #128	; 0x80
 8015a44:	a91f      	add	r1, sp, #124	; 0x7c
 8015a46:	695b      	ldr	r3, [r3, #20]
 8015a48:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8015a4a:	f001 fc79 	bl	8017340 <rcl_validate_enclave_name>
 8015a4e:	4604      	mov	r4, r0
 8015a50:	2800      	cmp	r0, #0
 8015a52:	d1b1      	bne.n	80159b8 <rcl_init+0x144>
 8015a54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015a56:	bb83      	cbnz	r3, 8015aba <rcl_init+0x246>
 8015a58:	6839      	ldr	r1, [r7, #0]
 8015a5a:	694b      	ldr	r3, [r1, #20]
 8015a5c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8015a60:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8015a62:	f000 fc97 	bl	8016394 <rcl_get_security_options_from_environment>
 8015a66:	4604      	mov	r4, r0
 8015a68:	2800      	cmp	r0, #0
 8015a6a:	d1a5      	bne.n	80159b8 <rcl_init+0x144>
 8015a6c:	6839      	ldr	r1, [r7, #0]
 8015a6e:	6948      	ldr	r0, [r1, #20]
 8015a70:	3128      	adds	r1, #40	; 0x28
 8015a72:	3018      	adds	r0, #24
 8015a74:	f003 feb2 	bl	80197dc <rmw_init>
 8015a78:	4604      	mov	r4, r0
 8015a7a:	2800      	cmp	r0, #0
 8015a7c:	d0a7      	beq.n	80159ce <rcl_init+0x15a>
 8015a7e:	f7ff fe75 	bl	801576c <rcl_convert_rmw_ret_to_rcl_ret>
 8015a82:	4604      	mov	r4, r0
 8015a84:	e798      	b.n	80159b8 <rcl_init+0x144>
 8015a86:	2201      	movs	r2, #1
 8015a88:	4618      	mov	r0, r3
 8015a8a:	600a      	str	r2, [r1, #0]
 8015a8c:	4613      	mov	r3, r2
 8015a8e:	e7b0      	b.n	80159f2 <rcl_init+0x17e>
 8015a90:	240a      	movs	r4, #10
 8015a92:	e79c      	b.n	80159ce <rcl_init+0x15a>
 8015a94:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8015a98:	f000 f90c 	bl	8015cb4 <rcl_get_localhost_only>
 8015a9c:	4604      	mov	r4, r0
 8015a9e:	2800      	cmp	r0, #0
 8015aa0:	d18a      	bne.n	80159b8 <rcl_init+0x144>
 8015aa2:	683a      	ldr	r2, [r7, #0]
 8015aa4:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8015aa8:	6955      	ldr	r5, [r2, #20]
 8015aaa:	e7ae      	b.n	8015a0a <rcl_init+0x196>
 8015aac:	2302      	movs	r3, #2
 8015aae:	2200      	movs	r2, #0
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 8015ab6:	63ea      	str	r2, [r5, #60]	; 0x3c
 8015ab8:	e7c0      	b.n	8015a3c <rcl_init+0x1c8>
 8015aba:	2401      	movs	r4, #1
 8015abc:	e77c      	b.n	80159b8 <rcl_init+0x144>
 8015abe:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8015ac2:	f006 fd07 	bl	801c4d4 <rcl_get_default_domain_id>
 8015ac6:	4604      	mov	r4, r0
 8015ac8:	2800      	cmp	r0, #0
 8015aca:	f47f af75 	bne.w	80159b8 <rcl_init+0x144>
 8015ace:	683b      	ldr	r3, [r7, #0]
 8015ad0:	695d      	ldr	r5, [r3, #20]
 8015ad2:	e796      	b.n	8015a02 <rcl_init+0x18e>
 8015ad4:	4630      	mov	r0, r6
 8015ad6:	f006 fc4b 	bl	801c370 <rcl_get_automatic_discovery_range>
 8015ada:	4604      	mov	r4, r0
 8015adc:	2800      	cmp	r0, #0
 8015ade:	d09e      	beq.n	8015a1e <rcl_init+0x1aa>
 8015ae0:	e76a      	b.n	80159b8 <rcl_init+0x144>
 8015ae2:	bf00      	nop
 8015ae4:	20010ac4 	.word	0x20010ac4

08015ae8 <rcl_get_zero_initialized_init_options>:
 8015ae8:	2000      	movs	r0, #0
 8015aea:	4770      	bx	lr

08015aec <rcl_init_options_init>:
 8015aec:	b084      	sub	sp, #16
 8015aee:	b570      	push	{r4, r5, r6, lr}
 8015af0:	b09e      	sub	sp, #120	; 0x78
 8015af2:	ad23      	add	r5, sp, #140	; 0x8c
 8015af4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8015af8:	2800      	cmp	r0, #0
 8015afa:	d046      	beq.n	8015b8a <rcl_init_options_init+0x9e>
 8015afc:	6803      	ldr	r3, [r0, #0]
 8015afe:	4604      	mov	r4, r0
 8015b00:	b133      	cbz	r3, 8015b10 <rcl_init_options_init+0x24>
 8015b02:	2564      	movs	r5, #100	; 0x64
 8015b04:	4628      	mov	r0, r5
 8015b06:	b01e      	add	sp, #120	; 0x78
 8015b08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b0c:	b004      	add	sp, #16
 8015b0e:	4770      	bx	lr
 8015b10:	4628      	mov	r0, r5
 8015b12:	f7f8 ff6d 	bl	800e9f0 <rcutils_allocator_is_valid>
 8015b16:	2800      	cmp	r0, #0
 8015b18:	d037      	beq.n	8015b8a <rcl_init_options_init+0x9e>
 8015b1a:	46ae      	mov	lr, r5
 8015b1c:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8015b20:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015b24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b28:	f8de 3000 	ldr.w	r3, [lr]
 8015b2c:	2070      	movs	r0, #112	; 0x70
 8015b2e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8015b30:	f8cc 3000 	str.w	r3, [ip]
 8015b34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015b36:	4798      	blx	r3
 8015b38:	4606      	mov	r6, r0
 8015b3a:	6020      	str	r0, [r4, #0]
 8015b3c:	b338      	cbz	r0, 8015b8e <rcl_init_options_init+0xa2>
 8015b3e:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8015b42:	4686      	mov	lr, r0
 8015b44:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015b48:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015b4c:	f8dc 3000 	ldr.w	r3, [ip]
 8015b50:	a802      	add	r0, sp, #8
 8015b52:	f8ce 3000 	str.w	r3, [lr]
 8015b56:	f003 facf 	bl	80190f8 <rmw_get_zero_initialized_init_options>
 8015b5a:	2258      	movs	r2, #88	; 0x58
 8015b5c:	a902      	add	r1, sp, #8
 8015b5e:	f106 0018 	add.w	r0, r6, #24
 8015b62:	f007 ff8c 	bl	801da7e <memcpy>
 8015b66:	ab26      	add	r3, sp, #152	; 0x98
 8015b68:	6826      	ldr	r6, [r4, #0]
 8015b6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015b6e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015b72:	f106 0018 	add.w	r0, r6, #24
 8015b76:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8015b7a:	f003 fd5f 	bl	801963c <rmw_init_options_init>
 8015b7e:	4605      	mov	r5, r0
 8015b80:	b938      	cbnz	r0, 8015b92 <rcl_init_options_init+0xa6>
 8015b82:	6823      	ldr	r3, [r4, #0]
 8015b84:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
 8015b88:	e7bc      	b.n	8015b04 <rcl_init_options_init+0x18>
 8015b8a:	250b      	movs	r5, #11
 8015b8c:	e7ba      	b.n	8015b04 <rcl_init_options_init+0x18>
 8015b8e:	250a      	movs	r5, #10
 8015b90:	e7b8      	b.n	8015b04 <rcl_init_options_init+0x18>
 8015b92:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8015b94:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015b96:	6820      	ldr	r0, [r4, #0]
 8015b98:	4798      	blx	r3
 8015b9a:	4628      	mov	r0, r5
 8015b9c:	f7ff fde6 	bl	801576c <rcl_convert_rmw_ret_to_rcl_ret>
 8015ba0:	4605      	mov	r5, r0
 8015ba2:	e7af      	b.n	8015b04 <rcl_init_options_init+0x18>

08015ba4 <rcl_init_options_fini>:
 8015ba4:	b530      	push	{r4, r5, lr}
 8015ba6:	b087      	sub	sp, #28
 8015ba8:	b1f0      	cbz	r0, 8015be8 <rcl_init_options_fini+0x44>
 8015baa:	6803      	ldr	r3, [r0, #0]
 8015bac:	4604      	mov	r4, r0
 8015bae:	b1db      	cbz	r3, 8015be8 <rcl_init_options_fini+0x44>
 8015bb0:	469c      	mov	ip, r3
 8015bb2:	f10d 0e04 	add.w	lr, sp, #4
 8015bb6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015bba:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015bbe:	f8dc 3000 	ldr.w	r3, [ip]
 8015bc2:	a801      	add	r0, sp, #4
 8015bc4:	f8ce 3000 	str.w	r3, [lr]
 8015bc8:	f7f8 ff12 	bl	800e9f0 <rcutils_allocator_is_valid>
 8015bcc:	b160      	cbz	r0, 8015be8 <rcl_init_options_fini+0x44>
 8015bce:	6820      	ldr	r0, [r4, #0]
 8015bd0:	3018      	adds	r0, #24
 8015bd2:	f003 fdcd 	bl	8019770 <rmw_init_options_fini>
 8015bd6:	4605      	mov	r5, r0
 8015bd8:	b950      	cbnz	r0, 8015bf0 <rcl_init_options_fini+0x4c>
 8015bda:	6820      	ldr	r0, [r4, #0]
 8015bdc:	9b02      	ldr	r3, [sp, #8]
 8015bde:	9905      	ldr	r1, [sp, #20]
 8015be0:	4798      	blx	r3
 8015be2:	4628      	mov	r0, r5
 8015be4:	b007      	add	sp, #28
 8015be6:	bd30      	pop	{r4, r5, pc}
 8015be8:	250b      	movs	r5, #11
 8015bea:	4628      	mov	r0, r5
 8015bec:	b007      	add	sp, #28
 8015bee:	bd30      	pop	{r4, r5, pc}
 8015bf0:	f7ff fdbc 	bl	801576c <rcl_convert_rmw_ret_to_rcl_ret>
 8015bf4:	4605      	mov	r5, r0
 8015bf6:	e7f8      	b.n	8015bea <rcl_init_options_fini+0x46>

08015bf8 <rcl_init_options_copy>:
 8015bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bfa:	b09d      	sub	sp, #116	; 0x74
 8015bfc:	2800      	cmp	r0, #0
 8015bfe:	d04d      	beq.n	8015c9c <rcl_init_options_copy+0xa4>
 8015c00:	4604      	mov	r4, r0
 8015c02:	6800      	ldr	r0, [r0, #0]
 8015c04:	2800      	cmp	r0, #0
 8015c06:	d049      	beq.n	8015c9c <rcl_init_options_copy+0xa4>
 8015c08:	460d      	mov	r5, r1
 8015c0a:	f7f8 fef1 	bl	800e9f0 <rcutils_allocator_is_valid>
 8015c0e:	2d00      	cmp	r5, #0
 8015c10:	d044      	beq.n	8015c9c <rcl_init_options_copy+0xa4>
 8015c12:	f080 0001 	eor.w	r0, r0, #1
 8015c16:	b2c0      	uxtb	r0, r0
 8015c18:	2800      	cmp	r0, #0
 8015c1a:	d13f      	bne.n	8015c9c <rcl_init_options_copy+0xa4>
 8015c1c:	682b      	ldr	r3, [r5, #0]
 8015c1e:	b11b      	cbz	r3, 8015c28 <rcl_init_options_copy+0x30>
 8015c20:	2464      	movs	r4, #100	; 0x64
 8015c22:	4620      	mov	r0, r4
 8015c24:	b01d      	add	sp, #116	; 0x74
 8015c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c28:	6826      	ldr	r6, [r4, #0]
 8015c2a:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 8015c2e:	46b6      	mov	lr, r6
 8015c30:	6837      	ldr	r7, [r6, #0]
 8015c32:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015c36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c3a:	f8de 3000 	ldr.w	r3, [lr]
 8015c3e:	2070      	movs	r0, #112	; 0x70
 8015c40:	4619      	mov	r1, r3
 8015c42:	f8cc 3000 	str.w	r3, [ip]
 8015c46:	47b8      	blx	r7
 8015c48:	4606      	mov	r6, r0
 8015c4a:	6028      	str	r0, [r5, #0]
 8015c4c:	b350      	cbz	r0, 8015ca4 <rcl_init_options_copy+0xac>
 8015c4e:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 8015c52:	4686      	mov	lr, r0
 8015c54:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015c58:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015c5c:	f8dc 3000 	ldr.w	r3, [ip]
 8015c60:	4668      	mov	r0, sp
 8015c62:	f8ce 3000 	str.w	r3, [lr]
 8015c66:	f003 fa47 	bl	80190f8 <rmw_get_zero_initialized_init_options>
 8015c6a:	2258      	movs	r2, #88	; 0x58
 8015c6c:	4669      	mov	r1, sp
 8015c6e:	f106 0018 	add.w	r0, r6, #24
 8015c72:	f007 ff04 	bl	801da7e <memcpy>
 8015c76:	6820      	ldr	r0, [r4, #0]
 8015c78:	6829      	ldr	r1, [r5, #0]
 8015c7a:	3018      	adds	r0, #24
 8015c7c:	3118      	adds	r1, #24
 8015c7e:	f003 fd45 	bl	801970c <rmw_init_options_copy>
 8015c82:	4604      	mov	r4, r0
 8015c84:	2800      	cmp	r0, #0
 8015c86:	d0cc      	beq.n	8015c22 <rcl_init_options_copy+0x2a>
 8015c88:	f7f8 fec0 	bl	800ea0c <rcutils_get_error_string>
 8015c8c:	f7f8 fed4 	bl	800ea38 <rcutils_reset_error>
 8015c90:	4628      	mov	r0, r5
 8015c92:	f7ff ff87 	bl	8015ba4 <rcl_init_options_fini>
 8015c96:	b138      	cbz	r0, 8015ca8 <rcl_init_options_copy+0xb0>
 8015c98:	4604      	mov	r4, r0
 8015c9a:	e7c2      	b.n	8015c22 <rcl_init_options_copy+0x2a>
 8015c9c:	240b      	movs	r4, #11
 8015c9e:	4620      	mov	r0, r4
 8015ca0:	b01d      	add	sp, #116	; 0x74
 8015ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ca4:	240a      	movs	r4, #10
 8015ca6:	e7bc      	b.n	8015c22 <rcl_init_options_copy+0x2a>
 8015ca8:	4620      	mov	r0, r4
 8015caa:	b01d      	add	sp, #116	; 0x74
 8015cac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015cb0:	f7ff bd5c 	b.w	801576c <rcl_convert_rmw_ret_to_rcl_ret>

08015cb4 <rcl_get_localhost_only>:
 8015cb4:	b510      	push	{r4, lr}
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	b082      	sub	sp, #8
 8015cba:	9301      	str	r3, [sp, #4]
 8015cbc:	b1c0      	cbz	r0, 8015cf0 <rcl_get_localhost_only+0x3c>
 8015cbe:	4604      	mov	r4, r0
 8015cc0:	a901      	add	r1, sp, #4
 8015cc2:	480d      	ldr	r0, [pc, #52]	; (8015cf8 <rcl_get_localhost_only+0x44>)
 8015cc4:	f002 ff54 	bl	8018b70 <rcutils_get_env>
 8015cc8:	b110      	cbz	r0, 8015cd0 <rcl_get_localhost_only+0x1c>
 8015cca:	2001      	movs	r0, #1
 8015ccc:	b002      	add	sp, #8
 8015cce:	bd10      	pop	{r4, pc}
 8015cd0:	9b01      	ldr	r3, [sp, #4]
 8015cd2:	b10b      	cbz	r3, 8015cd8 <rcl_get_localhost_only+0x24>
 8015cd4:	781b      	ldrb	r3, [r3, #0]
 8015cd6:	b923      	cbnz	r3, 8015ce2 <rcl_get_localhost_only+0x2e>
 8015cd8:	2300      	movs	r3, #0
 8015cda:	4618      	mov	r0, r3
 8015cdc:	7023      	strb	r3, [r4, #0]
 8015cde:	b002      	add	sp, #8
 8015ce0:	bd10      	pop	{r4, pc}
 8015ce2:	2b31      	cmp	r3, #49	; 0x31
 8015ce4:	bf0c      	ite	eq
 8015ce6:	2301      	moveq	r3, #1
 8015ce8:	2302      	movne	r3, #2
 8015cea:	7023      	strb	r3, [r4, #0]
 8015cec:	b002      	add	sp, #8
 8015cee:	bd10      	pop	{r4, pc}
 8015cf0:	200b      	movs	r0, #11
 8015cf2:	b002      	add	sp, #8
 8015cf4:	bd10      	pop	{r4, pc}
 8015cf6:	bf00      	nop
 8015cf8:	0801fda8 	.word	0x0801fda8

08015cfc <rcl_get_zero_initialized_node>:
 8015cfc:	4a03      	ldr	r2, [pc, #12]	; (8015d0c <rcl_get_zero_initialized_node+0x10>)
 8015cfe:	4603      	mov	r3, r0
 8015d00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015d04:	e883 0003 	stmia.w	r3, {r0, r1}
 8015d08:	4618      	mov	r0, r3
 8015d0a:	4770      	bx	lr
 8015d0c:	0801fdec 	.word	0x0801fdec

08015d10 <rcl_node_init>:
 8015d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d14:	b0ab      	sub	sp, #172	; 0xac
 8015d16:	4604      	mov	r4, r0
 8015d18:	460e      	mov	r6, r1
 8015d1a:	4615      	mov	r5, r2
 8015d1c:	f8dd 80d0 	ldr.w	r8, [sp, #208]	; 0xd0
 8015d20:	a825      	add	r0, sp, #148	; 0x94
 8015d22:	461f      	mov	r7, r3
 8015d24:	f006 fe4a 	bl	801c9bc <rcl_guard_condition_get_default_options>
 8015d28:	f1b8 0f00 	cmp.w	r8, #0
 8015d2c:	f000 80f3 	beq.w	8015f16 <rcl_node_init+0x206>
 8015d30:	4640      	mov	r0, r8
 8015d32:	f7f8 fe5d 	bl	800e9f0 <rcutils_allocator_is_valid>
 8015d36:	2d00      	cmp	r5, #0
 8015d38:	bf18      	it	ne
 8015d3a:	2c00      	cmpne	r4, #0
 8015d3c:	f080 0001 	eor.w	r0, r0, #1
 8015d40:	bf0c      	ite	eq
 8015d42:	f04f 0c01 	moveq.w	ip, #1
 8015d46:	f04f 0c00 	movne.w	ip, #0
 8015d4a:	2e00      	cmp	r6, #0
 8015d4c:	bf08      	it	eq
 8015d4e:	f04c 0c01 	orreq.w	ip, ip, #1
 8015d52:	ea4c 0c00 	orr.w	ip, ip, r0
 8015d56:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 8015d5a:	f040 80dc 	bne.w	8015f16 <rcl_node_init+0x206>
 8015d5e:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8015d62:	f1ba 0f00 	cmp.w	sl, #0
 8015d66:	f040 80fc 	bne.w	8015f62 <rcl_node_init+0x252>
 8015d6a:	2f00      	cmp	r7, #0
 8015d6c:	f000 80d3 	beq.w	8015f16 <rcl_node_init+0x206>
 8015d70:	4638      	mov	r0, r7
 8015d72:	f7ff fd19 	bl	80157a8 <rcl_context_is_valid>
 8015d76:	4683      	mov	fp, r0
 8015d78:	2800      	cmp	r0, #0
 8015d7a:	f000 80d2 	beq.w	8015f22 <rcl_node_init+0x212>
 8015d7e:	4652      	mov	r2, sl
 8015d80:	4630      	mov	r0, r6
 8015d82:	a924      	add	r1, sp, #144	; 0x90
 8015d84:	f8cd a090 	str.w	sl, [sp, #144]	; 0x90
 8015d88:	f003 fb6c 	bl	8019464 <rmw_validate_node_name>
 8015d8c:	4682      	mov	sl, r0
 8015d8e:	2800      	cmp	r0, #0
 8015d90:	f040 80c3 	bne.w	8015f1a <rcl_node_init+0x20a>
 8015d94:	9824      	ldr	r0, [sp, #144]	; 0x90
 8015d96:	2800      	cmp	r0, #0
 8015d98:	f040 80f1 	bne.w	8015f7e <rcl_node_init+0x26e>
 8015d9c:	4628      	mov	r0, r5
 8015d9e:	f7ea faaf 	bl	8000300 <strlen>
 8015da2:	2800      	cmp	r0, #0
 8015da4:	f040 80c0 	bne.w	8015f28 <rcl_node_init+0x218>
 8015da8:	4d79      	ldr	r5, [pc, #484]	; (8015f90 <rcl_node_init+0x280>)
 8015daa:	a924      	add	r1, sp, #144	; 0x90
 8015dac:	2200      	movs	r2, #0
 8015dae:	4628      	mov	r0, r5
 8015db0:	f003 fb3a 	bl	8019428 <rmw_validate_namespace>
 8015db4:	4682      	mov	sl, r0
 8015db6:	2800      	cmp	r0, #0
 8015db8:	f040 80af 	bne.w	8015f1a <rcl_node_init+0x20a>
 8015dbc:	9824      	ldr	r0, [sp, #144]	; 0x90
 8015dbe:	2800      	cmp	r0, #0
 8015dc0:	f040 80d5 	bne.w	8015f6e <rcl_node_init+0x25e>
 8015dc4:	f8d8 3000 	ldr.w	r3, [r8]
 8015dc8:	2080      	movs	r0, #128	; 0x80
 8015dca:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015dce:	4798      	blx	r3
 8015dd0:	4682      	mov	sl, r0
 8015dd2:	6060      	str	r0, [r4, #4]
 8015dd4:	2800      	cmp	r0, #0
 8015dd6:	f000 80cf 	beq.w	8015f78 <rcl_node_init+0x268>
 8015dda:	2200      	movs	r2, #0
 8015ddc:	2300      	movs	r3, #0
 8015dde:	a808      	add	r0, sp, #32
 8015de0:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 8015de4:	e9ca 231e 	strd	r2, r3, [sl, #120]	; 0x78
 8015de8:	f000 f922 	bl	8016030 <rcl_node_get_default_options>
 8015dec:	a908      	add	r1, sp, #32
 8015dee:	4650      	mov	r0, sl
 8015df0:	2270      	movs	r2, #112	; 0x70
 8015df2:	f007 fe44 	bl	801da7e <memcpy>
 8015df6:	6861      	ldr	r1, [r4, #4]
 8015df8:	4640      	mov	r0, r8
 8015dfa:	6027      	str	r7, [r4, #0]
 8015dfc:	f000 f926 	bl	801604c <rcl_node_options_copy>
 8015e00:	2800      	cmp	r0, #0
 8015e02:	d158      	bne.n	8015eb6 <rcl_node_init+0x1a6>
 8015e04:	4628      	mov	r0, r5
 8015e06:	f7ea fa7b 	bl	8000300 <strlen>
 8015e0a:	4428      	add	r0, r5
 8015e0c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8015e10:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8015e14:	2b2f      	cmp	r3, #47	; 0x2f
 8015e16:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015e1a:	9300      	str	r3, [sp, #0]
 8015e1c:	bf0c      	ite	eq
 8015e1e:	4b5d      	ldreq	r3, [pc, #372]	; (8015f94 <rcl_node_init+0x284>)
 8015e20:	4b5d      	ldrne	r3, [pc, #372]	; (8015f98 <rcl_node_init+0x288>)
 8015e22:	9302      	str	r3, [sp, #8]
 8015e24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015e28:	9301      	str	r3, [sp, #4]
 8015e2a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8015e2e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8015e32:	f002 fec5 	bl	8018bc0 <rcutils_format_string_limit>
 8015e36:	6823      	ldr	r3, [r4, #0]
 8015e38:	f8ca 007c 	str.w	r0, [sl, #124]	; 0x7c
 8015e3c:	4631      	mov	r1, r6
 8015e3e:	6818      	ldr	r0, [r3, #0]
 8015e40:	462a      	mov	r2, r5
 8015e42:	6866      	ldr	r6, [r4, #4]
 8015e44:	3028      	adds	r0, #40	; 0x28
 8015e46:	f003 ff23 	bl	8019c90 <rmw_create_node>
 8015e4a:	6863      	ldr	r3, [r4, #4]
 8015e4c:	6730      	str	r0, [r6, #112]	; 0x70
 8015e4e:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8015e50:	2800      	cmp	r0, #0
 8015e52:	d032      	beq.n	8015eba <rcl_node_init+0x1aa>
 8015e54:	f003 ffac 	bl	8019db0 <rmw_node_get_graph_guard_condition>
 8015e58:	4682      	mov	sl, r0
 8015e5a:	b360      	cbz	r0, 8015eb6 <rcl_node_init+0x1a6>
 8015e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8015e60:	2008      	movs	r0, #8
 8015e62:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015e66:	6866      	ldr	r6, [r4, #4]
 8015e68:	4798      	blx	r3
 8015e6a:	6863      	ldr	r3, [r4, #4]
 8015e6c:	6770      	str	r0, [r6, #116]	; 0x74
 8015e6e:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
 8015e72:	f1bb 0f00 	cmp.w	fp, #0
 8015e76:	d020      	beq.n	8015eba <rcl_node_init+0x1aa>
 8015e78:	a806      	add	r0, sp, #24
 8015e7a:	ae25      	add	r6, sp, #148	; 0x94
 8015e7c:	f006 fcc4 	bl	801c808 <rcl_get_zero_initialized_guard_condition>
 8015e80:	a806      	add	r0, sp, #24
 8015e82:	6863      	ldr	r3, [r4, #4]
 8015e84:	46c4      	mov	ip, r8
 8015e86:	c803      	ldmia	r0, {r0, r1}
 8015e88:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
 8015e8c:	e88b 0003 	stmia.w	fp, {r0, r1}
 8015e90:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015e94:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015e96:	f8dc 3000 	ldr.w	r3, [ip]
 8015e9a:	6033      	str	r3, [r6, #0]
 8015e9c:	ab2a      	add	r3, sp, #168	; 0xa8
 8015e9e:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8015ea2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015ea6:	4651      	mov	r1, sl
 8015ea8:	463a      	mov	r2, r7
 8015eaa:	4670      	mov	r0, lr
 8015eac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015eae:	f006 fd03 	bl	801c8b8 <rcl_guard_condition_init_from_rmw>
 8015eb2:	4682      	mov	sl, r0
 8015eb4:	b328      	cbz	r0, 8015f02 <rcl_node_init+0x1f2>
 8015eb6:	6863      	ldr	r3, [r4, #4]
 8015eb8:	b1f3      	cbz	r3, 8015ef8 <rcl_node_init+0x1e8>
 8015eba:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8015ebc:	b128      	cbz	r0, 8015eca <rcl_node_init+0x1ba>
 8015ebe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015ec2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015ec6:	4798      	blx	r3
 8015ec8:	6863      	ldr	r3, [r4, #4]
 8015eca:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8015ecc:	b110      	cbz	r0, 8015ed4 <rcl_node_init+0x1c4>
 8015ece:	f003 fef1 	bl	8019cb4 <rmw_destroy_node>
 8015ed2:	6863      	ldr	r3, [r4, #4]
 8015ed4:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8015ed6:	b148      	cbz	r0, 8015eec <rcl_node_init+0x1dc>
 8015ed8:	f006 fd4a 	bl	801c970 <rcl_guard_condition_fini>
 8015edc:	6863      	ldr	r3, [r4, #4]
 8015ede:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015ee2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8015ee4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015ee8:	4798      	blx	r3
 8015eea:	6863      	ldr	r3, [r4, #4]
 8015eec:	4618      	mov	r0, r3
 8015eee:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015ef2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015ef6:	4798      	blx	r3
 8015ef8:	2300      	movs	r3, #0
 8015efa:	f04f 0a01 	mov.w	sl, #1
 8015efe:	e9c4 3300 	strd	r3, r3, [r4]
 8015f02:	f1b9 0f00 	cmp.w	r9, #0
 8015f06:	d008      	beq.n	8015f1a <rcl_node_init+0x20a>
 8015f08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015f0c:	4628      	mov	r0, r5
 8015f0e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015f12:	4798      	blx	r3
 8015f14:	e001      	b.n	8015f1a <rcl_node_init+0x20a>
 8015f16:	f04f 0a0b 	mov.w	sl, #11
 8015f1a:	4650      	mov	r0, sl
 8015f1c:	b02b      	add	sp, #172	; 0xac
 8015f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f22:	f04f 0a65 	mov.w	sl, #101	; 0x65
 8015f26:	e7f8      	b.n	8015f1a <rcl_node_init+0x20a>
 8015f28:	782b      	ldrb	r3, [r5, #0]
 8015f2a:	2b2f      	cmp	r3, #47	; 0x2f
 8015f2c:	f43f af3d 	beq.w	8015daa <rcl_node_init+0x9a>
 8015f30:	9503      	str	r5, [sp, #12]
 8015f32:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015f36:	9300      	str	r3, [sp, #0]
 8015f38:	4b18      	ldr	r3, [pc, #96]	; (8015f9c <rcl_node_init+0x28c>)
 8015f3a:	9302      	str	r3, [sp, #8]
 8015f3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015f40:	9301      	str	r3, [sp, #4]
 8015f42:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8015f46:	f002 fe3b 	bl	8018bc0 <rcutils_format_string_limit>
 8015f4a:	4605      	mov	r5, r0
 8015f4c:	b1e0      	cbz	r0, 8015f88 <rcl_node_init+0x278>
 8015f4e:	2200      	movs	r2, #0
 8015f50:	a924      	add	r1, sp, #144	; 0x90
 8015f52:	9224      	str	r2, [sp, #144]	; 0x90
 8015f54:	f003 fa68 	bl	8019428 <rmw_validate_namespace>
 8015f58:	4682      	mov	sl, r0
 8015f5a:	2800      	cmp	r0, #0
 8015f5c:	d1d4      	bne.n	8015f08 <rcl_node_init+0x1f8>
 8015f5e:	46d9      	mov	r9, fp
 8015f60:	e72c      	b.n	8015dbc <rcl_node_init+0xac>
 8015f62:	f04f 0a64 	mov.w	sl, #100	; 0x64
 8015f66:	4650      	mov	r0, sl
 8015f68:	b02b      	add	sp, #172	; 0xac
 8015f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f6e:	f04f 0aca 	mov.w	sl, #202	; 0xca
 8015f72:	f003 fa6b 	bl	801944c <rmw_namespace_validation_result_string>
 8015f76:	e7c4      	b.n	8015f02 <rcl_node_init+0x1f2>
 8015f78:	f04f 0a0a 	mov.w	sl, #10
 8015f7c:	e7c1      	b.n	8015f02 <rcl_node_init+0x1f2>
 8015f7e:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 8015f82:	f003 fac3 	bl	801950c <rmw_node_name_validation_result_string>
 8015f86:	e7c8      	b.n	8015f1a <rcl_node_init+0x20a>
 8015f88:	f04f 0a0a 	mov.w	sl, #10
 8015f8c:	e7c5      	b.n	8015f1a <rcl_node_init+0x20a>
 8015f8e:	bf00      	nop
 8015f90:	0801fdc0 	.word	0x0801fdc0
 8015f94:	0801f890 	.word	0x0801f890
 8015f98:	0801fdc8 	.word	0x0801fdc8
 8015f9c:	0801fdc4 	.word	0x0801fdc4

08015fa0 <rcl_node_is_valid>:
 8015fa0:	b130      	cbz	r0, 8015fb0 <rcl_node_is_valid+0x10>
 8015fa2:	6843      	ldr	r3, [r0, #4]
 8015fa4:	b123      	cbz	r3, 8015fb0 <rcl_node_is_valid+0x10>
 8015fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015fa8:	b113      	cbz	r3, 8015fb0 <rcl_node_is_valid+0x10>
 8015faa:	6800      	ldr	r0, [r0, #0]
 8015fac:	f7ff bbfc 	b.w	80157a8 <rcl_context_is_valid>
 8015fb0:	2000      	movs	r0, #0
 8015fb2:	4770      	bx	lr

08015fb4 <rcl_node_get_name>:
 8015fb4:	b120      	cbz	r0, 8015fc0 <rcl_node_get_name+0xc>
 8015fb6:	6840      	ldr	r0, [r0, #4]
 8015fb8:	b110      	cbz	r0, 8015fc0 <rcl_node_get_name+0xc>
 8015fba:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8015fbc:	b100      	cbz	r0, 8015fc0 <rcl_node_get_name+0xc>
 8015fbe:	6880      	ldr	r0, [r0, #8]
 8015fc0:	4770      	bx	lr
 8015fc2:	bf00      	nop

08015fc4 <rcl_node_get_namespace>:
 8015fc4:	b120      	cbz	r0, 8015fd0 <rcl_node_get_namespace+0xc>
 8015fc6:	6840      	ldr	r0, [r0, #4]
 8015fc8:	b110      	cbz	r0, 8015fd0 <rcl_node_get_namespace+0xc>
 8015fca:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8015fcc:	b100      	cbz	r0, 8015fd0 <rcl_node_get_namespace+0xc>
 8015fce:	68c0      	ldr	r0, [r0, #12]
 8015fd0:	4770      	bx	lr
 8015fd2:	bf00      	nop

08015fd4 <rcl_node_get_options>:
 8015fd4:	b128      	cbz	r0, 8015fe2 <rcl_node_get_options+0xe>
 8015fd6:	6840      	ldr	r0, [r0, #4]
 8015fd8:	b118      	cbz	r0, 8015fe2 <rcl_node_get_options+0xe>
 8015fda:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	bf08      	it	eq
 8015fe0:	2000      	moveq	r0, #0
 8015fe2:	4770      	bx	lr

08015fe4 <rcl_node_get_rmw_handle>:
 8015fe4:	b110      	cbz	r0, 8015fec <rcl_node_get_rmw_handle+0x8>
 8015fe6:	6840      	ldr	r0, [r0, #4]
 8015fe8:	b100      	cbz	r0, 8015fec <rcl_node_get_rmw_handle+0x8>
 8015fea:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8015fec:	4770      	bx	lr
 8015fee:	bf00      	nop

08015ff0 <rcl_get_disable_loaned_message>:
 8015ff0:	b510      	push	{r4, lr}
 8015ff2:	2300      	movs	r3, #0
 8015ff4:	b082      	sub	sp, #8
 8015ff6:	9301      	str	r3, [sp, #4]
 8015ff8:	b1a0      	cbz	r0, 8016024 <rcl_get_disable_loaned_message+0x34>
 8015ffa:	4604      	mov	r4, r0
 8015ffc:	a901      	add	r1, sp, #4
 8015ffe:	480b      	ldr	r0, [pc, #44]	; (801602c <rcl_get_disable_loaned_message+0x3c>)
 8016000:	f002 fdb6 	bl	8018b70 <rcutils_get_env>
 8016004:	b110      	cbz	r0, 801600c <rcl_get_disable_loaned_message+0x1c>
 8016006:	2001      	movs	r0, #1
 8016008:	b002      	add	sp, #8
 801600a:	bd10      	pop	{r4, pc}
 801600c:	9a01      	ldr	r2, [sp, #4]
 801600e:	2000      	movs	r0, #0
 8016010:	7813      	ldrb	r3, [r2, #0]
 8016012:	3b31      	subs	r3, #49	; 0x31
 8016014:	bf08      	it	eq
 8016016:	7853      	ldrbeq	r3, [r2, #1]
 8016018:	fab3 f383 	clz	r3, r3
 801601c:	095b      	lsrs	r3, r3, #5
 801601e:	7023      	strb	r3, [r4, #0]
 8016020:	b002      	add	sp, #8
 8016022:	bd10      	pop	{r4, pc}
 8016024:	200b      	movs	r0, #11
 8016026:	b002      	add	sp, #8
 8016028:	bd10      	pop	{r4, pc}
 801602a:	bf00      	nop
 801602c:	0801fdd0 	.word	0x0801fdd0

08016030 <rcl_node_get_default_options>:
 8016030:	b510      	push	{r4, lr}
 8016032:	4604      	mov	r4, r0
 8016034:	2270      	movs	r2, #112	; 0x70
 8016036:	2100      	movs	r1, #0
 8016038:	f007 fbf0 	bl	801d81c <memset>
 801603c:	4620      	mov	r0, r4
 801603e:	f7f8 fcc9 	bl	800e9d4 <rcutils_get_default_allocator>
 8016042:	2301      	movs	r3, #1
 8016044:	4620      	mov	r0, r4
 8016046:	7523      	strb	r3, [r4, #20]
 8016048:	bd10      	pop	{r4, pc}
 801604a:	bf00      	nop

0801604c <rcl_node_options_copy>:
 801604c:	2800      	cmp	r0, #0
 801604e:	bf18      	it	ne
 8016050:	4288      	cmpne	r0, r1
 8016052:	d01b      	beq.n	801608c <rcl_node_options_copy+0x40>
 8016054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016056:	fab1 f681 	clz	r6, r1
 801605a:	460c      	mov	r4, r1
 801605c:	0976      	lsrs	r6, r6, #5
 801605e:	b199      	cbz	r1, 8016088 <rcl_node_options_copy+0x3c>
 8016060:	4605      	mov	r5, r0
 8016062:	8a87      	ldrh	r7, [r0, #20]
 8016064:	4684      	mov	ip, r0
 8016066:	468e      	mov	lr, r1
 8016068:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801606a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801606e:	682b      	ldr	r3, [r5, #0]
 8016070:	2250      	movs	r2, #80	; 0x50
 8016072:	f10c 0118 	add.w	r1, ip, #24
 8016076:	f104 0018 	add.w	r0, r4, #24
 801607a:	f8ce 3000 	str.w	r3, [lr]
 801607e:	82a7      	strh	r7, [r4, #20]
 8016080:	f007 fcfd 	bl	801da7e <memcpy>
 8016084:	4630      	mov	r0, r6
 8016086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016088:	200b      	movs	r0, #11
 801608a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801608c:	200b      	movs	r0, #11
 801608e:	4770      	bx	lr

08016090 <rcl_node_resolve_name>:
 8016090:	b082      	sub	sp, #8
 8016092:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016096:	b091      	sub	sp, #68	; 0x44
 8016098:	ac1a      	add	r4, sp, #104	; 0x68
 801609a:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 801609e:	e884 000c 	stmia.w	r4, {r2, r3}
 80160a2:	2800      	cmp	r0, #0
 80160a4:	d03d      	beq.n	8016122 <rcl_node_resolve_name+0x92>
 80160a6:	460c      	mov	r4, r1
 80160a8:	4605      	mov	r5, r0
 80160aa:	f7ff ff93 	bl	8015fd4 <rcl_node_get_options>
 80160ae:	2800      	cmp	r0, #0
 80160b0:	d03a      	beq.n	8016128 <rcl_node_resolve_name+0x98>
 80160b2:	4628      	mov	r0, r5
 80160b4:	f7ff ff7e 	bl	8015fb4 <rcl_node_get_name>
 80160b8:	4606      	mov	r6, r0
 80160ba:	4628      	mov	r0, r5
 80160bc:	ad0b      	add	r5, sp, #44	; 0x2c
 80160be:	f7ff ff81 	bl	8015fc4 <rcl_node_get_namespace>
 80160c2:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 80160c6:	4607      	mov	r7, r0
 80160c8:	46ac      	mov	ip, r5
 80160ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80160ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80160d2:	f8de 3000 	ldr.w	r3, [lr]
 80160d6:	f8cc 3000 	str.w	r3, [ip]
 80160da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80160dc:	b30b      	cbz	r3, 8016122 <rcl_node_resolve_name+0x92>
 80160de:	4689      	mov	r9, r1
 80160e0:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80160e4:	f002 feee 	bl	8018ec4 <rcutils_get_zero_initialized_string_map>
 80160e8:	ab10      	add	r3, sp, #64	; 0x40
 80160ea:	9008      	str	r0, [sp, #32]
 80160ec:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80160f0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80160f4:	2100      	movs	r1, #0
 80160f6:	a808      	add	r0, sp, #32
 80160f8:	e895 000c 	ldmia.w	r5, {r2, r3}
 80160fc:	f002 ff34 	bl	8018f68 <rcutils_string_map_init>
 8016100:	4683      	mov	fp, r0
 8016102:	b1a0      	cbz	r0, 801612e <rcl_node_resolve_name+0x9e>
 8016104:	f7f8 fc82 	bl	800ea0c <rcutils_get_error_string>
 8016108:	f7f8 fc96 	bl	800ea38 <rcutils_reset_error>
 801610c:	f1bb 0f0a 	cmp.w	fp, #10
 8016110:	bf18      	it	ne
 8016112:	f04f 0b01 	movne.w	fp, #1
 8016116:	4658      	mov	r0, fp
 8016118:	b011      	add	sp, #68	; 0x44
 801611a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801611e:	b002      	add	sp, #8
 8016120:	4770      	bx	lr
 8016122:	f04f 0b0b 	mov.w	fp, #11
 8016126:	e7f6      	b.n	8016116 <rcl_node_resolve_name+0x86>
 8016128:	f04f 0b01 	mov.w	fp, #1
 801612c:	e7f3      	b.n	8016116 <rcl_node_resolve_name+0x86>
 801612e:	9009      	str	r0, [sp, #36]	; 0x24
 8016130:	9007      	str	r0, [sp, #28]
 8016132:	a808      	add	r0, sp, #32
 8016134:	f006 fb62 	bl	801c7fc <rcl_get_default_topic_name_substitutions>
 8016138:	4683      	mov	fp, r0
 801613a:	b180      	cbz	r0, 801615e <rcl_node_resolve_name+0xce>
 801613c:	280a      	cmp	r0, #10
 801613e:	a808      	add	r0, sp, #32
 8016140:	bf18      	it	ne
 8016142:	f04f 0b01 	movne.w	fp, #1
 8016146:	f002 ff4d 	bl	8018fe4 <rcutils_string_map_fini>
 801614a:	4604      	mov	r4, r0
 801614c:	2800      	cmp	r0, #0
 801614e:	d15b      	bne.n	8016208 <rcl_node_resolve_name+0x178>
 8016150:	4651      	mov	r1, sl
 8016152:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016154:	47c8      	blx	r9
 8016156:	4651      	mov	r1, sl
 8016158:	4620      	mov	r0, r4
 801615a:	47c8      	blx	r9
 801615c:	e7db      	b.n	8016116 <rcl_node_resolve_name+0x86>
 801615e:	ab09      	add	r3, sp, #36	; 0x24
 8016160:	46ec      	mov	ip, sp
 8016162:	9305      	str	r3, [sp, #20]
 8016164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016166:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801616a:	682b      	ldr	r3, [r5, #0]
 801616c:	463a      	mov	r2, r7
 801616e:	4631      	mov	r1, r6
 8016170:	4620      	mov	r0, r4
 8016172:	f8cc 3000 	str.w	r3, [ip]
 8016176:	ab08      	add	r3, sp, #32
 8016178:	f006 f9e0 	bl	801c53c <rcl_expand_topic_name>
 801617c:	4683      	mov	fp, r0
 801617e:	b9d8      	cbnz	r0, 80161b8 <rcl_node_resolve_name+0x128>
 8016180:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016182:	4602      	mov	r2, r0
 8016184:	9009      	str	r0, [sp, #36]	; 0x24
 8016186:	a90a      	add	r1, sp, #40	; 0x28
 8016188:	4620      	mov	r0, r4
 801618a:	f003 f87d 	bl	8019288 <rmw_validate_full_topic_name>
 801618e:	bb50      	cbnz	r0, 80161e6 <rcl_node_resolve_name+0x156>
 8016190:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016192:	2d00      	cmp	r5, #0
 8016194:	d140      	bne.n	8016218 <rcl_node_resolve_name+0x188>
 8016196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016198:	a808      	add	r0, sp, #32
 801619a:	601c      	str	r4, [r3, #0]
 801619c:	f002 ff22 	bl	8018fe4 <rcutils_string_map_fini>
 80161a0:	4683      	mov	fp, r0
 80161a2:	2800      	cmp	r0, #0
 80161a4:	d043      	beq.n	801622e <rcl_node_resolve_name+0x19e>
 80161a6:	f7f8 fc31 	bl	800ea0c <rcutils_get_error_string>
 80161aa:	46a8      	mov	r8, r5
 80161ac:	f04f 0b01 	mov.w	fp, #1
 80161b0:	462c      	mov	r4, r5
 80161b2:	f7f8 fc41 	bl	800ea38 <rcutils_reset_error>
 80161b6:	e00a      	b.n	80161ce <rcl_node_resolve_name+0x13e>
 80161b8:	2867      	cmp	r0, #103	; 0x67
 80161ba:	bf14      	ite	ne
 80161bc:	f04f 0800 	movne.w	r8, #0
 80161c0:	f008 0801 	andeq.w	r8, r8, #1
 80161c4:	9c07      	ldr	r4, [sp, #28]
 80161c6:	a808      	add	r0, sp, #32
 80161c8:	f002 ff0c 	bl	8018fe4 <rcutils_string_map_fini>
 80161cc:	bb50      	cbnz	r0, 8016224 <rcl_node_resolve_name+0x194>
 80161ce:	4651      	mov	r1, sl
 80161d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80161d2:	47c8      	blx	r9
 80161d4:	4651      	mov	r1, sl
 80161d6:	4620      	mov	r0, r4
 80161d8:	47c8      	blx	r9
 80161da:	f1b8 0f00 	cmp.w	r8, #0
 80161de:	bf18      	it	ne
 80161e0:	f04f 0b68 	movne.w	fp, #104	; 0x68
 80161e4:	e797      	b.n	8016116 <rcl_node_resolve_name+0x86>
 80161e6:	f7f8 fc11 	bl	800ea0c <rcutils_get_error_string>
 80161ea:	f7f8 fc25 	bl	800ea38 <rcutils_reset_error>
 80161ee:	a808      	add	r0, sp, #32
 80161f0:	f002 fef8 	bl	8018fe4 <rcutils_string_map_fini>
 80161f4:	b998      	cbnz	r0, 801621e <rcl_node_resolve_name+0x18e>
 80161f6:	4651      	mov	r1, sl
 80161f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80161fa:	47c8      	blx	r9
 80161fc:	4651      	mov	r1, sl
 80161fe:	4620      	mov	r0, r4
 8016200:	f04f 0b01 	mov.w	fp, #1
 8016204:	47c8      	blx	r9
 8016206:	e786      	b.n	8016116 <rcl_node_resolve_name+0x86>
 8016208:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801620c:	f7f8 fbfe 	bl	800ea0c <rcutils_get_error_string>
 8016210:	f7f8 fc12 	bl	800ea38 <rcutils_reset_error>
 8016214:	4644      	mov	r4, r8
 8016216:	e7da      	b.n	80161ce <rcl_node_resolve_name+0x13e>
 8016218:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801621c:	e7d3      	b.n	80161c6 <rcl_node_resolve_name+0x136>
 801621e:	46d8      	mov	r8, fp
 8016220:	f04f 0b01 	mov.w	fp, #1
 8016224:	f7f8 fbf2 	bl	800ea0c <rcutils_get_error_string>
 8016228:	f7f8 fc06 	bl	800ea38 <rcutils_reset_error>
 801622c:	e7cf      	b.n	80161ce <rcl_node_resolve_name+0x13e>
 801622e:	4651      	mov	r1, sl
 8016230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016232:	47c8      	blx	r9
 8016234:	4651      	mov	r1, sl
 8016236:	4658      	mov	r0, fp
 8016238:	47c8      	blx	r9
 801623a:	e76c      	b.n	8016116 <rcl_node_resolve_name+0x86>

0801623c <exact_match_lookup>:
 801623c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801623e:	f102 0708 	add.w	r7, r2, #8
 8016242:	460b      	mov	r3, r1
 8016244:	b085      	sub	sp, #20
 8016246:	4614      	mov	r4, r2
 8016248:	4606      	mov	r6, r0
 801624a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801624e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016252:	4618      	mov	r0, r3
 8016254:	4919      	ldr	r1, [pc, #100]	; (80162bc <exact_match_lookup+0x80>)
 8016256:	e894 000c 	ldmia.w	r4, {r2, r3}
 801625a:	f002 fca3 	bl	8018ba4 <rcutils_join_path>
 801625e:	7833      	ldrb	r3, [r6, #0]
 8016260:	4605      	mov	r5, r0
 8016262:	2b2f      	cmp	r3, #47	; 0x2f
 8016264:	d023      	beq.n	80162ae <exact_match_lookup+0x72>
 8016266:	f104 030c 	add.w	r3, r4, #12
 801626a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801626e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016272:	1c70      	adds	r0, r6, #1
 8016274:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016278:	f002 fc9a 	bl	8018bb0 <rcutils_to_native_path>
 801627c:	4606      	mov	r6, r0
 801627e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8016282:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016286:	4631      	mov	r1, r6
 8016288:	4628      	mov	r0, r5
 801628a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801628e:	f002 fc89 	bl	8018ba4 <rcutils_join_path>
 8016292:	4603      	mov	r3, r0
 8016294:	4630      	mov	r0, r6
 8016296:	6862      	ldr	r2, [r4, #4]
 8016298:	461e      	mov	r6, r3
 801629a:	6921      	ldr	r1, [r4, #16]
 801629c:	4790      	blx	r2
 801629e:	4628      	mov	r0, r5
 80162a0:	4635      	mov	r5, r6
 80162a2:	6863      	ldr	r3, [r4, #4]
 80162a4:	6921      	ldr	r1, [r4, #16]
 80162a6:	4798      	blx	r3
 80162a8:	4628      	mov	r0, r5
 80162aa:	b005      	add	sp, #20
 80162ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162ae:	7873      	ldrb	r3, [r6, #1]
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d1d8      	bne.n	8016266 <exact_match_lookup+0x2a>
 80162b4:	4628      	mov	r0, r5
 80162b6:	b005      	add	sp, #20
 80162b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162ba:	bf00      	nop
 80162bc:	0801fe30 	.word	0x0801fe30

080162c0 <rcl_get_secure_root>:
 80162c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80162c4:	b085      	sub	sp, #20
 80162c6:	b168      	cbz	r0, 80162e4 <rcl_get_secure_root+0x24>
 80162c8:	4607      	mov	r7, r0
 80162ca:	4608      	mov	r0, r1
 80162cc:	460c      	mov	r4, r1
 80162ce:	f7f8 fb8f 	bl	800e9f0 <rcutils_allocator_is_valid>
 80162d2:	b138      	cbz	r0, 80162e4 <rcl_get_secure_root+0x24>
 80162d4:	2300      	movs	r3, #0
 80162d6:	482d      	ldr	r0, [pc, #180]	; (801638c <rcl_get_secure_root+0xcc>)
 80162d8:	a903      	add	r1, sp, #12
 80162da:	9303      	str	r3, [sp, #12]
 80162dc:	f002 fc48 	bl	8018b70 <rcutils_get_env>
 80162e0:	4605      	mov	r5, r0
 80162e2:	b120      	cbz	r0, 80162ee <rcl_get_secure_root+0x2e>
 80162e4:	2500      	movs	r5, #0
 80162e6:	4628      	mov	r0, r5
 80162e8:	b005      	add	sp, #20
 80162ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80162ee:	9b03      	ldr	r3, [sp, #12]
 80162f0:	781a      	ldrb	r2, [r3, #0]
 80162f2:	2a00      	cmp	r2, #0
 80162f4:	d0f6      	beq.n	80162e4 <rcl_get_secure_root+0x24>
 80162f6:	f104 090c 	add.w	r9, r4, #12
 80162fa:	e899 0003 	ldmia.w	r9, {r0, r1}
 80162fe:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016302:	4618      	mov	r0, r3
 8016304:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016308:	f002 fd94 	bl	8018e34 <rcutils_strdup>
 801630c:	4680      	mov	r8, r0
 801630e:	2800      	cmp	r0, #0
 8016310:	d0e8      	beq.n	80162e4 <rcl_get_secure_root+0x24>
 8016312:	a903      	add	r1, sp, #12
 8016314:	481e      	ldr	r0, [pc, #120]	; (8016390 <rcl_get_secure_root+0xd0>)
 8016316:	9503      	str	r5, [sp, #12]
 8016318:	f002 fc2a 	bl	8018b70 <rcutils_get_env>
 801631c:	b160      	cbz	r0, 8016338 <rcl_get_secure_root+0x78>
 801631e:	2600      	movs	r6, #0
 8016320:	4630      	mov	r0, r6
 8016322:	6863      	ldr	r3, [r4, #4]
 8016324:	6921      	ldr	r1, [r4, #16]
 8016326:	4798      	blx	r3
 8016328:	4640      	mov	r0, r8
 801632a:	6863      	ldr	r3, [r4, #4]
 801632c:	6921      	ldr	r1, [r4, #16]
 801632e:	4798      	blx	r3
 8016330:	4628      	mov	r0, r5
 8016332:	b005      	add	sp, #20
 8016334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016338:	9b03      	ldr	r3, [sp, #12]
 801633a:	781e      	ldrb	r6, [r3, #0]
 801633c:	b1f6      	cbz	r6, 801637c <rcl_get_secure_root+0xbc>
 801633e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016342:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016346:	4618      	mov	r0, r3
 8016348:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801634c:	f002 fd72 	bl	8018e34 <rcutils_strdup>
 8016350:	4606      	mov	r6, r0
 8016352:	2800      	cmp	r0, #0
 8016354:	d0e3      	beq.n	801631e <rcl_get_secure_root+0x5e>
 8016356:	4622      	mov	r2, r4
 8016358:	4641      	mov	r1, r8
 801635a:	f7ff ff6f 	bl	801623c <exact_match_lookup>
 801635e:	4605      	mov	r5, r0
 8016360:	2d00      	cmp	r5, #0
 8016362:	d0dd      	beq.n	8016320 <rcl_get_secure_root+0x60>
 8016364:	4628      	mov	r0, r5
 8016366:	f002 fc1b 	bl	8018ba0 <rcutils_is_directory>
 801636a:	4603      	mov	r3, r0
 801636c:	2800      	cmp	r0, #0
 801636e:	d1d7      	bne.n	8016320 <rcl_get_secure_root+0x60>
 8016370:	4628      	mov	r0, r5
 8016372:	6921      	ldr	r1, [r4, #16]
 8016374:	461d      	mov	r5, r3
 8016376:	6863      	ldr	r3, [r4, #4]
 8016378:	4798      	blx	r3
 801637a:	e7d1      	b.n	8016320 <rcl_get_secure_root+0x60>
 801637c:	4622      	mov	r2, r4
 801637e:	4638      	mov	r0, r7
 8016380:	4641      	mov	r1, r8
 8016382:	f7ff ff5b 	bl	801623c <exact_match_lookup>
 8016386:	4605      	mov	r5, r0
 8016388:	e7ea      	b.n	8016360 <rcl_get_secure_root+0xa0>
 801638a:	bf00      	nop
 801638c:	0801fe3c 	.word	0x0801fe3c
 8016390:	0801fe54 	.word	0x0801fe54

08016394 <rcl_get_security_options_from_environment>:
 8016394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016398:	b082      	sub	sp, #8
 801639a:	2300      	movs	r3, #0
 801639c:	4606      	mov	r6, r0
 801639e:	460f      	mov	r7, r1
 80163a0:	4821      	ldr	r0, [pc, #132]	; (8016428 <rcl_get_security_options_from_environment+0x94>)
 80163a2:	a901      	add	r1, sp, #4
 80163a4:	4690      	mov	r8, r2
 80163a6:	9301      	str	r3, [sp, #4]
 80163a8:	f002 fbe2 	bl	8018b70 <rcutils_get_env>
 80163ac:	b120      	cbz	r0, 80163b8 <rcl_get_security_options_from_environment+0x24>
 80163ae:	2501      	movs	r5, #1
 80163b0:	4628      	mov	r0, r5
 80163b2:	b002      	add	sp, #8
 80163b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163b8:	4604      	mov	r4, r0
 80163ba:	491c      	ldr	r1, [pc, #112]	; (801642c <rcl_get_security_options_from_environment+0x98>)
 80163bc:	9801      	ldr	r0, [sp, #4]
 80163be:	f7e9 ff3f 	bl	8000240 <strcmp>
 80163c2:	4605      	mov	r5, r0
 80163c4:	b9f0      	cbnz	r0, 8016404 <rcl_get_security_options_from_environment+0x70>
 80163c6:	9001      	str	r0, [sp, #4]
 80163c8:	f1b8 0f00 	cmp.w	r8, #0
 80163cc:	d021      	beq.n	8016412 <rcl_get_security_options_from_environment+0x7e>
 80163ce:	a901      	add	r1, sp, #4
 80163d0:	4817      	ldr	r0, [pc, #92]	; (8016430 <rcl_get_security_options_from_environment+0x9c>)
 80163d2:	f002 fbcd 	bl	8018b70 <rcutils_get_env>
 80163d6:	2800      	cmp	r0, #0
 80163d8:	d1e9      	bne.n	80163ae <rcl_get_security_options_from_environment+0x1a>
 80163da:	4916      	ldr	r1, [pc, #88]	; (8016434 <rcl_get_security_options_from_environment+0xa0>)
 80163dc:	9801      	ldr	r0, [sp, #4]
 80163de:	f7e9 ff2f 	bl	8000240 <strcmp>
 80163e2:	4603      	mov	r3, r0
 80163e4:	4639      	mov	r1, r7
 80163e6:	4630      	mov	r0, r6
 80163e8:	fab3 f383 	clz	r3, r3
 80163ec:	095b      	lsrs	r3, r3, #5
 80163ee:	f888 3000 	strb.w	r3, [r8]
 80163f2:	f7ff ff65 	bl	80162c0 <rcl_get_secure_root>
 80163f6:	b170      	cbz	r0, 8016416 <rcl_get_security_options_from_environment+0x82>
 80163f8:	f8c8 0004 	str.w	r0, [r8, #4]
 80163fc:	4628      	mov	r0, r5
 80163fe:	b002      	add	sp, #8
 8016400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016404:	4625      	mov	r5, r4
 8016406:	f888 4000 	strb.w	r4, [r8]
 801640a:	4628      	mov	r0, r5
 801640c:	b002      	add	sp, #8
 801640e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016412:	250b      	movs	r5, #11
 8016414:	e7cc      	b.n	80163b0 <rcl_get_security_options_from_environment+0x1c>
 8016416:	f898 5000 	ldrb.w	r5, [r8]
 801641a:	f1a5 0501 	sub.w	r5, r5, #1
 801641e:	fab5 f585 	clz	r5, r5
 8016422:	096d      	lsrs	r5, r5, #5
 8016424:	e7c4      	b.n	80163b0 <rcl_get_security_options_from_environment+0x1c>
 8016426:	bf00      	nop
 8016428:	0801fdf4 	.word	0x0801fdf4
 801642c:	0801fe08 	.word	0x0801fe08
 8016430:	0801fe10 	.word	0x0801fe10
 8016434:	0801fe28 	.word	0x0801fe28

08016438 <rcl_get_zero_initialized_service>:
 8016438:	4b01      	ldr	r3, [pc, #4]	; (8016440 <rcl_get_zero_initialized_service+0x8>)
 801643a:	6818      	ldr	r0, [r3, #0]
 801643c:	4770      	bx	lr
 801643e:	bf00      	nop
 8016440:	0801fe74 	.word	0x0801fe74

08016444 <rcl_service_init>:
 8016444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016448:	b086      	sub	sp, #24
 801644a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801644c:	2d00      	cmp	r5, #0
 801644e:	d04d      	beq.n	80164ec <rcl_service_init+0xa8>
 8016450:	f105 0950 	add.w	r9, r5, #80	; 0x50
 8016454:	4604      	mov	r4, r0
 8016456:	460e      	mov	r6, r1
 8016458:	4690      	mov	r8, r2
 801645a:	4648      	mov	r0, r9
 801645c:	461f      	mov	r7, r3
 801645e:	f7f8 fac7 	bl	800e9f0 <rcutils_allocator_is_valid>
 8016462:	2c00      	cmp	r4, #0
 8016464:	d042      	beq.n	80164ec <rcl_service_init+0xa8>
 8016466:	f080 0001 	eor.w	r0, r0, #1
 801646a:	b2c0      	uxtb	r0, r0
 801646c:	2800      	cmp	r0, #0
 801646e:	d13d      	bne.n	80164ec <rcl_service_init+0xa8>
 8016470:	4630      	mov	r0, r6
 8016472:	f7ff fd95 	bl	8015fa0 <rcl_node_is_valid>
 8016476:	2800      	cmp	r0, #0
 8016478:	d042      	beq.n	8016500 <rcl_service_init+0xbc>
 801647a:	2f00      	cmp	r7, #0
 801647c:	d036      	beq.n	80164ec <rcl_service_init+0xa8>
 801647e:	f1b8 0f00 	cmp.w	r8, #0
 8016482:	d033      	beq.n	80164ec <rcl_service_init+0xa8>
 8016484:	f8d4 a000 	ldr.w	sl, [r4]
 8016488:	f1ba 0f00 	cmp.w	sl, #0
 801648c:	d133      	bne.n	80164f6 <rcl_service_init+0xb2>
 801648e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8016492:	2001      	movs	r0, #1
 8016494:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	; 0x5c
 8016498:	4798      	blx	r3
 801649a:	6020      	str	r0, [r4, #0]
 801649c:	2800      	cmp	r0, #0
 801649e:	d075      	beq.n	801658c <rcl_service_init+0x148>
 80164a0:	f500 7088 	add.w	r0, r0, #272	; 0x110
 80164a4:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80164a8:	2201      	movs	r2, #1
 80164aa:	f8cd a010 	str.w	sl, [sp, #16]
 80164ae:	9005      	str	r0, [sp, #20]
 80164b0:	9203      	str	r2, [sp, #12]
 80164b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80164b6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80164ba:	4639      	mov	r1, r7
 80164bc:	4630      	mov	r0, r6
 80164be:	e899 000c 	ldmia.w	r9, {r2, r3}
 80164c2:	f7ff fde5 	bl	8016090 <rcl_node_resolve_name>
 80164c6:	4607      	mov	r7, r0
 80164c8:	b1f8      	cbz	r0, 801650a <rcl_service_init+0xc6>
 80164ca:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 80164ce:	6820      	ldr	r0, [r4, #0]
 80164d0:	2b01      	cmp	r3, #1
 80164d2:	d943      	bls.n	801655c <rcl_service_init+0x118>
 80164d4:	2f0a      	cmp	r7, #10
 80164d6:	d000      	beq.n	80164da <rcl_service_init+0x96>
 80164d8:	2701      	movs	r7, #1
 80164da:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80164dc:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80164de:	4798      	blx	r3
 80164e0:	2300      	movs	r3, #0
 80164e2:	4638      	mov	r0, r7
 80164e4:	6023      	str	r3, [r4, #0]
 80164e6:	b006      	add	sp, #24
 80164e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164ec:	270b      	movs	r7, #11
 80164ee:	4638      	mov	r0, r7
 80164f0:	b006      	add	sp, #24
 80164f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164f6:	2764      	movs	r7, #100	; 0x64
 80164f8:	4638      	mov	r0, r7
 80164fa:	b006      	add	sp, #24
 80164fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016500:	27c8      	movs	r7, #200	; 0xc8
 8016502:	4638      	mov	r0, r7
 8016504:	b006      	add	sp, #24
 8016506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801650a:	4630      	mov	r0, r6
 801650c:	f7ff fd6a 	bl	8015fe4 <rcl_node_get_rmw_handle>
 8016510:	6827      	ldr	r7, [r4, #0]
 8016512:	4641      	mov	r1, r8
 8016514:	462b      	mov	r3, r5
 8016516:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801651a:	f003 fd9f 	bl	801a05c <rmw_create_service>
 801651e:	6821      	ldr	r1, [r4, #0]
 8016520:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8016524:	f8d1 0108 	ldr.w	r0, [r1, #264]	; 0x108
 8016528:	b390      	cbz	r0, 8016590 <rcl_service_init+0x14c>
 801652a:	3168      	adds	r1, #104	; 0x68
 801652c:	f003 fec8 	bl	801a2c0 <rmw_service_request_subscription_get_actual_qos>
 8016530:	b9b0      	cbnz	r0, 8016560 <rcl_service_init+0x11c>
 8016532:	6823      	ldr	r3, [r4, #0]
 8016534:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8016538:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801653c:	f003 feac 	bl	801a298 <rmw_service_response_publisher_get_actual_qos>
 8016540:	4607      	mov	r7, r0
 8016542:	b968      	cbnz	r0, 8016560 <rcl_service_init+0x11c>
 8016544:	6820      	ldr	r0, [r4, #0]
 8016546:	2268      	movs	r2, #104	; 0x68
 8016548:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 801654c:	4629      	mov	r1, r5
 801654e:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 8016552:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
 8016556:	f007 fa92 	bl	801da7e <memcpy>
 801655a:	e7c8      	b.n	80164ee <rcl_service_init+0xaa>
 801655c:	2768      	movs	r7, #104	; 0x68
 801655e:	e7bc      	b.n	80164da <rcl_service_init+0x96>
 8016560:	f7ff f904 	bl	801576c <rcl_convert_rmw_ret_to_rcl_ret>
 8016564:	4607      	mov	r7, r0
 8016566:	4630      	mov	r0, r6
 8016568:	f7ff fd3c 	bl	8015fe4 <rcl_node_get_rmw_handle>
 801656c:	6823      	ldr	r3, [r4, #0]
 801656e:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8016572:	f003 fe4d 	bl	801a210 <rmw_destroy_service>
 8016576:	6821      	ldr	r1, [r4, #0]
 8016578:	f8d1 0110 	ldr.w	r0, [r1, #272]	; 0x110
 801657c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 801657e:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8016580:	4798      	blx	r3
 8016582:	6820      	ldr	r0, [r4, #0]
 8016584:	2300      	movs	r3, #0
 8016586:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 801658a:	e7a6      	b.n	80164da <rcl_service_init+0x96>
 801658c:	270a      	movs	r7, #10
 801658e:	e7ae      	b.n	80164ee <rcl_service_init+0xaa>
 8016590:	2701      	movs	r7, #1
 8016592:	e7f1      	b.n	8016578 <rcl_service_init+0x134>

08016594 <rcl_service_get_default_options>:
 8016594:	b530      	push	{r4, r5, lr}
 8016596:	4d0f      	ldr	r5, [pc, #60]	; (80165d4 <rcl_service_get_default_options+0x40>)
 8016598:	b087      	sub	sp, #28
 801659a:	4604      	mov	r4, r0
 801659c:	2250      	movs	r2, #80	; 0x50
 801659e:	490e      	ldr	r1, [pc, #56]	; (80165d8 <rcl_service_get_default_options+0x44>)
 80165a0:	4628      	mov	r0, r5
 80165a2:	f007 fa6c 	bl	801da7e <memcpy>
 80165a6:	4668      	mov	r0, sp
 80165a8:	f7f8 fa14 	bl	800e9d4 <rcutils_get_default_allocator>
 80165ac:	46ec      	mov	ip, sp
 80165ae:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 80165b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80165b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80165ba:	f8dc 3000 	ldr.w	r3, [ip]
 80165be:	2268      	movs	r2, #104	; 0x68
 80165c0:	4629      	mov	r1, r5
 80165c2:	4620      	mov	r0, r4
 80165c4:	f8ce 3000 	str.w	r3, [lr]
 80165c8:	f007 fa59 	bl	801da7e <memcpy>
 80165cc:	4620      	mov	r0, r4
 80165ce:	b007      	add	sp, #28
 80165d0:	bd30      	pop	{r4, r5, pc}
 80165d2:	bf00      	nop
 80165d4:	20010ac8 	.word	0x20010ac8
 80165d8:	0801fe78 	.word	0x0801fe78

080165dc <rcl_service_get_rmw_handle>:
 80165dc:	b118      	cbz	r0, 80165e6 <rcl_service_get_rmw_handle+0xa>
 80165de:	6800      	ldr	r0, [r0, #0]
 80165e0:	b108      	cbz	r0, 80165e6 <rcl_service_get_rmw_handle+0xa>
 80165e2:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 80165e6:	4770      	bx	lr

080165e8 <rcl_take_request>:
 80165e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165ea:	468e      	mov	lr, r1
 80165ec:	b091      	sub	sp, #68	; 0x44
 80165ee:	460c      	mov	r4, r1
 80165f0:	4617      	mov	r7, r2
 80165f2:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 80165f6:	4605      	mov	r5, r0
 80165f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80165fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016600:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016604:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016608:	b30d      	cbz	r5, 801664e <rcl_take_request+0x66>
 801660a:	682b      	ldr	r3, [r5, #0]
 801660c:	b1fb      	cbz	r3, 801664e <rcl_take_request+0x66>
 801660e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8016612:	b1e0      	cbz	r0, 801664e <rcl_take_request+0x66>
 8016614:	b397      	cbz	r7, 801667c <rcl_take_request+0x94>
 8016616:	2300      	movs	r3, #0
 8016618:	463a      	mov	r2, r7
 801661a:	a906      	add	r1, sp, #24
 801661c:	f88d 3017 	strb.w	r3, [sp, #23]
 8016620:	f10d 0317 	add.w	r3, sp, #23
 8016624:	f003 fc18 	bl	8019e58 <rmw_take_request>
 8016628:	4606      	mov	r6, r0
 801662a:	b198      	cbz	r0, 8016654 <rcl_take_request+0x6c>
 801662c:	280a      	cmp	r0, #10
 801662e:	bf18      	it	ne
 8016630:	2601      	movne	r6, #1
 8016632:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8016636:	46a6      	mov	lr, r4
 8016638:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801663c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016640:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8016644:	e88e 0003 	stmia.w	lr, {r0, r1}
 8016648:	4630      	mov	r0, r6
 801664a:	b011      	add	sp, #68	; 0x44
 801664c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801664e:	f44f 7616 	mov.w	r6, #600	; 0x258
 8016652:	e7ee      	b.n	8016632 <rcl_take_request+0x4a>
 8016654:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8016658:	b193      	cbz	r3, 8016680 <rcl_take_request+0x98>
 801665a:	682b      	ldr	r3, [r5, #0]
 801665c:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 8016660:	2800      	cmp	r0, #0
 8016662:	d0e6      	beq.n	8016632 <rcl_take_request+0x4a>
 8016664:	463a      	mov	r2, r7
 8016666:	ab0a      	add	r3, sp, #40	; 0x28
 8016668:	2101      	movs	r1, #1
 801666a:	9302      	str	r3, [sp, #8]
 801666c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8016670:	e9cd 6700 	strd	r6, r7, [sp]
 8016674:	f000 f844 	bl	8016700 <rcl_send_service_event_message>
 8016678:	4606      	mov	r6, r0
 801667a:	e7da      	b.n	8016632 <rcl_take_request+0x4a>
 801667c:	260b      	movs	r6, #11
 801667e:	e7d8      	b.n	8016632 <rcl_take_request+0x4a>
 8016680:	f240 2659 	movw	r6, #601	; 0x259
 8016684:	e7d5      	b.n	8016632 <rcl_take_request+0x4a>
 8016686:	bf00      	nop

08016688 <rcl_send_response>:
 8016688:	b350      	cbz	r0, 80166e0 <rcl_send_response+0x58>
 801668a:	6803      	ldr	r3, [r0, #0]
 801668c:	b570      	push	{r4, r5, r6, lr}
 801668e:	4604      	mov	r4, r0
 8016690:	b084      	sub	sp, #16
 8016692:	b1cb      	cbz	r3, 80166c8 <rcl_send_response+0x40>
 8016694:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8016698:	b1b0      	cbz	r0, 80166c8 <rcl_send_response+0x40>
 801669a:	4615      	mov	r5, r2
 801669c:	b1ea      	cbz	r2, 80166da <rcl_send_response+0x52>
 801669e:	460e      	mov	r6, r1
 80166a0:	b1d9      	cbz	r1, 80166da <rcl_send_response+0x52>
 80166a2:	f003 fc37 	bl	8019f14 <rmw_send_response>
 80166a6:	b998      	cbnz	r0, 80166d0 <rcl_send_response+0x48>
 80166a8:	6823      	ldr	r3, [r4, #0]
 80166aa:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80166ae:	b16b      	cbz	r3, 80166cc <rcl_send_response+0x44>
 80166b0:	462a      	mov	r2, r5
 80166b2:	2102      	movs	r1, #2
 80166b4:	4618      	mov	r0, r3
 80166b6:	ed96 7b04 	vldr	d7, [r6, #16]
 80166ba:	9602      	str	r6, [sp, #8]
 80166bc:	ed8d 7b00 	vstr	d7, [sp]
 80166c0:	f000 f81e 	bl	8016700 <rcl_send_service_event_message>
 80166c4:	b004      	add	sp, #16
 80166c6:	bd70      	pop	{r4, r5, r6, pc}
 80166c8:	f44f 7016 	mov.w	r0, #600	; 0x258
 80166cc:	b004      	add	sp, #16
 80166ce:	bd70      	pop	{r4, r5, r6, pc}
 80166d0:	2802      	cmp	r0, #2
 80166d2:	bf18      	it	ne
 80166d4:	2001      	movne	r0, #1
 80166d6:	b004      	add	sp, #16
 80166d8:	bd70      	pop	{r4, r5, r6, pc}
 80166da:	200b      	movs	r0, #11
 80166dc:	b004      	add	sp, #16
 80166de:	bd70      	pop	{r4, r5, r6, pc}
 80166e0:	f44f 7016 	mov.w	r0, #600	; 0x258
 80166e4:	4770      	bx	lr
 80166e6:	bf00      	nop

080166e8 <rcl_service_is_valid>:
 80166e8:	b130      	cbz	r0, 80166f8 <rcl_service_is_valid+0x10>
 80166ea:	6800      	ldr	r0, [r0, #0]
 80166ec:	b120      	cbz	r0, 80166f8 <rcl_service_is_valid+0x10>
 80166ee:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 80166f2:	3800      	subs	r0, #0
 80166f4:	bf18      	it	ne
 80166f6:	2001      	movne	r0, #1
 80166f8:	4770      	bx	lr
 80166fa:	bf00      	nop
 80166fc:	0000      	movs	r0, r0
	...

08016700 <rcl_send_service_event_message>:
 8016700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016704:	b093      	sub	sp, #76	; 0x4c
 8016706:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8016708:	b196      	cbz	r6, 8016730 <rcl_send_service_event_message+0x30>
 801670a:	4615      	mov	r5, r2
 801670c:	b182      	cbz	r2, 8016730 <rcl_send_service_event_message+0x30>
 801670e:	4604      	mov	r4, r0
 8016710:	b148      	cbz	r0, 8016726 <rcl_send_service_event_message+0x26>
 8016712:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8016716:	b133      	cbz	r3, 8016726 <rcl_send_service_event_message+0x26>
 8016718:	68c0      	ldr	r0, [r0, #12]
 801671a:	460f      	mov	r7, r1
 801671c:	f000 f9f2 	bl	8016b04 <rcl_clock_valid>
 8016720:	b108      	cbz	r0, 8016726 <rcl_send_service_event_message+0x26>
 8016722:	7a23      	ldrb	r3, [r4, #8]
 8016724:	b94b      	cbnz	r3, 801673a <rcl_send_service_event_message+0x3a>
 8016726:	2401      	movs	r4, #1
 8016728:	4620      	mov	r0, r4
 801672a:	b013      	add	sp, #76	; 0x4c
 801672c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016730:	240b      	movs	r4, #11
 8016732:	4620      	mov	r0, r4
 8016734:	b013      	add	sp, #76	; 0x4c
 8016736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801673a:	f104 0e60 	add.w	lr, r4, #96	; 0x60
 801673e:	f10d 0c0c 	add.w	ip, sp, #12
 8016742:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016746:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801674a:	f8de 3000 	ldr.w	r3, [lr]
 801674e:	a803      	add	r0, sp, #12
 8016750:	f8cc 3000 	str.w	r3, [ip]
 8016754:	f7f8 f94c 	bl	800e9f0 <rcutils_allocator_is_valid>
 8016758:	2800      	cmp	r0, #0
 801675a:	d0e9      	beq.n	8016730 <rcl_send_service_event_message+0x30>
 801675c:	6820      	ldr	r0, [r4, #0]
 801675e:	f7f7 f8cd 	bl	800d8fc <rcl_publisher_is_valid>
 8016762:	2800      	cmp	r0, #0
 8016764:	d05e      	beq.n	8016824 <rcl_send_service_event_message+0x124>
 8016766:	4669      	mov	r1, sp
 8016768:	68e0      	ldr	r0, [r4, #12]
 801676a:	f000 fa5d 	bl	8016c28 <rcl_clock_get_now>
 801676e:	4601      	mov	r1, r0
 8016770:	2800      	cmp	r0, #0
 8016772:	d146      	bne.n	8016802 <rcl_send_service_event_message+0x102>
 8016774:	2220      	movs	r2, #32
 8016776:	eb0d 0002 	add.w	r0, sp, r2
 801677a:	f007 f84f 	bl	801d81c <memset>
 801677e:	f88d 7020 	strb.w	r7, [sp, #32]
 8016782:	e9dd 8900 	ldrd	r8, r9, [sp]
 8016786:	a32a      	add	r3, pc, #168	; (adr r3, 8016830 <rcl_send_service_event_message+0x130>)
 8016788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801678c:	4640      	mov	r0, r8
 801678e:	4649      	mov	r1, r9
 8016790:	f7e9 fdbe 	bl	8000310 <__aeabi_ldivmod>
 8016794:	4649      	mov	r1, r9
 8016796:	9009      	str	r0, [sp, #36]	; 0x24
 8016798:	4640      	mov	r0, r8
 801679a:	a325      	add	r3, pc, #148	; (adr r3, 8016830 <rcl_send_service_event_message+0x130>)
 801679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167a0:	f7e9 fdb6 	bl	8000310 <__aeabi_ldivmod>
 80167a4:	920a      	str	r2, [sp, #40]	; 0x28
 80167a6:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 80167aa:	6830      	ldr	r0, [r6, #0]
 80167ac:	6871      	ldr	r1, [r6, #4]
 80167ae:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80167b2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80167b6:	7a23      	ldrb	r3, [r4, #8]
 80167b8:	68b2      	ldr	r2, [r6, #8]
 80167ba:	2b01      	cmp	r3, #1
 80167bc:	68f3      	ldr	r3, [r6, #12]
 80167be:	bf08      	it	eq
 80167c0:	2500      	moveq	r5, #0
 80167c2:	2f01      	cmp	r7, #1
 80167c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80167c8:	d81f      	bhi.n	801680a <rcl_send_service_event_message+0x10a>
 80167ca:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80167ce:	462a      	mov	r2, r5
 80167d0:	a808      	add	r0, sp, #32
 80167d2:	a903      	add	r1, sp, #12
 80167d4:	699d      	ldr	r5, [r3, #24]
 80167d6:	2300      	movs	r3, #0
 80167d8:	47a8      	blx	r5
 80167da:	4605      	mov	r5, r0
 80167dc:	2d00      	cmp	r5, #0
 80167de:	d0a2      	beq.n	8016726 <rcl_send_service_event_message+0x26>
 80167e0:	4629      	mov	r1, r5
 80167e2:	6820      	ldr	r0, [r4, #0]
 80167e4:	2200      	movs	r2, #0
 80167e6:	f7f7 f865 	bl	800d8b4 <rcl_publish>
 80167ea:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80167ee:	4604      	mov	r4, r0
 80167f0:	a903      	add	r1, sp, #12
 80167f2:	4628      	mov	r0, r5
 80167f4:	69db      	ldr	r3, [r3, #28]
 80167f6:	4798      	blx	r3
 80167f8:	2c00      	cmp	r4, #0
 80167fa:	d095      	beq.n	8016728 <rcl_send_service_event_message+0x28>
 80167fc:	f7f8 f91c 	bl	800ea38 <rcutils_reset_error>
 8016800:	e792      	b.n	8016728 <rcl_send_service_event_message+0x28>
 8016802:	2401      	movs	r4, #1
 8016804:	f7f8 f918 	bl	800ea38 <rcutils_reset_error>
 8016808:	e78e      	b.n	8016728 <rcl_send_service_event_message+0x28>
 801680a:	1eb9      	subs	r1, r7, #2
 801680c:	2901      	cmp	r1, #1
 801680e:	d8f8      	bhi.n	8016802 <rcl_send_service_event_message+0x102>
 8016810:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8016814:	462b      	mov	r3, r5
 8016816:	a808      	add	r0, sp, #32
 8016818:	a903      	add	r1, sp, #12
 801681a:	6995      	ldr	r5, [r2, #24]
 801681c:	2200      	movs	r2, #0
 801681e:	47a8      	blx	r5
 8016820:	4605      	mov	r5, r0
 8016822:	e7db      	b.n	80167dc <rcl_send_service_event_message+0xdc>
 8016824:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8016828:	e77e      	b.n	8016728 <rcl_send_service_event_message+0x28>
 801682a:	bf00      	nop
 801682c:	f3af 8000 	nop.w
 8016830:	3b9aca00 	.word	0x3b9aca00
 8016834:	00000000 	.word	0x00000000

08016838 <rcl_get_zero_initialized_subscription>:
 8016838:	4b01      	ldr	r3, [pc, #4]	; (8016840 <rcl_get_zero_initialized_subscription+0x8>)
 801683a:	6818      	ldr	r0, [r3, #0]
 801683c:	4770      	bx	lr
 801683e:	bf00      	nop
 8016840:	0801fec8 	.word	0x0801fec8

08016844 <rcl_subscription_init>:
 8016844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016848:	b088      	sub	sp, #32
 801684a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801684c:	b1ff      	cbz	r7, 801688e <rcl_subscription_init+0x4a>
 801684e:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 8016852:	4605      	mov	r5, r0
 8016854:	460e      	mov	r6, r1
 8016856:	4691      	mov	r9, r2
 8016858:	4650      	mov	r0, sl
 801685a:	4698      	mov	r8, r3
 801685c:	f7f8 f8c8 	bl	800e9f0 <rcutils_allocator_is_valid>
 8016860:	f080 0401 	eor.w	r4, r0, #1
 8016864:	b2e4      	uxtb	r4, r4
 8016866:	b994      	cbnz	r4, 801688e <rcl_subscription_init+0x4a>
 8016868:	b18d      	cbz	r5, 801688e <rcl_subscription_init+0x4a>
 801686a:	4630      	mov	r0, r6
 801686c:	f7ff fb98 	bl	8015fa0 <rcl_node_is_valid>
 8016870:	2800      	cmp	r0, #0
 8016872:	d055      	beq.n	8016920 <rcl_subscription_init+0xdc>
 8016874:	f1b9 0f00 	cmp.w	r9, #0
 8016878:	d009      	beq.n	801688e <rcl_subscription_init+0x4a>
 801687a:	f1b8 0f00 	cmp.w	r8, #0
 801687e:	d006      	beq.n	801688e <rcl_subscription_init+0x4a>
 8016880:	682b      	ldr	r3, [r5, #0]
 8016882:	b14b      	cbz	r3, 8016898 <rcl_subscription_init+0x54>
 8016884:	2464      	movs	r4, #100	; 0x64
 8016886:	4620      	mov	r0, r4
 8016888:	b008      	add	sp, #32
 801688a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801688e:	240b      	movs	r4, #11
 8016890:	4620      	mov	r0, r4
 8016892:	b008      	add	sp, #32
 8016894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016898:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801689c:	aa07      	add	r2, sp, #28
 801689e:	9307      	str	r3, [sp, #28]
 80168a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80168a4:	9205      	str	r2, [sp, #20]
 80168a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80168aa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80168ae:	4641      	mov	r1, r8
 80168b0:	4630      	mov	r0, r6
 80168b2:	e89a 000c 	ldmia.w	sl, {r2, r3}
 80168b6:	f7ff fbeb 	bl	8016090 <rcl_node_resolve_name>
 80168ba:	2800      	cmp	r0, #0
 80168bc:	d15f      	bne.n	801697e <rcl_subscription_init+0x13a>
 80168be:	21d0      	movs	r1, #208	; 0xd0
 80168c0:	2001      	movs	r0, #1
 80168c2:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	; 0x5c
 80168c6:	4798      	blx	r3
 80168c8:	6028      	str	r0, [r5, #0]
 80168ca:	2800      	cmp	r0, #0
 80168cc:	d05f      	beq.n	801698e <rcl_subscription_init+0x14a>
 80168ce:	4630      	mov	r0, r6
 80168d0:	f7ff fb88 	bl	8015fe4 <rcl_node_get_rmw_handle>
 80168d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80168d8:	4649      	mov	r1, r9
 80168da:	9a07      	ldr	r2, [sp, #28]
 80168dc:	9300      	str	r3, [sp, #0]
 80168de:	463b      	mov	r3, r7
 80168e0:	682c      	ldr	r4, [r5, #0]
 80168e2:	f003 fd01 	bl	801a2e8 <rmw_create_subscription>
 80168e6:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
 80168ea:	682c      	ldr	r4, [r5, #0]
 80168ec:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
 80168f0:	b348      	cbz	r0, 8016946 <rcl_subscription_init+0x102>
 80168f2:	f104 0178 	add.w	r1, r4, #120	; 0x78
 80168f6:	f003 fded 	bl	801a4d4 <rmw_subscription_get_actual_qos>
 80168fa:	4604      	mov	r4, r0
 80168fc:	b9a8      	cbnz	r0, 801692a <rcl_subscription_init+0xe6>
 80168fe:	6828      	ldr	r0, [r5, #0]
 8016900:	2278      	movs	r2, #120	; 0x78
 8016902:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8016906:	4639      	mov	r1, r7
 8016908:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
 801690c:	f007 f8b7 	bl	801da7e <memcpy>
 8016910:	9807      	ldr	r0, [sp, #28]
 8016912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016914:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8016916:	4798      	blx	r3
 8016918:	4620      	mov	r0, r4
 801691a:	b008      	add	sp, #32
 801691c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016920:	24c8      	movs	r4, #200	; 0xc8
 8016922:	4620      	mov	r0, r4
 8016924:	b008      	add	sp, #32
 8016926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801692a:	682c      	ldr	r4, [r5, #0]
 801692c:	b36c      	cbz	r4, 801698a <rcl_subscription_init+0x146>
 801692e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8016932:	b14b      	cbz	r3, 8016948 <rcl_subscription_init+0x104>
 8016934:	4630      	mov	r0, r6
 8016936:	f7ff fb55 	bl	8015fe4 <rcl_node_get_rmw_handle>
 801693a:	682b      	ldr	r3, [r5, #0]
 801693c:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 8016940:	f003 fddc 	bl	801a4fc <rmw_destroy_subscription>
 8016944:	682c      	ldr	r4, [r5, #0]
 8016946:	b194      	cbz	r4, 801696e <rcl_subscription_init+0x12a>
 8016948:	f104 0650 	add.w	r6, r4, #80	; 0x50
 801694c:	4630      	mov	r0, r6
 801694e:	f7f8 f84f 	bl	800e9f0 <rcutils_allocator_is_valid>
 8016952:	b158      	cbz	r0, 801696c <rcl_subscription_init+0x128>
 8016954:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8016956:	b148      	cbz	r0, 801696c <rcl_subscription_init+0x128>
 8016958:	4631      	mov	r1, r6
 801695a:	f002 fbe5 	bl	8019128 <rmw_subscription_content_filter_options_fini>
 801695e:	4606      	mov	r6, r0
 8016960:	b9c8      	cbnz	r0, 8016996 <rcl_subscription_init+0x152>
 8016962:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8016964:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8016966:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8016968:	4798      	blx	r3
 801696a:	66e6      	str	r6, [r4, #108]	; 0x6c
 801696c:	682c      	ldr	r4, [r5, #0]
 801696e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016970:	4620      	mov	r0, r4
 8016972:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8016974:	2401      	movs	r4, #1
 8016976:	4798      	blx	r3
 8016978:	2300      	movs	r3, #0
 801697a:	602b      	str	r3, [r5, #0]
 801697c:	e7c8      	b.n	8016910 <rcl_subscription_init+0xcc>
 801697e:	2867      	cmp	r0, #103	; 0x67
 8016980:	d007      	beq.n	8016992 <rcl_subscription_init+0x14e>
 8016982:	2869      	cmp	r0, #105	; 0x69
 8016984:	d005      	beq.n	8016992 <rcl_subscription_init+0x14e>
 8016986:	280a      	cmp	r0, #10
 8016988:	d001      	beq.n	801698e <rcl_subscription_init+0x14a>
 801698a:	2401      	movs	r4, #1
 801698c:	e7c0      	b.n	8016910 <rcl_subscription_init+0xcc>
 801698e:	240a      	movs	r4, #10
 8016990:	e7be      	b.n	8016910 <rcl_subscription_init+0xcc>
 8016992:	2467      	movs	r4, #103	; 0x67
 8016994:	e7bc      	b.n	8016910 <rcl_subscription_init+0xcc>
 8016996:	f7fe fee9 	bl	801576c <rcl_convert_rmw_ret_to_rcl_ret>
 801699a:	682c      	ldr	r4, [r5, #0]
 801699c:	e7e7      	b.n	801696e <rcl_subscription_init+0x12a>
 801699e:	bf00      	nop

080169a0 <rcl_subscription_get_default_options>:
 80169a0:	b570      	push	{r4, r5, r6, lr}
 80169a2:	4c16      	ldr	r4, [pc, #88]	; (80169fc <rcl_subscription_get_default_options+0x5c>)
 80169a4:	b08a      	sub	sp, #40	; 0x28
 80169a6:	4605      	mov	r5, r0
 80169a8:	2250      	movs	r2, #80	; 0x50
 80169aa:	4915      	ldr	r1, [pc, #84]	; (8016a00 <rcl_subscription_get_default_options+0x60>)
 80169ac:	4620      	mov	r0, r4
 80169ae:	f007 f866 	bl	801da7e <memcpy>
 80169b2:	a804      	add	r0, sp, #16
 80169b4:	f7f8 f80e 	bl	800e9d4 <rcutils_get_default_allocator>
 80169b8:	f10d 0c10 	add.w	ip, sp, #16
 80169bc:	f104 0e50 	add.w	lr, r4, #80	; 0x50
 80169c0:	466e      	mov	r6, sp
 80169c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80169c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80169ca:	f8dc 3000 	ldr.w	r3, [ip]
 80169ce:	4630      	mov	r0, r6
 80169d0:	f8ce 3000 	str.w	r3, [lr]
 80169d4:	f002 fbc2 	bl	801915c <rmw_get_default_subscription_options>
 80169d8:	f104 0364 	add.w	r3, r4, #100	; 0x64
 80169dc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80169e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80169e4:	2301      	movs	r3, #1
 80169e6:	2278      	movs	r2, #120	; 0x78
 80169e8:	4621      	mov	r1, r4
 80169ea:	4628      	mov	r0, r5
 80169ec:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 80169f0:	f007 f845 	bl	801da7e <memcpy>
 80169f4:	4628      	mov	r0, r5
 80169f6:	b00a      	add	sp, #40	; 0x28
 80169f8:	bd70      	pop	{r4, r5, r6, pc}
 80169fa:	bf00      	nop
 80169fc:	20010b30 	.word	0x20010b30
 8016a00:	0801fed0 	.word	0x0801fed0

08016a04 <rcl_take>:
 8016a04:	2800      	cmp	r0, #0
 8016a06:	d049      	beq.n	8016a9c <rcl_take+0x98>
 8016a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a0c:	4615      	mov	r5, r2
 8016a0e:	6802      	ldr	r2, [r0, #0]
 8016a10:	b0a0      	sub	sp, #128	; 0x80
 8016a12:	4604      	mov	r4, r0
 8016a14:	2a00      	cmp	r2, #0
 8016a16:	d039      	beq.n	8016a8c <rcl_take+0x88>
 8016a18:	461f      	mov	r7, r3
 8016a1a:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8016a1e:	b3ab      	cbz	r3, 8016a8c <rcl_take+0x88>
 8016a20:	460e      	mov	r6, r1
 8016a22:	2900      	cmp	r1, #0
 8016a24:	d038      	beq.n	8016a98 <rcl_take+0x94>
 8016a26:	2d00      	cmp	r5, #0
 8016a28:	d03c      	beq.n	8016aa4 <rcl_take+0xa0>
 8016a2a:	a802      	add	r0, sp, #8
 8016a2c:	f002 fc24 	bl	8019278 <rmw_get_zero_initialized_message_info>
 8016a30:	6823      	ldr	r3, [r4, #0]
 8016a32:	f10d 0c08 	add.w	ip, sp, #8
 8016a36:	46ae      	mov	lr, r5
 8016a38:	f8d3 80c8 	ldr.w	r8, [r3, #200]	; 0xc8
 8016a3c:	2400      	movs	r4, #0
 8016a3e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016a42:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016a46:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016a4a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016a4e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016a52:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016a56:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8016a5a:	462b      	mov	r3, r5
 8016a5c:	f10d 0247 	add.w	r2, sp, #71	; 0x47
 8016a60:	f88d 4047 	strb.w	r4, [sp, #71]	; 0x47
 8016a64:	e88e 0003 	stmia.w	lr, {r0, r1}
 8016a68:	4631      	mov	r1, r6
 8016a6a:	4640      	mov	r0, r8
 8016a6c:	9700      	str	r7, [sp, #0]
 8016a6e:	f003 fda7 	bl	801a5c0 <rmw_take_with_info>
 8016a72:	4603      	mov	r3, r0
 8016a74:	b9c0      	cbnz	r0, 8016aa8 <rcl_take+0xa4>
 8016a76:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
 8016a7a:	f240 1291 	movw	r2, #401	; 0x191
 8016a7e:	2900      	cmp	r1, #0
 8016a80:	bf08      	it	eq
 8016a82:	4613      	moveq	r3, r2
 8016a84:	4618      	mov	r0, r3
 8016a86:	b020      	add	sp, #128	; 0x80
 8016a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a8c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8016a90:	4618      	mov	r0, r3
 8016a92:	b020      	add	sp, #128	; 0x80
 8016a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a98:	230b      	movs	r3, #11
 8016a9a:	e7f3      	b.n	8016a84 <rcl_take+0x80>
 8016a9c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	4770      	bx	lr
 8016aa4:	ad12      	add	r5, sp, #72	; 0x48
 8016aa6:	e7c0      	b.n	8016a2a <rcl_take+0x26>
 8016aa8:	f7fe fe60 	bl	801576c <rcl_convert_rmw_ret_to_rcl_ret>
 8016aac:	4603      	mov	r3, r0
 8016aae:	e7e9      	b.n	8016a84 <rcl_take+0x80>

08016ab0 <rcl_subscription_get_rmw_handle>:
 8016ab0:	b118      	cbz	r0, 8016aba <rcl_subscription_get_rmw_handle+0xa>
 8016ab2:	6800      	ldr	r0, [r0, #0]
 8016ab4:	b108      	cbz	r0, 8016aba <rcl_subscription_get_rmw_handle+0xa>
 8016ab6:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 8016aba:	4770      	bx	lr

08016abc <rcl_subscription_is_valid>:
 8016abc:	b130      	cbz	r0, 8016acc <rcl_subscription_is_valid+0x10>
 8016abe:	6800      	ldr	r0, [r0, #0]
 8016ac0:	b120      	cbz	r0, 8016acc <rcl_subscription_is_valid+0x10>
 8016ac2:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 8016ac6:	3800      	subs	r0, #0
 8016ac8:	bf18      	it	ne
 8016aca:	2001      	movne	r0, #1
 8016acc:	4770      	bx	lr
 8016ace:	bf00      	nop

08016ad0 <rcl_get_system_time>:
 8016ad0:	4608      	mov	r0, r1
 8016ad2:	f7f7 bfcd 	b.w	800ea70 <rcutils_system_time_now>
 8016ad6:	bf00      	nop

08016ad8 <rcl_get_steady_time>:
 8016ad8:	4608      	mov	r0, r1
 8016ada:	f7f7 bff1 	b.w	800eac0 <rcutils_steady_time_now>
 8016ade:	bf00      	nop

08016ae0 <rcl_get_ros_time>:
 8016ae0:	7a03      	ldrb	r3, [r0, #8]
 8016ae2:	b510      	push	{r4, lr}
 8016ae4:	460c      	mov	r4, r1
 8016ae6:	b143      	cbz	r3, 8016afa <rcl_get_ros_time+0x1a>
 8016ae8:	2105      	movs	r1, #5
 8016aea:	f001 ff9d 	bl	8018a28 <__atomic_load_8>
 8016aee:	4602      	mov	r2, r0
 8016af0:	460b      	mov	r3, r1
 8016af2:	2000      	movs	r0, #0
 8016af4:	e9c4 2300 	strd	r2, r3, [r4]
 8016af8:	bd10      	pop	{r4, pc}
 8016afa:	4608      	mov	r0, r1
 8016afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b00:	f7f7 bfb6 	b.w	800ea70 <rcutils_system_time_now>

08016b04 <rcl_clock_valid>:
 8016b04:	b138      	cbz	r0, 8016b16 <rcl_clock_valid+0x12>
 8016b06:	7803      	ldrb	r3, [r0, #0]
 8016b08:	b123      	cbz	r3, 8016b14 <rcl_clock_valid+0x10>
 8016b0a:	68c0      	ldr	r0, [r0, #12]
 8016b0c:	3800      	subs	r0, #0
 8016b0e:	bf18      	it	ne
 8016b10:	2001      	movne	r0, #1
 8016b12:	4770      	bx	lr
 8016b14:	4618      	mov	r0, r3
 8016b16:	4770      	bx	lr

08016b18 <rcl_clock_init>:
 8016b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b1a:	4605      	mov	r5, r0
 8016b1c:	4610      	mov	r0, r2
 8016b1e:	4614      	mov	r4, r2
 8016b20:	460e      	mov	r6, r1
 8016b22:	f7f7 ff65 	bl	800e9f0 <rcutils_allocator_is_valid>
 8016b26:	b128      	cbz	r0, 8016b34 <rcl_clock_init+0x1c>
 8016b28:	2d03      	cmp	r5, #3
 8016b2a:	d803      	bhi.n	8016b34 <rcl_clock_init+0x1c>
 8016b2c:	e8df f005 	tbb	[pc, r5]
 8016b30:	0659301f 	.word	0x0659301f
 8016b34:	f04f 0c0b 	mov.w	ip, #11
 8016b38:	4660      	mov	r0, ip
 8016b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b3c:	2c00      	cmp	r4, #0
 8016b3e:	d0f9      	beq.n	8016b34 <rcl_clock_init+0x1c>
 8016b40:	fab6 f386 	clz	r3, r6
 8016b44:	095b      	lsrs	r3, r3, #5
 8016b46:	2e00      	cmp	r6, #0
 8016b48:	d0f4      	beq.n	8016b34 <rcl_clock_init+0x1c>
 8016b4a:	6133      	str	r3, [r6, #16]
 8016b4c:	469c      	mov	ip, r3
 8016b4e:	f106 0514 	add.w	r5, r6, #20
 8016b52:	4f32      	ldr	r7, [pc, #200]	; (8016c1c <rcl_clock_init+0x104>)
 8016b54:	f04f 0e03 	mov.w	lr, #3
 8016b58:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016b5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016b5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016b60:	6823      	ldr	r3, [r4, #0]
 8016b62:	4660      	mov	r0, ip
 8016b64:	602b      	str	r3, [r5, #0]
 8016b66:	60f7      	str	r7, [r6, #12]
 8016b68:	f886 e000 	strb.w	lr, [r6]
 8016b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b6e:	2e00      	cmp	r6, #0
 8016b70:	d0e0      	beq.n	8016b34 <rcl_clock_init+0x1c>
 8016b72:	2300      	movs	r3, #0
 8016b74:	f106 0514 	add.w	r5, r6, #20
 8016b78:	7033      	strb	r3, [r6, #0]
 8016b7a:	469c      	mov	ip, r3
 8016b7c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016b80:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8016b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016b86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016b88:	6823      	ldr	r3, [r4, #0]
 8016b8a:	4660      	mov	r0, ip
 8016b8c:	602b      	str	r3, [r5, #0]
 8016b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b90:	2c00      	cmp	r4, #0
 8016b92:	d0cf      	beq.n	8016b34 <rcl_clock_init+0x1c>
 8016b94:	fab6 f586 	clz	r5, r6
 8016b98:	096d      	lsrs	r5, r5, #5
 8016b9a:	2e00      	cmp	r6, #0
 8016b9c:	d0ca      	beq.n	8016b34 <rcl_clock_init+0x1c>
 8016b9e:	46a6      	mov	lr, r4
 8016ba0:	7035      	strb	r5, [r6, #0]
 8016ba2:	f106 0c14 	add.w	ip, r6, #20
 8016ba6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016baa:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8016bae:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8016bb2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016bb6:	f8de 3000 	ldr.w	r3, [lr]
 8016bba:	2010      	movs	r0, #16
 8016bbc:	f8cc 3000 	str.w	r3, [ip]
 8016bc0:	6823      	ldr	r3, [r4, #0]
 8016bc2:	6921      	ldr	r1, [r4, #16]
 8016bc4:	4798      	blx	r3
 8016bc6:	6130      	str	r0, [r6, #16]
 8016bc8:	b320      	cbz	r0, 8016c14 <rcl_clock_init+0xfc>
 8016bca:	2200      	movs	r2, #0
 8016bcc:	2300      	movs	r3, #0
 8016bce:	46ac      	mov	ip, r5
 8016bd0:	7205      	strb	r5, [r0, #8]
 8016bd2:	e9c0 2300 	strd	r2, r3, [r0]
 8016bd6:	4a12      	ldr	r2, [pc, #72]	; (8016c20 <rcl_clock_init+0x108>)
 8016bd8:	2301      	movs	r3, #1
 8016bda:	4660      	mov	r0, ip
 8016bdc:	60f2      	str	r2, [r6, #12]
 8016bde:	7033      	strb	r3, [r6, #0]
 8016be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016be2:	2c00      	cmp	r4, #0
 8016be4:	d0a6      	beq.n	8016b34 <rcl_clock_init+0x1c>
 8016be6:	fab6 f386 	clz	r3, r6
 8016bea:	095b      	lsrs	r3, r3, #5
 8016bec:	2e00      	cmp	r6, #0
 8016bee:	d0a1      	beq.n	8016b34 <rcl_clock_init+0x1c>
 8016bf0:	6133      	str	r3, [r6, #16]
 8016bf2:	469c      	mov	ip, r3
 8016bf4:	f106 0514 	add.w	r5, r6, #20
 8016bf8:	f8df e028 	ldr.w	lr, [pc, #40]	; 8016c24 <rcl_clock_init+0x10c>
 8016bfc:	2702      	movs	r7, #2
 8016bfe:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016c04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016c06:	6823      	ldr	r3, [r4, #0]
 8016c08:	4660      	mov	r0, ip
 8016c0a:	602b      	str	r3, [r5, #0]
 8016c0c:	f8c6 e00c 	str.w	lr, [r6, #12]
 8016c10:	7037      	strb	r7, [r6, #0]
 8016c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c14:	f04f 0c0a 	mov.w	ip, #10
 8016c18:	e78e      	b.n	8016b38 <rcl_clock_init+0x20>
 8016c1a:	bf00      	nop
 8016c1c:	08016ad9 	.word	0x08016ad9
 8016c20:	08016ae1 	.word	0x08016ae1
 8016c24:	08016ad1 	.word	0x08016ad1

08016c28 <rcl_clock_get_now>:
 8016c28:	b140      	cbz	r0, 8016c3c <rcl_clock_get_now+0x14>
 8016c2a:	b139      	cbz	r1, 8016c3c <rcl_clock_get_now+0x14>
 8016c2c:	7803      	ldrb	r3, [r0, #0]
 8016c2e:	b11b      	cbz	r3, 8016c38 <rcl_clock_get_now+0x10>
 8016c30:	68c3      	ldr	r3, [r0, #12]
 8016c32:	b10b      	cbz	r3, 8016c38 <rcl_clock_get_now+0x10>
 8016c34:	6900      	ldr	r0, [r0, #16]
 8016c36:	4718      	bx	r3
 8016c38:	2001      	movs	r0, #1
 8016c3a:	4770      	bx	lr
 8016c3c:	200b      	movs	r0, #11
 8016c3e:	4770      	bx	lr

08016c40 <rcl_clock_add_jump_callback>:
 8016c40:	b082      	sub	sp, #8
 8016c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c46:	a906      	add	r1, sp, #24
 8016c48:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 8016c4c:	e881 000c 	stmia.w	r1, {r2, r3}
 8016c50:	b330      	cbz	r0, 8016ca0 <rcl_clock_add_jump_callback+0x60>
 8016c52:	4604      	mov	r4, r0
 8016c54:	3014      	adds	r0, #20
 8016c56:	f7f7 fecb 	bl	800e9f0 <rcutils_allocator_is_valid>
 8016c5a:	b30d      	cbz	r5, 8016ca0 <rcl_clock_add_jump_callback+0x60>
 8016c5c:	f080 0301 	eor.w	r3, r0, #1
 8016c60:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8016c64:	d11c      	bne.n	8016ca0 <rcl_clock_add_jump_callback+0x60>
 8016c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016c68:	2a00      	cmp	r2, #0
 8016c6a:	db19      	blt.n	8016ca0 <rcl_clock_add_jump_callback+0x60>
 8016c6c:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8016c70:	2901      	cmp	r1, #1
 8016c72:	f172 0200 	sbcs.w	r2, r2, #0
 8016c76:	da13      	bge.n	8016ca0 <rcl_clock_add_jump_callback+0x60>
 8016c78:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8016c7c:	2f00      	cmp	r7, #0
 8016c7e:	d040      	beq.n	8016d02 <rcl_clock_add_jump_callback+0xc2>
 8016c80:	4602      	mov	r2, r0
 8016c82:	e003      	b.n	8016c8c <rcl_clock_add_jump_callback+0x4c>
 8016c84:	42bb      	cmp	r3, r7
 8016c86:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8016c8a:	d010      	beq.n	8016cae <rcl_clock_add_jump_callback+0x6e>
 8016c8c:	6811      	ldr	r1, [r2, #0]
 8016c8e:	3301      	adds	r3, #1
 8016c90:	42a9      	cmp	r1, r5
 8016c92:	d1f7      	bne.n	8016c84 <rcl_clock_add_jump_callback+0x44>
 8016c94:	6a11      	ldr	r1, [r2, #32]
 8016c96:	42b1      	cmp	r1, r6
 8016c98:	d1f4      	bne.n	8016c84 <rcl_clock_add_jump_callback+0x44>
 8016c9a:	f04f 0e01 	mov.w	lr, #1
 8016c9e:	e001      	b.n	8016ca4 <rcl_clock_add_jump_callback+0x64>
 8016ca0:	f04f 0e0b 	mov.w	lr, #11
 8016ca4:	4670      	mov	r0, lr
 8016ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016caa:	b002      	add	sp, #8
 8016cac:	4770      	bx	lr
 8016cae:	3301      	adds	r3, #1
 8016cb0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016cb4:	00d9      	lsls	r1, r3, #3
 8016cb6:	69e3      	ldr	r3, [r4, #28]
 8016cb8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8016cba:	4798      	blx	r3
 8016cbc:	b1f0      	cbz	r0, 8016cfc <rcl_clock_add_jump_callback+0xbc>
 8016cbe:	68a3      	ldr	r3, [r4, #8]
 8016cc0:	f10d 0c18 	add.w	ip, sp, #24
 8016cc4:	6060      	str	r0, [r4, #4]
 8016cc6:	f04f 0e00 	mov.w	lr, #0
 8016cca:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8016cce:	f103 0801 	add.w	r8, r3, #1
 8016cd2:	f840 5032 	str.w	r5, [r0, r2, lsl #3]
 8016cd6:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8016cda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016cde:	f105 0708 	add.w	r7, r5, #8
 8016ce2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016ce4:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8016ce8:	e887 0003 	stmia.w	r7, {r0, r1}
 8016cec:	4670      	mov	r0, lr
 8016cee:	622e      	str	r6, [r5, #32]
 8016cf0:	f8c4 8008 	str.w	r8, [r4, #8]
 8016cf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016cf8:	b002      	add	sp, #8
 8016cfa:	4770      	bx	lr
 8016cfc:	f04f 0e0a 	mov.w	lr, #10
 8016d00:	e7d0      	b.n	8016ca4 <rcl_clock_add_jump_callback+0x64>
 8016d02:	2128      	movs	r1, #40	; 0x28
 8016d04:	e7d7      	b.n	8016cb6 <rcl_clock_add_jump_callback+0x76>
 8016d06:	bf00      	nop

08016d08 <rcl_clock_remove_jump_callback>:
 8016d08:	2800      	cmp	r0, #0
 8016d0a:	d05f      	beq.n	8016dcc <rcl_clock_remove_jump_callback+0xc4>
 8016d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d10:	4605      	mov	r5, r0
 8016d12:	3014      	adds	r0, #20
 8016d14:	460f      	mov	r7, r1
 8016d16:	4692      	mov	sl, r2
 8016d18:	f7f7 fe6a 	bl	800e9f0 <rcutils_allocator_is_valid>
 8016d1c:	f080 0001 	eor.w	r0, r0, #1
 8016d20:	b2c0      	uxtb	r0, r0
 8016d22:	2800      	cmp	r0, #0
 8016d24:	d13f      	bne.n	8016da6 <rcl_clock_remove_jump_callback+0x9e>
 8016d26:	2f00      	cmp	r7, #0
 8016d28:	d03d      	beq.n	8016da6 <rcl_clock_remove_jump_callback+0x9e>
 8016d2a:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8016d2e:	f1b8 0f00 	cmp.w	r8, #0
 8016d32:	d00c      	beq.n	8016d4e <rcl_clock_remove_jump_callback+0x46>
 8016d34:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8016d38:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 8016d3c:	464c      	mov	r4, r9
 8016d3e:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 8016d42:	6823      	ldr	r3, [r4, #0]
 8016d44:	42bb      	cmp	r3, r7
 8016d46:	d005      	beq.n	8016d54 <rcl_clock_remove_jump_callback+0x4c>
 8016d48:	3428      	adds	r4, #40	; 0x28
 8016d4a:	42a6      	cmp	r6, r4
 8016d4c:	d1f9      	bne.n	8016d42 <rcl_clock_remove_jump_callback+0x3a>
 8016d4e:	2001      	movs	r0, #1
 8016d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d54:	6a23      	ldr	r3, [r4, #32]
 8016d56:	3428      	adds	r4, #40	; 0x28
 8016d58:	42a6      	cmp	r6, r4
 8016d5a:	d02f      	beq.n	8016dbc <rcl_clock_remove_jump_callback+0xb4>
 8016d5c:	4553      	cmp	r3, sl
 8016d5e:	d1f0      	bne.n	8016d42 <rcl_clock_remove_jump_callback+0x3a>
 8016d60:	46a6      	mov	lr, r4
 8016d62:	f1a4 0c28 	sub.w	ip, r4, #40	; 0x28
 8016d66:	3428      	adds	r4, #40	; 0x28
 8016d68:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016d6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016d70:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016d74:	42a6      	cmp	r6, r4
 8016d76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016d7a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016d7e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016d82:	d1ed      	bne.n	8016d60 <rcl_clock_remove_jump_callback+0x58>
 8016d84:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8016d88:	60ac      	str	r4, [r5, #8]
 8016d8a:	b17c      	cbz	r4, 8016dac <rcl_clock_remove_jump_callback+0xa4>
 8016d8c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8016d90:	69eb      	ldr	r3, [r5, #28]
 8016d92:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8016d94:	4648      	mov	r0, r9
 8016d96:	00e1      	lsls	r1, r4, #3
 8016d98:	4798      	blx	r3
 8016d9a:	4603      	mov	r3, r0
 8016d9c:	b1c0      	cbz	r0, 8016dd0 <rcl_clock_remove_jump_callback+0xc8>
 8016d9e:	2000      	movs	r0, #0
 8016da0:	606b      	str	r3, [r5, #4]
 8016da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016da6:	200b      	movs	r0, #11
 8016da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dac:	4648      	mov	r0, r9
 8016dae:	69ab      	ldr	r3, [r5, #24]
 8016db0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8016db2:	4798      	blx	r3
 8016db4:	4620      	mov	r0, r4
 8016db6:	606c      	str	r4, [r5, #4]
 8016db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dbc:	4553      	cmp	r3, sl
 8016dbe:	d1c6      	bne.n	8016d4e <rcl_clock_remove_jump_callback+0x46>
 8016dc0:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8016dc4:	60ac      	str	r4, [r5, #8]
 8016dc6:	2c00      	cmp	r4, #0
 8016dc8:	d1e0      	bne.n	8016d8c <rcl_clock_remove_jump_callback+0x84>
 8016dca:	e7ef      	b.n	8016dac <rcl_clock_remove_jump_callback+0xa4>
 8016dcc:	200b      	movs	r0, #11
 8016dce:	4770      	bx	lr
 8016dd0:	200a      	movs	r0, #10
 8016dd2:	e7e9      	b.n	8016da8 <rcl_clock_remove_jump_callback+0xa0>

08016dd4 <_rcl_timer_time_jump>:
 8016dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016dd8:	4605      	mov	r5, r0
 8016dda:	b084      	sub	sp, #16
 8016ddc:	4614      	mov	r4, r2
 8016dde:	b131      	cbz	r1, 8016dee <_rcl_timer_time_jump+0x1a>
 8016de0:	7803      	ldrb	r3, [r0, #0]
 8016de2:	3b02      	subs	r3, #2
 8016de4:	2b01      	cmp	r3, #1
 8016de6:	d93f      	bls.n	8016e68 <_rcl_timer_time_jump+0x94>
 8016de8:	b004      	add	sp, #16
 8016dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dee:	6813      	ldr	r3, [r2, #0]
 8016df0:	a902      	add	r1, sp, #8
 8016df2:	6818      	ldr	r0, [r3, #0]
 8016df4:	f7ff ff18 	bl	8016c28 <rcl_clock_get_now>
 8016df8:	2800      	cmp	r0, #0
 8016dfa:	d1f5      	bne.n	8016de8 <_rcl_timer_time_jump+0x14>
 8016dfc:	6820      	ldr	r0, [r4, #0]
 8016dfe:	2105      	movs	r1, #5
 8016e00:	3020      	adds	r0, #32
 8016e02:	f001 fe11 	bl	8018a28 <__atomic_load_8>
 8016e06:	6823      	ldr	r3, [r4, #0]
 8016e08:	4681      	mov	r9, r0
 8016e0a:	4688      	mov	r8, r1
 8016e0c:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8016e10:	2105      	movs	r1, #5
 8016e12:	f001 fe09 	bl	8018a28 <__atomic_load_8>
 8016e16:	4607      	mov	r7, r0
 8016e18:	6820      	ldr	r0, [r4, #0]
 8016e1a:	460e      	mov	r6, r1
 8016e1c:	2105      	movs	r1, #5
 8016e1e:	3018      	adds	r0, #24
 8016e20:	f001 fe02 	bl	8018a28 <__atomic_load_8>
 8016e24:	782b      	ldrb	r3, [r5, #0]
 8016e26:	4682      	mov	sl, r0
 8016e28:	460d      	mov	r5, r1
 8016e2a:	3b02      	subs	r3, #2
 8016e2c:	9a02      	ldr	r2, [sp, #8]
 8016e2e:	2b01      	cmp	r3, #1
 8016e30:	9b03      	ldr	r3, [sp, #12]
 8016e32:	d937      	bls.n	8016ea4 <_rcl_timer_time_jump+0xd0>
 8016e34:	42ba      	cmp	r2, r7
 8016e36:	eb73 0106 	sbcs.w	r1, r3, r6
 8016e3a:	da60      	bge.n	8016efe <_rcl_timer_time_jump+0x12a>
 8016e3c:	454a      	cmp	r2, r9
 8016e3e:	eb73 0108 	sbcs.w	r1, r3, r8
 8016e42:	dad1      	bge.n	8016de8 <_rcl_timer_time_jump+0x14>
 8016e44:	eb1a 0202 	adds.w	r2, sl, r2
 8016e48:	6820      	ldr	r0, [r4, #0]
 8016e4a:	eb43 0305 	adc.w	r3, r3, r5
 8016e4e:	2505      	movs	r5, #5
 8016e50:	3028      	adds	r0, #40	; 0x28
 8016e52:	9500      	str	r5, [sp, #0]
 8016e54:	f001 fe1e 	bl	8018a94 <__atomic_store_8>
 8016e58:	6820      	ldr	r0, [r4, #0]
 8016e5a:	9500      	str	r5, [sp, #0]
 8016e5c:	3020      	adds	r0, #32
 8016e5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016e62:	f001 fe17 	bl	8018a94 <__atomic_store_8>
 8016e66:	e7bf      	b.n	8016de8 <_rcl_timer_time_jump+0x14>
 8016e68:	6813      	ldr	r3, [r2, #0]
 8016e6a:	a902      	add	r1, sp, #8
 8016e6c:	6818      	ldr	r0, [r3, #0]
 8016e6e:	f7ff fedb 	bl	8016c28 <rcl_clock_get_now>
 8016e72:	2800      	cmp	r0, #0
 8016e74:	d1b8      	bne.n	8016de8 <_rcl_timer_time_jump+0x14>
 8016e76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016e7a:	4313      	orrs	r3, r2
 8016e7c:	d0b4      	beq.n	8016de8 <_rcl_timer_time_jump+0x14>
 8016e7e:	6820      	ldr	r0, [r4, #0]
 8016e80:	2105      	movs	r1, #5
 8016e82:	3028      	adds	r0, #40	; 0x28
 8016e84:	f001 fdd0 	bl	8018a28 <__atomic_load_8>
 8016e88:	9d02      	ldr	r5, [sp, #8]
 8016e8a:	4602      	mov	r2, r0
 8016e8c:	9b03      	ldr	r3, [sp, #12]
 8016e8e:	6820      	ldr	r0, [r4, #0]
 8016e90:	1b52      	subs	r2, r2, r5
 8016e92:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8016e96:	eb61 0303 	sbc.w	r3, r1, r3
 8016e9a:	2105      	movs	r1, #5
 8016e9c:	9100      	str	r1, [sp, #0]
 8016e9e:	f001 fdf9 	bl	8018a94 <__atomic_store_8>
 8016ea2:	e7a1      	b.n	8016de8 <_rcl_timer_time_jump+0x14>
 8016ea4:	4313      	orrs	r3, r2
 8016ea6:	d09f      	beq.n	8016de8 <_rcl_timer_time_jump+0x14>
 8016ea8:	6820      	ldr	r0, [r4, #0]
 8016eaa:	f04f 0805 	mov.w	r8, #5
 8016eae:	2300      	movs	r3, #0
 8016eb0:	2200      	movs	r2, #0
 8016eb2:	3030      	adds	r0, #48	; 0x30
 8016eb4:	f8cd 8000 	str.w	r8, [sp]
 8016eb8:	f001 fe22 	bl	8018b00 <__atomic_exchange_8>
 8016ebc:	ea51 0300 	orrs.w	r3, r1, r0
 8016ec0:	4606      	mov	r6, r0
 8016ec2:	460f      	mov	r7, r1
 8016ec4:	d090      	beq.n	8016de8 <_rcl_timer_time_jump+0x14>
 8016ec6:	9a02      	ldr	r2, [sp, #8]
 8016ec8:	9b03      	ldr	r3, [sp, #12]
 8016eca:	1a12      	subs	r2, r2, r0
 8016ecc:	f8cd 8000 	str.w	r8, [sp]
 8016ed0:	6820      	ldr	r0, [r4, #0]
 8016ed2:	eb63 0301 	sbc.w	r3, r3, r1
 8016ed6:	eb12 020a 	adds.w	r2, r2, sl
 8016eda:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8016ede:	eb43 0305 	adc.w	r3, r3, r5
 8016ee2:	f001 fdd7 	bl	8018a94 <__atomic_store_8>
 8016ee6:	f8cd 8000 	str.w	r8, [sp]
 8016eea:	6820      	ldr	r0, [r4, #0]
 8016eec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016ef0:	3020      	adds	r0, #32
 8016ef2:	1b92      	subs	r2, r2, r6
 8016ef4:	eb63 0307 	sbc.w	r3, r3, r7
 8016ef8:	f001 fdcc 	bl	8018a94 <__atomic_store_8>
 8016efc:	e774      	b.n	8016de8 <_rcl_timer_time_jump+0x14>
 8016efe:	6820      	ldr	r0, [r4, #0]
 8016f00:	3008      	adds	r0, #8
 8016f02:	f005 fd77 	bl	801c9f4 <rcl_trigger_guard_condition>
 8016f06:	e76f      	b.n	8016de8 <_rcl_timer_time_jump+0x14>

08016f08 <rcl_get_zero_initialized_timer>:
 8016f08:	4b01      	ldr	r3, [pc, #4]	; (8016f10 <rcl_get_zero_initialized_timer+0x8>)
 8016f0a:	6818      	ldr	r0, [r3, #0]
 8016f0c:	4770      	bx	lr
 8016f0e:	bf00      	nop
 8016f10:	0801ff20 	.word	0x0801ff20

08016f14 <rcl_timer_init>:
 8016f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f18:	b0af      	sub	sp, #188	; 0xbc
 8016f1a:	460d      	mov	r5, r1
 8016f1c:	4604      	mov	r4, r0
 8016f1e:	4692      	mov	sl, r2
 8016f20:	a83b      	add	r0, sp, #236	; 0xec
 8016f22:	e9dd 8938 	ldrd	r8, r9, [sp, #224]	; 0xe0
 8016f26:	f7f7 fd63 	bl	800e9f0 <rcutils_allocator_is_valid>
 8016f2a:	fab5 f385 	clz	r3, r5
 8016f2e:	095b      	lsrs	r3, r3, #5
 8016f30:	ea43 73d9 	orr.w	r3, r3, r9, lsr #31
 8016f34:	2c00      	cmp	r4, #0
 8016f36:	bf08      	it	eq
 8016f38:	f043 0301 	orreq.w	r3, r3, #1
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d167      	bne.n	8017010 <rcl_timer_init+0xfc>
 8016f40:	f080 0001 	eor.w	r0, r0, #1
 8016f44:	b2c0      	uxtb	r0, r0
 8016f46:	2800      	cmp	r0, #0
 8016f48:	d162      	bne.n	8017010 <rcl_timer_init+0xfc>
 8016f4a:	6823      	ldr	r3, [r4, #0]
 8016f4c:	b123      	cbz	r3, 8016f58 <rcl_timer_init+0x44>
 8016f4e:	2664      	movs	r6, #100	; 0x64
 8016f50:	4630      	mov	r0, r6
 8016f52:	b02f      	add	sp, #188	; 0xbc
 8016f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f58:	a908      	add	r1, sp, #32
 8016f5a:	4628      	mov	r0, r5
 8016f5c:	f7ff fe64 	bl	8016c28 <rcl_clock_get_now>
 8016f60:	4606      	mov	r6, r0
 8016f62:	2800      	cmp	r0, #0
 8016f64:	d1f4      	bne.n	8016f50 <rcl_timer_init+0x3c>
 8016f66:	f10d 0b18 	add.w	fp, sp, #24
 8016f6a:	ae0b      	add	r6, sp, #44	; 0x2c
 8016f6c:	af18      	add	r7, sp, #96	; 0x60
 8016f6e:	4658      	mov	r0, fp
 8016f70:	e9cd 5a16 	strd	r5, sl, [sp, #88]	; 0x58
 8016f74:	f005 fc48 	bl	801c808 <rcl_get_zero_initialized_guard_condition>
 8016f78:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8016f7c:	e887 0003 	stmia.w	r7, {r0, r1}
 8016f80:	4630      	mov	r0, r6
 8016f82:	f005 fd1b 	bl	801c9bc <rcl_guard_condition_get_default_options>
 8016f86:	ab0d      	add	r3, sp, #52	; 0x34
 8016f88:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016f8c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016f90:	4651      	mov	r1, sl
 8016f92:	4638      	mov	r0, r7
 8016f94:	e896 000c 	ldmia.w	r6, {r2, r3}
 8016f98:	f005 fc40 	bl	801c81c <rcl_guard_condition_init>
 8016f9c:	4606      	mov	r6, r0
 8016f9e:	2800      	cmp	r0, #0
 8016fa0:	d1d6      	bne.n	8016f50 <rcl_timer_init+0x3c>
 8016fa2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016fa4:	781b      	ldrb	r3, [r3, #0]
 8016fa6:	2b01      	cmp	r3, #1
 8016fa8:	d037      	beq.n	801701a <rcl_timer_init+0x106>
 8016faa:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8016fac:	f10d 0cec 	add.w	ip, sp, #236	; 0xec
 8016fb0:	f10d 0e94 	add.w	lr, sp, #148	; 0x94
 8016fb4:	f04f 0a00 	mov.w	sl, #0
 8016fb8:	931a      	str	r3, [sp, #104]	; 0x68
 8016fba:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 8016fbe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016fc2:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 8016fc6:	eb12 0008 	adds.w	r0, r2, r8
 8016fca:	f04f 0800 	mov.w	r8, #0
 8016fce:	eb43 0109 	adc.w	r1, r3, r9
 8016fd2:	f04f 0900 	mov.w	r9, #0
 8016fd6:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88
 8016fda:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8016fde:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 8016fe2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016fe6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016fea:	f8dc 3000 	ldr.w	r3, [ip]
 8016fee:	2060      	movs	r0, #96	; 0x60
 8016ff0:	f88d a090 	strb.w	sl, [sp, #144]	; 0x90
 8016ff4:	4619      	mov	r1, r3
 8016ff6:	f8ce 3000 	str.w	r3, [lr]
 8016ffa:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8016ffc:	e9cd aa2a 	strd	sl, sl, [sp, #168]	; 0xa8
 8017000:	4798      	blx	r3
 8017002:	6020      	str	r0, [r4, #0]
 8017004:	b358      	cbz	r0, 801705e <rcl_timer_init+0x14a>
 8017006:	2260      	movs	r2, #96	; 0x60
 8017008:	a916      	add	r1, sp, #88	; 0x58
 801700a:	f006 fd38 	bl	801da7e <memcpy>
 801700e:	e79f      	b.n	8016f50 <rcl_timer_init+0x3c>
 8017010:	260b      	movs	r6, #11
 8017012:	4630      	mov	r0, r6
 8017014:	b02f      	add	sp, #188	; 0xbc
 8017016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801701a:	2001      	movs	r0, #1
 801701c:	2100      	movs	r1, #0
 801701e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8017022:	ab12      	add	r3, sp, #72	; 0x48
 8017024:	4a13      	ldr	r2, [pc, #76]	; (8017074 <rcl_timer_init+0x160>)
 8017026:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801702a:	9405      	str	r4, [sp, #20]
 801702c:	9204      	str	r2, [sp, #16]
 801702e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8017032:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017036:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801703a:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 801703e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017040:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8017044:	4628      	mov	r0, r5
 8017046:	e89c 000c 	ldmia.w	ip, {r2, r3}
 801704a:	f7ff fdf9 	bl	8016c40 <rcl_clock_add_jump_callback>
 801704e:	4603      	mov	r3, r0
 8017050:	2800      	cmp	r0, #0
 8017052:	d0aa      	beq.n	8016faa <rcl_timer_init+0x96>
 8017054:	4638      	mov	r0, r7
 8017056:	461e      	mov	r6, r3
 8017058:	f005 fc8a 	bl	801c970 <rcl_guard_condition_fini>
 801705c:	e778      	b.n	8016f50 <rcl_timer_init+0x3c>
 801705e:	4638      	mov	r0, r7
 8017060:	260a      	movs	r6, #10
 8017062:	f005 fc85 	bl	801c970 <rcl_guard_condition_fini>
 8017066:	4622      	mov	r2, r4
 8017068:	4902      	ldr	r1, [pc, #8]	; (8017074 <rcl_timer_init+0x160>)
 801706a:	4628      	mov	r0, r5
 801706c:	f7ff fe4c 	bl	8016d08 <rcl_clock_remove_jump_callback>
 8017070:	e76e      	b.n	8016f50 <rcl_timer_init+0x3c>
 8017072:	bf00      	nop
 8017074:	08016dd5 	.word	0x08016dd5

08017078 <rcl_timer_call>:
 8017078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801707c:	b087      	sub	sp, #28
 801707e:	2800      	cmp	r0, #0
 8017080:	d06c      	beq.n	801715c <rcl_timer_call+0xe4>
 8017082:	6803      	ldr	r3, [r0, #0]
 8017084:	4604      	mov	r4, r0
 8017086:	2b00      	cmp	r3, #0
 8017088:	d062      	beq.n	8017150 <rcl_timer_call+0xd8>
 801708a:	f3bf 8f5b 	dmb	ish
 801708e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017092:	f3bf 8f5b 	dmb	ish
 8017096:	2b00      	cmp	r3, #0
 8017098:	d14f      	bne.n	801713a <rcl_timer_call+0xc2>
 801709a:	6803      	ldr	r3, [r0, #0]
 801709c:	a904      	add	r1, sp, #16
 801709e:	6818      	ldr	r0, [r3, #0]
 80170a0:	f7ff fdc2 	bl	8016c28 <rcl_clock_get_now>
 80170a4:	4605      	mov	r5, r0
 80170a6:	2800      	cmp	r0, #0
 80170a8:	d149      	bne.n	801713e <rcl_timer_call+0xc6>
 80170aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	db49      	blt.n	8017146 <rcl_timer_call+0xce>
 80170b2:	2605      	movs	r6, #5
 80170b4:	6820      	ldr	r0, [r4, #0]
 80170b6:	9600      	str	r6, [sp, #0]
 80170b8:	3020      	adds	r0, #32
 80170ba:	f001 fd21 	bl	8018b00 <__atomic_exchange_8>
 80170be:	6823      	ldr	r3, [r4, #0]
 80170c0:	4680      	mov	r8, r0
 80170c2:	f3bf 8f5b 	dmb	ish
 80170c6:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80170ca:	f3bf 8f5b 	dmb	ish
 80170ce:	6820      	ldr	r0, [r4, #0]
 80170d0:	4689      	mov	r9, r1
 80170d2:	4631      	mov	r1, r6
 80170d4:	3028      	adds	r0, #40	; 0x28
 80170d6:	f001 fca7 	bl	8018a28 <__atomic_load_8>
 80170da:	460f      	mov	r7, r1
 80170dc:	4631      	mov	r1, r6
 80170de:	4606      	mov	r6, r0
 80170e0:	6820      	ldr	r0, [r4, #0]
 80170e2:	3018      	adds	r0, #24
 80170e4:	f001 fca0 	bl	8018a28 <__atomic_load_8>
 80170e8:	4602      	mov	r2, r0
 80170ea:	9804      	ldr	r0, [sp, #16]
 80170ec:	460b      	mov	r3, r1
 80170ee:	18b6      	adds	r6, r6, r2
 80170f0:	f8dd c014 	ldr.w	ip, [sp, #20]
 80170f4:	4692      	mov	sl, r2
 80170f6:	eb47 0701 	adc.w	r7, r7, r1
 80170fa:	4286      	cmp	r6, r0
 80170fc:	eb77 010c 	sbcs.w	r1, r7, ip
 8017100:	da04      	bge.n	801710c <rcl_timer_call+0x94>
 8017102:	ea53 0102 	orrs.w	r1, r3, r2
 8017106:	d12e      	bne.n	8017166 <rcl_timer_call+0xee>
 8017108:	4606      	mov	r6, r0
 801710a:	4667      	mov	r7, ip
 801710c:	6820      	ldr	r0, [r4, #0]
 801710e:	2105      	movs	r1, #5
 8017110:	4632      	mov	r2, r6
 8017112:	463b      	mov	r3, r7
 8017114:	3028      	adds	r0, #40	; 0x28
 8017116:	9100      	str	r1, [sp, #0]
 8017118:	f001 fcbc 	bl	8018a94 <__atomic_store_8>
 801711c:	f1bb 0f00 	cmp.w	fp, #0
 8017120:	d00d      	beq.n	801713e <rcl_timer_call+0xc6>
 8017122:	9a04      	ldr	r2, [sp, #16]
 8017124:	4620      	mov	r0, r4
 8017126:	9b05      	ldr	r3, [sp, #20]
 8017128:	ebb2 0208 	subs.w	r2, r2, r8
 801712c:	eb63 0309 	sbc.w	r3, r3, r9
 8017130:	47d8      	blx	fp
 8017132:	4628      	mov	r0, r5
 8017134:	b007      	add	sp, #28
 8017136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801713a:	f240 3521 	movw	r5, #801	; 0x321
 801713e:	4628      	mov	r0, r5
 8017140:	b007      	add	sp, #28
 8017142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017146:	2501      	movs	r5, #1
 8017148:	4628      	mov	r0, r5
 801714a:	b007      	add	sp, #28
 801714c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017150:	f44f 7548 	mov.w	r5, #800	; 0x320
 8017154:	4628      	mov	r0, r5
 8017156:	b007      	add	sp, #28
 8017158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801715c:	250b      	movs	r5, #11
 801715e:	4628      	mov	r0, r5
 8017160:	b007      	add	sp, #28
 8017162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017166:	1b80      	subs	r0, r0, r6
 8017168:	eb6c 0107 	sbc.w	r1, ip, r7
 801716c:	3801      	subs	r0, #1
 801716e:	f161 0100 	sbc.w	r1, r1, #0
 8017172:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8017176:	f7e9 f8cb 	bl	8000310 <__aeabi_ldivmod>
 801717a:	9b02      	ldr	r3, [sp, #8]
 801717c:	3001      	adds	r0, #1
 801717e:	f141 0100 	adc.w	r1, r1, #0
 8017182:	fb00 f303 	mul.w	r3, r0, r3
 8017186:	fb01 330a 	mla	r3, r1, sl, r3
 801718a:	fba0 0a0a 	umull	r0, sl, r0, sl
 801718e:	1986      	adds	r6, r0, r6
 8017190:	4453      	add	r3, sl
 8017192:	eb43 0707 	adc.w	r7, r3, r7
 8017196:	e7b9      	b.n	801710c <rcl_timer_call+0x94>

08017198 <rcl_timer_is_ready>:
 8017198:	b570      	push	{r4, r5, r6, lr}
 801719a:	b082      	sub	sp, #8
 801719c:	b380      	cbz	r0, 8017200 <rcl_timer_is_ready+0x68>
 801719e:	6803      	ldr	r3, [r0, #0]
 80171a0:	4604      	mov	r4, r0
 80171a2:	b38b      	cbz	r3, 8017208 <rcl_timer_is_ready+0x70>
 80171a4:	460d      	mov	r5, r1
 80171a6:	b359      	cbz	r1, 8017200 <rcl_timer_is_ready+0x68>
 80171a8:	f3bf 8f5b 	dmb	ish
 80171ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80171b0:	f3bf 8f5b 	dmb	ish
 80171b4:	b953      	cbnz	r3, 80171cc <rcl_timer_is_ready+0x34>
 80171b6:	6803      	ldr	r3, [r0, #0]
 80171b8:	4669      	mov	r1, sp
 80171ba:	6818      	ldr	r0, [r3, #0]
 80171bc:	f7ff fd34 	bl	8016c28 <rcl_clock_get_now>
 80171c0:	4606      	mov	r6, r0
 80171c2:	b148      	cbz	r0, 80171d8 <rcl_timer_is_ready+0x40>
 80171c4:	f240 3321 	movw	r3, #801	; 0x321
 80171c8:	4298      	cmp	r0, r3
 80171ca:	d102      	bne.n	80171d2 <rcl_timer_is_ready+0x3a>
 80171cc:	2300      	movs	r3, #0
 80171ce:	461e      	mov	r6, r3
 80171d0:	702b      	strb	r3, [r5, #0]
 80171d2:	4630      	mov	r0, r6
 80171d4:	b002      	add	sp, #8
 80171d6:	bd70      	pop	{r4, r5, r6, pc}
 80171d8:	6820      	ldr	r0, [r4, #0]
 80171da:	2105      	movs	r1, #5
 80171dc:	3028      	adds	r0, #40	; 0x28
 80171de:	f001 fc23 	bl	8018a28 <__atomic_load_8>
 80171e2:	9b00      	ldr	r3, [sp, #0]
 80171e4:	1ac0      	subs	r0, r0, r3
 80171e6:	9b01      	ldr	r3, [sp, #4]
 80171e8:	eb61 0103 	sbc.w	r1, r1, r3
 80171ec:	2801      	cmp	r0, #1
 80171ee:	4630      	mov	r0, r6
 80171f0:	f171 0300 	sbcs.w	r3, r1, #0
 80171f4:	bfb4      	ite	lt
 80171f6:	2301      	movlt	r3, #1
 80171f8:	2300      	movge	r3, #0
 80171fa:	702b      	strb	r3, [r5, #0]
 80171fc:	b002      	add	sp, #8
 80171fe:	bd70      	pop	{r4, r5, r6, pc}
 8017200:	260b      	movs	r6, #11
 8017202:	4630      	mov	r0, r6
 8017204:	b002      	add	sp, #8
 8017206:	bd70      	pop	{r4, r5, r6, pc}
 8017208:	f44f 7648 	mov.w	r6, #800	; 0x320
 801720c:	e7e1      	b.n	80171d2 <rcl_timer_is_ready+0x3a>
 801720e:	bf00      	nop

08017210 <rcl_timer_get_time_until_next_call>:
 8017210:	b570      	push	{r4, r5, r6, lr}
 8017212:	b082      	sub	sp, #8
 8017214:	b330      	cbz	r0, 8017264 <rcl_timer_get_time_until_next_call+0x54>
 8017216:	6803      	ldr	r3, [r0, #0]
 8017218:	4604      	mov	r4, r0
 801721a:	b33b      	cbz	r3, 801726c <rcl_timer_get_time_until_next_call+0x5c>
 801721c:	460d      	mov	r5, r1
 801721e:	b309      	cbz	r1, 8017264 <rcl_timer_get_time_until_next_call+0x54>
 8017220:	f3bf 8f5b 	dmb	ish
 8017224:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017228:	f3bf 8f5b 	dmb	ish
 801722c:	b9ab      	cbnz	r3, 801725a <rcl_timer_get_time_until_next_call+0x4a>
 801722e:	6803      	ldr	r3, [r0, #0]
 8017230:	4669      	mov	r1, sp
 8017232:	6818      	ldr	r0, [r3, #0]
 8017234:	f7ff fcf8 	bl	8016c28 <rcl_clock_get_now>
 8017238:	4606      	mov	r6, r0
 801723a:	b958      	cbnz	r0, 8017254 <rcl_timer_get_time_until_next_call+0x44>
 801723c:	6820      	ldr	r0, [r4, #0]
 801723e:	2105      	movs	r1, #5
 8017240:	3028      	adds	r0, #40	; 0x28
 8017242:	f001 fbf1 	bl	8018a28 <__atomic_load_8>
 8017246:	9b00      	ldr	r3, [sp, #0]
 8017248:	1ac0      	subs	r0, r0, r3
 801724a:	9b01      	ldr	r3, [sp, #4]
 801724c:	eb61 0103 	sbc.w	r1, r1, r3
 8017250:	6028      	str	r0, [r5, #0]
 8017252:	6069      	str	r1, [r5, #4]
 8017254:	4630      	mov	r0, r6
 8017256:	b002      	add	sp, #8
 8017258:	bd70      	pop	{r4, r5, r6, pc}
 801725a:	f240 3621 	movw	r6, #801	; 0x321
 801725e:	4630      	mov	r0, r6
 8017260:	b002      	add	sp, #8
 8017262:	bd70      	pop	{r4, r5, r6, pc}
 8017264:	260b      	movs	r6, #11
 8017266:	4630      	mov	r0, r6
 8017268:	b002      	add	sp, #8
 801726a:	bd70      	pop	{r4, r5, r6, pc}
 801726c:	f44f 7648 	mov.w	r6, #800	; 0x320
 8017270:	e7f0      	b.n	8017254 <rcl_timer_get_time_until_next_call+0x44>
 8017272:	bf00      	nop

08017274 <rcl_timer_get_guard_condition>:
 8017274:	b130      	cbz	r0, 8017284 <rcl_timer_get_guard_condition+0x10>
 8017276:	6800      	ldr	r0, [r0, #0]
 8017278:	b120      	cbz	r0, 8017284 <rcl_timer_get_guard_condition+0x10>
 801727a:	68c3      	ldr	r3, [r0, #12]
 801727c:	b10b      	cbz	r3, 8017282 <rcl_timer_get_guard_condition+0xe>
 801727e:	3008      	adds	r0, #8
 8017280:	4770      	bx	lr
 8017282:	4618      	mov	r0, r3
 8017284:	4770      	bx	lr
 8017286:	bf00      	nop

08017288 <rcl_validate_enclave_name_with_size>:
 8017288:	2800      	cmp	r0, #0
 801728a:	d049      	beq.n	8017320 <rcl_validate_enclave_name_with_size+0x98>
 801728c:	b570      	push	{r4, r5, r6, lr}
 801728e:	4615      	mov	r5, r2
 8017290:	b0c2      	sub	sp, #264	; 0x108
 8017292:	b19a      	cbz	r2, 80172bc <rcl_validate_enclave_name_with_size+0x34>
 8017294:	461e      	mov	r6, r3
 8017296:	466a      	mov	r2, sp
 8017298:	ab01      	add	r3, sp, #4
 801729a:	460c      	mov	r4, r1
 801729c:	f002 f870 	bl	8019380 <rmw_validate_namespace_with_size>
 80172a0:	4684      	mov	ip, r0
 80172a2:	b9b8      	cbnz	r0, 80172d4 <rcl_validate_enclave_name_with_size+0x4c>
 80172a4:	9900      	ldr	r1, [sp, #0]
 80172a6:	b171      	cbz	r1, 80172c6 <rcl_validate_enclave_name_with_size+0x3e>
 80172a8:	2907      	cmp	r1, #7
 80172aa:	d019      	beq.n	80172e0 <rcl_validate_enclave_name_with_size+0x58>
 80172ac:	1e4b      	subs	r3, r1, #1
 80172ae:	2b05      	cmp	r3, #5
 80172b0:	d83a      	bhi.n	8017328 <rcl_validate_enclave_name_with_size+0xa0>
 80172b2:	e8df f003 	tbb	[pc, r3]
 80172b6:	2926      	.short	0x2926
 80172b8:	1d322f2c 	.word	0x1d322f2c
 80172bc:	f04f 0c0b 	mov.w	ip, #11
 80172c0:	4660      	mov	r0, ip
 80172c2:	b042      	add	sp, #264	; 0x108
 80172c4:	bd70      	pop	{r4, r5, r6, pc}
 80172c6:	2907      	cmp	r1, #7
 80172c8:	d00a      	beq.n	80172e0 <rcl_validate_enclave_name_with_size+0x58>
 80172ca:	2300      	movs	r3, #0
 80172cc:	4660      	mov	r0, ip
 80172ce:	602b      	str	r3, [r5, #0]
 80172d0:	b042      	add	sp, #264	; 0x108
 80172d2:	bd70      	pop	{r4, r5, r6, pc}
 80172d4:	f7fe fa4a 	bl	801576c <rcl_convert_rmw_ret_to_rcl_ret>
 80172d8:	4684      	mov	ip, r0
 80172da:	4660      	mov	r0, ip
 80172dc:	b042      	add	sp, #264	; 0x108
 80172de:	bd70      	pop	{r4, r5, r6, pc}
 80172e0:	2cff      	cmp	r4, #255	; 0xff
 80172e2:	d9f2      	bls.n	80172ca <rcl_validate_enclave_name_with_size+0x42>
 80172e4:	6029      	str	r1, [r5, #0]
 80172e6:	2e00      	cmp	r6, #0
 80172e8:	d0ea      	beq.n	80172c0 <rcl_validate_enclave_name_with_size+0x38>
 80172ea:	23fe      	movs	r3, #254	; 0xfe
 80172ec:	6033      	str	r3, [r6, #0]
 80172ee:	e7e7      	b.n	80172c0 <rcl_validate_enclave_name_with_size+0x38>
 80172f0:	2306      	movs	r3, #6
 80172f2:	602b      	str	r3, [r5, #0]
 80172f4:	2e00      	cmp	r6, #0
 80172f6:	d0e3      	beq.n	80172c0 <rcl_validate_enclave_name_with_size+0x38>
 80172f8:	9b01      	ldr	r3, [sp, #4]
 80172fa:	4660      	mov	r0, ip
 80172fc:	6033      	str	r3, [r6, #0]
 80172fe:	b042      	add	sp, #264	; 0x108
 8017300:	bd70      	pop	{r4, r5, r6, pc}
 8017302:	2301      	movs	r3, #1
 8017304:	602b      	str	r3, [r5, #0]
 8017306:	e7f5      	b.n	80172f4 <rcl_validate_enclave_name_with_size+0x6c>
 8017308:	2302      	movs	r3, #2
 801730a:	602b      	str	r3, [r5, #0]
 801730c:	e7f2      	b.n	80172f4 <rcl_validate_enclave_name_with_size+0x6c>
 801730e:	2303      	movs	r3, #3
 8017310:	602b      	str	r3, [r5, #0]
 8017312:	e7ef      	b.n	80172f4 <rcl_validate_enclave_name_with_size+0x6c>
 8017314:	2304      	movs	r3, #4
 8017316:	602b      	str	r3, [r5, #0]
 8017318:	e7ec      	b.n	80172f4 <rcl_validate_enclave_name_with_size+0x6c>
 801731a:	2305      	movs	r3, #5
 801731c:	602b      	str	r3, [r5, #0]
 801731e:	e7e9      	b.n	80172f4 <rcl_validate_enclave_name_with_size+0x6c>
 8017320:	f04f 0c0b 	mov.w	ip, #11
 8017324:	4660      	mov	r0, ip
 8017326:	4770      	bx	lr
 8017328:	460b      	mov	r3, r1
 801732a:	4a04      	ldr	r2, [pc, #16]	; (801733c <rcl_validate_enclave_name_with_size+0xb4>)
 801732c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017330:	a802      	add	r0, sp, #8
 8017332:	f001 fd31 	bl	8018d98 <rcutils_snprintf>
 8017336:	f04f 0c01 	mov.w	ip, #1
 801733a:	e7c1      	b.n	80172c0 <rcl_validate_enclave_name_with_size+0x38>
 801733c:	0801ff24 	.word	0x0801ff24

08017340 <rcl_validate_enclave_name>:
 8017340:	b168      	cbz	r0, 801735e <rcl_validate_enclave_name+0x1e>
 8017342:	b570      	push	{r4, r5, r6, lr}
 8017344:	460d      	mov	r5, r1
 8017346:	4616      	mov	r6, r2
 8017348:	4604      	mov	r4, r0
 801734a:	f7e8 ffd9 	bl	8000300 <strlen>
 801734e:	4633      	mov	r3, r6
 8017350:	4601      	mov	r1, r0
 8017352:	462a      	mov	r2, r5
 8017354:	4620      	mov	r0, r4
 8017356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801735a:	f7ff bf95 	b.w	8017288 <rcl_validate_enclave_name_with_size>
 801735e:	200b      	movs	r0, #11
 8017360:	4770      	bx	lr
 8017362:	bf00      	nop

08017364 <rcl_get_zero_initialized_wait_set>:
 8017364:	b510      	push	{r4, lr}
 8017366:	4c08      	ldr	r4, [pc, #32]	; (8017388 <rcl_get_zero_initialized_wait_set+0x24>)
 8017368:	4686      	mov	lr, r0
 801736a:	4684      	mov	ip, r0
 801736c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801736e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017374:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801737a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801737e:	6823      	ldr	r3, [r4, #0]
 8017380:	4670      	mov	r0, lr
 8017382:	f8cc 3000 	str.w	r3, [ip]
 8017386:	bd10      	pop	{r4, pc}
 8017388:	0801ff84 	.word	0x0801ff84

0801738c <rcl_wait_set_is_valid>:
 801738c:	b118      	cbz	r0, 8017396 <rcl_wait_set_is_valid+0xa>
 801738e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8017390:	3800      	subs	r0, #0
 8017392:	bf18      	it	ne
 8017394:	2001      	movne	r0, #1
 8017396:	4770      	bx	lr

08017398 <rcl_wait_set_fini>:
 8017398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801739c:	b082      	sub	sp, #8
 801739e:	2800      	cmp	r0, #0
 80173a0:	f000 8095 	beq.w	80174ce <rcl_wait_set_fini+0x136>
 80173a4:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80173a6:	4604      	mov	r4, r0
 80173a8:	2e00      	cmp	r6, #0
 80173aa:	f000 808c 	beq.w	80174c6 <rcl_wait_set_fini+0x12e>
 80173ae:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 80173b0:	f003 fae0 	bl	801a974 <rmw_destroy_wait_set>
 80173b4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80173b6:	1e06      	subs	r6, r0, #0
 80173b8:	bf18      	it	ne
 80173ba:	f44f 7661 	movne.w	r6, #900	; 0x384
 80173be:	2d00      	cmp	r5, #0
 80173c0:	f000 8081 	beq.w	80174c6 <rcl_wait_set_fini+0x12e>
 80173c4:	2700      	movs	r7, #0
 80173c6:	6820      	ldr	r0, [r4, #0]
 80173c8:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80173cc:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80173ce:	6067      	str	r7, [r4, #4]
 80173d0:	602f      	str	r7, [r5, #0]
 80173d2:	b120      	cbz	r0, 80173de <rcl_wait_set_fini+0x46>
 80173d4:	9101      	str	r1, [sp, #4]
 80173d6:	47c0      	blx	r8
 80173d8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80173da:	9901      	ldr	r1, [sp, #4]
 80173dc:	6027      	str	r7, [r4, #0]
 80173de:	68a8      	ldr	r0, [r5, #8]
 80173e0:	b120      	cbz	r0, 80173ec <rcl_wait_set_fini+0x54>
 80173e2:	47c0      	blx	r8
 80173e4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80173e6:	2300      	movs	r3, #0
 80173e8:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80173ec:	f04f 0800 	mov.w	r8, #0
 80173f0:	68a0      	ldr	r0, [r4, #8]
 80173f2:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80173f4:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80173f6:	f8c4 800c 	str.w	r8, [r4, #12]
 80173fa:	f8c5 800c 	str.w	r8, [r5, #12]
 80173fe:	b128      	cbz	r0, 801740c <rcl_wait_set_fini+0x74>
 8017400:	47b8      	blx	r7
 8017402:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017404:	f8c4 8008 	str.w	r8, [r4, #8]
 8017408:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801740a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801740c:	f04f 0800 	mov.w	r8, #0
 8017410:	6968      	ldr	r0, [r5, #20]
 8017412:	f8c5 8010 	str.w	r8, [r5, #16]
 8017416:	b128      	cbz	r0, 8017424 <rcl_wait_set_fini+0x8c>
 8017418:	47b8      	blx	r7
 801741a:	f8c5 8014 	str.w	r8, [r5, #20]
 801741e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017420:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8017422:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8017424:	f04f 0800 	mov.w	r8, #0
 8017428:	6920      	ldr	r0, [r4, #16]
 801742a:	f8c4 8014 	str.w	r8, [r4, #20]
 801742e:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8017432:	b128      	cbz	r0, 8017440 <rcl_wait_set_fini+0xa8>
 8017434:	47b8      	blx	r7
 8017436:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017438:	f8c4 8010 	str.w	r8, [r4, #16]
 801743c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801743e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8017440:	f04f 0800 	mov.w	r8, #0
 8017444:	69a0      	ldr	r0, [r4, #24]
 8017446:	f8c4 801c 	str.w	r8, [r4, #28]
 801744a:	f8c5 8018 	str.w	r8, [r5, #24]
 801744e:	b128      	cbz	r0, 801745c <rcl_wait_set_fini+0xc4>
 8017450:	9101      	str	r1, [sp, #4]
 8017452:	47b8      	blx	r7
 8017454:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017456:	9901      	ldr	r1, [sp, #4]
 8017458:	f8c4 8018 	str.w	r8, [r4, #24]
 801745c:	6a28      	ldr	r0, [r5, #32]
 801745e:	b120      	cbz	r0, 801746a <rcl_wait_set_fini+0xd2>
 8017460:	47b8      	blx	r7
 8017462:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017464:	2300      	movs	r3, #0
 8017466:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801746a:	2700      	movs	r7, #0
 801746c:	6a20      	ldr	r0, [r4, #32]
 801746e:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8017472:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8017474:	6267      	str	r7, [r4, #36]	; 0x24
 8017476:	626f      	str	r7, [r5, #36]	; 0x24
 8017478:	b120      	cbz	r0, 8017484 <rcl_wait_set_fini+0xec>
 801747a:	9101      	str	r1, [sp, #4]
 801747c:	47c0      	blx	r8
 801747e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017480:	9901      	ldr	r1, [sp, #4]
 8017482:	6227      	str	r7, [r4, #32]
 8017484:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8017486:	b120      	cbz	r0, 8017492 <rcl_wait_set_fini+0xfa>
 8017488:	47c0      	blx	r8
 801748a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801748c:	2300      	movs	r3, #0
 801748e:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8017492:	2700      	movs	r7, #0
 8017494:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8017496:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801749a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801749c:	62e7      	str	r7, [r4, #44]	; 0x2c
 801749e:	632f      	str	r7, [r5, #48]	; 0x30
 80174a0:	b120      	cbz	r0, 80174ac <rcl_wait_set_fini+0x114>
 80174a2:	9101      	str	r1, [sp, #4]
 80174a4:	47c0      	blx	r8
 80174a6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80174a8:	9901      	ldr	r1, [sp, #4]
 80174aa:	62a7      	str	r7, [r4, #40]	; 0x28
 80174ac:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80174ae:	b120      	cbz	r0, 80174ba <rcl_wait_set_fini+0x122>
 80174b0:	47c0      	blx	r8
 80174b2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80174b4:	2300      	movs	r3, #0
 80174b6:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 80174ba:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80174bc:	4628      	mov	r0, r5
 80174be:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80174c0:	4798      	blx	r3
 80174c2:	2300      	movs	r3, #0
 80174c4:	6323      	str	r3, [r4, #48]	; 0x30
 80174c6:	4630      	mov	r0, r6
 80174c8:	b002      	add	sp, #8
 80174ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174ce:	260b      	movs	r6, #11
 80174d0:	4630      	mov	r0, r6
 80174d2:	b002      	add	sp, #8
 80174d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080174d8 <rcl_wait_set_add_subscription>:
 80174d8:	b318      	cbz	r0, 8017522 <rcl_wait_set_add_subscription+0x4a>
 80174da:	b538      	push	{r3, r4, r5, lr}
 80174dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80174de:	4604      	mov	r4, r0
 80174e0:	b30b      	cbz	r3, 8017526 <rcl_wait_set_add_subscription+0x4e>
 80174e2:	b319      	cbz	r1, 801752c <rcl_wait_set_add_subscription+0x54>
 80174e4:	681d      	ldr	r5, [r3, #0]
 80174e6:	6840      	ldr	r0, [r0, #4]
 80174e8:	4285      	cmp	r5, r0
 80174ea:	d217      	bcs.n	801751c <rcl_wait_set_add_subscription+0x44>
 80174ec:	1c68      	adds	r0, r5, #1
 80174ee:	6018      	str	r0, [r3, #0]
 80174f0:	6823      	ldr	r3, [r4, #0]
 80174f2:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80174f6:	b102      	cbz	r2, 80174fa <rcl_wait_set_add_subscription+0x22>
 80174f8:	6015      	str	r5, [r2, #0]
 80174fa:	4608      	mov	r0, r1
 80174fc:	f7ff fad8 	bl	8016ab0 <rcl_subscription_get_rmw_handle>
 8017500:	b150      	cbz	r0, 8017518 <rcl_wait_set_add_subscription+0x40>
 8017502:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017504:	6842      	ldr	r2, [r0, #4]
 8017506:	2000      	movs	r0, #0
 8017508:	689b      	ldr	r3, [r3, #8]
 801750a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801750e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017510:	6853      	ldr	r3, [r2, #4]
 8017512:	3301      	adds	r3, #1
 8017514:	6053      	str	r3, [r2, #4]
 8017516:	bd38      	pop	{r3, r4, r5, pc}
 8017518:	2001      	movs	r0, #1
 801751a:	bd38      	pop	{r3, r4, r5, pc}
 801751c:	f240 3086 	movw	r0, #902	; 0x386
 8017520:	bd38      	pop	{r3, r4, r5, pc}
 8017522:	200b      	movs	r0, #11
 8017524:	4770      	bx	lr
 8017526:	f44f 7061 	mov.w	r0, #900	; 0x384
 801752a:	bd38      	pop	{r3, r4, r5, pc}
 801752c:	200b      	movs	r0, #11
 801752e:	bd38      	pop	{r3, r4, r5, pc}

08017530 <rcl_wait_set_clear>:
 8017530:	2800      	cmp	r0, #0
 8017532:	d074      	beq.n	801761e <rcl_wait_set_clear+0xee>
 8017534:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017536:	b510      	push	{r4, lr}
 8017538:	4604      	mov	r4, r0
 801753a:	2b00      	cmp	r3, #0
 801753c:	d071      	beq.n	8017622 <rcl_wait_set_clear+0xf2>
 801753e:	6800      	ldr	r0, [r0, #0]
 8017540:	b138      	cbz	r0, 8017552 <rcl_wait_set_clear+0x22>
 8017542:	6862      	ldr	r2, [r4, #4]
 8017544:	2100      	movs	r1, #0
 8017546:	0092      	lsls	r2, r2, #2
 8017548:	f006 f968 	bl	801d81c <memset>
 801754c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801754e:	2200      	movs	r2, #0
 8017550:	601a      	str	r2, [r3, #0]
 8017552:	68a0      	ldr	r0, [r4, #8]
 8017554:	b138      	cbz	r0, 8017566 <rcl_wait_set_clear+0x36>
 8017556:	68e2      	ldr	r2, [r4, #12]
 8017558:	2100      	movs	r1, #0
 801755a:	0092      	lsls	r2, r2, #2
 801755c:	f006 f95e 	bl	801d81c <memset>
 8017560:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017562:	2200      	movs	r2, #0
 8017564:	60da      	str	r2, [r3, #12]
 8017566:	69a0      	ldr	r0, [r4, #24]
 8017568:	b138      	cbz	r0, 801757a <rcl_wait_set_clear+0x4a>
 801756a:	69e2      	ldr	r2, [r4, #28]
 801756c:	2100      	movs	r1, #0
 801756e:	0092      	lsls	r2, r2, #2
 8017570:	f006 f954 	bl	801d81c <memset>
 8017574:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017576:	2200      	movs	r2, #0
 8017578:	619a      	str	r2, [r3, #24]
 801757a:	6a20      	ldr	r0, [r4, #32]
 801757c:	b138      	cbz	r0, 801758e <rcl_wait_set_clear+0x5e>
 801757e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8017580:	2100      	movs	r1, #0
 8017582:	0092      	lsls	r2, r2, #2
 8017584:	f006 f94a 	bl	801d81c <memset>
 8017588:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801758a:	2200      	movs	r2, #0
 801758c:	625a      	str	r2, [r3, #36]	; 0x24
 801758e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8017590:	b138      	cbz	r0, 80175a2 <rcl_wait_set_clear+0x72>
 8017592:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017594:	2100      	movs	r1, #0
 8017596:	0092      	lsls	r2, r2, #2
 8017598:	f006 f940 	bl	801d81c <memset>
 801759c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801759e:	2200      	movs	r2, #0
 80175a0:	631a      	str	r2, [r3, #48]	; 0x30
 80175a2:	6920      	ldr	r0, [r4, #16]
 80175a4:	b138      	cbz	r0, 80175b6 <rcl_wait_set_clear+0x86>
 80175a6:	6962      	ldr	r2, [r4, #20]
 80175a8:	2100      	movs	r1, #0
 80175aa:	0092      	lsls	r2, r2, #2
 80175ac:	f006 f936 	bl	801d81c <memset>
 80175b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80175b2:	2200      	movs	r2, #0
 80175b4:	641a      	str	r2, [r3, #64]	; 0x40
 80175b6:	6898      	ldr	r0, [r3, #8]
 80175b8:	b138      	cbz	r0, 80175ca <rcl_wait_set_clear+0x9a>
 80175ba:	685a      	ldr	r2, [r3, #4]
 80175bc:	2100      	movs	r1, #0
 80175be:	0092      	lsls	r2, r2, #2
 80175c0:	f006 f92c 	bl	801d81c <memset>
 80175c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80175c6:	2200      	movs	r2, #0
 80175c8:	605a      	str	r2, [r3, #4]
 80175ca:	6958      	ldr	r0, [r3, #20]
 80175cc:	b138      	cbz	r0, 80175de <rcl_wait_set_clear+0xae>
 80175ce:	691a      	ldr	r2, [r3, #16]
 80175d0:	2100      	movs	r1, #0
 80175d2:	0092      	lsls	r2, r2, #2
 80175d4:	f006 f922 	bl	801d81c <memset>
 80175d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80175da:	2200      	movs	r2, #0
 80175dc:	611a      	str	r2, [r3, #16]
 80175de:	6a18      	ldr	r0, [r3, #32]
 80175e0:	b138      	cbz	r0, 80175f2 <rcl_wait_set_clear+0xc2>
 80175e2:	69da      	ldr	r2, [r3, #28]
 80175e4:	2100      	movs	r1, #0
 80175e6:	0092      	lsls	r2, r2, #2
 80175e8:	f006 f918 	bl	801d81c <memset>
 80175ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80175ee:	2200      	movs	r2, #0
 80175f0:	61da      	str	r2, [r3, #28]
 80175f2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80175f4:	b138      	cbz	r0, 8017606 <rcl_wait_set_clear+0xd6>
 80175f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80175f8:	2100      	movs	r1, #0
 80175fa:	0092      	lsls	r2, r2, #2
 80175fc:	f006 f90e 	bl	801d81c <memset>
 8017600:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017602:	2200      	movs	r2, #0
 8017604:	629a      	str	r2, [r3, #40]	; 0x28
 8017606:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8017608:	b140      	cbz	r0, 801761c <rcl_wait_set_clear+0xec>
 801760a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801760c:	2100      	movs	r1, #0
 801760e:	0092      	lsls	r2, r2, #2
 8017610:	f006 f904 	bl	801d81c <memset>
 8017614:	2300      	movs	r3, #0
 8017616:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017618:	4618      	mov	r0, r3
 801761a:	6353      	str	r3, [r2, #52]	; 0x34
 801761c:	bd10      	pop	{r4, pc}
 801761e:	200b      	movs	r0, #11
 8017620:	4770      	bx	lr
 8017622:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017626:	bd10      	pop	{r4, pc}

08017628 <rcl_wait_set_resize>:
 8017628:	2800      	cmp	r0, #0
 801762a:	f000 8180 	beq.w	801792e <rcl_wait_set_resize+0x306>
 801762e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017632:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8017634:	b083      	sub	sp, #12
 8017636:	4605      	mov	r5, r0
 8017638:	2c00      	cmp	r4, #0
 801763a:	f000 817a 	beq.w	8017932 <rcl_wait_set_resize+0x30a>
 801763e:	f04f 0900 	mov.w	r9, #0
 8017642:	461f      	mov	r7, r3
 8017644:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8017648:	4688      	mov	r8, r1
 801764a:	4616      	mov	r6, r2
 801764c:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 8017650:	f8c0 9004 	str.w	r9, [r0, #4]
 8017654:	f8c4 9000 	str.w	r9, [r4]
 8017658:	2900      	cmp	r1, #0
 801765a:	f000 80bf 	beq.w	80177dc <rcl_wait_set_resize+0x1b4>
 801765e:	008c      	lsls	r4, r1, #2
 8017660:	4652      	mov	r2, sl
 8017662:	6800      	ldr	r0, [r0, #0]
 8017664:	4621      	mov	r1, r4
 8017666:	9301      	str	r3, [sp, #4]
 8017668:	4798      	blx	r3
 801766a:	9b01      	ldr	r3, [sp, #4]
 801766c:	6028      	str	r0, [r5, #0]
 801766e:	2800      	cmp	r0, #0
 8017670:	f000 80f6 	beq.w	8017860 <rcl_wait_set_resize+0x238>
 8017674:	4622      	mov	r2, r4
 8017676:	4649      	mov	r1, r9
 8017678:	9301      	str	r3, [sp, #4]
 801767a:	f006 f8cf 	bl	801d81c <memset>
 801767e:	f8c5 8004 	str.w	r8, [r5, #4]
 8017682:	4652      	mov	r2, sl
 8017684:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8017688:	4621      	mov	r1, r4
 801768a:	9b01      	ldr	r3, [sp, #4]
 801768c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8017690:	f8c8 9004 	str.w	r9, [r8, #4]
 8017694:	4798      	blx	r3
 8017696:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017698:	f8c8 0008 	str.w	r0, [r8, #8]
 801769c:	689b      	ldr	r3, [r3, #8]
 801769e:	2b00      	cmp	r3, #0
 80176a0:	f000 814a 	beq.w	8017938 <rcl_wait_set_resize+0x310>
 80176a4:	4622      	mov	r2, r4
 80176a6:	4649      	mov	r1, r9
 80176a8:	4618      	mov	r0, r3
 80176aa:	f006 f8b7 	bl	801d81c <memset>
 80176ae:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80176b0:	f04f 0800 	mov.w	r8, #0
 80176b4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80176b8:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 80176bc:	f8c5 800c 	str.w	r8, [r5, #12]
 80176c0:	f8c4 800c 	str.w	r8, [r4, #12]
 80176c4:	2e00      	cmp	r6, #0
 80176c6:	f040 809b 	bne.w	8017800 <rcl_wait_set_resize+0x1d8>
 80176ca:	68a8      	ldr	r0, [r5, #8]
 80176cc:	b128      	cbz	r0, 80176da <rcl_wait_set_resize+0xb2>
 80176ce:	4649      	mov	r1, r9
 80176d0:	4790      	blx	r2
 80176d2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80176d4:	60ae      	str	r6, [r5, #8]
 80176d6:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80176da:	f04f 0800 	mov.w	r8, #0
 80176de:	19f6      	adds	r6, r6, r7
 80176e0:	f8c4 8010 	str.w	r8, [r4, #16]
 80176e4:	f040 80a2 	bne.w	801782c <rcl_wait_set_resize+0x204>
 80176e8:	6960      	ldr	r0, [r4, #20]
 80176ea:	b130      	cbz	r0, 80176fa <rcl_wait_set_resize+0xd2>
 80176ec:	4649      	mov	r1, r9
 80176ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80176f0:	4798      	blx	r3
 80176f2:	6166      	str	r6, [r4, #20]
 80176f4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80176f6:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80176fa:	2600      	movs	r6, #0
 80176fc:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8017700:	616e      	str	r6, [r5, #20]
 8017702:	6426      	str	r6, [r4, #64]	; 0x40
 8017704:	2f00      	cmp	r7, #0
 8017706:	f040 80af 	bne.w	8017868 <rcl_wait_set_resize+0x240>
 801770a:	6928      	ldr	r0, [r5, #16]
 801770c:	b138      	cbz	r0, 801771e <rcl_wait_set_resize+0xf6>
 801770e:	4649      	mov	r1, r9
 8017710:	47d0      	blx	sl
 8017712:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017714:	612f      	str	r7, [r5, #16]
 8017716:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801771a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801771e:	2600      	movs	r6, #0
 8017720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017722:	61ee      	str	r6, [r5, #28]
 8017724:	61a6      	str	r6, [r4, #24]
 8017726:	2b00      	cmp	r3, #0
 8017728:	f040 8093 	bne.w	8017852 <rcl_wait_set_resize+0x22a>
 801772c:	69a8      	ldr	r0, [r5, #24]
 801772e:	b120      	cbz	r0, 801773a <rcl_wait_set_resize+0x112>
 8017730:	4649      	mov	r1, r9
 8017732:	47d0      	blx	sl
 8017734:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017736:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017738:	61ab      	str	r3, [r5, #24]
 801773a:	6a20      	ldr	r0, [r4, #32]
 801773c:	b128      	cbz	r0, 801774a <rcl_wait_set_resize+0x122>
 801773e:	4649      	mov	r1, r9
 8017740:	47d0      	blx	sl
 8017742:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017744:	2300      	movs	r3, #0
 8017746:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801774a:	2600      	movs	r6, #0
 801774c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801774e:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8017750:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 8017754:	626e      	str	r6, [r5, #36]	; 0x24
 8017756:	6266      	str	r6, [r4, #36]	; 0x24
 8017758:	2b00      	cmp	r3, #0
 801775a:	f000 8098 	beq.w	801788e <rcl_wait_set_resize+0x266>
 801775e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8017762:	463a      	mov	r2, r7
 8017764:	6a28      	ldr	r0, [r5, #32]
 8017766:	4651      	mov	r1, sl
 8017768:	47c8      	blx	r9
 801776a:	6228      	str	r0, [r5, #32]
 801776c:	2800      	cmp	r0, #0
 801776e:	d077      	beq.n	8017860 <rcl_wait_set_resize+0x238>
 8017770:	4652      	mov	r2, sl
 8017772:	4631      	mov	r1, r6
 8017774:	f006 f852 	bl	801d81c <memset>
 8017778:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801777a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801777c:	463a      	mov	r2, r7
 801777e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017780:	4651      	mov	r1, sl
 8017782:	626b      	str	r3, [r5, #36]	; 0x24
 8017784:	62a6      	str	r6, [r4, #40]	; 0x28
 8017786:	47c8      	blx	r9
 8017788:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801778a:	62e0      	str	r0, [r4, #44]	; 0x2c
 801778c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801778e:	2c00      	cmp	r4, #0
 8017790:	f000 80f2 	beq.w	8017978 <rcl_wait_set_resize+0x350>
 8017794:	4620      	mov	r0, r4
 8017796:	4652      	mov	r2, sl
 8017798:	4631      	mov	r1, r6
 801779a:	f006 f83f 	bl	801d81c <memset>
 801779e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80177a0:	2600      	movs	r6, #0
 80177a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80177a4:	6da7      	ldr	r7, [r4, #88]	; 0x58
 80177a6:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 80177aa:	62ee      	str	r6, [r5, #44]	; 0x2c
 80177ac:	6326      	str	r6, [r4, #48]	; 0x30
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	f040 8097 	bne.w	80178e2 <rcl_wait_set_resize+0x2ba>
 80177b4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80177b6:	b120      	cbz	r0, 80177c2 <rcl_wait_set_resize+0x19a>
 80177b8:	4639      	mov	r1, r7
 80177ba:	47c0      	blx	r8
 80177bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80177be:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80177c0:	62ab      	str	r3, [r5, #40]	; 0x28
 80177c2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80177c4:	2800      	cmp	r0, #0
 80177c6:	d04c      	beq.n	8017862 <rcl_wait_set_resize+0x23a>
 80177c8:	4639      	mov	r1, r7
 80177ca:	47c0      	blx	r8
 80177cc:	2300      	movs	r3, #0
 80177ce:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80177d0:	4618      	mov	r0, r3
 80177d2:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 80177d6:	b003      	add	sp, #12
 80177d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177dc:	6800      	ldr	r0, [r0, #0]
 80177de:	b120      	cbz	r0, 80177ea <rcl_wait_set_resize+0x1c2>
 80177e0:	4651      	mov	r1, sl
 80177e2:	47d8      	blx	fp
 80177e4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80177e6:	f8c5 8000 	str.w	r8, [r5]
 80177ea:	68a0      	ldr	r0, [r4, #8]
 80177ec:	2800      	cmp	r0, #0
 80177ee:	f43f af5f 	beq.w	80176b0 <rcl_wait_set_resize+0x88>
 80177f2:	4651      	mov	r1, sl
 80177f4:	47d8      	blx	fp
 80177f6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80177f8:	2300      	movs	r3, #0
 80177fa:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80177fe:	e757      	b.n	80176b0 <rcl_wait_set_resize+0x88>
 8017800:	00b4      	lsls	r4, r6, #2
 8017802:	464a      	mov	r2, r9
 8017804:	68a8      	ldr	r0, [r5, #8]
 8017806:	4621      	mov	r1, r4
 8017808:	4798      	blx	r3
 801780a:	60a8      	str	r0, [r5, #8]
 801780c:	b340      	cbz	r0, 8017860 <rcl_wait_set_resize+0x238>
 801780e:	4622      	mov	r2, r4
 8017810:	4641      	mov	r1, r8
 8017812:	f006 f803 	bl	801d81c <memset>
 8017816:	f04f 0800 	mov.w	r8, #0
 801781a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801781c:	60ee      	str	r6, [r5, #12]
 801781e:	19f6      	adds	r6, r6, r7
 8017820:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8017824:	f8c4 8010 	str.w	r8, [r4, #16]
 8017828:	f43f af5e 	beq.w	80176e8 <rcl_wait_set_resize+0xc0>
 801782c:	00b6      	lsls	r6, r6, #2
 801782e:	464a      	mov	r2, r9
 8017830:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8017832:	6960      	ldr	r0, [r4, #20]
 8017834:	4631      	mov	r1, r6
 8017836:	4798      	blx	r3
 8017838:	4681      	mov	r9, r0
 801783a:	6160      	str	r0, [r4, #20]
 801783c:	2800      	cmp	r0, #0
 801783e:	f000 8084 	beq.w	801794a <rcl_wait_set_resize+0x322>
 8017842:	4632      	mov	r2, r6
 8017844:	4641      	mov	r1, r8
 8017846:	f005 ffe9 	bl	801d81c <memset>
 801784a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801784c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8017850:	e753      	b.n	80176fa <rcl_wait_set_resize+0xd2>
 8017852:	009c      	lsls	r4, r3, #2
 8017854:	464a      	mov	r2, r9
 8017856:	69a8      	ldr	r0, [r5, #24]
 8017858:	4621      	mov	r1, r4
 801785a:	47c0      	blx	r8
 801785c:	61a8      	str	r0, [r5, #24]
 801785e:	bb40      	cbnz	r0, 80178b2 <rcl_wait_set_resize+0x28a>
 8017860:	200a      	movs	r0, #10
 8017862:	b003      	add	sp, #12
 8017864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017868:	00bc      	lsls	r4, r7, #2
 801786a:	464a      	mov	r2, r9
 801786c:	6928      	ldr	r0, [r5, #16]
 801786e:	4621      	mov	r1, r4
 8017870:	47c0      	blx	r8
 8017872:	6128      	str	r0, [r5, #16]
 8017874:	2800      	cmp	r0, #0
 8017876:	d0f3      	beq.n	8017860 <rcl_wait_set_resize+0x238>
 8017878:	4622      	mov	r2, r4
 801787a:	4631      	mov	r1, r6
 801787c:	f005 ffce 	bl	801d81c <memset>
 8017880:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017882:	616f      	str	r7, [r5, #20]
 8017884:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8017888:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801788c:	e747      	b.n	801771e <rcl_wait_set_resize+0xf6>
 801788e:	6a28      	ldr	r0, [r5, #32]
 8017890:	b120      	cbz	r0, 801789c <rcl_wait_set_resize+0x274>
 8017892:	4639      	mov	r1, r7
 8017894:	47c0      	blx	r8
 8017896:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017898:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801789a:	622b      	str	r3, [r5, #32]
 801789c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801789e:	2800      	cmp	r0, #0
 80178a0:	f43f af7e 	beq.w	80177a0 <rcl_wait_set_resize+0x178>
 80178a4:	4639      	mov	r1, r7
 80178a6:	47c0      	blx	r8
 80178a8:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80178aa:	2300      	movs	r3, #0
 80178ac:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 80178b0:	e776      	b.n	80177a0 <rcl_wait_set_resize+0x178>
 80178b2:	4622      	mov	r2, r4
 80178b4:	4631      	mov	r1, r6
 80178b6:	f005 ffb1 	bl	801d81c <memset>
 80178ba:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 80178bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80178be:	464a      	mov	r2, r9
 80178c0:	6a38      	ldr	r0, [r7, #32]
 80178c2:	4621      	mov	r1, r4
 80178c4:	61eb      	str	r3, [r5, #28]
 80178c6:	61fe      	str	r6, [r7, #28]
 80178c8:	47c0      	blx	r8
 80178ca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80178cc:	6238      	str	r0, [r7, #32]
 80178ce:	6a1f      	ldr	r7, [r3, #32]
 80178d0:	2f00      	cmp	r7, #0
 80178d2:	d04a      	beq.n	801796a <rcl_wait_set_resize+0x342>
 80178d4:	4622      	mov	r2, r4
 80178d6:	4631      	mov	r1, r6
 80178d8:	4638      	mov	r0, r7
 80178da:	f005 ff9f 	bl	801d81c <memset>
 80178de:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80178e0:	e733      	b.n	801774a <rcl_wait_set_resize+0x122>
 80178e2:	009c      	lsls	r4, r3, #2
 80178e4:	463a      	mov	r2, r7
 80178e6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80178e8:	4621      	mov	r1, r4
 80178ea:	47c8      	blx	r9
 80178ec:	62a8      	str	r0, [r5, #40]	; 0x28
 80178ee:	2800      	cmp	r0, #0
 80178f0:	d0b6      	beq.n	8017860 <rcl_wait_set_resize+0x238>
 80178f2:	4622      	mov	r2, r4
 80178f4:	4631      	mov	r1, r6
 80178f6:	f005 ff91 	bl	801d81c <memset>
 80178fa:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 80178fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017900:	463a      	mov	r2, r7
 8017902:	4621      	mov	r1, r4
 8017904:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8017908:	62eb      	str	r3, [r5, #44]	; 0x2c
 801790a:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 801790e:	47c8      	blx	r9
 8017910:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017912:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8017916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017918:	2b00      	cmp	r3, #0
 801791a:	d034      	beq.n	8017986 <rcl_wait_set_resize+0x35e>
 801791c:	4622      	mov	r2, r4
 801791e:	4631      	mov	r1, r6
 8017920:	4618      	mov	r0, r3
 8017922:	f005 ff7b 	bl	801d81c <memset>
 8017926:	4630      	mov	r0, r6
 8017928:	b003      	add	sp, #12
 801792a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801792e:	200b      	movs	r0, #11
 8017930:	4770      	bx	lr
 8017932:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017936:	e794      	b.n	8017862 <rcl_wait_set_resize+0x23a>
 8017938:	6828      	ldr	r0, [r5, #0]
 801793a:	4651      	mov	r1, sl
 801793c:	9301      	str	r3, [sp, #4]
 801793e:	47d8      	blx	fp
 8017940:	9b01      	ldr	r3, [sp, #4]
 8017942:	200a      	movs	r0, #10
 8017944:	e9c5 3300 	strd	r3, r3, [r5]
 8017948:	e78b      	b.n	8017862 <rcl_wait_set_resize+0x23a>
 801794a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801794c:	68a8      	ldr	r0, [r5, #8]
 801794e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8017950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017952:	4798      	blx	r3
 8017954:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017956:	6928      	ldr	r0, [r5, #16]
 8017958:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801795a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801795c:	e9c5 9902 	strd	r9, r9, [r5, #8]
 8017960:	4790      	blx	r2
 8017962:	200a      	movs	r0, #10
 8017964:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8017968:	e77b      	b.n	8017862 <rcl_wait_set_resize+0x23a>
 801796a:	69a8      	ldr	r0, [r5, #24]
 801796c:	4649      	mov	r1, r9
 801796e:	47d0      	blx	sl
 8017970:	200a      	movs	r0, #10
 8017972:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8017976:	e774      	b.n	8017862 <rcl_wait_set_resize+0x23a>
 8017978:	6a28      	ldr	r0, [r5, #32]
 801797a:	4639      	mov	r1, r7
 801797c:	47c0      	blx	r8
 801797e:	200a      	movs	r0, #10
 8017980:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8017984:	e76d      	b.n	8017862 <rcl_wait_set_resize+0x23a>
 8017986:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8017988:	4639      	mov	r1, r7
 801798a:	9301      	str	r3, [sp, #4]
 801798c:	47c0      	blx	r8
 801798e:	9b01      	ldr	r3, [sp, #4]
 8017990:	200a      	movs	r0, #10
 8017992:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8017996:	e764      	b.n	8017862 <rcl_wait_set_resize+0x23a>

08017998 <rcl_wait_set_init>:
 8017998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801799c:	b085      	sub	sp, #20
 801799e:	4605      	mov	r5, r0
 80179a0:	460e      	mov	r6, r1
 80179a2:	4617      	mov	r7, r2
 80179a4:	a812      	add	r0, sp, #72	; 0x48
 80179a6:	4698      	mov	r8, r3
 80179a8:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 80179ac:	f7f7 f820 	bl	800e9f0 <rcutils_allocator_is_valid>
 80179b0:	2d00      	cmp	r5, #0
 80179b2:	d072      	beq.n	8017a9a <rcl_wait_set_init+0x102>
 80179b4:	f080 0001 	eor.w	r0, r0, #1
 80179b8:	b2c0      	uxtb	r0, r0
 80179ba:	2800      	cmp	r0, #0
 80179bc:	d16d      	bne.n	8017a9a <rcl_wait_set_init+0x102>
 80179be:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 80179c2:	f1ba 0f00 	cmp.w	sl, #0
 80179c6:	d004      	beq.n	80179d2 <rcl_wait_set_init+0x3a>
 80179c8:	2464      	movs	r4, #100	; 0x64
 80179ca:	4620      	mov	r0, r4
 80179cc:	b005      	add	sp, #20
 80179ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179d2:	f1b9 0f00 	cmp.w	r9, #0
 80179d6:	d060      	beq.n	8017a9a <rcl_wait_set_init+0x102>
 80179d8:	4648      	mov	r0, r9
 80179da:	f7fd fee5 	bl	80157a8 <rcl_context_is_valid>
 80179de:	2800      	cmp	r0, #0
 80179e0:	d068      	beq.n	8017ab4 <rcl_wait_set_init+0x11c>
 80179e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80179e4:	205c      	movs	r0, #92	; 0x5c
 80179e6:	9916      	ldr	r1, [sp, #88]	; 0x58
 80179e8:	4798      	blx	r3
 80179ea:	6328      	str	r0, [r5, #48]	; 0x30
 80179ec:	2800      	cmp	r0, #0
 80179ee:	d063      	beq.n	8017ab8 <rcl_wait_set_init+0x120>
 80179f0:	225c      	movs	r2, #92	; 0x5c
 80179f2:	4651      	mov	r1, sl
 80179f4:	f005 ff12 	bl	801d81c <memset>
 80179f8:	ac12      	add	r4, sp, #72	; 0x48
 80179fa:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 80179fe:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8017a02:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 8017a06:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 8017a0a:	eb03 0e02 	add.w	lr, r3, r2
 8017a0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a10:	f8d9 9000 	ldr.w	r9, [r9]
 8017a14:	449e      	add	lr, r3
 8017a16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017a18:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8017a1c:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8017a20:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8017a24:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 8017a28:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 8017a2c:	44be      	add	lr, r7
 8017a2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017a32:	6823      	ldr	r3, [r4, #0]
 8017a34:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 8017a38:	f109 0028 	add.w	r0, r9, #40	; 0x28
 8017a3c:	f8cc 3000 	str.w	r3, [ip]
 8017a40:	f002 ff8e 	bl	801a960 <rmw_create_wait_set>
 8017a44:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017a46:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 8017a4a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8017a4c:	b350      	cbz	r0, 8017aa4 <rcl_wait_set_init+0x10c>
 8017a4e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017a50:	4643      	mov	r3, r8
 8017a52:	463a      	mov	r2, r7
 8017a54:	4631      	mov	r1, r6
 8017a56:	9402      	str	r4, [sp, #8]
 8017a58:	4628      	mov	r0, r5
 8017a5a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017a5c:	9401      	str	r4, [sp, #4]
 8017a5e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017a60:	9400      	str	r4, [sp, #0]
 8017a62:	f7ff fde1 	bl	8017628 <rcl_wait_set_resize>
 8017a66:	4604      	mov	r4, r0
 8017a68:	2800      	cmp	r0, #0
 8017a6a:	d0ae      	beq.n	80179ca <rcl_wait_set_init+0x32>
 8017a6c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017a6e:	bb2b      	cbnz	r3, 8017abc <rcl_wait_set_init+0x124>
 8017a70:	2600      	movs	r6, #0
 8017a72:	4628      	mov	r0, r5
 8017a74:	4633      	mov	r3, r6
 8017a76:	4632      	mov	r2, r6
 8017a78:	4631      	mov	r1, r6
 8017a7a:	9600      	str	r6, [sp, #0]
 8017a7c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8017a80:	f7ff fdd2 	bl	8017628 <rcl_wait_set_resize>
 8017a84:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8017a86:	2800      	cmp	r0, #0
 8017a88:	d09f      	beq.n	80179ca <rcl_wait_set_init+0x32>
 8017a8a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8017a8c:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8017a8e:	4798      	blx	r3
 8017a90:	4620      	mov	r0, r4
 8017a92:	632e      	str	r6, [r5, #48]	; 0x30
 8017a94:	b005      	add	sp, #20
 8017a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a9a:	240b      	movs	r4, #11
 8017a9c:	4620      	mov	r0, r4
 8017a9e:	b005      	add	sp, #20
 8017aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017aa4:	2401      	movs	r4, #1
 8017aa6:	f002 ff65 	bl	801a974 <rmw_destroy_wait_set>
 8017aaa:	2800      	cmp	r0, #0
 8017aac:	bf18      	it	ne
 8017aae:	f44f 7461 	movne.w	r4, #900	; 0x384
 8017ab2:	e7dd      	b.n	8017a70 <rcl_wait_set_init+0xd8>
 8017ab4:	2465      	movs	r4, #101	; 0x65
 8017ab6:	e788      	b.n	80179ca <rcl_wait_set_init+0x32>
 8017ab8:	240a      	movs	r4, #10
 8017aba:	e786      	b.n	80179ca <rcl_wait_set_init+0x32>
 8017abc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8017abe:	e7f2      	b.n	8017aa6 <rcl_wait_set_init+0x10e>

08017ac0 <rcl_wait_set_add_guard_condition>:
 8017ac0:	b318      	cbz	r0, 8017b0a <rcl_wait_set_add_guard_condition+0x4a>
 8017ac2:	b538      	push	{r3, r4, r5, lr}
 8017ac4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017ac6:	4604      	mov	r4, r0
 8017ac8:	b30b      	cbz	r3, 8017b0e <rcl_wait_set_add_guard_condition+0x4e>
 8017aca:	b319      	cbz	r1, 8017b14 <rcl_wait_set_add_guard_condition+0x54>
 8017acc:	68dd      	ldr	r5, [r3, #12]
 8017ace:	68c0      	ldr	r0, [r0, #12]
 8017ad0:	4285      	cmp	r5, r0
 8017ad2:	d217      	bcs.n	8017b04 <rcl_wait_set_add_guard_condition+0x44>
 8017ad4:	1c68      	adds	r0, r5, #1
 8017ad6:	60d8      	str	r0, [r3, #12]
 8017ad8:	68a3      	ldr	r3, [r4, #8]
 8017ada:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8017ade:	b102      	cbz	r2, 8017ae2 <rcl_wait_set_add_guard_condition+0x22>
 8017ae0:	6015      	str	r5, [r2, #0]
 8017ae2:	4608      	mov	r0, r1
 8017ae4:	f004 ff96 	bl	801ca14 <rcl_guard_condition_get_rmw_handle>
 8017ae8:	b150      	cbz	r0, 8017b00 <rcl_wait_set_add_guard_condition+0x40>
 8017aea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017aec:	6842      	ldr	r2, [r0, #4]
 8017aee:	2000      	movs	r0, #0
 8017af0:	695b      	ldr	r3, [r3, #20]
 8017af2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017af6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017af8:	6913      	ldr	r3, [r2, #16]
 8017afa:	3301      	adds	r3, #1
 8017afc:	6113      	str	r3, [r2, #16]
 8017afe:	bd38      	pop	{r3, r4, r5, pc}
 8017b00:	2001      	movs	r0, #1
 8017b02:	bd38      	pop	{r3, r4, r5, pc}
 8017b04:	f240 3086 	movw	r0, #902	; 0x386
 8017b08:	bd38      	pop	{r3, r4, r5, pc}
 8017b0a:	200b      	movs	r0, #11
 8017b0c:	4770      	bx	lr
 8017b0e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017b12:	bd38      	pop	{r3, r4, r5, pc}
 8017b14:	200b      	movs	r0, #11
 8017b16:	bd38      	pop	{r3, r4, r5, pc}

08017b18 <rcl_wait_set_add_timer>:
 8017b18:	b328      	cbz	r0, 8017b66 <rcl_wait_set_add_timer+0x4e>
 8017b1a:	b538      	push	{r3, r4, r5, lr}
 8017b1c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017b1e:	4604      	mov	r4, r0
 8017b20:	b31b      	cbz	r3, 8017b6a <rcl_wait_set_add_timer+0x52>
 8017b22:	b329      	cbz	r1, 8017b70 <rcl_wait_set_add_timer+0x58>
 8017b24:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8017b26:	6965      	ldr	r5, [r4, #20]
 8017b28:	42a8      	cmp	r0, r5
 8017b2a:	d219      	bcs.n	8017b60 <rcl_wait_set_add_timer+0x48>
 8017b2c:	1c45      	adds	r5, r0, #1
 8017b2e:	641d      	str	r5, [r3, #64]	; 0x40
 8017b30:	6923      	ldr	r3, [r4, #16]
 8017b32:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8017b36:	b102      	cbz	r2, 8017b3a <rcl_wait_set_add_timer+0x22>
 8017b38:	6010      	str	r0, [r2, #0]
 8017b3a:	4608      	mov	r0, r1
 8017b3c:	f7ff fb9a 	bl	8017274 <rcl_timer_get_guard_condition>
 8017b40:	b168      	cbz	r0, 8017b5e <rcl_wait_set_add_timer+0x46>
 8017b42:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017b44:	68e3      	ldr	r3, [r4, #12]
 8017b46:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8017b48:	3b01      	subs	r3, #1
 8017b4a:	441d      	add	r5, r3
 8017b4c:	f004 ff62 	bl	801ca14 <rcl_guard_condition_get_rmw_handle>
 8017b50:	b180      	cbz	r0, 8017b74 <rcl_wait_set_add_timer+0x5c>
 8017b52:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017b54:	6842      	ldr	r2, [r0, #4]
 8017b56:	2000      	movs	r0, #0
 8017b58:	695b      	ldr	r3, [r3, #20]
 8017b5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017b5e:	bd38      	pop	{r3, r4, r5, pc}
 8017b60:	f240 3086 	movw	r0, #902	; 0x386
 8017b64:	bd38      	pop	{r3, r4, r5, pc}
 8017b66:	200b      	movs	r0, #11
 8017b68:	4770      	bx	lr
 8017b6a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017b6e:	bd38      	pop	{r3, r4, r5, pc}
 8017b70:	200b      	movs	r0, #11
 8017b72:	bd38      	pop	{r3, r4, r5, pc}
 8017b74:	2001      	movs	r0, #1
 8017b76:	bd38      	pop	{r3, r4, r5, pc}

08017b78 <rcl_wait_set_add_client>:
 8017b78:	b318      	cbz	r0, 8017bc2 <rcl_wait_set_add_client+0x4a>
 8017b7a:	b538      	push	{r3, r4, r5, lr}
 8017b7c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017b7e:	4604      	mov	r4, r0
 8017b80:	b30b      	cbz	r3, 8017bc6 <rcl_wait_set_add_client+0x4e>
 8017b82:	b319      	cbz	r1, 8017bcc <rcl_wait_set_add_client+0x54>
 8017b84:	699d      	ldr	r5, [r3, #24]
 8017b86:	69c0      	ldr	r0, [r0, #28]
 8017b88:	4285      	cmp	r5, r0
 8017b8a:	d217      	bcs.n	8017bbc <rcl_wait_set_add_client+0x44>
 8017b8c:	1c68      	adds	r0, r5, #1
 8017b8e:	6198      	str	r0, [r3, #24]
 8017b90:	69a3      	ldr	r3, [r4, #24]
 8017b92:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8017b96:	b102      	cbz	r2, 8017b9a <rcl_wait_set_add_client+0x22>
 8017b98:	6015      	str	r5, [r2, #0]
 8017b9a:	4608      	mov	r0, r1
 8017b9c:	f7fd fd1a 	bl	80155d4 <rcl_client_get_rmw_handle>
 8017ba0:	b150      	cbz	r0, 8017bb8 <rcl_wait_set_add_client+0x40>
 8017ba2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017ba4:	6842      	ldr	r2, [r0, #4]
 8017ba6:	2000      	movs	r0, #0
 8017ba8:	6a1b      	ldr	r3, [r3, #32]
 8017baa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017bae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017bb0:	69d3      	ldr	r3, [r2, #28]
 8017bb2:	3301      	adds	r3, #1
 8017bb4:	61d3      	str	r3, [r2, #28]
 8017bb6:	bd38      	pop	{r3, r4, r5, pc}
 8017bb8:	2001      	movs	r0, #1
 8017bba:	bd38      	pop	{r3, r4, r5, pc}
 8017bbc:	f240 3086 	movw	r0, #902	; 0x386
 8017bc0:	bd38      	pop	{r3, r4, r5, pc}
 8017bc2:	200b      	movs	r0, #11
 8017bc4:	4770      	bx	lr
 8017bc6:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017bca:	bd38      	pop	{r3, r4, r5, pc}
 8017bcc:	200b      	movs	r0, #11
 8017bce:	bd38      	pop	{r3, r4, r5, pc}

08017bd0 <rcl_wait_set_add_service>:
 8017bd0:	b318      	cbz	r0, 8017c1a <rcl_wait_set_add_service+0x4a>
 8017bd2:	b538      	push	{r3, r4, r5, lr}
 8017bd4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017bd6:	4604      	mov	r4, r0
 8017bd8:	b30b      	cbz	r3, 8017c1e <rcl_wait_set_add_service+0x4e>
 8017bda:	b319      	cbz	r1, 8017c24 <rcl_wait_set_add_service+0x54>
 8017bdc:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8017bde:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8017be0:	4285      	cmp	r5, r0
 8017be2:	d217      	bcs.n	8017c14 <rcl_wait_set_add_service+0x44>
 8017be4:	1c68      	adds	r0, r5, #1
 8017be6:	6258      	str	r0, [r3, #36]	; 0x24
 8017be8:	6a23      	ldr	r3, [r4, #32]
 8017bea:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8017bee:	b102      	cbz	r2, 8017bf2 <rcl_wait_set_add_service+0x22>
 8017bf0:	6015      	str	r5, [r2, #0]
 8017bf2:	4608      	mov	r0, r1
 8017bf4:	f7fe fcf2 	bl	80165dc <rcl_service_get_rmw_handle>
 8017bf8:	b150      	cbz	r0, 8017c10 <rcl_wait_set_add_service+0x40>
 8017bfa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017bfc:	6842      	ldr	r2, [r0, #4]
 8017bfe:	2000      	movs	r0, #0
 8017c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017c06:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017c08:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8017c0a:	3301      	adds	r3, #1
 8017c0c:	6293      	str	r3, [r2, #40]	; 0x28
 8017c0e:	bd38      	pop	{r3, r4, r5, pc}
 8017c10:	2001      	movs	r0, #1
 8017c12:	bd38      	pop	{r3, r4, r5, pc}
 8017c14:	f240 3086 	movw	r0, #902	; 0x386
 8017c18:	bd38      	pop	{r3, r4, r5, pc}
 8017c1a:	200b      	movs	r0, #11
 8017c1c:	4770      	bx	lr
 8017c1e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017c22:	bd38      	pop	{r3, r4, r5, pc}
 8017c24:	200b      	movs	r0, #11
 8017c26:	bd38      	pop	{r3, r4, r5, pc}

08017c28 <rcl_wait>:
 8017c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c2c:	ed2d 8b02 	vpush	{d8}
 8017c30:	b08d      	sub	sp, #52	; 0x34
 8017c32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017c36:	2800      	cmp	r0, #0
 8017c38:	f000 814f 	beq.w	8017eda <rcl_wait+0x2b2>
 8017c3c:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8017c3e:	4605      	mov	r5, r0
 8017c40:	2e00      	cmp	r6, #0
 8017c42:	f000 811a 	beq.w	8017e7a <rcl_wait+0x252>
 8017c46:	6843      	ldr	r3, [r0, #4]
 8017c48:	b983      	cbnz	r3, 8017c6c <rcl_wait+0x44>
 8017c4a:	68eb      	ldr	r3, [r5, #12]
 8017c4c:	b973      	cbnz	r3, 8017c6c <rcl_wait+0x44>
 8017c4e:	696b      	ldr	r3, [r5, #20]
 8017c50:	b963      	cbnz	r3, 8017c6c <rcl_wait+0x44>
 8017c52:	69eb      	ldr	r3, [r5, #28]
 8017c54:	b953      	cbnz	r3, 8017c6c <rcl_wait+0x44>
 8017c56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017c58:	b943      	cbnz	r3, 8017c6c <rcl_wait+0x44>
 8017c5a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8017c5c:	b933      	cbnz	r3, 8017c6c <rcl_wait+0x44>
 8017c5e:	f240 3085 	movw	r0, #901	; 0x385
 8017c62:	b00d      	add	sp, #52	; 0x34
 8017c64:	ecbd 8b02 	vpop	{d8}
 8017c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c6c:	9b04      	ldr	r3, [sp, #16]
 8017c6e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8017c70:	2b01      	cmp	r3, #1
 8017c72:	9b05      	ldr	r3, [sp, #20]
 8017c74:	f173 0300 	sbcs.w	r3, r3, #0
 8017c78:	f2c0 80f8 	blt.w	8017e6c <rcl_wait+0x244>
 8017c7c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8017c80:	2a00      	cmp	r2, #0
 8017c82:	f000 810f 	beq.w	8017ea4 <rcl_wait+0x27c>
 8017c86:	2400      	movs	r4, #0
 8017c88:	4613      	mov	r3, r2
 8017c8a:	f240 3921 	movw	r9, #801	; 0x321
 8017c8e:	4632      	mov	r2, r6
 8017c90:	46a2      	mov	sl, r4
 8017c92:	46a3      	mov	fp, r4
 8017c94:	ed9f 8b98 	vldr	d8, [pc, #608]	; 8017ef8 <rcl_wait+0x2d0>
 8017c98:	e014      	b.n	8017cc4 <rcl_wait+0x9c>
 8017c9a:	2800      	cmp	r0, #0
 8017c9c:	d1e1      	bne.n	8017c62 <rcl_wait+0x3a>
 8017c9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017ca2:	4542      	cmp	r2, r8
 8017ca4:	eb73 0107 	sbcs.w	r1, r3, r7
 8017ca8:	da03      	bge.n	8017cb2 <rcl_wait+0x8a>
 8017caa:	4690      	mov	r8, r2
 8017cac:	461f      	mov	r7, r3
 8017cae:	f04f 0b01 	mov.w	fp, #1
 8017cb2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8017cb4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8017cb6:	3401      	adds	r4, #1
 8017cb8:	f14a 0a00 	adc.w	sl, sl, #0
 8017cbc:	429c      	cmp	r4, r3
 8017cbe:	f17a 0100 	sbcs.w	r1, sl, #0
 8017cc2:	d228      	bcs.n	8017d16 <rcl_wait+0xee>
 8017cc4:	6928      	ldr	r0, [r5, #16]
 8017cc6:	a908      	add	r1, sp, #32
 8017cc8:	00a6      	lsls	r6, r4, #2
 8017cca:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8017cce:	2800      	cmp	r0, #0
 8017cd0:	d0f1      	beq.n	8017cb6 <rcl_wait+0x8e>
 8017cd2:	68eb      	ldr	r3, [r5, #12]
 8017cd4:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8017cd8:	4423      	add	r3, r4
 8017cda:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8017cde:	f1be 0f00 	cmp.w	lr, #0
 8017ce2:	d006      	beq.n	8017cf2 <rcl_wait+0xca>
 8017ce4:	6913      	ldr	r3, [r2, #16]
 8017ce6:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8017cea:	3301      	adds	r3, #1
 8017cec:	6113      	str	r3, [r2, #16]
 8017cee:	692b      	ldr	r3, [r5, #16]
 8017cf0:	5998      	ldr	r0, [r3, r6]
 8017cf2:	ed8d 8b08 	vstr	d8, [sp, #32]
 8017cf6:	f7ff fa8b 	bl	8017210 <rcl_timer_get_time_until_next_call>
 8017cfa:	4548      	cmp	r0, r9
 8017cfc:	d1cd      	bne.n	8017c9a <rcl_wait+0x72>
 8017cfe:	692b      	ldr	r3, [r5, #16]
 8017d00:	2200      	movs	r2, #0
 8017d02:	3401      	adds	r4, #1
 8017d04:	519a      	str	r2, [r3, r6]
 8017d06:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8017d08:	f14a 0a00 	adc.w	sl, sl, #0
 8017d0c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8017d0e:	429c      	cmp	r4, r3
 8017d10:	f17a 0100 	sbcs.w	r1, sl, #0
 8017d14:	d3d6      	bcc.n	8017cc4 <rcl_wait+0x9c>
 8017d16:	4659      	mov	r1, fp
 8017d18:	4616      	mov	r6, r2
 8017d1a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8017d1e:	4313      	orrs	r3, r2
 8017d20:	f040 80b4 	bne.w	8017e8c <rcl_wait+0x264>
 8017d24:	2300      	movs	r3, #0
 8017d26:	2200      	movs	r2, #0
 8017d28:	460c      	mov	r4, r1
 8017d2a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017d2e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017d32:	ab08      	add	r3, sp, #32
 8017d34:	9302      	str	r3, [sp, #8]
 8017d36:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8017d3a:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8017d3c:	f106 0110 	add.w	r1, r6, #16
 8017d40:	9300      	str	r3, [sp, #0]
 8017d42:	1d30      	adds	r0, r6, #4
 8017d44:	f106 031c 	add.w	r3, r6, #28
 8017d48:	9201      	str	r2, [sp, #4]
 8017d4a:	f106 0228 	add.w	r2, r6, #40	; 0x28
 8017d4e:	f002 fca3 	bl	801a698 <rmw_wait>
 8017d52:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017d54:	4680      	mov	r8, r0
 8017d56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017d58:	b1e2      	cbz	r2, 8017d94 <rcl_wait+0x16c>
 8017d5a:	f04f 0900 	mov.w	r9, #0
 8017d5e:	464f      	mov	r7, r9
 8017d60:	692a      	ldr	r2, [r5, #16]
 8017d62:	f10d 011f 	add.w	r1, sp, #31
 8017d66:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8017d6a:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8017d6e:	b160      	cbz	r0, 8017d8a <rcl_wait+0x162>
 8017d70:	f88d 701f 	strb.w	r7, [sp, #31]
 8017d74:	f7ff fa10 	bl	8017198 <rcl_timer_is_ready>
 8017d78:	2800      	cmp	r0, #0
 8017d7a:	f47f af72 	bne.w	8017c62 <rcl_wait+0x3a>
 8017d7e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8017d82:	b90b      	cbnz	r3, 8017d88 <rcl_wait+0x160>
 8017d84:	692a      	ldr	r2, [r5, #16]
 8017d86:	5193      	str	r3, [r2, r6]
 8017d88:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017d8a:	f109 0901 	add.w	r9, r9, #1
 8017d8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017d90:	454a      	cmp	r2, r9
 8017d92:	d8e5      	bhi.n	8017d60 <rcl_wait+0x138>
 8017d94:	f038 0002 	bics.w	r0, r8, #2
 8017d98:	d176      	bne.n	8017e88 <rcl_wait+0x260>
 8017d9a:	686f      	ldr	r7, [r5, #4]
 8017d9c:	b17f      	cbz	r7, 8017dbe <rcl_wait+0x196>
 8017d9e:	4602      	mov	r2, r0
 8017da0:	e002      	b.n	8017da8 <rcl_wait+0x180>
 8017da2:	3201      	adds	r2, #1
 8017da4:	42ba      	cmp	r2, r7
 8017da6:	d00a      	beq.n	8017dbe <rcl_wait+0x196>
 8017da8:	6899      	ldr	r1, [r3, #8]
 8017daa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017dae:	2900      	cmp	r1, #0
 8017db0:	d1f7      	bne.n	8017da2 <rcl_wait+0x17a>
 8017db2:	682e      	ldr	r6, [r5, #0]
 8017db4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017db8:	3201      	adds	r2, #1
 8017dba:	42ba      	cmp	r2, r7
 8017dbc:	d1f4      	bne.n	8017da8 <rcl_wait+0x180>
 8017dbe:	68ef      	ldr	r7, [r5, #12]
 8017dc0:	b17f      	cbz	r7, 8017de2 <rcl_wait+0x1ba>
 8017dc2:	2200      	movs	r2, #0
 8017dc4:	e002      	b.n	8017dcc <rcl_wait+0x1a4>
 8017dc6:	3201      	adds	r2, #1
 8017dc8:	42ba      	cmp	r2, r7
 8017dca:	d00a      	beq.n	8017de2 <rcl_wait+0x1ba>
 8017dcc:	6959      	ldr	r1, [r3, #20]
 8017dce:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017dd2:	2900      	cmp	r1, #0
 8017dd4:	d1f7      	bne.n	8017dc6 <rcl_wait+0x19e>
 8017dd6:	68ae      	ldr	r6, [r5, #8]
 8017dd8:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017ddc:	3201      	adds	r2, #1
 8017dde:	42ba      	cmp	r2, r7
 8017de0:	d1f4      	bne.n	8017dcc <rcl_wait+0x1a4>
 8017de2:	69ef      	ldr	r7, [r5, #28]
 8017de4:	b17f      	cbz	r7, 8017e06 <rcl_wait+0x1de>
 8017de6:	2200      	movs	r2, #0
 8017de8:	e002      	b.n	8017df0 <rcl_wait+0x1c8>
 8017dea:	3201      	adds	r2, #1
 8017dec:	42ba      	cmp	r2, r7
 8017dee:	d00a      	beq.n	8017e06 <rcl_wait+0x1de>
 8017df0:	6a19      	ldr	r1, [r3, #32]
 8017df2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017df6:	2900      	cmp	r1, #0
 8017df8:	d1f7      	bne.n	8017dea <rcl_wait+0x1c2>
 8017dfa:	69ae      	ldr	r6, [r5, #24]
 8017dfc:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017e00:	3201      	adds	r2, #1
 8017e02:	42ba      	cmp	r2, r7
 8017e04:	d1f4      	bne.n	8017df0 <rcl_wait+0x1c8>
 8017e06:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8017e08:	b17f      	cbz	r7, 8017e2a <rcl_wait+0x202>
 8017e0a:	2200      	movs	r2, #0
 8017e0c:	e002      	b.n	8017e14 <rcl_wait+0x1ec>
 8017e0e:	3201      	adds	r2, #1
 8017e10:	42ba      	cmp	r2, r7
 8017e12:	d00a      	beq.n	8017e2a <rcl_wait+0x202>
 8017e14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8017e16:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017e1a:	2900      	cmp	r1, #0
 8017e1c:	d1f7      	bne.n	8017e0e <rcl_wait+0x1e6>
 8017e1e:	6a2e      	ldr	r6, [r5, #32]
 8017e20:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017e24:	3201      	adds	r2, #1
 8017e26:	42ba      	cmp	r2, r7
 8017e28:	d1f4      	bne.n	8017e14 <rcl_wait+0x1ec>
 8017e2a:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 8017e2c:	b17f      	cbz	r7, 8017e4e <rcl_wait+0x226>
 8017e2e:	2200      	movs	r2, #0
 8017e30:	e002      	b.n	8017e38 <rcl_wait+0x210>
 8017e32:	3201      	adds	r2, #1
 8017e34:	42ba      	cmp	r2, r7
 8017e36:	d00a      	beq.n	8017e4e <rcl_wait+0x226>
 8017e38:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8017e3a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017e3e:	2900      	cmp	r1, #0
 8017e40:	d1f7      	bne.n	8017e32 <rcl_wait+0x20a>
 8017e42:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8017e44:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017e48:	3201      	adds	r2, #1
 8017e4a:	42ba      	cmp	r2, r7
 8017e4c:	d1f4      	bne.n	8017e38 <rcl_wait+0x210>
 8017e4e:	f1b8 0f02 	cmp.w	r8, #2
 8017e52:	f47f af06 	bne.w	8017c62 <rcl_wait+0x3a>
 8017e56:	f084 0301 	eor.w	r3, r4, #1
 8017e5a:	b2db      	uxtb	r3, r3
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	bf18      	it	ne
 8017e60:	2002      	movne	r0, #2
 8017e62:	b00d      	add	sp, #52	; 0x34
 8017e64:	ecbd 8b02 	vpop	{d8}
 8017e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e6c:	2a00      	cmp	r2, #0
 8017e6e:	d03a      	beq.n	8017ee6 <rcl_wait+0x2be>
 8017e70:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8017e74:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8017e78:	e705      	b.n	8017c86 <rcl_wait+0x5e>
 8017e7a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017e7e:	b00d      	add	sp, #52	; 0x34
 8017e80:	ecbd 8b02 	vpop	{d8}
 8017e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e88:	2001      	movs	r0, #1
 8017e8a:	e6ea      	b.n	8017c62 <rcl_wait+0x3a>
 8017e8c:	9b04      	ldr	r3, [sp, #16]
 8017e8e:	460c      	mov	r4, r1
 8017e90:	2b01      	cmp	r3, #1
 8017e92:	9b05      	ldr	r3, [sp, #20]
 8017e94:	f173 0300 	sbcs.w	r3, r3, #0
 8017e98:	bfa8      	it	ge
 8017e9a:	f044 0401 	orrge.w	r4, r4, #1
 8017e9e:	b914      	cbnz	r4, 8017ea6 <rcl_wait+0x27e>
 8017ea0:	4623      	mov	r3, r4
 8017ea2:	e747      	b.n	8017d34 <rcl_wait+0x10c>
 8017ea4:	4611      	mov	r1, r2
 8017ea6:	2f00      	cmp	r7, #0
 8017ea8:	da02      	bge.n	8017eb0 <rcl_wait+0x288>
 8017eaa:	f04f 0800 	mov.w	r8, #0
 8017eae:	4647      	mov	r7, r8
 8017eb0:	460c      	mov	r4, r1
 8017eb2:	4640      	mov	r0, r8
 8017eb4:	4639      	mov	r1, r7
 8017eb6:	a312      	add	r3, pc, #72	; (adr r3, 8017f00 <rcl_wait+0x2d8>)
 8017eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ebc:	f7e8 fa28 	bl	8000310 <__aeabi_ldivmod>
 8017ec0:	a30f      	add	r3, pc, #60	; (adr r3, 8017f00 <rcl_wait+0x2d8>)
 8017ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ec6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017eca:	4640      	mov	r0, r8
 8017ecc:	4639      	mov	r1, r7
 8017ece:	f7e8 fa1f 	bl	8000310 <__aeabi_ldivmod>
 8017ed2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017ed6:	ab08      	add	r3, sp, #32
 8017ed8:	e72c      	b.n	8017d34 <rcl_wait+0x10c>
 8017eda:	200b      	movs	r0, #11
 8017edc:	b00d      	add	sp, #52	; 0x34
 8017ede:	ecbd 8b02 	vpop	{d8}
 8017ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ee6:	4611      	mov	r1, r2
 8017ee8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8017eec:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8017ef0:	e713      	b.n	8017d1a <rcl_wait+0xf2>
 8017ef2:	bf00      	nop
 8017ef4:	f3af 8000 	nop.w
 8017ef8:	ffffffff 	.word	0xffffffff
 8017efc:	7fffffff 	.word	0x7fffffff
 8017f00:	3b9aca00 	.word	0x3b9aca00
 8017f04:	00000000 	.word	0x00000000

08017f08 <rcl_action_take_goal_response>:
 8017f08:	2800      	cmp	r0, #0
 8017f0a:	d039      	beq.n	8017f80 <rcl_action_take_goal_response+0x78>
 8017f0c:	b570      	push	{r4, r5, r6, lr}
 8017f0e:	4604      	mov	r4, r0
 8017f10:	6800      	ldr	r0, [r0, #0]
 8017f12:	b380      	cbz	r0, 8017f76 <rcl_action_take_goal_response+0x6e>
 8017f14:	460e      	mov	r6, r1
 8017f16:	4615      	mov	r5, r2
 8017f18:	f7fd fc1e 	bl	8015758 <rcl_client_is_valid>
 8017f1c:	b330      	cbz	r0, 8017f6c <rcl_action_take_goal_response+0x64>
 8017f1e:	6820      	ldr	r0, [r4, #0]
 8017f20:	3004      	adds	r0, #4
 8017f22:	f7fd fc19 	bl	8015758 <rcl_client_is_valid>
 8017f26:	b308      	cbz	r0, 8017f6c <rcl_action_take_goal_response+0x64>
 8017f28:	6820      	ldr	r0, [r4, #0]
 8017f2a:	3008      	adds	r0, #8
 8017f2c:	f7fd fc14 	bl	8015758 <rcl_client_is_valid>
 8017f30:	b1e0      	cbz	r0, 8017f6c <rcl_action_take_goal_response+0x64>
 8017f32:	6820      	ldr	r0, [r4, #0]
 8017f34:	300c      	adds	r0, #12
 8017f36:	f7fe fdc1 	bl	8016abc <rcl_subscription_is_valid>
 8017f3a:	b1b8      	cbz	r0, 8017f6c <rcl_action_take_goal_response+0x64>
 8017f3c:	6820      	ldr	r0, [r4, #0]
 8017f3e:	3010      	adds	r0, #16
 8017f40:	f7fe fdbc 	bl	8016abc <rcl_subscription_is_valid>
 8017f44:	b190      	cbz	r0, 8017f6c <rcl_action_take_goal_response+0x64>
 8017f46:	b1cd      	cbz	r5, 8017f7c <rcl_action_take_goal_response+0x74>
 8017f48:	b1c6      	cbz	r6, 8017f7c <rcl_action_take_goal_response+0x74>
 8017f4a:	462a      	mov	r2, r5
 8017f4c:	4631      	mov	r1, r6
 8017f4e:	6820      	ldr	r0, [r4, #0]
 8017f50:	f7fd fb9a 	bl	8015688 <rcl_take_response>
 8017f54:	b148      	cbz	r0, 8017f6a <rcl_action_take_goal_response+0x62>
 8017f56:	280a      	cmp	r0, #10
 8017f58:	d007      	beq.n	8017f6a <rcl_action_take_goal_response+0x62>
 8017f5a:	f240 12f5 	movw	r2, #501	; 0x1f5
 8017f5e:	f640 0337 	movw	r3, #2103	; 0x837
 8017f62:	4290      	cmp	r0, r2
 8017f64:	bf0c      	ite	eq
 8017f66:	4618      	moveq	r0, r3
 8017f68:	2001      	movne	r0, #1
 8017f6a:	bd70      	pop	{r4, r5, r6, pc}
 8017f6c:	f7f6 fd64 	bl	800ea38 <rcutils_reset_error>
 8017f70:	f640 0036 	movw	r0, #2102	; 0x836
 8017f74:	bd70      	pop	{r4, r5, r6, pc}
 8017f76:	f640 0036 	movw	r0, #2102	; 0x836
 8017f7a:	bd70      	pop	{r4, r5, r6, pc}
 8017f7c:	200b      	movs	r0, #11
 8017f7e:	bd70      	pop	{r4, r5, r6, pc}
 8017f80:	f640 0036 	movw	r0, #2102	; 0x836
 8017f84:	4770      	bx	lr
 8017f86:	bf00      	nop

08017f88 <rcl_action_send_result_request>:
 8017f88:	b390      	cbz	r0, 8017ff0 <rcl_action_send_result_request+0x68>
 8017f8a:	b570      	push	{r4, r5, r6, lr}
 8017f8c:	4604      	mov	r4, r0
 8017f8e:	6800      	ldr	r0, [r0, #0]
 8017f90:	b348      	cbz	r0, 8017fe6 <rcl_action_send_result_request+0x5e>
 8017f92:	460e      	mov	r6, r1
 8017f94:	4615      	mov	r5, r2
 8017f96:	f7fd fbdf 	bl	8015758 <rcl_client_is_valid>
 8017f9a:	b1f8      	cbz	r0, 8017fdc <rcl_action_send_result_request+0x54>
 8017f9c:	6820      	ldr	r0, [r4, #0]
 8017f9e:	3004      	adds	r0, #4
 8017fa0:	f7fd fbda 	bl	8015758 <rcl_client_is_valid>
 8017fa4:	b1d0      	cbz	r0, 8017fdc <rcl_action_send_result_request+0x54>
 8017fa6:	6820      	ldr	r0, [r4, #0]
 8017fa8:	3008      	adds	r0, #8
 8017faa:	f7fd fbd5 	bl	8015758 <rcl_client_is_valid>
 8017fae:	b1a8      	cbz	r0, 8017fdc <rcl_action_send_result_request+0x54>
 8017fb0:	6820      	ldr	r0, [r4, #0]
 8017fb2:	300c      	adds	r0, #12
 8017fb4:	f7fe fd82 	bl	8016abc <rcl_subscription_is_valid>
 8017fb8:	b180      	cbz	r0, 8017fdc <rcl_action_send_result_request+0x54>
 8017fba:	6820      	ldr	r0, [r4, #0]
 8017fbc:	3010      	adds	r0, #16
 8017fbe:	f7fe fd7d 	bl	8016abc <rcl_subscription_is_valid>
 8017fc2:	b158      	cbz	r0, 8017fdc <rcl_action_send_result_request+0x54>
 8017fc4:	b195      	cbz	r5, 8017fec <rcl_action_send_result_request+0x64>
 8017fc6:	b18e      	cbz	r6, 8017fec <rcl_action_send_result_request+0x64>
 8017fc8:	6820      	ldr	r0, [r4, #0]
 8017fca:	462a      	mov	r2, r5
 8017fcc:	4631      	mov	r1, r6
 8017fce:	3008      	adds	r0, #8
 8017fd0:	f7fd fb06 	bl	80155e0 <rcl_send_request>
 8017fd4:	3800      	subs	r0, #0
 8017fd6:	bf18      	it	ne
 8017fd8:	2001      	movne	r0, #1
 8017fda:	bd70      	pop	{r4, r5, r6, pc}
 8017fdc:	f7f6 fd2c 	bl	800ea38 <rcutils_reset_error>
 8017fe0:	f640 0036 	movw	r0, #2102	; 0x836
 8017fe4:	bd70      	pop	{r4, r5, r6, pc}
 8017fe6:	f640 0036 	movw	r0, #2102	; 0x836
 8017fea:	bd70      	pop	{r4, r5, r6, pc}
 8017fec:	200b      	movs	r0, #11
 8017fee:	bd70      	pop	{r4, r5, r6, pc}
 8017ff0:	f640 0036 	movw	r0, #2102	; 0x836
 8017ff4:	4770      	bx	lr
 8017ff6:	bf00      	nop

08017ff8 <rcl_action_take_result_response>:
 8017ff8:	2800      	cmp	r0, #0
 8017ffa:	d03a      	beq.n	8018072 <rcl_action_take_result_response+0x7a>
 8017ffc:	b570      	push	{r4, r5, r6, lr}
 8017ffe:	4604      	mov	r4, r0
 8018000:	6800      	ldr	r0, [r0, #0]
 8018002:	b388      	cbz	r0, 8018068 <rcl_action_take_result_response+0x70>
 8018004:	460e      	mov	r6, r1
 8018006:	4615      	mov	r5, r2
 8018008:	f7fd fba6 	bl	8015758 <rcl_client_is_valid>
 801800c:	b338      	cbz	r0, 801805e <rcl_action_take_result_response+0x66>
 801800e:	6820      	ldr	r0, [r4, #0]
 8018010:	3004      	adds	r0, #4
 8018012:	f7fd fba1 	bl	8015758 <rcl_client_is_valid>
 8018016:	b310      	cbz	r0, 801805e <rcl_action_take_result_response+0x66>
 8018018:	6820      	ldr	r0, [r4, #0]
 801801a:	3008      	adds	r0, #8
 801801c:	f7fd fb9c 	bl	8015758 <rcl_client_is_valid>
 8018020:	b1e8      	cbz	r0, 801805e <rcl_action_take_result_response+0x66>
 8018022:	6820      	ldr	r0, [r4, #0]
 8018024:	300c      	adds	r0, #12
 8018026:	f7fe fd49 	bl	8016abc <rcl_subscription_is_valid>
 801802a:	b1c0      	cbz	r0, 801805e <rcl_action_take_result_response+0x66>
 801802c:	6820      	ldr	r0, [r4, #0]
 801802e:	3010      	adds	r0, #16
 8018030:	f7fe fd44 	bl	8016abc <rcl_subscription_is_valid>
 8018034:	b198      	cbz	r0, 801805e <rcl_action_take_result_response+0x66>
 8018036:	b1d5      	cbz	r5, 801806e <rcl_action_take_result_response+0x76>
 8018038:	b1ce      	cbz	r6, 801806e <rcl_action_take_result_response+0x76>
 801803a:	6820      	ldr	r0, [r4, #0]
 801803c:	462a      	mov	r2, r5
 801803e:	4631      	mov	r1, r6
 8018040:	3008      	adds	r0, #8
 8018042:	f7fd fb21 	bl	8015688 <rcl_take_response>
 8018046:	b148      	cbz	r0, 801805c <rcl_action_take_result_response+0x64>
 8018048:	280a      	cmp	r0, #10
 801804a:	d007      	beq.n	801805c <rcl_action_take_result_response+0x64>
 801804c:	f240 12f5 	movw	r2, #501	; 0x1f5
 8018050:	f640 0337 	movw	r3, #2103	; 0x837
 8018054:	4290      	cmp	r0, r2
 8018056:	bf0c      	ite	eq
 8018058:	4618      	moveq	r0, r3
 801805a:	2001      	movne	r0, #1
 801805c:	bd70      	pop	{r4, r5, r6, pc}
 801805e:	f7f6 fceb 	bl	800ea38 <rcutils_reset_error>
 8018062:	f640 0036 	movw	r0, #2102	; 0x836
 8018066:	bd70      	pop	{r4, r5, r6, pc}
 8018068:	f640 0036 	movw	r0, #2102	; 0x836
 801806c:	bd70      	pop	{r4, r5, r6, pc}
 801806e:	200b      	movs	r0, #11
 8018070:	bd70      	pop	{r4, r5, r6, pc}
 8018072:	f640 0036 	movw	r0, #2102	; 0x836
 8018076:	4770      	bx	lr

08018078 <rcl_action_take_cancel_response>:
 8018078:	2800      	cmp	r0, #0
 801807a:	d03a      	beq.n	80180f2 <rcl_action_take_cancel_response+0x7a>
 801807c:	b570      	push	{r4, r5, r6, lr}
 801807e:	4604      	mov	r4, r0
 8018080:	6800      	ldr	r0, [r0, #0]
 8018082:	b388      	cbz	r0, 80180e8 <rcl_action_take_cancel_response+0x70>
 8018084:	460e      	mov	r6, r1
 8018086:	4615      	mov	r5, r2
 8018088:	f7fd fb66 	bl	8015758 <rcl_client_is_valid>
 801808c:	b338      	cbz	r0, 80180de <rcl_action_take_cancel_response+0x66>
 801808e:	6820      	ldr	r0, [r4, #0]
 8018090:	3004      	adds	r0, #4
 8018092:	f7fd fb61 	bl	8015758 <rcl_client_is_valid>
 8018096:	b310      	cbz	r0, 80180de <rcl_action_take_cancel_response+0x66>
 8018098:	6820      	ldr	r0, [r4, #0]
 801809a:	3008      	adds	r0, #8
 801809c:	f7fd fb5c 	bl	8015758 <rcl_client_is_valid>
 80180a0:	b1e8      	cbz	r0, 80180de <rcl_action_take_cancel_response+0x66>
 80180a2:	6820      	ldr	r0, [r4, #0]
 80180a4:	300c      	adds	r0, #12
 80180a6:	f7fe fd09 	bl	8016abc <rcl_subscription_is_valid>
 80180aa:	b1c0      	cbz	r0, 80180de <rcl_action_take_cancel_response+0x66>
 80180ac:	6820      	ldr	r0, [r4, #0]
 80180ae:	3010      	adds	r0, #16
 80180b0:	f7fe fd04 	bl	8016abc <rcl_subscription_is_valid>
 80180b4:	b198      	cbz	r0, 80180de <rcl_action_take_cancel_response+0x66>
 80180b6:	b1d5      	cbz	r5, 80180ee <rcl_action_take_cancel_response+0x76>
 80180b8:	b1ce      	cbz	r6, 80180ee <rcl_action_take_cancel_response+0x76>
 80180ba:	6820      	ldr	r0, [r4, #0]
 80180bc:	462a      	mov	r2, r5
 80180be:	4631      	mov	r1, r6
 80180c0:	3004      	adds	r0, #4
 80180c2:	f7fd fae1 	bl	8015688 <rcl_take_response>
 80180c6:	b148      	cbz	r0, 80180dc <rcl_action_take_cancel_response+0x64>
 80180c8:	280a      	cmp	r0, #10
 80180ca:	d007      	beq.n	80180dc <rcl_action_take_cancel_response+0x64>
 80180cc:	f240 12f5 	movw	r2, #501	; 0x1f5
 80180d0:	f640 0337 	movw	r3, #2103	; 0x837
 80180d4:	4290      	cmp	r0, r2
 80180d6:	bf0c      	ite	eq
 80180d8:	4618      	moveq	r0, r3
 80180da:	2001      	movne	r0, #1
 80180dc:	bd70      	pop	{r4, r5, r6, pc}
 80180de:	f7f6 fcab 	bl	800ea38 <rcutils_reset_error>
 80180e2:	f640 0036 	movw	r0, #2102	; 0x836
 80180e6:	bd70      	pop	{r4, r5, r6, pc}
 80180e8:	f640 0036 	movw	r0, #2102	; 0x836
 80180ec:	bd70      	pop	{r4, r5, r6, pc}
 80180ee:	200b      	movs	r0, #11
 80180f0:	bd70      	pop	{r4, r5, r6, pc}
 80180f2:	f640 0036 	movw	r0, #2102	; 0x836
 80180f6:	4770      	bx	lr

080180f8 <rcl_action_take_feedback>:
 80180f8:	2800      	cmp	r0, #0
 80180fa:	d038      	beq.n	801816e <rcl_action_take_feedback+0x76>
 80180fc:	b530      	push	{r4, r5, lr}
 80180fe:	4604      	mov	r4, r0
 8018100:	6800      	ldr	r0, [r0, #0]
 8018102:	b08f      	sub	sp, #60	; 0x3c
 8018104:	b378      	cbz	r0, 8018166 <rcl_action_take_feedback+0x6e>
 8018106:	460d      	mov	r5, r1
 8018108:	f7fd fb26 	bl	8015758 <rcl_client_is_valid>
 801810c:	b328      	cbz	r0, 801815a <rcl_action_take_feedback+0x62>
 801810e:	6820      	ldr	r0, [r4, #0]
 8018110:	3004      	adds	r0, #4
 8018112:	f7fd fb21 	bl	8015758 <rcl_client_is_valid>
 8018116:	b300      	cbz	r0, 801815a <rcl_action_take_feedback+0x62>
 8018118:	6820      	ldr	r0, [r4, #0]
 801811a:	3008      	adds	r0, #8
 801811c:	f7fd fb1c 	bl	8015758 <rcl_client_is_valid>
 8018120:	b1d8      	cbz	r0, 801815a <rcl_action_take_feedback+0x62>
 8018122:	6820      	ldr	r0, [r4, #0]
 8018124:	300c      	adds	r0, #12
 8018126:	f7fe fcc9 	bl	8016abc <rcl_subscription_is_valid>
 801812a:	b1b0      	cbz	r0, 801815a <rcl_action_take_feedback+0x62>
 801812c:	6820      	ldr	r0, [r4, #0]
 801812e:	3010      	adds	r0, #16
 8018130:	f7fe fcc4 	bl	8016abc <rcl_subscription_is_valid>
 8018134:	b188      	cbz	r0, 801815a <rcl_action_take_feedback+0x62>
 8018136:	b1ed      	cbz	r5, 8018174 <rcl_action_take_feedback+0x7c>
 8018138:	6820      	ldr	r0, [r4, #0]
 801813a:	2300      	movs	r3, #0
 801813c:	466a      	mov	r2, sp
 801813e:	4629      	mov	r1, r5
 8018140:	300c      	adds	r0, #12
 8018142:	f7fe fc5f 	bl	8016a04 <rcl_take>
 8018146:	b160      	cbz	r0, 8018162 <rcl_action_take_feedback+0x6a>
 8018148:	f240 1391 	movw	r3, #401	; 0x191
 801814c:	4298      	cmp	r0, r3
 801814e:	d014      	beq.n	801817a <rcl_action_take_feedback+0x82>
 8018150:	280a      	cmp	r0, #10
 8018152:	bf18      	it	ne
 8018154:	2001      	movne	r0, #1
 8018156:	b00f      	add	sp, #60	; 0x3c
 8018158:	bd30      	pop	{r4, r5, pc}
 801815a:	f7f6 fc6d 	bl	800ea38 <rcutils_reset_error>
 801815e:	f640 0036 	movw	r0, #2102	; 0x836
 8018162:	b00f      	add	sp, #60	; 0x3c
 8018164:	bd30      	pop	{r4, r5, pc}
 8018166:	f640 0036 	movw	r0, #2102	; 0x836
 801816a:	b00f      	add	sp, #60	; 0x3c
 801816c:	bd30      	pop	{r4, r5, pc}
 801816e:	f640 0036 	movw	r0, #2102	; 0x836
 8018172:	4770      	bx	lr
 8018174:	200b      	movs	r0, #11
 8018176:	b00f      	add	sp, #60	; 0x3c
 8018178:	bd30      	pop	{r4, r5, pc}
 801817a:	f640 0037 	movw	r0, #2103	; 0x837
 801817e:	e7f0      	b.n	8018162 <rcl_action_take_feedback+0x6a>

08018180 <rcl_action_wait_set_add_action_client>:
 8018180:	2800      	cmp	r0, #0
 8018182:	d048      	beq.n	8018216 <rcl_action_wait_set_add_action_client+0x96>
 8018184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018186:	460c      	mov	r4, r1
 8018188:	2900      	cmp	r1, #0
 801818a:	d03c      	beq.n	8018206 <rcl_action_wait_set_add_action_client+0x86>
 801818c:	4605      	mov	r5, r0
 801818e:	6808      	ldr	r0, [r1, #0]
 8018190:	2800      	cmp	r0, #0
 8018192:	d038      	beq.n	8018206 <rcl_action_wait_set_add_action_client+0x86>
 8018194:	4617      	mov	r7, r2
 8018196:	461e      	mov	r6, r3
 8018198:	f7fd fade 	bl	8015758 <rcl_client_is_valid>
 801819c:	b3b0      	cbz	r0, 801820c <rcl_action_wait_set_add_action_client+0x8c>
 801819e:	6820      	ldr	r0, [r4, #0]
 80181a0:	3004      	adds	r0, #4
 80181a2:	f7fd fad9 	bl	8015758 <rcl_client_is_valid>
 80181a6:	b388      	cbz	r0, 801820c <rcl_action_wait_set_add_action_client+0x8c>
 80181a8:	6820      	ldr	r0, [r4, #0]
 80181aa:	3008      	adds	r0, #8
 80181ac:	f7fd fad4 	bl	8015758 <rcl_client_is_valid>
 80181b0:	b360      	cbz	r0, 801820c <rcl_action_wait_set_add_action_client+0x8c>
 80181b2:	6820      	ldr	r0, [r4, #0]
 80181b4:	300c      	adds	r0, #12
 80181b6:	f7fe fc81 	bl	8016abc <rcl_subscription_is_valid>
 80181ba:	b338      	cbz	r0, 801820c <rcl_action_wait_set_add_action_client+0x8c>
 80181bc:	6820      	ldr	r0, [r4, #0]
 80181be:	3010      	adds	r0, #16
 80181c0:	f7fe fc7c 	bl	8016abc <rcl_subscription_is_valid>
 80181c4:	b310      	cbz	r0, 801820c <rcl_action_wait_set_add_action_client+0x8c>
 80181c6:	6821      	ldr	r1, [r4, #0]
 80181c8:	4628      	mov	r0, r5
 80181ca:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 80181ce:	f7ff fcd3 	bl	8017b78 <rcl_wait_set_add_client>
 80181d2:	b9b8      	cbnz	r0, 8018204 <rcl_action_wait_set_add_action_client+0x84>
 80181d4:	6821      	ldr	r1, [r4, #0]
 80181d6:	4628      	mov	r0, r5
 80181d8:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 80181dc:	3104      	adds	r1, #4
 80181de:	f7ff fccb 	bl	8017b78 <rcl_wait_set_add_client>
 80181e2:	b978      	cbnz	r0, 8018204 <rcl_action_wait_set_add_action_client+0x84>
 80181e4:	6821      	ldr	r1, [r4, #0]
 80181e6:	4628      	mov	r0, r5
 80181e8:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 80181ec:	3108      	adds	r1, #8
 80181ee:	f7ff fcc3 	bl	8017b78 <rcl_wait_set_add_client>
 80181f2:	b938      	cbnz	r0, 8018204 <rcl_action_wait_set_add_action_client+0x84>
 80181f4:	6821      	ldr	r1, [r4, #0]
 80181f6:	4628      	mov	r0, r5
 80181f8:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 80181fc:	310c      	adds	r1, #12
 80181fe:	f7ff f96b 	bl	80174d8 <rcl_wait_set_add_subscription>
 8018202:	b158      	cbz	r0, 801821c <rcl_action_wait_set_add_action_client+0x9c>
 8018204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018206:	f640 0036 	movw	r0, #2102	; 0x836
 801820a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801820c:	f7f6 fc14 	bl	800ea38 <rcutils_reset_error>
 8018210:	f640 0036 	movw	r0, #2102	; 0x836
 8018214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018216:	f44f 7061 	mov.w	r0, #900	; 0x384
 801821a:	4770      	bx	lr
 801821c:	6821      	ldr	r1, [r4, #0]
 801821e:	4628      	mov	r0, r5
 8018220:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 8018224:	3110      	adds	r1, #16
 8018226:	f7ff f957 	bl	80174d8 <rcl_wait_set_add_subscription>
 801822a:	2800      	cmp	r0, #0
 801822c:	d1ea      	bne.n	8018204 <rcl_action_wait_set_add_action_client+0x84>
 801822e:	b11f      	cbz	r7, 8018238 <rcl_action_wait_set_add_action_client+0xb8>
 8018230:	6823      	ldr	r3, [r4, #0]
 8018232:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8018236:	603b      	str	r3, [r7, #0]
 8018238:	2e00      	cmp	r6, #0
 801823a:	d0e3      	beq.n	8018204 <rcl_action_wait_set_add_action_client+0x84>
 801823c:	6823      	ldr	r3, [r4, #0]
 801823e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8018242:	6033      	str	r3, [r6, #0]
 8018244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018246:	bf00      	nop

08018248 <rcl_action_client_wait_set_get_entities_ready>:
 8018248:	2800      	cmp	r0, #0
 801824a:	d050      	beq.n	80182ee <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801824c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018250:	460c      	mov	r4, r1
 8018252:	2900      	cmp	r1, #0
 8018254:	d03e      	beq.n	80182d4 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8018256:	4605      	mov	r5, r0
 8018258:	6808      	ldr	r0, [r1, #0]
 801825a:	2800      	cmp	r0, #0
 801825c:	d03a      	beq.n	80182d4 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801825e:	4616      	mov	r6, r2
 8018260:	461f      	mov	r7, r3
 8018262:	f7fd fa79 	bl	8015758 <rcl_client_is_valid>
 8018266:	2800      	cmp	r0, #0
 8018268:	d038      	beq.n	80182dc <rcl_action_client_wait_set_get_entities_ready+0x94>
 801826a:	6820      	ldr	r0, [r4, #0]
 801826c:	3004      	adds	r0, #4
 801826e:	f7fd fa73 	bl	8015758 <rcl_client_is_valid>
 8018272:	2800      	cmp	r0, #0
 8018274:	d032      	beq.n	80182dc <rcl_action_client_wait_set_get_entities_ready+0x94>
 8018276:	6820      	ldr	r0, [r4, #0]
 8018278:	3008      	adds	r0, #8
 801827a:	f7fd fa6d 	bl	8015758 <rcl_client_is_valid>
 801827e:	b368      	cbz	r0, 80182dc <rcl_action_client_wait_set_get_entities_ready+0x94>
 8018280:	6820      	ldr	r0, [r4, #0]
 8018282:	300c      	adds	r0, #12
 8018284:	f7fe fc1a 	bl	8016abc <rcl_subscription_is_valid>
 8018288:	b340      	cbz	r0, 80182dc <rcl_action_client_wait_set_get_entities_ready+0x94>
 801828a:	6820      	ldr	r0, [r4, #0]
 801828c:	3010      	adds	r0, #16
 801828e:	f7fe fc15 	bl	8016abc <rcl_subscription_is_valid>
 8018292:	b318      	cbz	r0, 80182dc <rcl_action_client_wait_set_get_entities_ready+0x94>
 8018294:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8018298:	2a00      	cmp	r2, #0
 801829a:	bf18      	it	ne
 801829c:	2b00      	cmpne	r3, #0
 801829e:	9b08      	ldr	r3, [sp, #32]
 80182a0:	bf0c      	ite	eq
 80182a2:	2101      	moveq	r1, #1
 80182a4:	2100      	movne	r1, #0
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	bf08      	it	eq
 80182aa:	f041 0101 	orreq.w	r1, r1, #1
 80182ae:	2f00      	cmp	r7, #0
 80182b0:	bf08      	it	eq
 80182b2:	f041 0101 	orreq.w	r1, r1, #1
 80182b6:	b9b9      	cbnz	r1, 80182e8 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 80182b8:	b1b6      	cbz	r6, 80182e8 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 80182ba:	6823      	ldr	r3, [r4, #0]
 80182bc:	686c      	ldr	r4, [r5, #4]
 80182be:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 80182c2:	428a      	cmp	r2, r1
 80182c4:	4610      	mov	r0, r2
 80182c6:	bf38      	it	cc
 80182c8:	4608      	movcc	r0, r1
 80182ca:	4284      	cmp	r4, r0
 80182cc:	d812      	bhi.n	80182f4 <rcl_action_client_wait_set_get_entities_ready+0xac>
 80182ce:	2001      	movs	r0, #1
 80182d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80182d4:	f640 0036 	movw	r0, #2102	; 0x836
 80182d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80182dc:	f7f6 fbac 	bl	800ea38 <rcutils_reset_error>
 80182e0:	f640 0036 	movw	r0, #2102	; 0x836
 80182e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80182e8:	200b      	movs	r0, #11
 80182ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80182ee:	f44f 7061 	mov.w	r0, #900	; 0x384
 80182f2:	4770      	bx	lr
 80182f4:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 80182f8:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 80182fc:	45f0      	cmp	r8, lr
 80182fe:	4640      	mov	r0, r8
 8018300:	69ec      	ldr	r4, [r5, #28]
 8018302:	bf38      	it	cc
 8018304:	4670      	movcc	r0, lr
 8018306:	4560      	cmp	r0, ip
 8018308:	bf38      	it	cc
 801830a:	4660      	movcc	r0, ip
 801830c:	4284      	cmp	r4, r0
 801830e:	d9de      	bls.n	80182ce <rcl_action_client_wait_set_get_entities_ready+0x86>
 8018310:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8018314:	682d      	ldr	r5, [r5, #0]
 8018316:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801831a:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801831e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8018322:	1a18      	subs	r0, r3, r0
 8018324:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8018328:	f103 0c0c 	add.w	ip, r3, #12
 801832c:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8018330:	fab0 f080 	clz	r0, r0
 8018334:	eba5 050c 	sub.w	r5, r5, ip
 8018338:	0940      	lsrs	r0, r0, #5
 801833a:	fab5 f585 	clz	r5, r5
 801833e:	096d      	lsrs	r5, r5, #5
 8018340:	7035      	strb	r5, [r6, #0]
 8018342:	f103 0510 	add.w	r5, r3, #16
 8018346:	1b64      	subs	r4, r4, r5
 8018348:	9d08      	ldr	r5, [sp, #32]
 801834a:	fab4 f484 	clz	r4, r4
 801834e:	0964      	lsrs	r4, r4, #5
 8018350:	703c      	strb	r4, [r7, #0]
 8018352:	1d1c      	adds	r4, r3, #4
 8018354:	3308      	adds	r3, #8
 8018356:	7028      	strb	r0, [r5, #0]
 8018358:	1b09      	subs	r1, r1, r4
 801835a:	2000      	movs	r0, #0
 801835c:	1ad3      	subs	r3, r2, r3
 801835e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018360:	fab1 f181 	clz	r1, r1
 8018364:	fab3 f383 	clz	r3, r3
 8018368:	0949      	lsrs	r1, r1, #5
 801836a:	095b      	lsrs	r3, r3, #5
 801836c:	7011      	strb	r1, [r2, #0]
 801836e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018370:	7013      	strb	r3, [r2, #0]
 8018372:	e7b1      	b.n	80182d8 <rcl_action_client_wait_set_get_entities_ready+0x90>

08018374 <rcl_action_take_goal_request>:
 8018374:	2800      	cmp	r0, #0
 8018376:	d039      	beq.n	80183ec <rcl_action_take_goal_request+0x78>
 8018378:	b570      	push	{r4, r5, r6, lr}
 801837a:	4604      	mov	r4, r0
 801837c:	6800      	ldr	r0, [r0, #0]
 801837e:	b380      	cbz	r0, 80183e2 <rcl_action_take_goal_request+0x6e>
 8018380:	460e      	mov	r6, r1
 8018382:	4615      	mov	r5, r2
 8018384:	f7fe f9b0 	bl	80166e8 <rcl_service_is_valid>
 8018388:	b330      	cbz	r0, 80183d8 <rcl_action_take_goal_request+0x64>
 801838a:	6820      	ldr	r0, [r4, #0]
 801838c:	3004      	adds	r0, #4
 801838e:	f7fe f9ab 	bl	80166e8 <rcl_service_is_valid>
 8018392:	b308      	cbz	r0, 80183d8 <rcl_action_take_goal_request+0x64>
 8018394:	6820      	ldr	r0, [r4, #0]
 8018396:	3008      	adds	r0, #8
 8018398:	f7fe f9a6 	bl	80166e8 <rcl_service_is_valid>
 801839c:	b1e0      	cbz	r0, 80183d8 <rcl_action_take_goal_request+0x64>
 801839e:	6820      	ldr	r0, [r4, #0]
 80183a0:	300c      	adds	r0, #12
 80183a2:	f7f5 faab 	bl	800d8fc <rcl_publisher_is_valid>
 80183a6:	b1b8      	cbz	r0, 80183d8 <rcl_action_take_goal_request+0x64>
 80183a8:	6820      	ldr	r0, [r4, #0]
 80183aa:	3010      	adds	r0, #16
 80183ac:	f7f5 faa6 	bl	800d8fc <rcl_publisher_is_valid>
 80183b0:	b190      	cbz	r0, 80183d8 <rcl_action_take_goal_request+0x64>
 80183b2:	b1cd      	cbz	r5, 80183e8 <rcl_action_take_goal_request+0x74>
 80183b4:	b1c6      	cbz	r6, 80183e8 <rcl_action_take_goal_request+0x74>
 80183b6:	462a      	mov	r2, r5
 80183b8:	4631      	mov	r1, r6
 80183ba:	6820      	ldr	r0, [r4, #0]
 80183bc:	f7fe f914 	bl	80165e8 <rcl_take_request>
 80183c0:	b148      	cbz	r0, 80183d6 <rcl_action_take_goal_request+0x62>
 80183c2:	280a      	cmp	r0, #10
 80183c4:	d007      	beq.n	80183d6 <rcl_action_take_goal_request+0x62>
 80183c6:	f240 2259 	movw	r2, #601	; 0x259
 80183ca:	f640 0399 	movw	r3, #2201	; 0x899
 80183ce:	4290      	cmp	r0, r2
 80183d0:	bf0c      	ite	eq
 80183d2:	4618      	moveq	r0, r3
 80183d4:	2001      	movne	r0, #1
 80183d6:	bd70      	pop	{r4, r5, r6, pc}
 80183d8:	f7f6 fb2e 	bl	800ea38 <rcutils_reset_error>
 80183dc:	f640 0098 	movw	r0, #2200	; 0x898
 80183e0:	bd70      	pop	{r4, r5, r6, pc}
 80183e2:	f640 0098 	movw	r0, #2200	; 0x898
 80183e6:	bd70      	pop	{r4, r5, r6, pc}
 80183e8:	200b      	movs	r0, #11
 80183ea:	bd70      	pop	{r4, r5, r6, pc}
 80183ec:	f640 0098 	movw	r0, #2200	; 0x898
 80183f0:	4770      	bx	lr
 80183f2:	bf00      	nop

080183f4 <rcl_action_send_goal_response>:
 80183f4:	b388      	cbz	r0, 801845a <rcl_action_send_goal_response+0x66>
 80183f6:	b570      	push	{r4, r5, r6, lr}
 80183f8:	4604      	mov	r4, r0
 80183fa:	6800      	ldr	r0, [r0, #0]
 80183fc:	b340      	cbz	r0, 8018450 <rcl_action_send_goal_response+0x5c>
 80183fe:	460e      	mov	r6, r1
 8018400:	4615      	mov	r5, r2
 8018402:	f7fe f971 	bl	80166e8 <rcl_service_is_valid>
 8018406:	b1f0      	cbz	r0, 8018446 <rcl_action_send_goal_response+0x52>
 8018408:	6820      	ldr	r0, [r4, #0]
 801840a:	3004      	adds	r0, #4
 801840c:	f7fe f96c 	bl	80166e8 <rcl_service_is_valid>
 8018410:	b1c8      	cbz	r0, 8018446 <rcl_action_send_goal_response+0x52>
 8018412:	6820      	ldr	r0, [r4, #0]
 8018414:	3008      	adds	r0, #8
 8018416:	f7fe f967 	bl	80166e8 <rcl_service_is_valid>
 801841a:	b1a0      	cbz	r0, 8018446 <rcl_action_send_goal_response+0x52>
 801841c:	6820      	ldr	r0, [r4, #0]
 801841e:	300c      	adds	r0, #12
 8018420:	f7f5 fa6c 	bl	800d8fc <rcl_publisher_is_valid>
 8018424:	b178      	cbz	r0, 8018446 <rcl_action_send_goal_response+0x52>
 8018426:	6820      	ldr	r0, [r4, #0]
 8018428:	3010      	adds	r0, #16
 801842a:	f7f5 fa67 	bl	800d8fc <rcl_publisher_is_valid>
 801842e:	b150      	cbz	r0, 8018446 <rcl_action_send_goal_response+0x52>
 8018430:	b18d      	cbz	r5, 8018456 <rcl_action_send_goal_response+0x62>
 8018432:	b186      	cbz	r6, 8018456 <rcl_action_send_goal_response+0x62>
 8018434:	462a      	mov	r2, r5
 8018436:	4631      	mov	r1, r6
 8018438:	6820      	ldr	r0, [r4, #0]
 801843a:	f7fe f925 	bl	8016688 <rcl_send_response>
 801843e:	3800      	subs	r0, #0
 8018440:	bf18      	it	ne
 8018442:	2001      	movne	r0, #1
 8018444:	bd70      	pop	{r4, r5, r6, pc}
 8018446:	f7f6 faf7 	bl	800ea38 <rcutils_reset_error>
 801844a:	f640 0098 	movw	r0, #2200	; 0x898
 801844e:	bd70      	pop	{r4, r5, r6, pc}
 8018450:	f640 0098 	movw	r0, #2200	; 0x898
 8018454:	bd70      	pop	{r4, r5, r6, pc}
 8018456:	200b      	movs	r0, #11
 8018458:	bd70      	pop	{r4, r5, r6, pc}
 801845a:	f640 0098 	movw	r0, #2200	; 0x898
 801845e:	4770      	bx	lr

08018460 <rcl_action_take_result_request>:
 8018460:	2800      	cmp	r0, #0
 8018462:	d03a      	beq.n	80184da <rcl_action_take_result_request+0x7a>
 8018464:	b570      	push	{r4, r5, r6, lr}
 8018466:	4604      	mov	r4, r0
 8018468:	6800      	ldr	r0, [r0, #0]
 801846a:	b388      	cbz	r0, 80184d0 <rcl_action_take_result_request+0x70>
 801846c:	460e      	mov	r6, r1
 801846e:	4615      	mov	r5, r2
 8018470:	f7fe f93a 	bl	80166e8 <rcl_service_is_valid>
 8018474:	b338      	cbz	r0, 80184c6 <rcl_action_take_result_request+0x66>
 8018476:	6820      	ldr	r0, [r4, #0]
 8018478:	3004      	adds	r0, #4
 801847a:	f7fe f935 	bl	80166e8 <rcl_service_is_valid>
 801847e:	b310      	cbz	r0, 80184c6 <rcl_action_take_result_request+0x66>
 8018480:	6820      	ldr	r0, [r4, #0]
 8018482:	3008      	adds	r0, #8
 8018484:	f7fe f930 	bl	80166e8 <rcl_service_is_valid>
 8018488:	b1e8      	cbz	r0, 80184c6 <rcl_action_take_result_request+0x66>
 801848a:	6820      	ldr	r0, [r4, #0]
 801848c:	300c      	adds	r0, #12
 801848e:	f7f5 fa35 	bl	800d8fc <rcl_publisher_is_valid>
 8018492:	b1c0      	cbz	r0, 80184c6 <rcl_action_take_result_request+0x66>
 8018494:	6820      	ldr	r0, [r4, #0]
 8018496:	3010      	adds	r0, #16
 8018498:	f7f5 fa30 	bl	800d8fc <rcl_publisher_is_valid>
 801849c:	b198      	cbz	r0, 80184c6 <rcl_action_take_result_request+0x66>
 801849e:	b1d5      	cbz	r5, 80184d6 <rcl_action_take_result_request+0x76>
 80184a0:	b1ce      	cbz	r6, 80184d6 <rcl_action_take_result_request+0x76>
 80184a2:	6820      	ldr	r0, [r4, #0]
 80184a4:	462a      	mov	r2, r5
 80184a6:	4631      	mov	r1, r6
 80184a8:	3008      	adds	r0, #8
 80184aa:	f7fe f89d 	bl	80165e8 <rcl_take_request>
 80184ae:	b148      	cbz	r0, 80184c4 <rcl_action_take_result_request+0x64>
 80184b0:	280a      	cmp	r0, #10
 80184b2:	d007      	beq.n	80184c4 <rcl_action_take_result_request+0x64>
 80184b4:	f240 2259 	movw	r2, #601	; 0x259
 80184b8:	f640 0399 	movw	r3, #2201	; 0x899
 80184bc:	4290      	cmp	r0, r2
 80184be:	bf0c      	ite	eq
 80184c0:	4618      	moveq	r0, r3
 80184c2:	2001      	movne	r0, #1
 80184c4:	bd70      	pop	{r4, r5, r6, pc}
 80184c6:	f7f6 fab7 	bl	800ea38 <rcutils_reset_error>
 80184ca:	f640 0098 	movw	r0, #2200	; 0x898
 80184ce:	bd70      	pop	{r4, r5, r6, pc}
 80184d0:	f640 0098 	movw	r0, #2200	; 0x898
 80184d4:	bd70      	pop	{r4, r5, r6, pc}
 80184d6:	200b      	movs	r0, #11
 80184d8:	bd70      	pop	{r4, r5, r6, pc}
 80184da:	f640 0098 	movw	r0, #2200	; 0x898
 80184de:	4770      	bx	lr

080184e0 <rcl_action_take_cancel_request>:
 80184e0:	2800      	cmp	r0, #0
 80184e2:	d03a      	beq.n	801855a <rcl_action_take_cancel_request+0x7a>
 80184e4:	b570      	push	{r4, r5, r6, lr}
 80184e6:	4604      	mov	r4, r0
 80184e8:	6800      	ldr	r0, [r0, #0]
 80184ea:	b388      	cbz	r0, 8018550 <rcl_action_take_cancel_request+0x70>
 80184ec:	460e      	mov	r6, r1
 80184ee:	4615      	mov	r5, r2
 80184f0:	f7fe f8fa 	bl	80166e8 <rcl_service_is_valid>
 80184f4:	b338      	cbz	r0, 8018546 <rcl_action_take_cancel_request+0x66>
 80184f6:	6820      	ldr	r0, [r4, #0]
 80184f8:	3004      	adds	r0, #4
 80184fa:	f7fe f8f5 	bl	80166e8 <rcl_service_is_valid>
 80184fe:	b310      	cbz	r0, 8018546 <rcl_action_take_cancel_request+0x66>
 8018500:	6820      	ldr	r0, [r4, #0]
 8018502:	3008      	adds	r0, #8
 8018504:	f7fe f8f0 	bl	80166e8 <rcl_service_is_valid>
 8018508:	b1e8      	cbz	r0, 8018546 <rcl_action_take_cancel_request+0x66>
 801850a:	6820      	ldr	r0, [r4, #0]
 801850c:	300c      	adds	r0, #12
 801850e:	f7f5 f9f5 	bl	800d8fc <rcl_publisher_is_valid>
 8018512:	b1c0      	cbz	r0, 8018546 <rcl_action_take_cancel_request+0x66>
 8018514:	6820      	ldr	r0, [r4, #0]
 8018516:	3010      	adds	r0, #16
 8018518:	f7f5 f9f0 	bl	800d8fc <rcl_publisher_is_valid>
 801851c:	b198      	cbz	r0, 8018546 <rcl_action_take_cancel_request+0x66>
 801851e:	b1d5      	cbz	r5, 8018556 <rcl_action_take_cancel_request+0x76>
 8018520:	b1ce      	cbz	r6, 8018556 <rcl_action_take_cancel_request+0x76>
 8018522:	6820      	ldr	r0, [r4, #0]
 8018524:	462a      	mov	r2, r5
 8018526:	4631      	mov	r1, r6
 8018528:	3004      	adds	r0, #4
 801852a:	f7fe f85d 	bl	80165e8 <rcl_take_request>
 801852e:	b148      	cbz	r0, 8018544 <rcl_action_take_cancel_request+0x64>
 8018530:	280a      	cmp	r0, #10
 8018532:	d007      	beq.n	8018544 <rcl_action_take_cancel_request+0x64>
 8018534:	f240 2259 	movw	r2, #601	; 0x259
 8018538:	f640 0399 	movw	r3, #2201	; 0x899
 801853c:	4290      	cmp	r0, r2
 801853e:	bf0c      	ite	eq
 8018540:	4618      	moveq	r0, r3
 8018542:	2001      	movne	r0, #1
 8018544:	bd70      	pop	{r4, r5, r6, pc}
 8018546:	f7f6 fa77 	bl	800ea38 <rcutils_reset_error>
 801854a:	f640 0098 	movw	r0, #2200	; 0x898
 801854e:	bd70      	pop	{r4, r5, r6, pc}
 8018550:	f640 0098 	movw	r0, #2200	; 0x898
 8018554:	bd70      	pop	{r4, r5, r6, pc}
 8018556:	200b      	movs	r0, #11
 8018558:	bd70      	pop	{r4, r5, r6, pc}
 801855a:	f640 0098 	movw	r0, #2200	; 0x898
 801855e:	4770      	bx	lr

08018560 <rcl_action_send_cancel_response>:
 8018560:	b390      	cbz	r0, 80185c8 <rcl_action_send_cancel_response+0x68>
 8018562:	b570      	push	{r4, r5, r6, lr}
 8018564:	4604      	mov	r4, r0
 8018566:	6800      	ldr	r0, [r0, #0]
 8018568:	b348      	cbz	r0, 80185be <rcl_action_send_cancel_response+0x5e>
 801856a:	460e      	mov	r6, r1
 801856c:	4615      	mov	r5, r2
 801856e:	f7fe f8bb 	bl	80166e8 <rcl_service_is_valid>
 8018572:	b1f8      	cbz	r0, 80185b4 <rcl_action_send_cancel_response+0x54>
 8018574:	6820      	ldr	r0, [r4, #0]
 8018576:	3004      	adds	r0, #4
 8018578:	f7fe f8b6 	bl	80166e8 <rcl_service_is_valid>
 801857c:	b1d0      	cbz	r0, 80185b4 <rcl_action_send_cancel_response+0x54>
 801857e:	6820      	ldr	r0, [r4, #0]
 8018580:	3008      	adds	r0, #8
 8018582:	f7fe f8b1 	bl	80166e8 <rcl_service_is_valid>
 8018586:	b1a8      	cbz	r0, 80185b4 <rcl_action_send_cancel_response+0x54>
 8018588:	6820      	ldr	r0, [r4, #0]
 801858a:	300c      	adds	r0, #12
 801858c:	f7f5 f9b6 	bl	800d8fc <rcl_publisher_is_valid>
 8018590:	b180      	cbz	r0, 80185b4 <rcl_action_send_cancel_response+0x54>
 8018592:	6820      	ldr	r0, [r4, #0]
 8018594:	3010      	adds	r0, #16
 8018596:	f7f5 f9b1 	bl	800d8fc <rcl_publisher_is_valid>
 801859a:	b158      	cbz	r0, 80185b4 <rcl_action_send_cancel_response+0x54>
 801859c:	b195      	cbz	r5, 80185c4 <rcl_action_send_cancel_response+0x64>
 801859e:	b18e      	cbz	r6, 80185c4 <rcl_action_send_cancel_response+0x64>
 80185a0:	6820      	ldr	r0, [r4, #0]
 80185a2:	462a      	mov	r2, r5
 80185a4:	4631      	mov	r1, r6
 80185a6:	3004      	adds	r0, #4
 80185a8:	f7fe f86e 	bl	8016688 <rcl_send_response>
 80185ac:	3800      	subs	r0, #0
 80185ae:	bf18      	it	ne
 80185b0:	2001      	movne	r0, #1
 80185b2:	bd70      	pop	{r4, r5, r6, pc}
 80185b4:	f7f6 fa40 	bl	800ea38 <rcutils_reset_error>
 80185b8:	f640 0098 	movw	r0, #2200	; 0x898
 80185bc:	bd70      	pop	{r4, r5, r6, pc}
 80185be:	f640 0098 	movw	r0, #2200	; 0x898
 80185c2:	bd70      	pop	{r4, r5, r6, pc}
 80185c4:	200b      	movs	r0, #11
 80185c6:	bd70      	pop	{r4, r5, r6, pc}
 80185c8:	f640 0098 	movw	r0, #2200	; 0x898
 80185cc:	4770      	bx	lr
 80185ce:	bf00      	nop

080185d0 <rcl_action_wait_set_add_action_server>:
 80185d0:	2800      	cmp	r0, #0
 80185d2:	d04d      	beq.n	8018670 <rcl_action_wait_set_add_action_server+0xa0>
 80185d4:	b570      	push	{r4, r5, r6, lr}
 80185d6:	460c      	mov	r4, r1
 80185d8:	b159      	cbz	r1, 80185f2 <rcl_action_wait_set_add_action_server+0x22>
 80185da:	4605      	mov	r5, r0
 80185dc:	6808      	ldr	r0, [r1, #0]
 80185de:	b140      	cbz	r0, 80185f2 <rcl_action_wait_set_add_action_server+0x22>
 80185e0:	4616      	mov	r6, r2
 80185e2:	f7fe f881 	bl	80166e8 <rcl_service_is_valid>
 80185e6:	b120      	cbz	r0, 80185f2 <rcl_action_wait_set_add_action_server+0x22>
 80185e8:	6820      	ldr	r0, [r4, #0]
 80185ea:	3004      	adds	r0, #4
 80185ec:	f7fe f87c 	bl	80166e8 <rcl_service_is_valid>
 80185f0:	b910      	cbnz	r0, 80185f8 <rcl_action_wait_set_add_action_server+0x28>
 80185f2:	f640 0098 	movw	r0, #2200	; 0x898
 80185f6:	bd70      	pop	{r4, r5, r6, pc}
 80185f8:	6820      	ldr	r0, [r4, #0]
 80185fa:	3008      	adds	r0, #8
 80185fc:	f7fe f874 	bl	80166e8 <rcl_service_is_valid>
 8018600:	2800      	cmp	r0, #0
 8018602:	d0f6      	beq.n	80185f2 <rcl_action_wait_set_add_action_server+0x22>
 8018604:	6820      	ldr	r0, [r4, #0]
 8018606:	300c      	adds	r0, #12
 8018608:	f7f5 f990 	bl	800d92c <rcl_publisher_is_valid_except_context>
 801860c:	2800      	cmp	r0, #0
 801860e:	d0f0      	beq.n	80185f2 <rcl_action_wait_set_add_action_server+0x22>
 8018610:	6820      	ldr	r0, [r4, #0]
 8018612:	3010      	adds	r0, #16
 8018614:	f7f5 f98a 	bl	800d92c <rcl_publisher_is_valid_except_context>
 8018618:	2800      	cmp	r0, #0
 801861a:	d0ea      	beq.n	80185f2 <rcl_action_wait_set_add_action_server+0x22>
 801861c:	6821      	ldr	r1, [r4, #0]
 801861e:	4628      	mov	r0, r5
 8018620:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 8018624:	f7ff fad4 	bl	8017bd0 <rcl_wait_set_add_service>
 8018628:	2800      	cmp	r0, #0
 801862a:	d1e4      	bne.n	80185f6 <rcl_action_wait_set_add_action_server+0x26>
 801862c:	6821      	ldr	r1, [r4, #0]
 801862e:	4628      	mov	r0, r5
 8018630:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 8018634:	3104      	adds	r1, #4
 8018636:	f7ff facb 	bl	8017bd0 <rcl_wait_set_add_service>
 801863a:	2800      	cmp	r0, #0
 801863c:	d1db      	bne.n	80185f6 <rcl_action_wait_set_add_action_server+0x26>
 801863e:	6821      	ldr	r1, [r4, #0]
 8018640:	4628      	mov	r0, r5
 8018642:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 8018646:	3108      	adds	r1, #8
 8018648:	f7ff fac2 	bl	8017bd0 <rcl_wait_set_add_service>
 801864c:	2800      	cmp	r0, #0
 801864e:	d1d2      	bne.n	80185f6 <rcl_action_wait_set_add_action_server+0x26>
 8018650:	6821      	ldr	r1, [r4, #0]
 8018652:	4628      	mov	r0, r5
 8018654:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 8018658:	3114      	adds	r1, #20
 801865a:	f7ff fa5d 	bl	8017b18 <rcl_wait_set_add_timer>
 801865e:	2800      	cmp	r0, #0
 8018660:	d1c9      	bne.n	80185f6 <rcl_action_wait_set_add_action_server+0x26>
 8018662:	2e00      	cmp	r6, #0
 8018664:	d0c7      	beq.n	80185f6 <rcl_action_wait_set_add_action_server+0x26>
 8018666:	6823      	ldr	r3, [r4, #0]
 8018668:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801866c:	6033      	str	r3, [r6, #0]
 801866e:	bd70      	pop	{r4, r5, r6, pc}
 8018670:	f44f 7061 	mov.w	r0, #900	; 0x384
 8018674:	4770      	bx	lr
 8018676:	bf00      	nop

08018678 <rcl_action_server_wait_set_get_entities_ready>:
 8018678:	2800      	cmp	r0, #0
 801867a:	d067      	beq.n	801874c <rcl_action_server_wait_set_get_entities_ready+0xd4>
 801867c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018680:	460c      	mov	r4, r1
 8018682:	b161      	cbz	r1, 801869e <rcl_action_server_wait_set_get_entities_ready+0x26>
 8018684:	4605      	mov	r5, r0
 8018686:	6808      	ldr	r0, [r1, #0]
 8018688:	b148      	cbz	r0, 801869e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801868a:	4616      	mov	r6, r2
 801868c:	4698      	mov	r8, r3
 801868e:	f7fe f82b 	bl	80166e8 <rcl_service_is_valid>
 8018692:	b120      	cbz	r0, 801869e <rcl_action_server_wait_set_get_entities_ready+0x26>
 8018694:	6820      	ldr	r0, [r4, #0]
 8018696:	3004      	adds	r0, #4
 8018698:	f7fe f826 	bl	80166e8 <rcl_service_is_valid>
 801869c:	b918      	cbnz	r0, 80186a6 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801869e:	f640 0098 	movw	r0, #2200	; 0x898
 80186a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186a6:	6820      	ldr	r0, [r4, #0]
 80186a8:	3008      	adds	r0, #8
 80186aa:	f7fe f81d 	bl	80166e8 <rcl_service_is_valid>
 80186ae:	2800      	cmp	r0, #0
 80186b0:	d0f5      	beq.n	801869e <rcl_action_server_wait_set_get_entities_ready+0x26>
 80186b2:	6820      	ldr	r0, [r4, #0]
 80186b4:	300c      	adds	r0, #12
 80186b6:	f7f5 f939 	bl	800d92c <rcl_publisher_is_valid_except_context>
 80186ba:	2800      	cmp	r0, #0
 80186bc:	d0ef      	beq.n	801869e <rcl_action_server_wait_set_get_entities_ready+0x26>
 80186be:	6820      	ldr	r0, [r4, #0]
 80186c0:	3010      	adds	r0, #16
 80186c2:	f7f5 f933 	bl	800d92c <rcl_publisher_is_valid_except_context>
 80186c6:	2800      	cmp	r0, #0
 80186c8:	d0e9      	beq.n	801869e <rcl_action_server_wait_set_get_entities_ready+0x26>
 80186ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80186ce:	2a00      	cmp	r2, #0
 80186d0:	bf18      	it	ne
 80186d2:	2b00      	cmpne	r3, #0
 80186d4:	bf0c      	ite	eq
 80186d6:	2101      	moveq	r1, #1
 80186d8:	2100      	movne	r1, #0
 80186da:	f1b8 0f00 	cmp.w	r8, #0
 80186de:	bf08      	it	eq
 80186e0:	f041 0101 	orreq.w	r1, r1, #1
 80186e4:	bba9      	cbnz	r1, 8018752 <rcl_action_server_wait_set_get_entities_ready+0xda>
 80186e6:	b3a6      	cbz	r6, 8018752 <rcl_action_server_wait_set_get_entities_ready+0xda>
 80186e8:	6821      	ldr	r1, [r4, #0]
 80186ea:	2000      	movs	r0, #0
 80186ec:	692c      	ldr	r4, [r5, #16]
 80186ee:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 80186f2:	6a2f      	ldr	r7, [r5, #32]
 80186f4:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80186f8:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 80186fc:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 8018700:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 8018704:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 8018708:	1a64      	subs	r4, r4, r1
 801870a:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 801870e:	fab4 f484 	clz	r4, r4
 8018712:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8018716:	0964      	lsrs	r4, r4, #5
 8018718:	7034      	strb	r4, [r6, #0]
 801871a:	1d0c      	adds	r4, r1, #4
 801871c:	1b2c      	subs	r4, r5, r4
 801871e:	fab4 f484 	clz	r4, r4
 8018722:	0964      	lsrs	r4, r4, #5
 8018724:	f888 4000 	strb.w	r4, [r8]
 8018728:	f101 0408 	add.w	r4, r1, #8
 801872c:	1b1b      	subs	r3, r3, r4
 801872e:	9c06      	ldr	r4, [sp, #24]
 8018730:	fab3 f383 	clz	r3, r3
 8018734:	095b      	lsrs	r3, r3, #5
 8018736:	7023      	strb	r3, [r4, #0]
 8018738:	f101 0314 	add.w	r3, r1, #20
 801873c:	1ad3      	subs	r3, r2, r3
 801873e:	9a07      	ldr	r2, [sp, #28]
 8018740:	fab3 f383 	clz	r3, r3
 8018744:	095b      	lsrs	r3, r3, #5
 8018746:	7013      	strb	r3, [r2, #0]
 8018748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801874c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8018750:	4770      	bx	lr
 8018752:	200b      	movs	r0, #11
 8018754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018758 <_execute_event_handler>:
 8018758:	2002      	movs	r0, #2
 801875a:	4770      	bx	lr

0801875c <_cancel_goal_event_handler>:
 801875c:	2003      	movs	r0, #3
 801875e:	4770      	bx	lr

08018760 <_succeed_event_handler>:
 8018760:	2004      	movs	r0, #4
 8018762:	4770      	bx	lr

08018764 <_abort_event_handler>:
 8018764:	2006      	movs	r0, #6
 8018766:	4770      	bx	lr

08018768 <_canceled_event_handler>:
 8018768:	2005      	movs	r0, #5
 801876a:	4770      	bx	lr

0801876c <rcl_action_transition_goal_state>:
 801876c:	b2c2      	uxtb	r2, r0
 801876e:	2a06      	cmp	r2, #6
 8018770:	d810      	bhi.n	8018794 <rcl_action_transition_goal_state+0x28>
 8018772:	2904      	cmp	r1, #4
 8018774:	d80e      	bhi.n	8018794 <rcl_action_transition_goal_state+0x28>
 8018776:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801877a:	b410      	push	{r4}
 801877c:	1853      	adds	r3, r2, r1
 801877e:	4c06      	ldr	r4, [pc, #24]	; (8018798 <rcl_action_transition_goal_state+0x2c>)
 8018780:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8018784:	b113      	cbz	r3, 801878c <rcl_action_transition_goal_state+0x20>
 8018786:	f85d 4b04 	ldr.w	r4, [sp], #4
 801878a:	4718      	bx	r3
 801878c:	2000      	movs	r0, #0
 801878e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018792:	4770      	bx	lr
 8018794:	2000      	movs	r0, #0
 8018796:	4770      	bx	lr
 8018798:	0801ffb8 	.word	0x0801ffb8

0801879c <rcl_action_get_zero_initialized_cancel_response>:
 801879c:	b510      	push	{r4, lr}
 801879e:	4c07      	ldr	r4, [pc, #28]	; (80187bc <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80187a0:	4686      	mov	lr, r0
 80187a2:	4684      	mov	ip, r0
 80187a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80187a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80187aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80187ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80187b0:	6823      	ldr	r3, [r4, #0]
 80187b2:	4670      	mov	r0, lr
 80187b4:	f8cc 3000 	str.w	r3, [ip]
 80187b8:	bd10      	pop	{r4, pc}
 80187ba:	bf00      	nop
 80187bc:	08020044 	.word	0x08020044

080187c0 <rclc_action_send_result_request>:
 80187c0:	b1d0      	cbz	r0, 80187f8 <rclc_action_send_result_request+0x38>
 80187c2:	4684      	mov	ip, r0
 80187c4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80187c8:	b500      	push	{lr}
 80187ca:	b087      	sub	sp, #28
 80187cc:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80187d0:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80187d4:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80187d8:	f10d 0e08 	add.w	lr, sp, #8
 80187dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80187e0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80187e4:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 80187e8:	a902      	add	r1, sp, #8
 80187ea:	3010      	adds	r0, #16
 80187ec:	f7ff fbcc 	bl	8017f88 <rcl_action_send_result_request>
 80187f0:	b920      	cbnz	r0, 80187fc <rclc_action_send_result_request+0x3c>
 80187f2:	b007      	add	sp, #28
 80187f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80187f8:	200b      	movs	r0, #11
 80187fa:	4770      	bx	lr
 80187fc:	9001      	str	r0, [sp, #4]
 80187fe:	f7f6 f91b 	bl	800ea38 <rcutils_reset_error>
 8018802:	9801      	ldr	r0, [sp, #4]
 8018804:	b007      	add	sp, #28
 8018806:	f85d fb04 	ldr.w	pc, [sp], #4
 801880a:	bf00      	nop

0801880c <rclc_action_take_goal_handle>:
 801880c:	b160      	cbz	r0, 8018828 <rclc_action_take_goal_handle+0x1c>
 801880e:	6883      	ldr	r3, [r0, #8]
 8018810:	b143      	cbz	r3, 8018824 <rclc_action_take_goal_handle+0x18>
 8018812:	6819      	ldr	r1, [r3, #0]
 8018814:	2200      	movs	r2, #0
 8018816:	6081      	str	r1, [r0, #8]
 8018818:	721a      	strb	r2, [r3, #8]
 801881a:	68c1      	ldr	r1, [r0, #12]
 801881c:	621a      	str	r2, [r3, #32]
 801881e:	849a      	strh	r2, [r3, #36]	; 0x24
 8018820:	6019      	str	r1, [r3, #0]
 8018822:	60c3      	str	r3, [r0, #12]
 8018824:	4618      	mov	r0, r3
 8018826:	4770      	bx	lr
 8018828:	4603      	mov	r3, r0
 801882a:	e7fb      	b.n	8018824 <rclc_action_take_goal_handle+0x18>

0801882c <rclc_action_remove_used_goal_handle>:
 801882c:	b180      	cbz	r0, 8018850 <rclc_action_remove_used_goal_handle+0x24>
 801882e:	b179      	cbz	r1, 8018850 <rclc_action_remove_used_goal_handle+0x24>
 8018830:	68c3      	ldr	r3, [r0, #12]
 8018832:	4299      	cmp	r1, r3
 8018834:	d00d      	beq.n	8018852 <rclc_action_remove_used_goal_handle+0x26>
 8018836:	b12b      	cbz	r3, 8018844 <rclc_action_remove_used_goal_handle+0x18>
 8018838:	681a      	ldr	r2, [r3, #0]
 801883a:	4291      	cmp	r1, r2
 801883c:	d003      	beq.n	8018846 <rclc_action_remove_used_goal_handle+0x1a>
 801883e:	4613      	mov	r3, r2
 8018840:	2b00      	cmp	r3, #0
 8018842:	d1f9      	bne.n	8018838 <rclc_action_remove_used_goal_handle+0xc>
 8018844:	4770      	bx	lr
 8018846:	680a      	ldr	r2, [r1, #0]
 8018848:	601a      	str	r2, [r3, #0]
 801884a:	6883      	ldr	r3, [r0, #8]
 801884c:	600b      	str	r3, [r1, #0]
 801884e:	6081      	str	r1, [r0, #8]
 8018850:	4770      	bx	lr
 8018852:	680b      	ldr	r3, [r1, #0]
 8018854:	60c3      	str	r3, [r0, #12]
 8018856:	e7f8      	b.n	801884a <rclc_action_remove_used_goal_handle+0x1e>

08018858 <rclc_action_find_goal_handle_by_uuid>:
 8018858:	b538      	push	{r3, r4, r5, lr}
 801885a:	b181      	cbz	r1, 801887e <rclc_action_find_goal_handle_by_uuid+0x26>
 801885c:	b178      	cbz	r0, 801887e <rclc_action_find_goal_handle_by_uuid+0x26>
 801885e:	68c4      	ldr	r4, [r0, #12]
 8018860:	460d      	mov	r5, r1
 8018862:	b914      	cbnz	r4, 801886a <rclc_action_find_goal_handle_by_uuid+0x12>
 8018864:	e009      	b.n	801887a <rclc_action_find_goal_handle_by_uuid+0x22>
 8018866:	6824      	ldr	r4, [r4, #0]
 8018868:	b13c      	cbz	r4, 801887a <rclc_action_find_goal_handle_by_uuid+0x22>
 801886a:	f104 0009 	add.w	r0, r4, #9
 801886e:	2210      	movs	r2, #16
 8018870:	4629      	mov	r1, r5
 8018872:	f004 ffa9 	bl	801d7c8 <memcmp>
 8018876:	2800      	cmp	r0, #0
 8018878:	d1f5      	bne.n	8018866 <rclc_action_find_goal_handle_by_uuid+0xe>
 801887a:	4620      	mov	r0, r4
 801887c:	bd38      	pop	{r3, r4, r5, pc}
 801887e:	2400      	movs	r4, #0
 8018880:	4620      	mov	r0, r4
 8018882:	bd38      	pop	{r3, r4, r5, pc}

08018884 <rclc_action_find_first_handle_by_status>:
 8018884:	b140      	cbz	r0, 8018898 <rclc_action_find_first_handle_by_status+0x14>
 8018886:	68c0      	ldr	r0, [r0, #12]
 8018888:	b910      	cbnz	r0, 8018890 <rclc_action_find_first_handle_by_status+0xc>
 801888a:	e005      	b.n	8018898 <rclc_action_find_first_handle_by_status+0x14>
 801888c:	6800      	ldr	r0, [r0, #0]
 801888e:	b118      	cbz	r0, 8018898 <rclc_action_find_first_handle_by_status+0x14>
 8018890:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8018894:	428b      	cmp	r3, r1
 8018896:	d1f9      	bne.n	801888c <rclc_action_find_first_handle_by_status+0x8>
 8018898:	4770      	bx	lr
 801889a:	bf00      	nop

0801889c <rclc_action_find_first_terminated_handle>:
 801889c:	b140      	cbz	r0, 80188b0 <rclc_action_find_first_terminated_handle+0x14>
 801889e:	68c0      	ldr	r0, [r0, #12]
 80188a0:	b910      	cbnz	r0, 80188a8 <rclc_action_find_first_terminated_handle+0xc>
 80188a2:	e005      	b.n	80188b0 <rclc_action_find_first_terminated_handle+0x14>
 80188a4:	6800      	ldr	r0, [r0, #0]
 80188a6:	b118      	cbz	r0, 80188b0 <rclc_action_find_first_terminated_handle+0x14>
 80188a8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80188ac:	2b03      	cmp	r3, #3
 80188ae:	ddf9      	ble.n	80188a4 <rclc_action_find_first_terminated_handle+0x8>
 80188b0:	4770      	bx	lr
 80188b2:	bf00      	nop

080188b4 <rclc_action_find_handle_by_goal_request_sequence_number>:
 80188b4:	b170      	cbz	r0, 80188d4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80188b6:	68c0      	ldr	r0, [r0, #12]
 80188b8:	b160      	cbz	r0, 80188d4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80188ba:	b410      	push	{r4}
 80188bc:	e001      	b.n	80188c2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 80188be:	6800      	ldr	r0, [r0, #0]
 80188c0:	b128      	cbz	r0, 80188ce <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80188c2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 80188c6:	4299      	cmp	r1, r3
 80188c8:	bf08      	it	eq
 80188ca:	4294      	cmpeq	r4, r2
 80188cc:	d1f7      	bne.n	80188be <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80188ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80188d2:	4770      	bx	lr
 80188d4:	4770      	bx	lr
 80188d6:	bf00      	nop

080188d8 <rclc_action_find_handle_by_result_request_sequence_number>:
 80188d8:	b170      	cbz	r0, 80188f8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80188da:	68c0      	ldr	r0, [r0, #12]
 80188dc:	b160      	cbz	r0, 80188f8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80188de:	b410      	push	{r4}
 80188e0:	e001      	b.n	80188e6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80188e2:	6800      	ldr	r0, [r0, #0]
 80188e4:	b128      	cbz	r0, 80188f2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80188e6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 80188ea:	4299      	cmp	r1, r3
 80188ec:	bf08      	it	eq
 80188ee:	4294      	cmpeq	r4, r2
 80188f0:	d1f7      	bne.n	80188e2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80188f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80188f6:	4770      	bx	lr
 80188f8:	4770      	bx	lr
 80188fa:	bf00      	nop

080188fc <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80188fc:	b170      	cbz	r0, 801891c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80188fe:	68c0      	ldr	r0, [r0, #12]
 8018900:	b160      	cbz	r0, 801891c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8018902:	b410      	push	{r4}
 8018904:	e001      	b.n	801890a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8018906:	6800      	ldr	r0, [r0, #0]
 8018908:	b128      	cbz	r0, 8018916 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801890a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 801890e:	4299      	cmp	r1, r3
 8018910:	bf08      	it	eq
 8018912:	4294      	cmpeq	r4, r2
 8018914:	d1f7      	bne.n	8018906 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8018916:	f85d 4b04 	ldr.w	r4, [sp], #4
 801891a:	4770      	bx	lr
 801891c:	4770      	bx	lr
 801891e:	bf00      	nop

08018920 <rclc_action_find_first_handle_with_goal_response>:
 8018920:	b140      	cbz	r0, 8018934 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018922:	68c0      	ldr	r0, [r0, #12]
 8018924:	b910      	cbnz	r0, 801892c <rclc_action_find_first_handle_with_goal_response+0xc>
 8018926:	e005      	b.n	8018934 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018928:	6800      	ldr	r0, [r0, #0]
 801892a:	b118      	cbz	r0, 8018934 <rclc_action_find_first_handle_with_goal_response+0x14>
 801892c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8018930:	2b00      	cmp	r3, #0
 8018932:	d0f9      	beq.n	8018928 <rclc_action_find_first_handle_with_goal_response+0x8>
 8018934:	4770      	bx	lr
 8018936:	bf00      	nop

08018938 <rclc_action_find_first_handle_with_result_response>:
 8018938:	b140      	cbz	r0, 801894c <rclc_action_find_first_handle_with_result_response+0x14>
 801893a:	68c0      	ldr	r0, [r0, #12]
 801893c:	b910      	cbnz	r0, 8018944 <rclc_action_find_first_handle_with_result_response+0xc>
 801893e:	e005      	b.n	801894c <rclc_action_find_first_handle_with_result_response+0x14>
 8018940:	6800      	ldr	r0, [r0, #0]
 8018942:	b118      	cbz	r0, 801894c <rclc_action_find_first_handle_with_result_response+0x14>
 8018944:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8018948:	2b00      	cmp	r3, #0
 801894a:	d0f9      	beq.n	8018940 <rclc_action_find_first_handle_with_result_response+0x8>
 801894c:	4770      	bx	lr
 801894e:	bf00      	nop

08018950 <rclc_action_server_response_goal_request>:
 8018950:	b198      	cbz	r0, 801897a <rclc_action_server_response_goal_request+0x2a>
 8018952:	2200      	movs	r2, #0
 8018954:	460b      	mov	r3, r1
 8018956:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801895a:	b510      	push	{r4, lr}
 801895c:	6844      	ldr	r4, [r0, #4]
 801895e:	b086      	sub	sp, #24
 8018960:	f104 0010 	add.w	r0, r4, #16
 8018964:	9205      	str	r2, [sp, #20]
 8018966:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801896a:	aa03      	add	r2, sp, #12
 801896c:	f88d 300c 	strb.w	r3, [sp, #12]
 8018970:	f7ff fd40 	bl	80183f4 <rcl_action_send_goal_response>
 8018974:	b918      	cbnz	r0, 801897e <rclc_action_server_response_goal_request+0x2e>
 8018976:	b006      	add	sp, #24
 8018978:	bd10      	pop	{r4, pc}
 801897a:	200b      	movs	r0, #11
 801897c:	4770      	bx	lr
 801897e:	9001      	str	r0, [sp, #4]
 8018980:	f7f6 f85a 	bl	800ea38 <rcutils_reset_error>
 8018984:	9801      	ldr	r0, [sp, #4]
 8018986:	b006      	add	sp, #24
 8018988:	bd10      	pop	{r4, pc}
 801898a:	bf00      	nop
 801898c:	0000      	movs	r0, r0
	...

08018990 <rclc_action_server_goal_cancel_accept>:
 8018990:	b310      	cbz	r0, 80189d8 <rclc_action_server_goal_cancel_accept+0x48>
 8018992:	b510      	push	{r4, lr}
 8018994:	b090      	sub	sp, #64	; 0x40
 8018996:	4604      	mov	r4, r0
 8018998:	a806      	add	r0, sp, #24
 801899a:	f7ff feff 	bl	801879c <rcl_action_get_zero_initialized_cancel_response>
 801899e:	2300      	movs	r3, #0
 80189a0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80189a4:	46ec      	mov	ip, sp
 80189a6:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80189aa:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80189ae:	f88d 3018 	strb.w	r3, [sp, #24]
 80189b2:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80189b6:	f8cd d01c 	str.w	sp, [sp, #28]
 80189ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80189be:	ed9f 7b08 	vldr	d7, [pc, #32]	; 80189e0 <rclc_action_server_goal_cancel_accept+0x50>
 80189c2:	6860      	ldr	r0, [r4, #4]
 80189c4:	aa06      	add	r2, sp, #24
 80189c6:	f104 0158 	add.w	r1, r4, #88	; 0x58
 80189ca:	3010      	adds	r0, #16
 80189cc:	ed8d 7b08 	vstr	d7, [sp, #32]
 80189d0:	f7ff fdc6 	bl	8018560 <rcl_action_send_cancel_response>
 80189d4:	b010      	add	sp, #64	; 0x40
 80189d6:	bd10      	pop	{r4, pc}
 80189d8:	200b      	movs	r0, #11
 80189da:	4770      	bx	lr
 80189dc:	f3af 8000 	nop.w
 80189e0:	00000001 	.word	0x00000001
 80189e4:	00000001 	.word	0x00000001

080189e8 <rclc_action_server_goal_cancel_reject>:
 80189e8:	b082      	sub	sp, #8
 80189ea:	b530      	push	{r4, r5, lr}
 80189ec:	b08b      	sub	sp, #44	; 0x2c
 80189ee:	ac0e      	add	r4, sp, #56	; 0x38
 80189f0:	e884 000c 	stmia.w	r4, {r2, r3}
 80189f4:	b188      	cbz	r0, 8018a1a <rclc_action_server_goal_cancel_reject+0x32>
 80189f6:	4604      	mov	r4, r0
 80189f8:	a801      	add	r0, sp, #4
 80189fa:	460d      	mov	r5, r1
 80189fc:	f7ff fece 	bl	801879c <rcl_action_get_zero_initialized_cancel_response>
 8018a00:	aa01      	add	r2, sp, #4
 8018a02:	a90e      	add	r1, sp, #56	; 0x38
 8018a04:	f104 0010 	add.w	r0, r4, #16
 8018a08:	f88d 5004 	strb.w	r5, [sp, #4]
 8018a0c:	f7ff fda8 	bl	8018560 <rcl_action_send_cancel_response>
 8018a10:	b00b      	add	sp, #44	; 0x2c
 8018a12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018a16:	b002      	add	sp, #8
 8018a18:	4770      	bx	lr
 8018a1a:	200b      	movs	r0, #11
 8018a1c:	b00b      	add	sp, #44	; 0x2c
 8018a1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018a22:	b002      	add	sp, #8
 8018a24:	4770      	bx	lr
 8018a26:	bf00      	nop

08018a28 <__atomic_load_8>:
 8018a28:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8018a2c:	4a16      	ldr	r2, [pc, #88]	; (8018a88 <__atomic_load_8+0x60>)
 8018a2e:	4b17      	ldr	r3, [pc, #92]	; (8018a8c <__atomic_load_8+0x64>)
 8018a30:	f04f 0c01 	mov.w	ip, #1
 8018a34:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8018a38:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8018a3c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8018a40:	fb02 f101 	mul.w	r1, r2, r1
 8018a44:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8018a48:	fba3 2301 	umull	r2, r3, r3, r1
 8018a4c:	091b      	lsrs	r3, r3, #4
 8018a4e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8018a52:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8018a56:	b4d0      	push	{r4, r6, r7}
 8018a58:	1ac9      	subs	r1, r1, r3
 8018a5a:	4c0d      	ldr	r4, [pc, #52]	; (8018a90 <__atomic_load_8+0x68>)
 8018a5c:	1862      	adds	r2, r4, r1
 8018a5e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8018a62:	e8c2 cf46 	strexb	r6, ip, [r2]
 8018a66:	2e00      	cmp	r6, #0
 8018a68:	d1f9      	bne.n	8018a5e <__atomic_load_8+0x36>
 8018a6a:	b2db      	uxtb	r3, r3
 8018a6c:	f3bf 8f5b 	dmb	ish
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	d1f4      	bne.n	8018a5e <__atomic_load_8+0x36>
 8018a74:	e9d0 6700 	ldrd	r6, r7, [r0]
 8018a78:	f3bf 8f5b 	dmb	ish
 8018a7c:	5463      	strb	r3, [r4, r1]
 8018a7e:	4630      	mov	r0, r6
 8018a80:	4639      	mov	r1, r7
 8018a82:	bcd0      	pop	{r4, r6, r7}
 8018a84:	4770      	bx	lr
 8018a86:	bf00      	nop
 8018a88:	27d4eb2d 	.word	0x27d4eb2d
 8018a8c:	b21642c9 	.word	0xb21642c9
 8018a90:	20010ba8 	.word	0x20010ba8

08018a94 <__atomic_store_8>:
 8018a94:	b570      	push	{r4, r5, r6, lr}
 8018a96:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8018a9a:	4916      	ldr	r1, [pc, #88]	; (8018af4 <__atomic_store_8+0x60>)
 8018a9c:	4c16      	ldr	r4, [pc, #88]	; (8018af8 <__atomic_store_8+0x64>)
 8018a9e:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 8018aa2:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8018aa6:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8018aaa:	fb01 fe0e 	mul.w	lr, r1, lr
 8018aae:	4913      	ldr	r1, [pc, #76]	; (8018afc <__atomic_store_8+0x68>)
 8018ab0:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8018ab4:	fba1 510e 	umull	r5, r1, r1, lr
 8018ab8:	f04f 0501 	mov.w	r5, #1
 8018abc:	0909      	lsrs	r1, r1, #4
 8018abe:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8018ac2:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 8018ac6:	ebae 0e01 	sub.w	lr, lr, r1
 8018aca:	eb04 0c0e 	add.w	ip, r4, lr
 8018ace:	e8dc 1f4f 	ldrexb	r1, [ip]
 8018ad2:	e8cc 5f46 	strexb	r6, r5, [ip]
 8018ad6:	2e00      	cmp	r6, #0
 8018ad8:	d1f9      	bne.n	8018ace <__atomic_store_8+0x3a>
 8018ada:	b2c9      	uxtb	r1, r1
 8018adc:	f3bf 8f5b 	dmb	ish
 8018ae0:	2900      	cmp	r1, #0
 8018ae2:	d1f4      	bne.n	8018ace <__atomic_store_8+0x3a>
 8018ae4:	e9c0 2300 	strd	r2, r3, [r0]
 8018ae8:	f3bf 8f5b 	dmb	ish
 8018aec:	f804 100e 	strb.w	r1, [r4, lr]
 8018af0:	bd70      	pop	{r4, r5, r6, pc}
 8018af2:	bf00      	nop
 8018af4:	27d4eb2d 	.word	0x27d4eb2d
 8018af8:	20010ba8 	.word	0x20010ba8
 8018afc:	b21642c9 	.word	0xb21642c9

08018b00 <__atomic_exchange_8>:
 8018b00:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8018b04:	4917      	ldr	r1, [pc, #92]	; (8018b64 <__atomic_exchange_8+0x64>)
 8018b06:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 8018b0a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8018b0e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8018b12:	fb01 fc0c 	mul.w	ip, r1, ip
 8018b16:	4914      	ldr	r1, [pc, #80]	; (8018b68 <__atomic_exchange_8+0x68>)
 8018b18:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8018b1c:	b570      	push	{r4, r5, r6, lr}
 8018b1e:	4686      	mov	lr, r0
 8018b20:	fba1 010c 	umull	r0, r1, r1, ip
 8018b24:	4d11      	ldr	r5, [pc, #68]	; (8018b6c <__atomic_exchange_8+0x6c>)
 8018b26:	f04f 0001 	mov.w	r0, #1
 8018b2a:	0909      	lsrs	r1, r1, #4
 8018b2c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8018b30:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8018b34:	ebac 0c01 	sub.w	ip, ip, r1
 8018b38:	eb05 010c 	add.w	r1, r5, ip
 8018b3c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8018b40:	e8c1 0f46 	strexb	r6, r0, [r1]
 8018b44:	2e00      	cmp	r6, #0
 8018b46:	d1f9      	bne.n	8018b3c <__atomic_exchange_8+0x3c>
 8018b48:	b2e4      	uxtb	r4, r4
 8018b4a:	f3bf 8f5b 	dmb	ish
 8018b4e:	2c00      	cmp	r4, #0
 8018b50:	d1f4      	bne.n	8018b3c <__atomic_exchange_8+0x3c>
 8018b52:	e9de 0100 	ldrd	r0, r1, [lr]
 8018b56:	e9ce 2300 	strd	r2, r3, [lr]
 8018b5a:	f3bf 8f5b 	dmb	ish
 8018b5e:	f805 400c 	strb.w	r4, [r5, ip]
 8018b62:	bd70      	pop	{r4, r5, r6, pc}
 8018b64:	27d4eb2d 	.word	0x27d4eb2d
 8018b68:	b21642c9 	.word	0xb21642c9
 8018b6c:	20010ba8 	.word	0x20010ba8

08018b70 <rcutils_get_env>:
 8018b70:	b168      	cbz	r0, 8018b8e <rcutils_get_env+0x1e>
 8018b72:	b510      	push	{r4, lr}
 8018b74:	460c      	mov	r4, r1
 8018b76:	b129      	cbz	r1, 8018b84 <rcutils_get_env+0x14>
 8018b78:	f004 fa90 	bl	801d09c <getenv>
 8018b7c:	b120      	cbz	r0, 8018b88 <rcutils_get_env+0x18>
 8018b7e:	6020      	str	r0, [r4, #0]
 8018b80:	2000      	movs	r0, #0
 8018b82:	bd10      	pop	{r4, pc}
 8018b84:	4803      	ldr	r0, [pc, #12]	; (8018b94 <rcutils_get_env+0x24>)
 8018b86:	bd10      	pop	{r4, pc}
 8018b88:	4b03      	ldr	r3, [pc, #12]	; (8018b98 <rcutils_get_env+0x28>)
 8018b8a:	6023      	str	r3, [r4, #0]
 8018b8c:	bd10      	pop	{r4, pc}
 8018b8e:	4803      	ldr	r0, [pc, #12]	; (8018b9c <rcutils_get_env+0x2c>)
 8018b90:	4770      	bx	lr
 8018b92:	bf00      	nop
 8018b94:	08020084 	.word	0x08020084
 8018b98:	080201a8 	.word	0x080201a8
 8018b9c:	08020068 	.word	0x08020068

08018ba0 <rcutils_is_directory>:
 8018ba0:	2000      	movs	r0, #0
 8018ba2:	4770      	bx	lr

08018ba4 <rcutils_join_path>:
 8018ba4:	b082      	sub	sp, #8
 8018ba6:	2000      	movs	r0, #0
 8018ba8:	e88d 000c 	stmia.w	sp, {r2, r3}
 8018bac:	b002      	add	sp, #8
 8018bae:	4770      	bx	lr

08018bb0 <rcutils_to_native_path>:
 8018bb0:	b084      	sub	sp, #16
 8018bb2:	2000      	movs	r0, #0
 8018bb4:	f10d 0c04 	add.w	ip, sp, #4
 8018bb8:	b004      	add	sp, #16
 8018bba:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8018bbe:	4770      	bx	lr

08018bc0 <rcutils_format_string_limit>:
 8018bc0:	b40f      	push	{r0, r1, r2, r3}
 8018bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bc4:	b083      	sub	sp, #12
 8018bc6:	ac08      	add	r4, sp, #32
 8018bc8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8018bca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8018bce:	b326      	cbz	r6, 8018c1a <rcutils_format_string_limit+0x5a>
 8018bd0:	a808      	add	r0, sp, #32
 8018bd2:	f7f5 ff0d 	bl	800e9f0 <rcutils_allocator_is_valid>
 8018bd6:	b300      	cbz	r0, 8018c1a <rcutils_format_string_limit+0x5a>
 8018bd8:	2100      	movs	r1, #0
 8018bda:	ab0f      	add	r3, sp, #60	; 0x3c
 8018bdc:	4632      	mov	r2, r6
 8018bde:	4608      	mov	r0, r1
 8018be0:	e9cd 3300 	strd	r3, r3, [sp]
 8018be4:	f000 f906 	bl	8018df4 <rcutils_vsnprintf>
 8018be8:	1c43      	adds	r3, r0, #1
 8018bea:	4605      	mov	r5, r0
 8018bec:	d015      	beq.n	8018c1a <rcutils_format_string_limit+0x5a>
 8018bee:	1c47      	adds	r7, r0, #1
 8018bf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018bf2:	429f      	cmp	r7, r3
 8018bf4:	d901      	bls.n	8018bfa <rcutils_format_string_limit+0x3a>
 8018bf6:	1e5d      	subs	r5, r3, #1
 8018bf8:	461f      	mov	r7, r3
 8018bfa:	9b08      	ldr	r3, [sp, #32]
 8018bfc:	4638      	mov	r0, r7
 8018bfe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018c00:	4798      	blx	r3
 8018c02:	4604      	mov	r4, r0
 8018c04:	b148      	cbz	r0, 8018c1a <rcutils_format_string_limit+0x5a>
 8018c06:	4632      	mov	r2, r6
 8018c08:	4639      	mov	r1, r7
 8018c0a:	9b01      	ldr	r3, [sp, #4]
 8018c0c:	f000 f8f2 	bl	8018df4 <rcutils_vsnprintf>
 8018c10:	2800      	cmp	r0, #0
 8018c12:	db09      	blt.n	8018c28 <rcutils_format_string_limit+0x68>
 8018c14:	2300      	movs	r3, #0
 8018c16:	5563      	strb	r3, [r4, r5]
 8018c18:	e000      	b.n	8018c1c <rcutils_format_string_limit+0x5c>
 8018c1a:	2400      	movs	r4, #0
 8018c1c:	4620      	mov	r0, r4
 8018c1e:	b003      	add	sp, #12
 8018c20:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018c24:	b004      	add	sp, #16
 8018c26:	4770      	bx	lr
 8018c28:	4620      	mov	r0, r4
 8018c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018c2e:	2400      	movs	r4, #0
 8018c30:	4798      	blx	r3
 8018c32:	e7f3      	b.n	8018c1c <rcutils_format_string_limit+0x5c>

08018c34 <rcutils_repl_str>:
 8018c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c38:	ed2d 8b02 	vpush	{d8}
 8018c3c:	b087      	sub	sp, #28
 8018c3e:	2600      	movs	r6, #0
 8018c40:	4680      	mov	r8, r0
 8018c42:	468a      	mov	sl, r1
 8018c44:	9000      	str	r0, [sp, #0]
 8018c46:	4608      	mov	r0, r1
 8018c48:	ee08 2a10 	vmov	s16, r2
 8018c4c:	4699      	mov	r9, r3
 8018c4e:	2510      	movs	r5, #16
 8018c50:	f7e7 fb56 	bl	8000300 <strlen>
 8018c54:	4637      	mov	r7, r6
 8018c56:	46b3      	mov	fp, r6
 8018c58:	9001      	str	r0, [sp, #4]
 8018c5a:	e01e      	b.n	8018c9a <rcutils_repl_str+0x66>
 8018c5c:	f10b 0b01 	add.w	fp, fp, #1
 8018c60:	9b01      	ldr	r3, [sp, #4]
 8018c62:	455e      	cmp	r6, fp
 8018c64:	eb04 0803 	add.w	r8, r4, r3
 8018c68:	d211      	bcs.n	8018c8e <rcutils_repl_str+0x5a>
 8018c6a:	442e      	add	r6, r5
 8018c6c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8018c70:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8018c74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018c78:	00b1      	lsls	r1, r6, #2
 8018c7a:	4798      	blx	r3
 8018c7c:	2800      	cmp	r0, #0
 8018c7e:	f000 8088 	beq.w	8018d92 <rcutils_repl_str+0x15e>
 8018c82:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8018c86:	4607      	mov	r7, r0
 8018c88:	bf28      	it	cs
 8018c8a:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8018c8e:	9a00      	ldr	r2, [sp, #0]
 8018c90:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8018c94:	1aa4      	subs	r4, r4, r2
 8018c96:	f843 4c04 	str.w	r4, [r3, #-4]
 8018c9a:	4651      	mov	r1, sl
 8018c9c:	4640      	mov	r0, r8
 8018c9e:	f004 fdf7 	bl	801d890 <strstr>
 8018ca2:	4604      	mov	r4, r0
 8018ca4:	4638      	mov	r0, r7
 8018ca6:	2c00      	cmp	r4, #0
 8018ca8:	d1d8      	bne.n	8018c5c <rcutils_repl_str+0x28>
 8018caa:	4640      	mov	r0, r8
 8018cac:	f7e7 fb28 	bl	8000300 <strlen>
 8018cb0:	9b00      	ldr	r3, [sp, #0]
 8018cb2:	eba8 0803 	sub.w	r8, r8, r3
 8018cb6:	eb08 0400 	add.w	r4, r8, r0
 8018cba:	9402      	str	r4, [sp, #8]
 8018cbc:	f1bb 0f00 	cmp.w	fp, #0
 8018cc0:	d045      	beq.n	8018d4e <rcutils_repl_str+0x11a>
 8018cc2:	ee18 0a10 	vmov	r0, s16
 8018cc6:	f7e7 fb1b 	bl	8000300 <strlen>
 8018cca:	9a01      	ldr	r2, [sp, #4]
 8018ccc:	4606      	mov	r6, r0
 8018cce:	f8d9 3000 	ldr.w	r3, [r9]
 8018cd2:	1a82      	subs	r2, r0, r2
 8018cd4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8018cd8:	fb0b 4202 	mla	r2, fp, r2, r4
 8018cdc:	1c50      	adds	r0, r2, #1
 8018cde:	9205      	str	r2, [sp, #20]
 8018ce0:	4798      	blx	r3
 8018ce2:	4682      	mov	sl, r0
 8018ce4:	2800      	cmp	r0, #0
 8018ce6:	d054      	beq.n	8018d92 <rcutils_repl_str+0x15e>
 8018ce8:	683a      	ldr	r2, [r7, #0]
 8018cea:	463d      	mov	r5, r7
 8018cec:	9900      	ldr	r1, [sp, #0]
 8018cee:	2401      	movs	r4, #1
 8018cf0:	f004 fec5 	bl	801da7e <memcpy>
 8018cf4:	683b      	ldr	r3, [r7, #0]
 8018cf6:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8018cfa:	eb0a 0803 	add.w	r8, sl, r3
 8018cfe:	ee18 7a10 	vmov	r7, s16
 8018d02:	f8dd a000 	ldr.w	sl, [sp]
 8018d06:	f8cd 9000 	str.w	r9, [sp]
 8018d0a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018d0e:	4632      	mov	r2, r6
 8018d10:	4639      	mov	r1, r7
 8018d12:	4640      	mov	r0, r8
 8018d14:	44b0      	add	r8, r6
 8018d16:	f004 feb2 	bl	801da7e <memcpy>
 8018d1a:	f855 2b04 	ldr.w	r2, [r5], #4
 8018d1e:	45a3      	cmp	fp, r4
 8018d20:	444a      	add	r2, r9
 8018d22:	eb0a 0102 	add.w	r1, sl, r2
 8018d26:	d02a      	beq.n	8018d7e <rcutils_repl_str+0x14a>
 8018d28:	6828      	ldr	r0, [r5, #0]
 8018d2a:	1a82      	subs	r2, r0, r2
 8018d2c:	4640      	mov	r0, r8
 8018d2e:	4490      	add	r8, r2
 8018d30:	f004 fea5 	bl	801da7e <memcpy>
 8018d34:	1c62      	adds	r2, r4, #1
 8018d36:	45a3      	cmp	fp, r4
 8018d38:	4614      	mov	r4, r2
 8018d3a:	d8e8      	bhi.n	8018d0e <rcutils_repl_str+0xda>
 8018d3c:	f8dd 9000 	ldr.w	r9, [sp]
 8018d40:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8018d44:	2300      	movs	r3, #0
 8018d46:	9a05      	ldr	r2, [sp, #20]
 8018d48:	f80a 3002 	strb.w	r3, [sl, r2]
 8018d4c:	e00b      	b.n	8018d66 <rcutils_repl_str+0x132>
 8018d4e:	4620      	mov	r0, r4
 8018d50:	f8d9 3000 	ldr.w	r3, [r9]
 8018d54:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8018d58:	3001      	adds	r0, #1
 8018d5a:	4798      	blx	r3
 8018d5c:	4682      	mov	sl, r0
 8018d5e:	b110      	cbz	r0, 8018d66 <rcutils_repl_str+0x132>
 8018d60:	9900      	ldr	r1, [sp, #0]
 8018d62:	f004 fe84 	bl	801da6e <strcpy>
 8018d66:	4638      	mov	r0, r7
 8018d68:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018d6c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8018d70:	4798      	blx	r3
 8018d72:	4650      	mov	r0, sl
 8018d74:	b007      	add	sp, #28
 8018d76:	ecbd 8b02 	vpop	{d8}
 8018d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d7e:	9b02      	ldr	r3, [sp, #8]
 8018d80:	4640      	mov	r0, r8
 8018d82:	f8dd 9000 	ldr.w	r9, [sp]
 8018d86:	1a9a      	subs	r2, r3, r2
 8018d88:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8018d8c:	f004 fe77 	bl	801da7e <memcpy>
 8018d90:	e7d8      	b.n	8018d44 <rcutils_repl_str+0x110>
 8018d92:	f04f 0a00 	mov.w	sl, #0
 8018d96:	e7e6      	b.n	8018d66 <rcutils_repl_str+0x132>

08018d98 <rcutils_snprintf>:
 8018d98:	b40c      	push	{r2, r3}
 8018d9a:	b530      	push	{r4, r5, lr}
 8018d9c:	b083      	sub	sp, #12
 8018d9e:	ab06      	add	r3, sp, #24
 8018da0:	f853 2b04 	ldr.w	r2, [r3], #4
 8018da4:	9301      	str	r3, [sp, #4]
 8018da6:	b1e2      	cbz	r2, 8018de2 <rcutils_snprintf+0x4a>
 8018da8:	fab0 f480 	clz	r4, r0
 8018dac:	fab1 f581 	clz	r5, r1
 8018db0:	ea50 0c01 	orrs.w	ip, r0, r1
 8018db4:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8018db8:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8018dbc:	d008      	beq.n	8018dd0 <rcutils_snprintf+0x38>
 8018dbe:	b984      	cbnz	r4, 8018de2 <rcutils_snprintf+0x4a>
 8018dc0:	b97d      	cbnz	r5, 8018de2 <rcutils_snprintf+0x4a>
 8018dc2:	f004 fcf3 	bl	801d7ac <vsniprintf>
 8018dc6:	b003      	add	sp, #12
 8018dc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018dcc:	b002      	add	sp, #8
 8018dce:	4770      	bx	lr
 8018dd0:	4661      	mov	r1, ip
 8018dd2:	4660      	mov	r0, ip
 8018dd4:	f004 fcea 	bl	801d7ac <vsniprintf>
 8018dd8:	b003      	add	sp, #12
 8018dda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018dde:	b002      	add	sp, #8
 8018de0:	4770      	bx	lr
 8018de2:	f004 fe17 	bl	801da14 <__errno>
 8018de6:	2216      	movs	r2, #22
 8018de8:	4603      	mov	r3, r0
 8018dea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018dee:	601a      	str	r2, [r3, #0]
 8018df0:	e7e9      	b.n	8018dc6 <rcutils_snprintf+0x2e>
 8018df2:	bf00      	nop

08018df4 <rcutils_vsnprintf>:
 8018df4:	b570      	push	{r4, r5, r6, lr}
 8018df6:	b1b2      	cbz	r2, 8018e26 <rcutils_vsnprintf+0x32>
 8018df8:	fab0 f480 	clz	r4, r0
 8018dfc:	fab1 f581 	clz	r5, r1
 8018e00:	ea50 0c01 	orrs.w	ip, r0, r1
 8018e04:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8018e08:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8018e0c:	d005      	beq.n	8018e1a <rcutils_vsnprintf+0x26>
 8018e0e:	b954      	cbnz	r4, 8018e26 <rcutils_vsnprintf+0x32>
 8018e10:	b94d      	cbnz	r5, 8018e26 <rcutils_vsnprintf+0x32>
 8018e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018e16:	f004 bcc9 	b.w	801d7ac <vsniprintf>
 8018e1a:	4661      	mov	r1, ip
 8018e1c:	4660      	mov	r0, ip
 8018e1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018e22:	f004 bcc3 	b.w	801d7ac <vsniprintf>
 8018e26:	f004 fdf5 	bl	801da14 <__errno>
 8018e2a:	2316      	movs	r3, #22
 8018e2c:	6003      	str	r3, [r0, #0]
 8018e2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018e32:	bd70      	pop	{r4, r5, r6, pc}

08018e34 <rcutils_strdup>:
 8018e34:	b084      	sub	sp, #16
 8018e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e38:	ac07      	add	r4, sp, #28
 8018e3a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8018e3c:	4605      	mov	r5, r0
 8018e3e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8018e42:	b1d0      	cbz	r0, 8018e7a <rcutils_strdup+0x46>
 8018e44:	460c      	mov	r4, r1
 8018e46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018e4a:	2100      	movs	r1, #0
 8018e4c:	f7e7 fa08 	bl	8000260 <memchr>
 8018e50:	b180      	cbz	r0, 8018e74 <rcutils_strdup+0x40>
 8018e52:	1b46      	subs	r6, r0, r5
 8018e54:	1c70      	adds	r0, r6, #1
 8018e56:	4639      	mov	r1, r7
 8018e58:	47a0      	blx	r4
 8018e5a:	4604      	mov	r4, r0
 8018e5c:	b128      	cbz	r0, 8018e6a <rcutils_strdup+0x36>
 8018e5e:	4632      	mov	r2, r6
 8018e60:	4629      	mov	r1, r5
 8018e62:	f004 fe0c 	bl	801da7e <memcpy>
 8018e66:	2300      	movs	r3, #0
 8018e68:	55a3      	strb	r3, [r4, r6]
 8018e6a:	4620      	mov	r0, r4
 8018e6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018e70:	b004      	add	sp, #16
 8018e72:	4770      	bx	lr
 8018e74:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8018e78:	e7ed      	b.n	8018e56 <rcutils_strdup+0x22>
 8018e7a:	4604      	mov	r4, r0
 8018e7c:	e7f5      	b.n	8018e6a <rcutils_strdup+0x36>
 8018e7e:	bf00      	nop

08018e80 <rcutils_strndup>:
 8018e80:	b082      	sub	sp, #8
 8018e82:	b570      	push	{r4, r5, r6, lr}
 8018e84:	ac04      	add	r4, sp, #16
 8018e86:	4606      	mov	r6, r0
 8018e88:	e884 000c 	stmia.w	r4, {r2, r3}
 8018e8c:	b1b8      	cbz	r0, 8018ebe <rcutils_strndup+0x3e>
 8018e8e:	460c      	mov	r4, r1
 8018e90:	460a      	mov	r2, r1
 8018e92:	2100      	movs	r1, #0
 8018e94:	f7e7 f9e4 	bl	8000260 <memchr>
 8018e98:	b100      	cbz	r0, 8018e9c <rcutils_strndup+0x1c>
 8018e9a:	1b84      	subs	r4, r0, r6
 8018e9c:	9b04      	ldr	r3, [sp, #16]
 8018e9e:	1c60      	adds	r0, r4, #1
 8018ea0:	9908      	ldr	r1, [sp, #32]
 8018ea2:	4798      	blx	r3
 8018ea4:	4605      	mov	r5, r0
 8018ea6:	b128      	cbz	r0, 8018eb4 <rcutils_strndup+0x34>
 8018ea8:	4622      	mov	r2, r4
 8018eaa:	4631      	mov	r1, r6
 8018eac:	f004 fde7 	bl	801da7e <memcpy>
 8018eb0:	2300      	movs	r3, #0
 8018eb2:	552b      	strb	r3, [r5, r4]
 8018eb4:	4628      	mov	r0, r5
 8018eb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018eba:	b002      	add	sp, #8
 8018ebc:	4770      	bx	lr
 8018ebe:	4605      	mov	r5, r0
 8018ec0:	e7f8      	b.n	8018eb4 <rcutils_strndup+0x34>
 8018ec2:	bf00      	nop

08018ec4 <rcutils_get_zero_initialized_string_map>:
 8018ec4:	2000      	movs	r0, #0
 8018ec6:	4b01      	ldr	r3, [pc, #4]	; (8018ecc <rcutils_get_zero_initialized_string_map+0x8>)
 8018ec8:	6018      	str	r0, [r3, #0]
 8018eca:	4770      	bx	lr
 8018ecc:	20010bc0 	.word	0x20010bc0

08018ed0 <rcutils_string_map_reserve>:
 8018ed0:	2800      	cmp	r0, #0
 8018ed2:	d03e      	beq.n	8018f52 <rcutils_string_map_reserve+0x82>
 8018ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ed6:	6805      	ldr	r5, [r0, #0]
 8018ed8:	4606      	mov	r6, r0
 8018eda:	460c      	mov	r4, r1
 8018edc:	b12d      	cbz	r5, 8018eea <rcutils_string_map_reserve+0x1a>
 8018ede:	68ab      	ldr	r3, [r5, #8]
 8018ee0:	42a3      	cmp	r3, r4
 8018ee2:	d904      	bls.n	8018eee <rcutils_string_map_reserve+0x1e>
 8018ee4:	461c      	mov	r4, r3
 8018ee6:	2d00      	cmp	r5, #0
 8018ee8:	d1f9      	bne.n	8018ede <rcutils_string_map_reserve+0xe>
 8018eea:	201f      	movs	r0, #31
 8018eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018eee:	686b      	ldr	r3, [r5, #4]
 8018ef0:	42a3      	cmp	r3, r4
 8018ef2:	d02a      	beq.n	8018f4a <rcutils_string_map_reserve+0x7a>
 8018ef4:	69e9      	ldr	r1, [r5, #28]
 8018ef6:	b304      	cbz	r4, 8018f3a <rcutils_string_map_reserve+0x6a>
 8018ef8:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 8018efc:	d227      	bcs.n	8018f4e <rcutils_string_map_reserve+0x7e>
 8018efe:	00e7      	lsls	r7, r4, #3
 8018f00:	460a      	mov	r2, r1
 8018f02:	696b      	ldr	r3, [r5, #20]
 8018f04:	6828      	ldr	r0, [r5, #0]
 8018f06:	4639      	mov	r1, r7
 8018f08:	4798      	blx	r3
 8018f0a:	b300      	cbz	r0, 8018f4e <rcutils_string_map_reserve+0x7e>
 8018f0c:	6835      	ldr	r5, [r6, #0]
 8018f0e:	686a      	ldr	r2, [r5, #4]
 8018f10:	6028      	str	r0, [r5, #0]
 8018f12:	42a2      	cmp	r2, r4
 8018f14:	d216      	bcs.n	8018f44 <rcutils_string_map_reserve+0x74>
 8018f16:	43d1      	mvns	r1, r2
 8018f18:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 8018f1c:	4421      	add	r1, r4
 8018f1e:	2909      	cmp	r1, #9
 8018f20:	d919      	bls.n	8018f56 <rcutils_string_map_reserve+0x86>
 8018f22:	0759      	lsls	r1, r3, #29
 8018f24:	d117      	bne.n	8018f56 <rcutils_string_map_reserve+0x86>
 8018f26:	1aa1      	subs	r1, r4, r2
 8018f28:	2600      	movs	r6, #0
 8018f2a:	2200      	movs	r2, #0
 8018f2c:	2700      	movs	r7, #0
 8018f2e:	3201      	adds	r2, #1
 8018f30:	4291      	cmp	r1, r2
 8018f32:	e8e3 6702 	strd	r6, r7, [r3], #8
 8018f36:	d8fa      	bhi.n	8018f2e <rcutils_string_map_reserve+0x5e>
 8018f38:	e004      	b.n	8018f44 <rcutils_string_map_reserve+0x74>
 8018f3a:	692b      	ldr	r3, [r5, #16]
 8018f3c:	6828      	ldr	r0, [r5, #0]
 8018f3e:	4798      	blx	r3
 8018f40:	6835      	ldr	r5, [r6, #0]
 8018f42:	602c      	str	r4, [r5, #0]
 8018f44:	2000      	movs	r0, #0
 8018f46:	606c      	str	r4, [r5, #4]
 8018f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f4a:	2000      	movs	r0, #0
 8018f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f4e:	200a      	movs	r0, #10
 8018f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f52:	200b      	movs	r0, #11
 8018f54:	4770      	bx	lr
 8018f56:	4438      	add	r0, r7
 8018f58:	2200      	movs	r2, #0
 8018f5a:	e9c3 2200 	strd	r2, r2, [r3]
 8018f5e:	3308      	adds	r3, #8
 8018f60:	4283      	cmp	r3, r0
 8018f62:	d1fa      	bne.n	8018f5a <rcutils_string_map_reserve+0x8a>
 8018f64:	e7ee      	b.n	8018f44 <rcutils_string_map_reserve+0x74>
 8018f66:	bf00      	nop

08018f68 <rcutils_string_map_init>:
 8018f68:	b082      	sub	sp, #8
 8018f6a:	b570      	push	{r4, r5, r6, lr}
 8018f6c:	ac04      	add	r4, sp, #16
 8018f6e:	e884 000c 	stmia.w	r4, {r2, r3}
 8018f72:	b378      	cbz	r0, 8018fd4 <rcutils_string_map_init+0x6c>
 8018f74:	6806      	ldr	r6, [r0, #0]
 8018f76:	4604      	mov	r4, r0
 8018f78:	b12e      	cbz	r6, 8018f86 <rcutils_string_map_init+0x1e>
 8018f7a:	251e      	movs	r5, #30
 8018f7c:	4628      	mov	r0, r5
 8018f7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018f82:	b002      	add	sp, #8
 8018f84:	4770      	bx	lr
 8018f86:	a804      	add	r0, sp, #16
 8018f88:	460d      	mov	r5, r1
 8018f8a:	f7f5 fd31 	bl	800e9f0 <rcutils_allocator_is_valid>
 8018f8e:	b308      	cbz	r0, 8018fd4 <rcutils_string_map_init+0x6c>
 8018f90:	9b04      	ldr	r3, [sp, #16]
 8018f92:	2020      	movs	r0, #32
 8018f94:	9908      	ldr	r1, [sp, #32]
 8018f96:	4798      	blx	r3
 8018f98:	6020      	str	r0, [r4, #0]
 8018f9a:	b308      	cbz	r0, 8018fe0 <rcutils_string_map_init+0x78>
 8018f9c:	f10d 0e10 	add.w	lr, sp, #16
 8018fa0:	6086      	str	r6, [r0, #8]
 8018fa2:	f100 0c0c 	add.w	ip, r0, #12
 8018fa6:	e9c0 6600 	strd	r6, r6, [r0]
 8018faa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018fae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018fb2:	f8de 3000 	ldr.w	r3, [lr]
 8018fb6:	4629      	mov	r1, r5
 8018fb8:	4620      	mov	r0, r4
 8018fba:	f8cc 3000 	str.w	r3, [ip]
 8018fbe:	f7ff ff87 	bl	8018ed0 <rcutils_string_map_reserve>
 8018fc2:	4605      	mov	r5, r0
 8018fc4:	2800      	cmp	r0, #0
 8018fc6:	d0d9      	beq.n	8018f7c <rcutils_string_map_init+0x14>
 8018fc8:	9b05      	ldr	r3, [sp, #20]
 8018fca:	9908      	ldr	r1, [sp, #32]
 8018fcc:	6820      	ldr	r0, [r4, #0]
 8018fce:	4798      	blx	r3
 8018fd0:	6026      	str	r6, [r4, #0]
 8018fd2:	e7d3      	b.n	8018f7c <rcutils_string_map_init+0x14>
 8018fd4:	250b      	movs	r5, #11
 8018fd6:	4628      	mov	r0, r5
 8018fd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018fdc:	b002      	add	sp, #8
 8018fde:	4770      	bx	lr
 8018fe0:	250a      	movs	r5, #10
 8018fe2:	e7cb      	b.n	8018f7c <rcutils_string_map_init+0x14>

08018fe4 <rcutils_string_map_fini>:
 8018fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018fe8:	b083      	sub	sp, #12
 8018fea:	2800      	cmp	r0, #0
 8018fec:	d03e      	beq.n	801906c <rcutils_string_map_fini+0x88>
 8018fee:	6804      	ldr	r4, [r0, #0]
 8018ff0:	4606      	mov	r6, r0
 8018ff2:	2c00      	cmp	r4, #0
 8018ff4:	d036      	beq.n	8019064 <rcutils_string_map_fini+0x80>
 8018ff6:	6863      	ldr	r3, [r4, #4]
 8018ff8:	b34b      	cbz	r3, 801904e <rcutils_string_map_fini+0x6a>
 8018ffa:	2500      	movs	r5, #0
 8018ffc:	6822      	ldr	r2, [r4, #0]
 8018ffe:	462f      	mov	r7, r5
 8019000:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 8019004:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8019008:	b1f0      	cbz	r0, 8019048 <rcutils_string_map_fini+0x64>
 801900a:	69e1      	ldr	r1, [r4, #28]
 801900c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019010:	9101      	str	r1, [sp, #4]
 8019012:	47c8      	blx	r9
 8019014:	6823      	ldr	r3, [r4, #0]
 8019016:	9901      	ldr	r1, [sp, #4]
 8019018:	eb03 0208 	add.w	r2, r3, r8
 801901c:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
 8019020:	3501      	adds	r5, #1
 8019022:	6850      	ldr	r0, [r2, #4]
 8019024:	47c8      	blx	r9
 8019026:	68a3      	ldr	r3, [r4, #8]
 8019028:	6822      	ldr	r2, [r4, #0]
 801902a:	3b01      	subs	r3, #1
 801902c:	4442      	add	r2, r8
 801902e:	6057      	str	r7, [r2, #4]
 8019030:	60a3      	str	r3, [r4, #8]
 8019032:	6834      	ldr	r4, [r6, #0]
 8019034:	6863      	ldr	r3, [r4, #4]
 8019036:	429d      	cmp	r5, r3
 8019038:	d209      	bcs.n	801904e <rcutils_string_map_fini+0x6a>
 801903a:	6822      	ldr	r2, [r4, #0]
 801903c:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8019040:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 8019044:	2800      	cmp	r0, #0
 8019046:	d1e0      	bne.n	801900a <rcutils_string_map_fini+0x26>
 8019048:	3501      	adds	r5, #1
 801904a:	429d      	cmp	r5, r3
 801904c:	d3d8      	bcc.n	8019000 <rcutils_string_map_fini+0x1c>
 801904e:	2100      	movs	r1, #0
 8019050:	4630      	mov	r0, r6
 8019052:	f7ff ff3d 	bl	8018ed0 <rcutils_string_map_reserve>
 8019056:	4604      	mov	r4, r0
 8019058:	b920      	cbnz	r0, 8019064 <rcutils_string_map_fini+0x80>
 801905a:	6830      	ldr	r0, [r6, #0]
 801905c:	6903      	ldr	r3, [r0, #16]
 801905e:	69c1      	ldr	r1, [r0, #28]
 8019060:	4798      	blx	r3
 8019062:	6034      	str	r4, [r6, #0]
 8019064:	4620      	mov	r0, r4
 8019066:	b003      	add	sp, #12
 8019068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801906c:	240b      	movs	r4, #11
 801906e:	4620      	mov	r0, r4
 8019070:	b003      	add	sp, #12
 8019072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019076:	bf00      	nop

08019078 <rcutils_string_map_getn>:
 8019078:	b338      	cbz	r0, 80190ca <rcutils_string_map_getn+0x52>
 801907a:	6803      	ldr	r3, [r0, #0]
 801907c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019080:	4688      	mov	r8, r1
 8019082:	b1d9      	cbz	r1, 80190bc <rcutils_string_map_getn+0x44>
 8019084:	fab3 f483 	clz	r4, r3
 8019088:	0964      	lsrs	r4, r4, #5
 801908a:	b1bb      	cbz	r3, 80190bc <rcutils_string_map_getn+0x44>
 801908c:	4691      	mov	r9, r2
 801908e:	e9d3 7600 	ldrd	r7, r6, [r3]
 8019092:	b19e      	cbz	r6, 80190bc <rcutils_string_map_getn+0x44>
 8019094:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
 8019098:	eb07 0ac4 	add.w	sl, r7, r4, lsl #3
 801909c:	3401      	adds	r4, #1
 801909e:	4628      	mov	r0, r5
 80190a0:	b155      	cbz	r5, 80190b8 <rcutils_string_map_getn+0x40>
 80190a2:	f7e7 f92d 	bl	8000300 <strlen>
 80190a6:	4602      	mov	r2, r0
 80190a8:	4629      	mov	r1, r5
 80190aa:	4640      	mov	r0, r8
 80190ac:	454a      	cmp	r2, r9
 80190ae:	bf38      	it	cc
 80190b0:	464a      	movcc	r2, r9
 80190b2:	f004 fbc8 	bl	801d846 <strncmp>
 80190b6:	b120      	cbz	r0, 80190c2 <rcutils_string_map_getn+0x4a>
 80190b8:	42a6      	cmp	r6, r4
 80190ba:	d1eb      	bne.n	8019094 <rcutils_string_map_getn+0x1c>
 80190bc:	2000      	movs	r0, #0
 80190be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190c2:	f8da 0004 	ldr.w	r0, [sl, #4]
 80190c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190ca:	4770      	bx	lr
 80190cc:	0000      	movs	r0, r0
	...

080190d0 <rmw_get_zero_initialized_context>:
 80190d0:	b510      	push	{r4, lr}
 80190d2:	4604      	mov	r4, r0
 80190d4:	3010      	adds	r0, #16
 80190d6:	f000 f80f 	bl	80190f8 <rmw_get_zero_initialized_init_options>
 80190da:	2300      	movs	r3, #0
 80190dc:	4620      	mov	r0, r4
 80190de:	60a3      	str	r3, [r4, #8]
 80190e0:	66a3      	str	r3, [r4, #104]	; 0x68
 80190e2:	66e3      	str	r3, [r4, #108]	; 0x6c
 80190e4:	ed9f 7b02 	vldr	d7, [pc, #8]	; 80190f0 <rmw_get_zero_initialized_context+0x20>
 80190e8:	ed84 7b00 	vstr	d7, [r4]
 80190ec:	bd10      	pop	{r4, pc}
 80190ee:	bf00      	nop
	...

080190f8 <rmw_get_zero_initialized_init_options>:
 80190f8:	b510      	push	{r4, lr}
 80190fa:	4604      	mov	r4, r0
 80190fc:	2258      	movs	r2, #88	; 0x58
 80190fe:	2100      	movs	r1, #0
 8019100:	f004 fb8c 	bl	801d81c <memset>
 8019104:	f104 0010 	add.w	r0, r4, #16
 8019108:	f000 f80a 	bl	8019120 <rmw_get_default_security_options>
 801910c:	f104 001c 	add.w	r0, r4, #28
 8019110:	f003 fe50 	bl	801cdb4 <rmw_get_zero_initialized_discovery_options>
 8019114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019118:	4620      	mov	r0, r4
 801911a:	60e3      	str	r3, [r4, #12]
 801911c:	bd10      	pop	{r4, pc}
 801911e:	bf00      	nop

08019120 <rmw_get_default_security_options>:
 8019120:	2200      	movs	r2, #0
 8019122:	7002      	strb	r2, [r0, #0]
 8019124:	6042      	str	r2, [r0, #4]
 8019126:	4770      	bx	lr

08019128 <rmw_subscription_content_filter_options_fini>:
 8019128:	b1b0      	cbz	r0, 8019158 <rmw_subscription_content_filter_options_fini+0x30>
 801912a:	b538      	push	{r3, r4, r5, lr}
 801912c:	4604      	mov	r4, r0
 801912e:	4608      	mov	r0, r1
 8019130:	460d      	mov	r5, r1
 8019132:	f7f5 fc5d 	bl	800e9f0 <rcutils_allocator_is_valid>
 8019136:	b168      	cbz	r0, 8019154 <rmw_subscription_content_filter_options_fini+0x2c>
 8019138:	6820      	ldr	r0, [r4, #0]
 801913a:	b120      	cbz	r0, 8019146 <rmw_subscription_content_filter_options_fini+0x1e>
 801913c:	686b      	ldr	r3, [r5, #4]
 801913e:	6929      	ldr	r1, [r5, #16]
 8019140:	4798      	blx	r3
 8019142:	2300      	movs	r3, #0
 8019144:	6023      	str	r3, [r4, #0]
 8019146:	1d20      	adds	r0, r4, #4
 8019148:	f003 fe0a 	bl	801cd60 <rcutils_string_array_fini>
 801914c:	3800      	subs	r0, #0
 801914e:	bf18      	it	ne
 8019150:	2001      	movne	r0, #1
 8019152:	bd38      	pop	{r3, r4, r5, pc}
 8019154:	200b      	movs	r0, #11
 8019156:	bd38      	pop	{r3, r4, r5, pc}
 8019158:	200b      	movs	r0, #11
 801915a:	4770      	bx	lr

0801915c <rmw_get_default_subscription_options>:
 801915c:	2200      	movs	r2, #0
 801915e:	e9c0 2200 	strd	r2, r2, [r0]
 8019162:	6082      	str	r2, [r0, #8]
 8019164:	4770      	bx	lr
 8019166:	bf00      	nop

08019168 <rmw_time_equal>:
 8019168:	b4f0      	push	{r4, r5, r6, r7}
 801916a:	b084      	sub	sp, #16
 801916c:	ac04      	add	r4, sp, #16
 801916e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8019172:	4603      	mov	r3, r0
 8019174:	4925      	ldr	r1, [pc, #148]	; (801920c <rmw_time_equal+0xa4>)
 8019176:	9d01      	ldr	r5, [sp, #4]
 8019178:	4610      	mov	r0, r2
 801917a:	4299      	cmp	r1, r3
 801917c:	f04f 0202 	mov.w	r2, #2
 8019180:	9e03      	ldr	r6, [sp, #12]
 8019182:	41aa      	sbcs	r2, r5
 8019184:	d330      	bcc.n	80191e8 <rmw_time_equal+0x80>
 8019186:	4c22      	ldr	r4, [pc, #136]	; (8019210 <rmw_time_equal+0xa8>)
 8019188:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801918c:	fba3 3204 	umull	r3, r2, r3, r4
 8019190:	fb04 2205 	mla	r2, r4, r5, r2
 8019194:	43dd      	mvns	r5, r3
 8019196:	1a8c      	subs	r4, r1, r2
 8019198:	4285      	cmp	r5, r0
 801919a:	41b4      	sbcs	r4, r6
 801919c:	d332      	bcc.n	8019204 <rmw_time_equal+0x9c>
 801919e:	eb10 0c03 	adds.w	ip, r0, r3
 80191a2:	eb42 0106 	adc.w	r1, r2, r6
 80191a6:	4819      	ldr	r0, [pc, #100]	; (801920c <rmw_time_equal+0xa4>)
 80191a8:	2202      	movs	r2, #2
 80191aa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80191ac:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80191ae:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80191b2:	4298      	cmp	r0, r3
 80191b4:	41b2      	sbcs	r2, r6
 80191b6:	d31c      	bcc.n	80191f2 <rmw_time_equal+0x8a>
 80191b8:	4c15      	ldr	r4, [pc, #84]	; (8019210 <rmw_time_equal+0xa8>)
 80191ba:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80191be:	fba3 3204 	umull	r3, r2, r3, r4
 80191c2:	fb04 2206 	mla	r2, r4, r6, r2
 80191c6:	43de      	mvns	r6, r3
 80191c8:	1a84      	subs	r4, r0, r2
 80191ca:	42ae      	cmp	r6, r5
 80191cc:	41bc      	sbcs	r4, r7
 80191ce:	d315      	bcc.n	80191fc <rmw_time_equal+0x94>
 80191d0:	195b      	adds	r3, r3, r5
 80191d2:	eb42 0207 	adc.w	r2, r2, r7
 80191d6:	428a      	cmp	r2, r1
 80191d8:	bf08      	it	eq
 80191da:	4563      	cmpeq	r3, ip
 80191dc:	bf0c      	ite	eq
 80191de:	2001      	moveq	r0, #1
 80191e0:	2000      	movne	r0, #0
 80191e2:	b004      	add	sp, #16
 80191e4:	bcf0      	pop	{r4, r5, r6, r7}
 80191e6:	4770      	bx	lr
 80191e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80191ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80191f0:	e7d9      	b.n	80191a6 <rmw_time_equal+0x3e>
 80191f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80191f6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80191fa:	e7ec      	b.n	80191d6 <rmw_time_equal+0x6e>
 80191fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019200:	4602      	mov	r2, r0
 8019202:	e7e8      	b.n	80191d6 <rmw_time_equal+0x6e>
 8019204:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8019208:	e7cd      	b.n	80191a6 <rmw_time_equal+0x3e>
 801920a:	bf00      	nop
 801920c:	25c17d04 	.word	0x25c17d04
 8019210:	3b9aca00 	.word	0x3b9aca00

08019214 <rmw_time_total_nsec>:
 8019214:	b470      	push	{r4, r5, r6}
 8019216:	b085      	sub	sp, #20
 8019218:	ac04      	add	r4, sp, #16
 801921a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801921e:	4603      	mov	r3, r0
 8019220:	4913      	ldr	r1, [pc, #76]	; (8019270 <rmw_time_total_nsec+0x5c>)
 8019222:	9d01      	ldr	r5, [sp, #4]
 8019224:	4610      	mov	r0, r2
 8019226:	4299      	cmp	r1, r3
 8019228:	f04f 0202 	mov.w	r2, #2
 801922c:	9e03      	ldr	r6, [sp, #12]
 801922e:	41aa      	sbcs	r2, r5
 8019230:	d311      	bcc.n	8019256 <rmw_time_total_nsec+0x42>
 8019232:	4c10      	ldr	r4, [pc, #64]	; (8019274 <rmw_time_total_nsec+0x60>)
 8019234:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019238:	fba3 3204 	umull	r3, r2, r3, r4
 801923c:	fb04 2205 	mla	r2, r4, r5, r2
 8019240:	43dd      	mvns	r5, r3
 8019242:	1a8c      	subs	r4, r1, r2
 8019244:	4285      	cmp	r5, r0
 8019246:	41b4      	sbcs	r4, r6
 8019248:	d30c      	bcc.n	8019264 <rmw_time_total_nsec+0x50>
 801924a:	1818      	adds	r0, r3, r0
 801924c:	eb42 0106 	adc.w	r1, r2, r6
 8019250:	b005      	add	sp, #20
 8019252:	bc70      	pop	{r4, r5, r6}
 8019254:	4770      	bx	lr
 8019256:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801925a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801925e:	b005      	add	sp, #20
 8019260:	bc70      	pop	{r4, r5, r6}
 8019262:	4770      	bx	lr
 8019264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019268:	b005      	add	sp, #20
 801926a:	bc70      	pop	{r4, r5, r6}
 801926c:	4770      	bx	lr
 801926e:	bf00      	nop
 8019270:	25c17d04 	.word	0x25c17d04
 8019274:	3b9aca00 	.word	0x3b9aca00

08019278 <rmw_get_zero_initialized_message_info>:
 8019278:	b510      	push	{r4, lr}
 801927a:	4604      	mov	r4, r0
 801927c:	2238      	movs	r2, #56	; 0x38
 801927e:	2100      	movs	r1, #0
 8019280:	f004 facc 	bl	801d81c <memset>
 8019284:	4620      	mov	r0, r4
 8019286:	bd10      	pop	{r4, pc}

08019288 <rmw_validate_full_topic_name>:
 8019288:	2800      	cmp	r0, #0
 801928a:	d05d      	beq.n	8019348 <rmw_validate_full_topic_name+0xc0>
 801928c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019290:	460d      	mov	r5, r1
 8019292:	2900      	cmp	r1, #0
 8019294:	d05a      	beq.n	801934c <rmw_validate_full_topic_name+0xc4>
 8019296:	4604      	mov	r4, r0
 8019298:	4616      	mov	r6, r2
 801929a:	f7e7 f831 	bl	8000300 <strlen>
 801929e:	b150      	cbz	r0, 80192b6 <rmw_validate_full_topic_name+0x2e>
 80192a0:	7823      	ldrb	r3, [r4, #0]
 80192a2:	2b2f      	cmp	r3, #47	; 0x2f
 80192a4:	d00e      	beq.n	80192c4 <rmw_validate_full_topic_name+0x3c>
 80192a6:	2302      	movs	r3, #2
 80192a8:	602b      	str	r3, [r5, #0]
 80192aa:	b146      	cbz	r6, 80192be <rmw_validate_full_topic_name+0x36>
 80192ac:	2300      	movs	r3, #0
 80192ae:	4618      	mov	r0, r3
 80192b0:	6033      	str	r3, [r6, #0]
 80192b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192b6:	2301      	movs	r3, #1
 80192b8:	602b      	str	r3, [r5, #0]
 80192ba:	2e00      	cmp	r6, #0
 80192bc:	d1f6      	bne.n	80192ac <rmw_validate_full_topic_name+0x24>
 80192be:	2000      	movs	r0, #0
 80192c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192c4:	1e43      	subs	r3, r0, #1
 80192c6:	5ce2      	ldrb	r2, [r4, r3]
 80192c8:	2a2f      	cmp	r2, #47	; 0x2f
 80192ca:	d041      	beq.n	8019350 <rmw_validate_full_topic_name+0xc8>
 80192cc:	1e62      	subs	r2, r4, #1
 80192ce:	f1c4 0e01 	rsb	lr, r4, #1
 80192d2:	eb02 0800 	add.w	r8, r2, r0
 80192d6:	eb0e 0702 	add.w	r7, lr, r2
 80192da:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80192de:	f023 0120 	bic.w	r1, r3, #32
 80192e2:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 80192e6:	3941      	subs	r1, #65	; 0x41
 80192e8:	2919      	cmp	r1, #25
 80192ea:	d90f      	bls.n	801930c <rmw_validate_full_topic_name+0x84>
 80192ec:	f1bc 0f0a 	cmp.w	ip, #10
 80192f0:	d90c      	bls.n	801930c <rmw_validate_full_topic_name+0x84>
 80192f2:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 80192f6:	fab3 f383 	clz	r3, r3
 80192fa:	095b      	lsrs	r3, r3, #5
 80192fc:	b933      	cbnz	r3, 801930c <rmw_validate_full_topic_name+0x84>
 80192fe:	2204      	movs	r2, #4
 8019300:	602a      	str	r2, [r5, #0]
 8019302:	2e00      	cmp	r6, #0
 8019304:	d0db      	beq.n	80192be <rmw_validate_full_topic_name+0x36>
 8019306:	4618      	mov	r0, r3
 8019308:	6037      	str	r7, [r6, #0]
 801930a:	e7d2      	b.n	80192b2 <rmw_validate_full_topic_name+0x2a>
 801930c:	4542      	cmp	r2, r8
 801930e:	d1e2      	bne.n	80192d6 <rmw_validate_full_topic_name+0x4e>
 8019310:	2301      	movs	r3, #1
 8019312:	4f1a      	ldr	r7, [pc, #104]	; (801937c <rmw_validate_full_topic_name+0xf4>)
 8019314:	e004      	b.n	8019320 <rmw_validate_full_topic_name+0x98>
 8019316:	4298      	cmp	r0, r3
 8019318:	f104 0401 	add.w	r4, r4, #1
 801931c:	4613      	mov	r3, r2
 801931e:	d91c      	bls.n	801935a <rmw_validate_full_topic_name+0xd2>
 8019320:	4298      	cmp	r0, r3
 8019322:	f103 0201 	add.w	r2, r3, #1
 8019326:	d0f6      	beq.n	8019316 <rmw_validate_full_topic_name+0x8e>
 8019328:	7821      	ldrb	r1, [r4, #0]
 801932a:	292f      	cmp	r1, #47	; 0x2f
 801932c:	d1f3      	bne.n	8019316 <rmw_validate_full_topic_name+0x8e>
 801932e:	7861      	ldrb	r1, [r4, #1]
 8019330:	292f      	cmp	r1, #47	; 0x2f
 8019332:	d01e      	beq.n	8019372 <rmw_validate_full_topic_name+0xea>
 8019334:	5dc9      	ldrb	r1, [r1, r7]
 8019336:	0749      	lsls	r1, r1, #29
 8019338:	d5ed      	bpl.n	8019316 <rmw_validate_full_topic_name+0x8e>
 801933a:	2206      	movs	r2, #6
 801933c:	602a      	str	r2, [r5, #0]
 801933e:	2e00      	cmp	r6, #0
 8019340:	d0bd      	beq.n	80192be <rmw_validate_full_topic_name+0x36>
 8019342:	2000      	movs	r0, #0
 8019344:	6033      	str	r3, [r6, #0]
 8019346:	e7b4      	b.n	80192b2 <rmw_validate_full_topic_name+0x2a>
 8019348:	200b      	movs	r0, #11
 801934a:	4770      	bx	lr
 801934c:	200b      	movs	r0, #11
 801934e:	e7b0      	b.n	80192b2 <rmw_validate_full_topic_name+0x2a>
 8019350:	2203      	movs	r2, #3
 8019352:	602a      	str	r2, [r5, #0]
 8019354:	2e00      	cmp	r6, #0
 8019356:	d1f4      	bne.n	8019342 <rmw_validate_full_topic_name+0xba>
 8019358:	e7b1      	b.n	80192be <rmw_validate_full_topic_name+0x36>
 801935a:	28f7      	cmp	r0, #247	; 0xf7
 801935c:	d803      	bhi.n	8019366 <rmw_validate_full_topic_name+0xde>
 801935e:	2300      	movs	r3, #0
 8019360:	4618      	mov	r0, r3
 8019362:	602b      	str	r3, [r5, #0]
 8019364:	e7a5      	b.n	80192b2 <rmw_validate_full_topic_name+0x2a>
 8019366:	2307      	movs	r3, #7
 8019368:	602b      	str	r3, [r5, #0]
 801936a:	2e00      	cmp	r6, #0
 801936c:	d0a7      	beq.n	80192be <rmw_validate_full_topic_name+0x36>
 801936e:	23f6      	movs	r3, #246	; 0xf6
 8019370:	e7e7      	b.n	8019342 <rmw_validate_full_topic_name+0xba>
 8019372:	2205      	movs	r2, #5
 8019374:	602a      	str	r2, [r5, #0]
 8019376:	2e00      	cmp	r6, #0
 8019378:	d1e3      	bne.n	8019342 <rmw_validate_full_topic_name+0xba>
 801937a:	e7a0      	b.n	80192be <rmw_validate_full_topic_name+0x36>
 801937c:	08020864 	.word	0x08020864

08019380 <rmw_validate_namespace_with_size>:
 8019380:	2800      	cmp	r0, #0
 8019382:	d043      	beq.n	801940c <rmw_validate_namespace_with_size+0x8c>
 8019384:	b570      	push	{r4, r5, r6, lr}
 8019386:	4614      	mov	r4, r2
 8019388:	b0c2      	sub	sp, #264	; 0x108
 801938a:	b32a      	cbz	r2, 80193d8 <rmw_validate_namespace_with_size+0x58>
 801938c:	2901      	cmp	r1, #1
 801938e:	460d      	mov	r5, r1
 8019390:	461e      	mov	r6, r3
 8019392:	d102      	bne.n	801939a <rmw_validate_namespace_with_size+0x1a>
 8019394:	7803      	ldrb	r3, [r0, #0]
 8019396:	2b2f      	cmp	r3, #47	; 0x2f
 8019398:	d012      	beq.n	80193c0 <rmw_validate_namespace_with_size+0x40>
 801939a:	aa01      	add	r2, sp, #4
 801939c:	4669      	mov	r1, sp
 801939e:	f7ff ff73 	bl	8019288 <rmw_validate_full_topic_name>
 80193a2:	b980      	cbnz	r0, 80193c6 <rmw_validate_namespace_with_size+0x46>
 80193a4:	9a00      	ldr	r2, [sp, #0]
 80193a6:	b14a      	cbz	r2, 80193bc <rmw_validate_namespace_with_size+0x3c>
 80193a8:	2a07      	cmp	r2, #7
 80193aa:	d007      	beq.n	80193bc <rmw_validate_namespace_with_size+0x3c>
 80193ac:	1e53      	subs	r3, r2, #1
 80193ae:	2b05      	cmp	r3, #5
 80193b0:	d82e      	bhi.n	8019410 <rmw_validate_namespace_with_size+0x90>
 80193b2:	e8df f003 	tbb	[pc, r3]
 80193b6:	1f1c      	.short	0x1f1c
 80193b8:	14282522 	.word	0x14282522
 80193bc:	2df5      	cmp	r5, #245	; 0xf5
 80193be:	d804      	bhi.n	80193ca <rmw_validate_namespace_with_size+0x4a>
 80193c0:	2300      	movs	r3, #0
 80193c2:	4618      	mov	r0, r3
 80193c4:	6023      	str	r3, [r4, #0]
 80193c6:	b042      	add	sp, #264	; 0x108
 80193c8:	bd70      	pop	{r4, r5, r6, pc}
 80193ca:	2307      	movs	r3, #7
 80193cc:	6023      	str	r3, [r4, #0]
 80193ce:	2e00      	cmp	r6, #0
 80193d0:	d0f9      	beq.n	80193c6 <rmw_validate_namespace_with_size+0x46>
 80193d2:	23f4      	movs	r3, #244	; 0xf4
 80193d4:	6033      	str	r3, [r6, #0]
 80193d6:	e7f6      	b.n	80193c6 <rmw_validate_namespace_with_size+0x46>
 80193d8:	200b      	movs	r0, #11
 80193da:	b042      	add	sp, #264	; 0x108
 80193dc:	bd70      	pop	{r4, r5, r6, pc}
 80193de:	2306      	movs	r3, #6
 80193e0:	6023      	str	r3, [r4, #0]
 80193e2:	2e00      	cmp	r6, #0
 80193e4:	d0ef      	beq.n	80193c6 <rmw_validate_namespace_with_size+0x46>
 80193e6:	9b01      	ldr	r3, [sp, #4]
 80193e8:	6033      	str	r3, [r6, #0]
 80193ea:	b042      	add	sp, #264	; 0x108
 80193ec:	bd70      	pop	{r4, r5, r6, pc}
 80193ee:	2301      	movs	r3, #1
 80193f0:	6023      	str	r3, [r4, #0]
 80193f2:	e7f6      	b.n	80193e2 <rmw_validate_namespace_with_size+0x62>
 80193f4:	2302      	movs	r3, #2
 80193f6:	6023      	str	r3, [r4, #0]
 80193f8:	e7f3      	b.n	80193e2 <rmw_validate_namespace_with_size+0x62>
 80193fa:	2303      	movs	r3, #3
 80193fc:	6023      	str	r3, [r4, #0]
 80193fe:	e7f0      	b.n	80193e2 <rmw_validate_namespace_with_size+0x62>
 8019400:	2304      	movs	r3, #4
 8019402:	6023      	str	r3, [r4, #0]
 8019404:	e7ed      	b.n	80193e2 <rmw_validate_namespace_with_size+0x62>
 8019406:	2305      	movs	r3, #5
 8019408:	6023      	str	r3, [r4, #0]
 801940a:	e7ea      	b.n	80193e2 <rmw_validate_namespace_with_size+0x62>
 801940c:	200b      	movs	r0, #11
 801940e:	4770      	bx	lr
 8019410:	4613      	mov	r3, r2
 8019412:	f44f 7180 	mov.w	r1, #256	; 0x100
 8019416:	4a03      	ldr	r2, [pc, #12]	; (8019424 <rmw_validate_namespace_with_size+0xa4>)
 8019418:	a802      	add	r0, sp, #8
 801941a:	f7ff fcbd 	bl	8018d98 <rcutils_snprintf>
 801941e:	2001      	movs	r0, #1
 8019420:	e7d1      	b.n	80193c6 <rmw_validate_namespace_with_size+0x46>
 8019422:	bf00      	nop
 8019424:	080200a0 	.word	0x080200a0

08019428 <rmw_validate_namespace>:
 8019428:	b168      	cbz	r0, 8019446 <rmw_validate_namespace+0x1e>
 801942a:	b570      	push	{r4, r5, r6, lr}
 801942c:	460d      	mov	r5, r1
 801942e:	4616      	mov	r6, r2
 8019430:	4604      	mov	r4, r0
 8019432:	f7e6 ff65 	bl	8000300 <strlen>
 8019436:	4633      	mov	r3, r6
 8019438:	4601      	mov	r1, r0
 801943a:	462a      	mov	r2, r5
 801943c:	4620      	mov	r0, r4
 801943e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019442:	f7ff bf9d 	b.w	8019380 <rmw_validate_namespace_with_size>
 8019446:	200b      	movs	r0, #11
 8019448:	4770      	bx	lr
 801944a:	bf00      	nop

0801944c <rmw_namespace_validation_result_string>:
 801944c:	2807      	cmp	r0, #7
 801944e:	d803      	bhi.n	8019458 <rmw_namespace_validation_result_string+0xc>
 8019450:	4b02      	ldr	r3, [pc, #8]	; (801945c <rmw_namespace_validation_result_string+0x10>)
 8019452:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8019456:	4770      	bx	lr
 8019458:	4801      	ldr	r0, [pc, #4]	; (8019460 <rmw_namespace_validation_result_string+0x14>)
 801945a:	4770      	bx	lr
 801945c:	08020298 	.word	0x08020298
 8019460:	080200f0 	.word	0x080200f0

08019464 <rmw_validate_node_name>:
 8019464:	2800      	cmp	r0, #0
 8019466:	d042      	beq.n	80194ee <rmw_validate_node_name+0x8a>
 8019468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801946c:	460d      	mov	r5, r1
 801946e:	2900      	cmp	r1, #0
 8019470:	d03f      	beq.n	80194f2 <rmw_validate_node_name+0x8e>
 8019472:	4604      	mov	r4, r0
 8019474:	4616      	mov	r6, r2
 8019476:	f7e6 ff43 	bl	8000300 <strlen>
 801947a:	b310      	cbz	r0, 80194c2 <rmw_validate_node_name+0x5e>
 801947c:	1e63      	subs	r3, r4, #1
 801947e:	f1c4 0101 	rsb	r1, r4, #1
 8019482:	eb03 0800 	add.w	r8, r3, r0
 8019486:	18cf      	adds	r7, r1, r3
 8019488:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801948c:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8019490:	f02e 0c20 	bic.w	ip, lr, #32
 8019494:	2a09      	cmp	r2, #9
 8019496:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 801949a:	d905      	bls.n	80194a8 <rmw_validate_node_name+0x44>
 801949c:	f1bc 0f19 	cmp.w	ip, #25
 80194a0:	d902      	bls.n	80194a8 <rmw_validate_node_name+0x44>
 80194a2:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 80194a6:	d114      	bne.n	80194d2 <rmw_validate_node_name+0x6e>
 80194a8:	4598      	cmp	r8, r3
 80194aa:	d1ec      	bne.n	8019486 <rmw_validate_node_name+0x22>
 80194ac:	7822      	ldrb	r2, [r4, #0]
 80194ae:	4b16      	ldr	r3, [pc, #88]	; (8019508 <rmw_validate_node_name+0xa4>)
 80194b0:	5cd3      	ldrb	r3, [r2, r3]
 80194b2:	f013 0304 	ands.w	r3, r3, #4
 80194b6:	d113      	bne.n	80194e0 <rmw_validate_node_name+0x7c>
 80194b8:	28ff      	cmp	r0, #255	; 0xff
 80194ba:	d81c      	bhi.n	80194f6 <rmw_validate_node_name+0x92>
 80194bc:	4618      	mov	r0, r3
 80194be:	602b      	str	r3, [r5, #0]
 80194c0:	e00c      	b.n	80194dc <rmw_validate_node_name+0x78>
 80194c2:	2301      	movs	r3, #1
 80194c4:	602b      	str	r3, [r5, #0]
 80194c6:	b17e      	cbz	r6, 80194e8 <rmw_validate_node_name+0x84>
 80194c8:	2300      	movs	r3, #0
 80194ca:	4618      	mov	r0, r3
 80194cc:	6033      	str	r3, [r6, #0]
 80194ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194d2:	2302      	movs	r3, #2
 80194d4:	602b      	str	r3, [r5, #0]
 80194d6:	b13e      	cbz	r6, 80194e8 <rmw_validate_node_name+0x84>
 80194d8:	2000      	movs	r0, #0
 80194da:	6037      	str	r7, [r6, #0]
 80194dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194e0:	2303      	movs	r3, #3
 80194e2:	602b      	str	r3, [r5, #0]
 80194e4:	2e00      	cmp	r6, #0
 80194e6:	d1ef      	bne.n	80194c8 <rmw_validate_node_name+0x64>
 80194e8:	2000      	movs	r0, #0
 80194ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194ee:	200b      	movs	r0, #11
 80194f0:	4770      	bx	lr
 80194f2:	200b      	movs	r0, #11
 80194f4:	e7f2      	b.n	80194dc <rmw_validate_node_name+0x78>
 80194f6:	2204      	movs	r2, #4
 80194f8:	602a      	str	r2, [r5, #0]
 80194fa:	2e00      	cmp	r6, #0
 80194fc:	d0f4      	beq.n	80194e8 <rmw_validate_node_name+0x84>
 80194fe:	22fe      	movs	r2, #254	; 0xfe
 8019500:	4618      	mov	r0, r3
 8019502:	6032      	str	r2, [r6, #0]
 8019504:	e7ea      	b.n	80194dc <rmw_validate_node_name+0x78>
 8019506:	bf00      	nop
 8019508:	08020864 	.word	0x08020864

0801950c <rmw_node_name_validation_result_string>:
 801950c:	2804      	cmp	r0, #4
 801950e:	d803      	bhi.n	8019518 <rmw_node_name_validation_result_string+0xc>
 8019510:	4b02      	ldr	r3, [pc, #8]	; (801951c <rmw_node_name_validation_result_string+0x10>)
 8019512:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8019516:	4770      	bx	lr
 8019518:	4801      	ldr	r0, [pc, #4]	; (8019520 <rmw_node_name_validation_result_string+0x14>)
 801951a:	4770      	bx	lr
 801951c:	080203a4 	.word	0x080203a4
 8019520:	080202b8 	.word	0x080202b8

08019524 <get_memory>:
 8019524:	4603      	mov	r3, r0
 8019526:	6840      	ldr	r0, [r0, #4]
 8019528:	b158      	cbz	r0, 8019542 <get_memory+0x1e>
 801952a:	6842      	ldr	r2, [r0, #4]
 801952c:	605a      	str	r2, [r3, #4]
 801952e:	b10a      	cbz	r2, 8019534 <get_memory+0x10>
 8019530:	2100      	movs	r1, #0
 8019532:	6011      	str	r1, [r2, #0]
 8019534:	681a      	ldr	r2, [r3, #0]
 8019536:	6042      	str	r2, [r0, #4]
 8019538:	b102      	cbz	r2, 801953c <get_memory+0x18>
 801953a:	6010      	str	r0, [r2, #0]
 801953c:	2200      	movs	r2, #0
 801953e:	6002      	str	r2, [r0, #0]
 8019540:	6018      	str	r0, [r3, #0]
 8019542:	4770      	bx	lr

08019544 <put_memory>:
 8019544:	680b      	ldr	r3, [r1, #0]
 8019546:	b10b      	cbz	r3, 801954c <put_memory+0x8>
 8019548:	684a      	ldr	r2, [r1, #4]
 801954a:	605a      	str	r2, [r3, #4]
 801954c:	684a      	ldr	r2, [r1, #4]
 801954e:	b102      	cbz	r2, 8019552 <put_memory+0xe>
 8019550:	6013      	str	r3, [r2, #0]
 8019552:	6803      	ldr	r3, [r0, #0]
 8019554:	428b      	cmp	r3, r1
 8019556:	6843      	ldr	r3, [r0, #4]
 8019558:	bf08      	it	eq
 801955a:	6002      	streq	r2, [r0, #0]
 801955c:	604b      	str	r3, [r1, #4]
 801955e:	b103      	cbz	r3, 8019562 <put_memory+0x1e>
 8019560:	6019      	str	r1, [r3, #0]
 8019562:	2300      	movs	r3, #0
 8019564:	600b      	str	r3, [r1, #0]
 8019566:	6041      	str	r1, [r0, #4]
 8019568:	4770      	bx	lr
 801956a:	bf00      	nop

0801956c <rmw_destroy_client>:
 801956c:	b570      	push	{r4, r5, r6, lr}
 801956e:	b128      	cbz	r0, 801957c <rmw_destroy_client+0x10>
 8019570:	4604      	mov	r4, r0
 8019572:	6800      	ldr	r0, [r0, #0]
 8019574:	460d      	mov	r5, r1
 8019576:	f7f6 f88b 	bl	800f690 <is_uxrce_rmw_identifier_valid>
 801957a:	b910      	cbnz	r0, 8019582 <rmw_destroy_client+0x16>
 801957c:	2401      	movs	r4, #1
 801957e:	4620      	mov	r0, r4
 8019580:	bd70      	pop	{r4, r5, r6, pc}
 8019582:	6863      	ldr	r3, [r4, #4]
 8019584:	2b00      	cmp	r3, #0
 8019586:	d0f9      	beq.n	801957c <rmw_destroy_client+0x10>
 8019588:	2d00      	cmp	r5, #0
 801958a:	d0f7      	beq.n	801957c <rmw_destroy_client+0x10>
 801958c:	6828      	ldr	r0, [r5, #0]
 801958e:	f7f6 f87f 	bl	800f690 <is_uxrce_rmw_identifier_valid>
 8019592:	2800      	cmp	r0, #0
 8019594:	d0f2      	beq.n	801957c <rmw_destroy_client+0x10>
 8019596:	686e      	ldr	r6, [r5, #4]
 8019598:	2e00      	cmp	r6, #0
 801959a:	d0ef      	beq.n	801957c <rmw_destroy_client+0x10>
 801959c:	6864      	ldr	r4, [r4, #4]
 801959e:	6932      	ldr	r2, [r6, #16]
 80195a0:	6920      	ldr	r0, [r4, #16]
 80195a2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80195a6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80195aa:	6819      	ldr	r1, [r3, #0]
 80195ac:	f002 f94e 	bl	801b84c <uxr_buffer_cancel_data>
 80195b0:	4602      	mov	r2, r0
 80195b2:	6920      	ldr	r0, [r4, #16]
 80195b4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80195b8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80195bc:	f7f5 ff56 	bl	800f46c <run_xrce_session>
 80195c0:	6920      	ldr	r0, [r4, #16]
 80195c2:	6932      	ldr	r2, [r6, #16]
 80195c4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80195c8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80195cc:	6819      	ldr	r1, [r3, #0]
 80195ce:	f7f8 f9fd 	bl	80119cc <uxr_buffer_delete_entity>
 80195d2:	4602      	mov	r2, r0
 80195d4:	6920      	ldr	r0, [r4, #16]
 80195d6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80195da:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80195de:	f7f5 ff45 	bl	800f46c <run_xrce_session>
 80195e2:	4603      	mov	r3, r0
 80195e4:	4628      	mov	r0, r5
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	bf14      	ite	ne
 80195ea:	2400      	movne	r4, #0
 80195ec:	2402      	moveq	r4, #2
 80195ee:	f7f5 fe19 	bl	800f224 <rmw_uxrce_fini_client_memory>
 80195f2:	e7c4      	b.n	801957e <rmw_destroy_client+0x12>

080195f4 <rmw_get_gid_for_client>:
 80195f4:	b1b9      	cbz	r1, 8019626 <rmw_get_gid_for_client+0x32>
 80195f6:	b538      	push	{r3, r4, r5, lr}
 80195f8:	4605      	mov	r5, r0
 80195fa:	b180      	cbz	r0, 801961e <rmw_get_gid_for_client+0x2a>
 80195fc:	6800      	ldr	r0, [r0, #0]
 80195fe:	460c      	mov	r4, r1
 8019600:	b120      	cbz	r0, 801960c <rmw_get_gid_for_client+0x18>
 8019602:	4b0a      	ldr	r3, [pc, #40]	; (801962c <rmw_get_gid_for_client+0x38>)
 8019604:	6819      	ldr	r1, [r3, #0]
 8019606:	f7e6 fe1b 	bl	8000240 <strcmp>
 801960a:	b950      	cbnz	r0, 8019622 <rmw_get_gid_for_client+0x2e>
 801960c:	686b      	ldr	r3, [r5, #4]
 801960e:	2000      	movs	r0, #0
 8019610:	6060      	str	r0, [r4, #4]
 8019612:	60a0      	str	r0, [r4, #8]
 8019614:	60e0      	str	r0, [r4, #12]
 8019616:	6120      	str	r0, [r4, #16]
 8019618:	691b      	ldr	r3, [r3, #16]
 801961a:	6063      	str	r3, [r4, #4]
 801961c:	bd38      	pop	{r3, r4, r5, pc}
 801961e:	200b      	movs	r0, #11
 8019620:	bd38      	pop	{r3, r4, r5, pc}
 8019622:	200c      	movs	r0, #12
 8019624:	bd38      	pop	{r3, r4, r5, pc}
 8019626:	200b      	movs	r0, #11
 8019628:	4770      	bx	lr
 801962a:	bf00      	nop
 801962c:	080203d0 	.word	0x080203d0

08019630 <rmw_get_implementation_identifier>:
 8019630:	4b01      	ldr	r3, [pc, #4]	; (8019638 <rmw_get_implementation_identifier+0x8>)
 8019632:	6818      	ldr	r0, [r3, #0]
 8019634:	4770      	bx	lr
 8019636:	bf00      	nop
 8019638:	080203d0 	.word	0x080203d0

0801963c <rmw_init_options_init>:
 801963c:	b084      	sub	sp, #16
 801963e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019640:	b083      	sub	sp, #12
 8019642:	ad09      	add	r5, sp, #36	; 0x24
 8019644:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8019648:	b130      	cbz	r0, 8019658 <rmw_init_options_init+0x1c>
 801964a:	4604      	mov	r4, r0
 801964c:	4628      	mov	r0, r5
 801964e:	f7f5 f9cf 	bl	800e9f0 <rcutils_allocator_is_valid>
 8019652:	b108      	cbz	r0, 8019658 <rmw_init_options_init+0x1c>
 8019654:	68a6      	ldr	r6, [r4, #8]
 8019656:	b12e      	cbz	r6, 8019664 <rmw_init_options_init+0x28>
 8019658:	200b      	movs	r0, #11
 801965a:	b003      	add	sp, #12
 801965c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019660:	b004      	add	sp, #16
 8019662:	4770      	bx	lr
 8019664:	2200      	movs	r2, #0
 8019666:	2300      	movs	r3, #0
 8019668:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801966c:	f8df e098 	ldr.w	lr, [pc, #152]	; 8019708 <rmw_init_options_init+0xcc>
 8019670:	466f      	mov	r7, sp
 8019672:	e9c4 2300 	strd	r2, r3, [r4]
 8019676:	4b20      	ldr	r3, [pc, #128]	; (80196f8 <rmw_init_options_init+0xbc>)
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	60a3      	str	r3, [r4, #8]
 801967c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801967e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019682:	682b      	ldr	r3, [r5, #0]
 8019684:	4638      	mov	r0, r7
 8019686:	f8cc 3000 	str.w	r3, [ip]
 801968a:	f8c4 e03c 	str.w	lr, [r4, #60]	; 0x3c
 801968e:	60e6      	str	r6, [r4, #12]
 8019690:	f7ff fd46 	bl	8019120 <rmw_get_default_security_options>
 8019694:	f104 0310 	add.w	r3, r4, #16
 8019698:	2203      	movs	r2, #3
 801969a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801969e:	e883 0003 	stmia.w	r3, {r0, r1}
 80196a2:	4816      	ldr	r0, [pc, #88]	; (80196fc <rmw_init_options_init+0xc0>)
 80196a4:	4916      	ldr	r1, [pc, #88]	; (8019700 <rmw_init_options_init+0xc4>)
 80196a6:	7626      	strb	r6, [r4, #24]
 80196a8:	f7f5 fcfc 	bl	800f0a4 <rmw_uxrce_init_init_options_impl_memory>
 80196ac:	4813      	ldr	r0, [pc, #76]	; (80196fc <rmw_init_options_init+0xc0>)
 80196ae:	f7ff ff39 	bl	8019524 <get_memory>
 80196b2:	b1f0      	cbz	r0, 80196f2 <rmw_init_options_init+0xb6>
 80196b4:	4a13      	ldr	r2, [pc, #76]	; (8019704 <rmw_init_options_init+0xc8>)
 80196b6:	6883      	ldr	r3, [r0, #8]
 80196b8:	6851      	ldr	r1, [r2, #4]
 80196ba:	6563      	str	r3, [r4, #84]	; 0x54
 80196bc:	7810      	ldrb	r0, [r2, #0]
 80196be:	6159      	str	r1, [r3, #20]
 80196c0:	68d1      	ldr	r1, [r2, #12]
 80196c2:	7418      	strb	r0, [r3, #16]
 80196c4:	61d9      	str	r1, [r3, #28]
 80196c6:	6911      	ldr	r1, [r2, #16]
 80196c8:	6219      	str	r1, [r3, #32]
 80196ca:	6951      	ldr	r1, [r2, #20]
 80196cc:	6892      	ldr	r2, [r2, #8]
 80196ce:	6259      	str	r1, [r3, #36]	; 0x24
 80196d0:	619a      	str	r2, [r3, #24]
 80196d2:	f7f9 fe1f 	bl	8013314 <uxr_nanos>
 80196d6:	f003 fde5 	bl	801d2a4 <srand>
 80196da:	f003 fe11 	bl	801d300 <rand>
 80196de:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80196e0:	6298      	str	r0, [r3, #40]	; 0x28
 80196e2:	2800      	cmp	r0, #0
 80196e4:	d0f9      	beq.n	80196da <rmw_init_options_init+0x9e>
 80196e6:	2000      	movs	r0, #0
 80196e8:	b003      	add	sp, #12
 80196ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80196ee:	b004      	add	sp, #16
 80196f0:	4770      	bx	lr
 80196f2:	2001      	movs	r0, #1
 80196f4:	e7b1      	b.n	801965a <rmw_init_options_init+0x1e>
 80196f6:	bf00      	nop
 80196f8:	080203d0 	.word	0x080203d0
 80196fc:	200105dc 	.word	0x200105dc
 8019700:	2000bdb0 	.word	0x2000bdb0
 8019704:	2000bc3c 	.word	0x2000bc3c
 8019708:	0801fdc0 	.word	0x0801fdc0

0801970c <rmw_init_options_copy>:
 801970c:	b570      	push	{r4, r5, r6, lr}
 801970e:	b158      	cbz	r0, 8019728 <rmw_init_options_copy+0x1c>
 8019710:	460d      	mov	r5, r1
 8019712:	b149      	cbz	r1, 8019728 <rmw_init_options_copy+0x1c>
 8019714:	4604      	mov	r4, r0
 8019716:	6880      	ldr	r0, [r0, #8]
 8019718:	b120      	cbz	r0, 8019724 <rmw_init_options_copy+0x18>
 801971a:	4b13      	ldr	r3, [pc, #76]	; (8019768 <rmw_init_options_copy+0x5c>)
 801971c:	6819      	ldr	r1, [r3, #0]
 801971e:	f7e6 fd8f 	bl	8000240 <strcmp>
 8019722:	b9d8      	cbnz	r0, 801975c <rmw_init_options_copy+0x50>
 8019724:	68ae      	ldr	r6, [r5, #8]
 8019726:	b116      	cbz	r6, 801972e <rmw_init_options_copy+0x22>
 8019728:	260b      	movs	r6, #11
 801972a:	4630      	mov	r0, r6
 801972c:	bd70      	pop	{r4, r5, r6, pc}
 801972e:	2258      	movs	r2, #88	; 0x58
 8019730:	4621      	mov	r1, r4
 8019732:	4628      	mov	r0, r5
 8019734:	f004 f9a3 	bl	801da7e <memcpy>
 8019738:	480c      	ldr	r0, [pc, #48]	; (801976c <rmw_init_options_copy+0x60>)
 801973a:	f7ff fef3 	bl	8019524 <get_memory>
 801973e:	b180      	cbz	r0, 8019762 <rmw_init_options_copy+0x56>
 8019740:	6883      	ldr	r3, [r0, #8]
 8019742:	656b      	str	r3, [r5, #84]	; 0x54
 8019744:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8019746:	f103 0410 	add.w	r4, r3, #16
 801974a:	3510      	adds	r5, #16
 801974c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801974e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019750:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019754:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019758:	4630      	mov	r0, r6
 801975a:	bd70      	pop	{r4, r5, r6, pc}
 801975c:	260c      	movs	r6, #12
 801975e:	4630      	mov	r0, r6
 8019760:	bd70      	pop	{r4, r5, r6, pc}
 8019762:	2601      	movs	r6, #1
 8019764:	e7e1      	b.n	801972a <rmw_init_options_copy+0x1e>
 8019766:	bf00      	nop
 8019768:	080203d0 	.word	0x080203d0
 801976c:	200105dc 	.word	0x200105dc

08019770 <rmw_init_options_fini>:
 8019770:	b368      	cbz	r0, 80197ce <rmw_init_options_fini+0x5e>
 8019772:	b510      	push	{r4, lr}
 8019774:	4604      	mov	r4, r0
 8019776:	b096      	sub	sp, #88	; 0x58
 8019778:	3040      	adds	r0, #64	; 0x40
 801977a:	f7f5 f939 	bl	800e9f0 <rcutils_allocator_is_valid>
 801977e:	b1f0      	cbz	r0, 80197be <rmw_init_options_fini+0x4e>
 8019780:	68a0      	ldr	r0, [r4, #8]
 8019782:	b120      	cbz	r0, 801978e <rmw_init_options_fini+0x1e>
 8019784:	4b13      	ldr	r3, [pc, #76]	; (80197d4 <rmw_init_options_fini+0x64>)
 8019786:	6819      	ldr	r1, [r3, #0]
 8019788:	f7e6 fd5a 	bl	8000240 <strcmp>
 801978c:	b9e8      	cbnz	r0, 80197ca <rmw_init_options_fini+0x5a>
 801978e:	4b12      	ldr	r3, [pc, #72]	; (80197d8 <rmw_init_options_fini+0x68>)
 8019790:	6819      	ldr	r1, [r3, #0]
 8019792:	b1b9      	cbz	r1, 80197c4 <rmw_init_options_fini+0x54>
 8019794:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8019796:	e001      	b.n	801979c <rmw_init_options_fini+0x2c>
 8019798:	6849      	ldr	r1, [r1, #4]
 801979a:	b199      	cbz	r1, 80197c4 <rmw_init_options_fini+0x54>
 801979c:	688b      	ldr	r3, [r1, #8]
 801979e:	429a      	cmp	r2, r3
 80197a0:	d1fa      	bne.n	8019798 <rmw_init_options_fini+0x28>
 80197a2:	480d      	ldr	r0, [pc, #52]	; (80197d8 <rmw_init_options_fini+0x68>)
 80197a4:	f7ff fece 	bl	8019544 <put_memory>
 80197a8:	4668      	mov	r0, sp
 80197aa:	f7ff fca5 	bl	80190f8 <rmw_get_zero_initialized_init_options>
 80197ae:	2258      	movs	r2, #88	; 0x58
 80197b0:	4669      	mov	r1, sp
 80197b2:	4620      	mov	r0, r4
 80197b4:	f004 f963 	bl	801da7e <memcpy>
 80197b8:	2000      	movs	r0, #0
 80197ba:	b016      	add	sp, #88	; 0x58
 80197bc:	bd10      	pop	{r4, pc}
 80197be:	200b      	movs	r0, #11
 80197c0:	b016      	add	sp, #88	; 0x58
 80197c2:	bd10      	pop	{r4, pc}
 80197c4:	2001      	movs	r0, #1
 80197c6:	b016      	add	sp, #88	; 0x58
 80197c8:	bd10      	pop	{r4, pc}
 80197ca:	200c      	movs	r0, #12
 80197cc:	e7f5      	b.n	80197ba <rmw_init_options_fini+0x4a>
 80197ce:	200b      	movs	r0, #11
 80197d0:	4770      	bx	lr
 80197d2:	bf00      	nop
 80197d4:	080203d0 	.word	0x080203d0
 80197d8:	200105dc 	.word	0x200105dc

080197dc <rmw_init>:
 80197dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80197e0:	b083      	sub	sp, #12
 80197e2:	2800      	cmp	r0, #0
 80197e4:	f000 80d3 	beq.w	801998e <rmw_init+0x1b2>
 80197e8:	460e      	mov	r6, r1
 80197ea:	2900      	cmp	r1, #0
 80197ec:	f000 80cf 	beq.w	801998e <rmw_init+0x1b2>
 80197f0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80197f2:	4605      	mov	r5, r0
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	f000 80ca 	beq.w	801998e <rmw_init+0x1b2>
 80197fa:	4b78      	ldr	r3, [pc, #480]	; (80199dc <rmw_init+0x200>)
 80197fc:	6880      	ldr	r0, [r0, #8]
 80197fe:	681f      	ldr	r7, [r3, #0]
 8019800:	b128      	cbz	r0, 801980e <rmw_init+0x32>
 8019802:	4639      	mov	r1, r7
 8019804:	f7e6 fd1c 	bl	8000240 <strcmp>
 8019808:	2800      	cmp	r0, #0
 801980a:	f040 80ca 	bne.w	80199a2 <rmw_init+0x1c6>
 801980e:	4c74      	ldr	r4, [pc, #464]	; (80199e0 <rmw_init+0x204>)
 8019810:	f04f 0800 	mov.w	r8, #0
 8019814:	4973      	ldr	r1, [pc, #460]	; (80199e4 <rmw_init+0x208>)
 8019816:	4874      	ldr	r0, [pc, #464]	; (80199e8 <rmw_init+0x20c>)
 8019818:	e9d5 2300 	ldrd	r2, r3, [r5]
 801981c:	60b7      	str	r7, [r6, #8]
 801981e:	e9c6 2300 	strd	r2, r3, [r6]
 8019822:	68eb      	ldr	r3, [r5, #12]
 8019824:	2201      	movs	r2, #1
 8019826:	66b3      	str	r3, [r6, #104]	; 0x68
 8019828:	f7f5 fbdc 	bl	800efe4 <rmw_uxrce_init_session_memory>
 801982c:	4620      	mov	r0, r4
 801982e:	2204      	movs	r2, #4
 8019830:	496e      	ldr	r1, [pc, #440]	; (80199ec <rmw_init+0x210>)
 8019832:	f7f5 fc17 	bl	800f064 <rmw_uxrce_init_static_input_buffer_memory>
 8019836:	486c      	ldr	r0, [pc, #432]	; (80199e8 <rmw_init+0x20c>)
 8019838:	f884 800d 	strb.w	r8, [r4, #13]
 801983c:	f7ff fe72 	bl	8019524 <get_memory>
 8019840:	2800      	cmp	r0, #0
 8019842:	f000 80a9 	beq.w	8019998 <rmw_init+0x1bc>
 8019846:	6884      	ldr	r4, [r0, #8]
 8019848:	6d68      	ldr	r0, [r5, #84]	; 0x54
 801984a:	f104 0910 	add.w	r9, r4, #16
 801984e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8019850:	f890 c010 	ldrb.w	ip, [r0, #16]
 8019854:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8019858:	9101      	str	r1, [sp, #4]
 801985a:	4661      	mov	r1, ip
 801985c:	6a00      	ldr	r0, [r0, #32]
 801985e:	9000      	str	r0, [sp, #0]
 8019860:	4648      	mov	r0, r9
 8019862:	f001 fa2b 	bl	801acbc <uxr_set_custom_transport_callbacks>
 8019866:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801986a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 801986e:	4960      	ldr	r1, [pc, #384]	; (80199f0 <rmw_init+0x214>)
 8019870:	4860      	ldr	r0, [pc, #384]	; (80199f4 <rmw_init+0x218>)
 8019872:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8019876:	f504 725e 	add.w	r2, r4, #888	; 0x378
 801987a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 801987e:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8019882:	2201      	movs	r2, #1
 8019884:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8019888:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 801988c:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8019890:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8019894:	66f4      	str	r4, [r6, #108]	; 0x6c
 8019896:	f7f5 fb85 	bl	800efa4 <rmw_uxrce_init_node_memory>
 801989a:	2205      	movs	r2, #5
 801989c:	4956      	ldr	r1, [pc, #344]	; (80199f8 <rmw_init+0x21c>)
 801989e:	4857      	ldr	r0, [pc, #348]	; (80199fc <rmw_init+0x220>)
 80198a0:	f7f5 fb60 	bl	800ef64 <rmw_uxrce_init_subscription_memory>
 80198a4:	220a      	movs	r2, #10
 80198a6:	4956      	ldr	r1, [pc, #344]	; (8019a00 <rmw_init+0x224>)
 80198a8:	4856      	ldr	r0, [pc, #344]	; (8019a04 <rmw_init+0x228>)
 80198aa:	f7f5 fb3b 	bl	800ef24 <rmw_uxrce_init_publisher_memory>
 80198ae:	2202      	movs	r2, #2
 80198b0:	4955      	ldr	r1, [pc, #340]	; (8019a08 <rmw_init+0x22c>)
 80198b2:	4856      	ldr	r0, [pc, #344]	; (8019a0c <rmw_init+0x230>)
 80198b4:	f7f5 faf6 	bl	800eea4 <rmw_uxrce_init_service_memory>
 80198b8:	2201      	movs	r2, #1
 80198ba:	4955      	ldr	r1, [pc, #340]	; (8019a10 <rmw_init+0x234>)
 80198bc:	4855      	ldr	r0, [pc, #340]	; (8019a14 <rmw_init+0x238>)
 80198be:	f7f5 fb11 	bl	800eee4 <rmw_uxrce_init_client_memory>
 80198c2:	220f      	movs	r2, #15
 80198c4:	4954      	ldr	r1, [pc, #336]	; (8019a18 <rmw_init+0x23c>)
 80198c6:	4855      	ldr	r0, [pc, #340]	; (8019a1c <rmw_init+0x240>)
 80198c8:	f7f5 fbac 	bl	800f024 <rmw_uxrce_init_topic_memory>
 80198cc:	2203      	movs	r2, #3
 80198ce:	4954      	ldr	r1, [pc, #336]	; (8019a20 <rmw_init+0x244>)
 80198d0:	4854      	ldr	r0, [pc, #336]	; (8019a24 <rmw_init+0x248>)
 80198d2:	f7f5 fbe7 	bl	800f0a4 <rmw_uxrce_init_init_options_impl_memory>
 80198d6:	2204      	movs	r2, #4
 80198d8:	4953      	ldr	r1, [pc, #332]	; (8019a28 <rmw_init+0x24c>)
 80198da:	4854      	ldr	r0, [pc, #336]	; (8019a2c <rmw_init+0x250>)
 80198dc:	f7f5 fc02 	bl	800f0e4 <rmw_uxrce_init_wait_set_memory>
 80198e0:	4953      	ldr	r1, [pc, #332]	; (8019a30 <rmw_init+0x254>)
 80198e2:	4854      	ldr	r0, [pc, #336]	; (8019a34 <rmw_init+0x258>)
 80198e4:	2204      	movs	r2, #4
 80198e6:	f7f5 fc1d 	bl	800f124 <rmw_uxrce_init_guard_condition_memory>
 80198ea:	4642      	mov	r2, r8
 80198ec:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80198ee:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 80198f0:	f000 feba 	bl	801a668 <rmw_uxrce_transport_init>
 80198f4:	4607      	mov	r7, r0
 80198f6:	2800      	cmp	r0, #0
 80198f8:	d158      	bne.n	80199ac <rmw_init+0x1d0>
 80198fa:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80198fc:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8019900:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8019904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019906:	4628      	mov	r0, r5
 8019908:	f7f8 fb5a 	bl	8011fc0 <uxr_init_session>
 801990c:	4622      	mov	r2, r4
 801990e:	494a      	ldr	r1, [pc, #296]	; (8019a38 <rmw_init+0x25c>)
 8019910:	4628      	mov	r0, r5
 8019912:	f7f8 fb79 	bl	8012008 <uxr_set_topic_callback>
 8019916:	463a      	mov	r2, r7
 8019918:	4948      	ldr	r1, [pc, #288]	; (8019a3c <rmw_init+0x260>)
 801991a:	4628      	mov	r0, r5
 801991c:	f7f8 fb70 	bl	8012000 <uxr_set_status_callback>
 8019920:	463a      	mov	r2, r7
 8019922:	4947      	ldr	r1, [pc, #284]	; (8019a40 <rmw_init+0x264>)
 8019924:	4628      	mov	r0, r5
 8019926:	f7f8 fb73 	bl	8012010 <uxr_set_request_callback>
 801992a:	463a      	mov	r2, r7
 801992c:	4945      	ldr	r1, [pc, #276]	; (8019a44 <rmw_init+0x268>)
 801992e:	4628      	mov	r0, r5
 8019930:	f7f8 fb72 	bl	8012018 <uxr_set_reply_callback>
 8019934:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8019938:	2304      	movs	r3, #4
 801993a:	f504 7165 	add.w	r1, r4, #916	; 0x394
 801993e:	0092      	lsls	r2, r2, #2
 8019940:	4628      	mov	r0, r5
 8019942:	f7f8 fba9 	bl	8012098 <uxr_create_input_reliable_stream>
 8019946:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 801994a:	2304      	movs	r3, #4
 801994c:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8019950:	0092      	lsls	r2, r2, #2
 8019952:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8019956:	4628      	mov	r0, r5
 8019958:	f7f8 fb74 	bl	8012044 <uxr_create_output_reliable_stream>
 801995c:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8019960:	4628      	mov	r0, r5
 8019962:	f7f8 fb93 	bl	801208c <uxr_create_input_best_effort_stream>
 8019966:	f241 3194 	movw	r1, #5012	; 0x1394
 801996a:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 801996e:	4628      	mov	r0, r5
 8019970:	4421      	add	r1, r4
 8019972:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8019976:	f7f8 fb53 	bl	8012020 <uxr_create_output_best_effort_stream>
 801997a:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 801997e:	4628      	mov	r0, r5
 8019980:	f7f9 f8dc 	bl	8012b3c <uxr_create_session>
 8019984:	b1f8      	cbz	r0, 80199c6 <rmw_init+0x1ea>
 8019986:	4638      	mov	r0, r7
 8019988:	b003      	add	sp, #12
 801998a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801998e:	270b      	movs	r7, #11
 8019990:	4638      	mov	r0, r7
 8019992:	b003      	add	sp, #12
 8019994:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019998:	2701      	movs	r7, #1
 801999a:	4638      	mov	r0, r7
 801999c:	b003      	add	sp, #12
 801999e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199a2:	270c      	movs	r7, #12
 80199a4:	4638      	mov	r0, r7
 80199a6:	b003      	add	sp, #12
 80199a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199ac:	4648      	mov	r0, r9
 80199ae:	f001 f9c3 	bl	801ad38 <uxr_close_custom_transport>
 80199b2:	4621      	mov	r1, r4
 80199b4:	480c      	ldr	r0, [pc, #48]	; (80199e8 <rmw_init+0x20c>)
 80199b6:	f7ff fdc5 	bl	8019544 <put_memory>
 80199ba:	4638      	mov	r0, r7
 80199bc:	f8c6 806c 	str.w	r8, [r6, #108]	; 0x6c
 80199c0:	b003      	add	sp, #12
 80199c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199c6:	4648      	mov	r0, r9
 80199c8:	f001 f9b6 	bl	801ad38 <uxr_close_custom_transport>
 80199cc:	4621      	mov	r1, r4
 80199ce:	4806      	ldr	r0, [pc, #24]	; (80199e8 <rmw_init+0x20c>)
 80199d0:	f7ff fdb8 	bl	8019544 <put_memory>
 80199d4:	66f7      	str	r7, [r6, #108]	; 0x6c
 80199d6:	2701      	movs	r7, #1
 80199d8:	e7d5      	b.n	8019986 <rmw_init+0x1aa>
 80199da:	bf00      	nop
 80199dc:	080203d0 	.word	0x080203d0
 80199e0:	2001062c 	.word	0x2001062c
 80199e4:	2000c8d8 	.word	0x2000c8d8
 80199e8:	2001061c 	.word	0x2001061c
 80199ec:	2000de80 	.word	0x2000de80
 80199f0:	2000be34 	.word	0x2000be34
 80199f4:	200105ec 	.word	0x200105ec
 80199f8:	2000ff80 	.word	0x2000ff80
 80199fc:	2001063c 	.word	0x2001063c
 8019a00:	2000bed8 	.word	0x2000bed8
 8019a04:	200105fc 	.word	0x200105fc
 8019a08:	2000c748 	.word	0x2000c748
 8019a0c:	2001060c 	.word	0x2001060c
 8019a10:	2000bc68 	.word	0x2000bc68
 8019a14:	2000bc58 	.word	0x2000bc58
 8019a18:	200103b8 	.word	0x200103b8
 8019a1c:	2001064c 	.word	0x2001064c
 8019a20:	2000bdb0 	.word	0x2000bdb0
 8019a24:	200105dc 	.word	0x200105dc
 8019a28:	2001055c 	.word	0x2001055c
 8019a2c:	2001065c 	.word	0x2001065c
 8019a30:	2000bd30 	.word	0x2000bd30
 8019a34:	200105cc 	.word	0x200105cc
 8019a38:	0801ce25 	.word	0x0801ce25
 8019a3c:	0801ce1d 	.word	0x0801ce1d
 8019a40:	0801cebd 	.word	0x0801cebd
 8019a44:	0801cf59 	.word	0x0801cf59

08019a48 <rmw_context_fini>:
 8019a48:	4b17      	ldr	r3, [pc, #92]	; (8019aa8 <rmw_context_fini+0x60>)
 8019a4a:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8019a4c:	b570      	push	{r4, r5, r6, lr}
 8019a4e:	681c      	ldr	r4, [r3, #0]
 8019a50:	4605      	mov	r5, r0
 8019a52:	b334      	cbz	r4, 8019aa2 <rmw_context_fini+0x5a>
 8019a54:	2600      	movs	r6, #0
 8019a56:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8019a5a:	6902      	ldr	r2, [r0, #16]
 8019a5c:	428a      	cmp	r2, r1
 8019a5e:	d018      	beq.n	8019a92 <rmw_context_fini+0x4a>
 8019a60:	2c00      	cmp	r4, #0
 8019a62:	d1f8      	bne.n	8019a56 <rmw_context_fini+0xe>
 8019a64:	b189      	cbz	r1, 8019a8a <rmw_context_fini+0x42>
 8019a66:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8019a6a:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8019a6e:	789b      	ldrb	r3, [r3, #2]
 8019a70:	2b01      	cmp	r3, #1
 8019a72:	bf14      	ite	ne
 8019a74:	210a      	movne	r1, #10
 8019a76:	2100      	moveq	r1, #0
 8019a78:	f7f9 f838 	bl	8012aec <uxr_delete_session_retries>
 8019a7c:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8019a7e:	f7f5 fb71 	bl	800f164 <rmw_uxrce_fini_session_memory>
 8019a82:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8019a84:	3010      	adds	r0, #16
 8019a86:	f001 f957 	bl	801ad38 <uxr_close_custom_transport>
 8019a8a:	2300      	movs	r3, #0
 8019a8c:	4630      	mov	r0, r6
 8019a8e:	66eb      	str	r3, [r5, #108]	; 0x6c
 8019a90:	bd70      	pop	{r4, r5, r6, pc}
 8019a92:	3018      	adds	r0, #24
 8019a94:	f000 f90e 	bl	8019cb4 <rmw_destroy_node>
 8019a98:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8019a9a:	4606      	mov	r6, r0
 8019a9c:	2c00      	cmp	r4, #0
 8019a9e:	d1da      	bne.n	8019a56 <rmw_context_fini+0xe>
 8019aa0:	e7e0      	b.n	8019a64 <rmw_context_fini+0x1c>
 8019aa2:	4626      	mov	r6, r4
 8019aa4:	e7de      	b.n	8019a64 <rmw_context_fini+0x1c>
 8019aa6:	bf00      	nop
 8019aa8:	200105ec 	.word	0x200105ec

08019aac <create_topic>:
 8019aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ab0:	4605      	mov	r5, r0
 8019ab2:	b084      	sub	sp, #16
 8019ab4:	4822      	ldr	r0, [pc, #136]	; (8019b40 <create_topic+0x94>)
 8019ab6:	460f      	mov	r7, r1
 8019ab8:	4616      	mov	r6, r2
 8019aba:	f7ff fd33 	bl	8019524 <get_memory>
 8019abe:	4604      	mov	r4, r0
 8019ac0:	2800      	cmp	r0, #0
 8019ac2:	d039      	beq.n	8019b38 <create_topic+0x8c>
 8019ac4:	692b      	ldr	r3, [r5, #16]
 8019ac6:	2102      	movs	r1, #2
 8019ac8:	6884      	ldr	r4, [r0, #8]
 8019aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019ace:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8019b48 <create_topic+0x9c>
 8019ad2:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 8019ad6:	1c42      	adds	r2, r0, #1
 8019ad8:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8019adc:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 8019ae0:	f7f8 f9b0 	bl	8011e44 <uxr_object_id>
 8019ae4:	223c      	movs	r2, #60	; 0x3c
 8019ae6:	6120      	str	r0, [r4, #16]
 8019ae8:	4641      	mov	r1, r8
 8019aea:	4638      	mov	r0, r7
 8019aec:	f7f5 fdb8 	bl	800f660 <generate_topic_name>
 8019af0:	b1f0      	cbz	r0, 8019b30 <create_topic+0x84>
 8019af2:	4f14      	ldr	r7, [pc, #80]	; (8019b44 <create_topic+0x98>)
 8019af4:	4630      	mov	r0, r6
 8019af6:	2264      	movs	r2, #100	; 0x64
 8019af8:	4639      	mov	r1, r7
 8019afa:	f7f5 fd83 	bl	800f604 <generate_type_name>
 8019afe:	b1b8      	cbz	r0, 8019b30 <create_topic+0x84>
 8019b00:	6928      	ldr	r0, [r5, #16]
 8019b02:	2106      	movs	r1, #6
 8019b04:	696b      	ldr	r3, [r5, #20]
 8019b06:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8019b0a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019b0e:	f8cd 8000 	str.w	r8, [sp]
 8019b12:	e9cd 7101 	strd	r7, r1, [sp, #4]
 8019b16:	6811      	ldr	r1, [r2, #0]
 8019b18:	6922      	ldr	r2, [r4, #16]
 8019b1a:	f7f7 ffd5 	bl	8011ac8 <uxr_buffer_create_topic_bin>
 8019b1e:	4602      	mov	r2, r0
 8019b20:	6928      	ldr	r0, [r5, #16]
 8019b22:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8019b26:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8019b2a:	f7f5 fc9f 	bl	800f46c <run_xrce_session>
 8019b2e:	b918      	cbnz	r0, 8019b38 <create_topic+0x8c>
 8019b30:	4620      	mov	r0, r4
 8019b32:	2400      	movs	r4, #0
 8019b34:	f7f5 fb8c 	bl	800f250 <rmw_uxrce_fini_topic_memory>
 8019b38:	4620      	mov	r0, r4
 8019b3a:	b004      	add	sp, #16
 8019b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b40:	2001064c 	.word	0x2001064c
 8019b44:	20010c00 	.word	0x20010c00
 8019b48:	20010bc4 	.word	0x20010bc4

08019b4c <destroy_topic>:
 8019b4c:	b538      	push	{r3, r4, r5, lr}
 8019b4e:	6985      	ldr	r5, [r0, #24]
 8019b50:	b1dd      	cbz	r5, 8019b8a <destroy_topic+0x3e>
 8019b52:	4604      	mov	r4, r0
 8019b54:	6928      	ldr	r0, [r5, #16]
 8019b56:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8019b5a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019b5e:	6922      	ldr	r2, [r4, #16]
 8019b60:	6819      	ldr	r1, [r3, #0]
 8019b62:	f7f7 ff33 	bl	80119cc <uxr_buffer_delete_entity>
 8019b66:	4602      	mov	r2, r0
 8019b68:	6928      	ldr	r0, [r5, #16]
 8019b6a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8019b6e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8019b72:	f7f5 fc7b 	bl	800f46c <run_xrce_session>
 8019b76:	4603      	mov	r3, r0
 8019b78:	4620      	mov	r0, r4
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	bf14      	ite	ne
 8019b7e:	2400      	movne	r4, #0
 8019b80:	2402      	moveq	r4, #2
 8019b82:	f7f5 fb65 	bl	800f250 <rmw_uxrce_fini_topic_memory>
 8019b86:	4620      	mov	r0, r4
 8019b88:	bd38      	pop	{r3, r4, r5, pc}
 8019b8a:	2401      	movs	r4, #1
 8019b8c:	4620      	mov	r0, r4
 8019b8e:	bd38      	pop	{r3, r4, r5, pc}

08019b90 <create_node>:
 8019b90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019b94:	b083      	sub	sp, #12
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	d064      	beq.n	8019c64 <create_node+0xd4>
 8019b9a:	4606      	mov	r6, r0
 8019b9c:	4838      	ldr	r0, [pc, #224]	; (8019c80 <create_node+0xf0>)
 8019b9e:	460f      	mov	r7, r1
 8019ba0:	4690      	mov	r8, r2
 8019ba2:	461d      	mov	r5, r3
 8019ba4:	f7ff fcbe 	bl	8019524 <get_memory>
 8019ba8:	2800      	cmp	r0, #0
 8019baa:	d05b      	beq.n	8019c64 <create_node+0xd4>
 8019bac:	6884      	ldr	r4, [r0, #8]
 8019bae:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8019bb0:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8019bb4:	f104 0518 	add.w	r5, r4, #24
 8019bb8:	6123      	str	r3, [r4, #16]
 8019bba:	f7ff fd39 	bl	8019630 <rmw_get_implementation_identifier>
 8019bbe:	f8c4 9020 	str.w	r9, [r4, #32]
 8019bc2:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8019bc6:	4630      	mov	r0, r6
 8019bc8:	f7e6 fb9a 	bl	8000300 <strlen>
 8019bcc:	1c42      	adds	r2, r0, #1
 8019bce:	2a3c      	cmp	r2, #60	; 0x3c
 8019bd0:	d840      	bhi.n	8019c54 <create_node+0xc4>
 8019bd2:	4648      	mov	r0, r9
 8019bd4:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8019bd8:	4631      	mov	r1, r6
 8019bda:	f003 ff50 	bl	801da7e <memcpy>
 8019bde:	4638      	mov	r0, r7
 8019be0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8019be4:	f7e6 fb8c 	bl	8000300 <strlen>
 8019be8:	1c42      	adds	r2, r0, #1
 8019bea:	2a3c      	cmp	r2, #60	; 0x3c
 8019bec:	d832      	bhi.n	8019c54 <create_node+0xc4>
 8019bee:	4639      	mov	r1, r7
 8019bf0:	4648      	mov	r0, r9
 8019bf2:	f003 ff44 	bl	801da7e <memcpy>
 8019bf6:	6923      	ldr	r3, [r4, #16]
 8019bf8:	2101      	movs	r1, #1
 8019bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019bfe:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8019c02:	1842      	adds	r2, r0, r1
 8019c04:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8019c08:	f7f8 f91c 	bl	8011e44 <uxr_object_id>
 8019c0c:	6160      	str	r0, [r4, #20]
 8019c0e:	783b      	ldrb	r3, [r7, #0]
 8019c10:	2b2f      	cmp	r3, #47	; 0x2f
 8019c12:	d12c      	bne.n	8019c6e <create_node+0xde>
 8019c14:	787b      	ldrb	r3, [r7, #1]
 8019c16:	bb53      	cbnz	r3, 8019c6e <create_node+0xde>
 8019c18:	4633      	mov	r3, r6
 8019c1a:	4a1a      	ldr	r2, [pc, #104]	; (8019c84 <create_node+0xf4>)
 8019c1c:	213c      	movs	r1, #60	; 0x3c
 8019c1e:	481a      	ldr	r0, [pc, #104]	; (8019c88 <create_node+0xf8>)
 8019c20:	f003 fd22 	bl	801d668 <sniprintf>
 8019c24:	6920      	ldr	r0, [r4, #16]
 8019c26:	2106      	movs	r1, #6
 8019c28:	fa1f f388 	uxth.w	r3, r8
 8019c2c:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8019c30:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019c34:	9101      	str	r1, [sp, #4]
 8019c36:	4914      	ldr	r1, [pc, #80]	; (8019c88 <create_node+0xf8>)
 8019c38:	9100      	str	r1, [sp, #0]
 8019c3a:	6811      	ldr	r1, [r2, #0]
 8019c3c:	6962      	ldr	r2, [r4, #20]
 8019c3e:	f7f7 ff11 	bl	8011a64 <uxr_buffer_create_participant_bin>
 8019c42:	4602      	mov	r2, r0
 8019c44:	6920      	ldr	r0, [r4, #16]
 8019c46:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8019c4a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8019c4e:	f7f5 fc0d 	bl	800f46c <run_xrce_session>
 8019c52:	b918      	cbnz	r0, 8019c5c <create_node+0xcc>
 8019c54:	4628      	mov	r0, r5
 8019c56:	2500      	movs	r5, #0
 8019c58:	f7f5 fa8a 	bl	800f170 <rmw_uxrce_fini_node_memory>
 8019c5c:	4628      	mov	r0, r5
 8019c5e:	b003      	add	sp, #12
 8019c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019c64:	2500      	movs	r5, #0
 8019c66:	4628      	mov	r0, r5
 8019c68:	b003      	add	sp, #12
 8019c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019c6e:	463b      	mov	r3, r7
 8019c70:	4a06      	ldr	r2, [pc, #24]	; (8019c8c <create_node+0xfc>)
 8019c72:	213c      	movs	r1, #60	; 0x3c
 8019c74:	9600      	str	r6, [sp, #0]
 8019c76:	4804      	ldr	r0, [pc, #16]	; (8019c88 <create_node+0xf8>)
 8019c78:	f003 fcf6 	bl	801d668 <sniprintf>
 8019c7c:	e7d2      	b.n	8019c24 <create_node+0x94>
 8019c7e:	bf00      	nop
 8019c80:	200105ec 	.word	0x200105ec
 8019c84:	0801f884 	.word	0x0801f884
 8019c88:	20010c64 	.word	0x20010c64
 8019c8c:	0801fdc8 	.word	0x0801fdc8

08019c90 <rmw_create_node>:
 8019c90:	468c      	mov	ip, r1
 8019c92:	4611      	mov	r1, r2
 8019c94:	f1bc 0f00 	cmp.w	ip, #0
 8019c98:	d00a      	beq.n	8019cb0 <rmw_create_node+0x20>
 8019c9a:	f89c 3000 	ldrb.w	r3, [ip]
 8019c9e:	b13b      	cbz	r3, 8019cb0 <rmw_create_node+0x20>
 8019ca0:	b132      	cbz	r2, 8019cb0 <rmw_create_node+0x20>
 8019ca2:	7813      	ldrb	r3, [r2, #0]
 8019ca4:	b123      	cbz	r3, 8019cb0 <rmw_create_node+0x20>
 8019ca6:	4603      	mov	r3, r0
 8019ca8:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8019caa:	4660      	mov	r0, ip
 8019cac:	f7ff bf70 	b.w	8019b90 <create_node>
 8019cb0:	2000      	movs	r0, #0
 8019cb2:	4770      	bx	lr

08019cb4 <rmw_destroy_node>:
 8019cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cb6:	b328      	cbz	r0, 8019d04 <rmw_destroy_node+0x50>
 8019cb8:	4607      	mov	r7, r0
 8019cba:	6800      	ldr	r0, [r0, #0]
 8019cbc:	b120      	cbz	r0, 8019cc8 <rmw_destroy_node+0x14>
 8019cbe:	4b37      	ldr	r3, [pc, #220]	; (8019d9c <rmw_destroy_node+0xe8>)
 8019cc0:	6819      	ldr	r1, [r3, #0]
 8019cc2:	f7e6 fabd 	bl	8000240 <strcmp>
 8019cc6:	b9e8      	cbnz	r0, 8019d04 <rmw_destroy_node+0x50>
 8019cc8:	687d      	ldr	r5, [r7, #4]
 8019cca:	b1dd      	cbz	r5, 8019d04 <rmw_destroy_node+0x50>
 8019ccc:	4b34      	ldr	r3, [pc, #208]	; (8019da0 <rmw_destroy_node+0xec>)
 8019cce:	681c      	ldr	r4, [r3, #0]
 8019cd0:	2c00      	cmp	r4, #0
 8019cd2:	d060      	beq.n	8019d96 <rmw_destroy_node+0xe2>
 8019cd4:	2600      	movs	r6, #0
 8019cd6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8019cda:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8019cde:	429d      	cmp	r5, r3
 8019ce0:	d013      	beq.n	8019d0a <rmw_destroy_node+0x56>
 8019ce2:	2c00      	cmp	r4, #0
 8019ce4:	d1f7      	bne.n	8019cd6 <rmw_destroy_node+0x22>
 8019ce6:	4b2f      	ldr	r3, [pc, #188]	; (8019da4 <rmw_destroy_node+0xf0>)
 8019ce8:	681c      	ldr	r4, [r3, #0]
 8019cea:	b1c4      	cbz	r4, 8019d1e <rmw_destroy_node+0x6a>
 8019cec:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8019cf0:	6a0b      	ldr	r3, [r1, #32]
 8019cf2:	429d      	cmp	r5, r3
 8019cf4:	d1f9      	bne.n	8019cea <rmw_destroy_node+0x36>
 8019cf6:	317c      	adds	r1, #124	; 0x7c
 8019cf8:	4638      	mov	r0, r7
 8019cfa:	f000 fbff 	bl	801a4fc <rmw_destroy_subscription>
 8019cfe:	2801      	cmp	r0, #1
 8019d00:	4606      	mov	r6, r0
 8019d02:	d1f2      	bne.n	8019cea <rmw_destroy_node+0x36>
 8019d04:	2601      	movs	r6, #1
 8019d06:	4630      	mov	r0, r6
 8019d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d0a:	3184      	adds	r1, #132	; 0x84
 8019d0c:	4638      	mov	r0, r7
 8019d0e:	f7f5 f875 	bl	800edfc <rmw_destroy_publisher>
 8019d12:	2801      	cmp	r0, #1
 8019d14:	4606      	mov	r6, r0
 8019d16:	d0f5      	beq.n	8019d04 <rmw_destroy_node+0x50>
 8019d18:	2c00      	cmp	r4, #0
 8019d1a:	d1dc      	bne.n	8019cd6 <rmw_destroy_node+0x22>
 8019d1c:	e7e3      	b.n	8019ce6 <rmw_destroy_node+0x32>
 8019d1e:	4b22      	ldr	r3, [pc, #136]	; (8019da8 <rmw_destroy_node+0xf4>)
 8019d20:	681c      	ldr	r4, [r3, #0]
 8019d22:	b16c      	cbz	r4, 8019d40 <rmw_destroy_node+0x8c>
 8019d24:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8019d28:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8019d2a:	429d      	cmp	r5, r3
 8019d2c:	d1f9      	bne.n	8019d22 <rmw_destroy_node+0x6e>
 8019d2e:	317c      	adds	r1, #124	; 0x7c
 8019d30:	4638      	mov	r0, r7
 8019d32:	f000 fa6d 	bl	801a210 <rmw_destroy_service>
 8019d36:	2801      	cmp	r0, #1
 8019d38:	4606      	mov	r6, r0
 8019d3a:	d0e3      	beq.n	8019d04 <rmw_destroy_node+0x50>
 8019d3c:	2c00      	cmp	r4, #0
 8019d3e:	d1f1      	bne.n	8019d24 <rmw_destroy_node+0x70>
 8019d40:	4b1a      	ldr	r3, [pc, #104]	; (8019dac <rmw_destroy_node+0xf8>)
 8019d42:	681c      	ldr	r4, [r3, #0]
 8019d44:	b16c      	cbz	r4, 8019d62 <rmw_destroy_node+0xae>
 8019d46:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8019d4a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8019d4c:	429d      	cmp	r5, r3
 8019d4e:	d1f9      	bne.n	8019d44 <rmw_destroy_node+0x90>
 8019d50:	317c      	adds	r1, #124	; 0x7c
 8019d52:	4638      	mov	r0, r7
 8019d54:	f7ff fc0a 	bl	801956c <rmw_destroy_client>
 8019d58:	2801      	cmp	r0, #1
 8019d5a:	4606      	mov	r6, r0
 8019d5c:	d0d2      	beq.n	8019d04 <rmw_destroy_node+0x50>
 8019d5e:	2c00      	cmp	r4, #0
 8019d60:	d1f1      	bne.n	8019d46 <rmw_destroy_node+0x92>
 8019d62:	6928      	ldr	r0, [r5, #16]
 8019d64:	696a      	ldr	r2, [r5, #20]
 8019d66:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8019d6a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019d6e:	6819      	ldr	r1, [r3, #0]
 8019d70:	f7f7 fe2c 	bl	80119cc <uxr_buffer_delete_entity>
 8019d74:	4602      	mov	r2, r0
 8019d76:	6928      	ldr	r0, [r5, #16]
 8019d78:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8019d7c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8019d80:	f7f5 fb74 	bl	800f46c <run_xrce_session>
 8019d84:	4603      	mov	r3, r0
 8019d86:	4638      	mov	r0, r7
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	bf08      	it	eq
 8019d8c:	2602      	moveq	r6, #2
 8019d8e:	f7f5 f9ef 	bl	800f170 <rmw_uxrce_fini_node_memory>
 8019d92:	4630      	mov	r0, r6
 8019d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d96:	4626      	mov	r6, r4
 8019d98:	e7a5      	b.n	8019ce6 <rmw_destroy_node+0x32>
 8019d9a:	bf00      	nop
 8019d9c:	080203d0 	.word	0x080203d0
 8019da0:	200105fc 	.word	0x200105fc
 8019da4:	2001063c 	.word	0x2001063c
 8019da8:	2001060c 	.word	0x2001060c
 8019dac:	2000bc58 	.word	0x2000bc58

08019db0 <rmw_node_get_graph_guard_condition>:
 8019db0:	6843      	ldr	r3, [r0, #4]
 8019db2:	6918      	ldr	r0, [r3, #16]
 8019db4:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8019db8:	4770      	bx	lr
 8019dba:	bf00      	nop

08019dbc <rmw_send_request>:
 8019dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019dc0:	4604      	mov	r4, r0
 8019dc2:	6800      	ldr	r0, [r0, #0]
 8019dc4:	b08b      	sub	sp, #44	; 0x2c
 8019dc6:	460e      	mov	r6, r1
 8019dc8:	4615      	mov	r5, r2
 8019dca:	b128      	cbz	r0, 8019dd8 <rmw_send_request+0x1c>
 8019dcc:	4b21      	ldr	r3, [pc, #132]	; (8019e54 <rmw_send_request+0x98>)
 8019dce:	6819      	ldr	r1, [r3, #0]
 8019dd0:	f7e6 fa36 	bl	8000240 <strcmp>
 8019dd4:	2800      	cmp	r0, #0
 8019dd6:	d139      	bne.n	8019e4c <rmw_send_request+0x90>
 8019dd8:	6864      	ldr	r4, [r4, #4]
 8019dda:	2700      	movs	r7, #0
 8019ddc:	6963      	ldr	r3, [r4, #20]
 8019dde:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 8019de2:	689b      	ldr	r3, [r3, #8]
 8019de4:	4798      	blx	r3
 8019de6:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8019dea:	4630      	mov	r0, r6
 8019dec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019df0:	4798      	blx	r3
 8019df2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8019df6:	9000      	str	r0, [sp, #0]
 8019df8:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8019dfc:	6922      	ldr	r2, [r4, #16]
 8019dfe:	ab02      	add	r3, sp, #8
 8019e00:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8019e02:	f7f9 fb27 	bl	8013454 <uxr_prepare_output_stream>
 8019e06:	e9c5 0700 	strd	r0, r7, [r5]
 8019e0a:	b198      	cbz	r0, 8019e34 <rmw_send_request+0x78>
 8019e0c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8019e10:	a902      	add	r1, sp, #8
 8019e12:	4630      	mov	r0, r6
 8019e14:	4798      	blx	r3
 8019e16:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8019e1a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8019e1e:	2b01      	cmp	r3, #1
 8019e20:	d00c      	beq.n	8019e3c <rmw_send_request+0x80>
 8019e22:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8019e24:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019e28:	f7f8 fd16 	bl	8012858 <uxr_run_session_until_confirm_delivery>
 8019e2c:	4638      	mov	r0, r7
 8019e2e:	b00b      	add	sp, #44	; 0x2c
 8019e30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e34:	2001      	movs	r0, #1
 8019e36:	b00b      	add	sp, #44	; 0x2c
 8019e38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e3c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019e40:	f7f8 f950 	bl	80120e4 <uxr_flash_output_streams>
 8019e44:	4638      	mov	r0, r7
 8019e46:	b00b      	add	sp, #44	; 0x2c
 8019e48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e4c:	200c      	movs	r0, #12
 8019e4e:	b00b      	add	sp, #44	; 0x2c
 8019e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e54:	080203d0 	.word	0x080203d0

08019e58 <rmw_take_request>:
 8019e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019e5c:	4605      	mov	r5, r0
 8019e5e:	6800      	ldr	r0, [r0, #0]
 8019e60:	b089      	sub	sp, #36	; 0x24
 8019e62:	460c      	mov	r4, r1
 8019e64:	4690      	mov	r8, r2
 8019e66:	461e      	mov	r6, r3
 8019e68:	b128      	cbz	r0, 8019e76 <rmw_take_request+0x1e>
 8019e6a:	4b28      	ldr	r3, [pc, #160]	; (8019f0c <rmw_take_request+0xb4>)
 8019e6c:	6819      	ldr	r1, [r3, #0]
 8019e6e:	f7e6 f9e7 	bl	8000240 <strcmp>
 8019e72:	2800      	cmp	r0, #0
 8019e74:	d146      	bne.n	8019f04 <rmw_take_request+0xac>
 8019e76:	b10e      	cbz	r6, 8019e7c <rmw_take_request+0x24>
 8019e78:	2300      	movs	r3, #0
 8019e7a:	7033      	strb	r3, [r6, #0]
 8019e7c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8019e80:	f7f5 fa76 	bl	800f370 <rmw_uxrce_clean_expired_static_input_buffer>
 8019e84:	4648      	mov	r0, r9
 8019e86:	f7f5 fa49 	bl	800f31c <rmw_uxrce_find_static_input_buffer_by_owner>
 8019e8a:	4607      	mov	r7, r0
 8019e8c:	b3b0      	cbz	r0, 8019efc <rmw_take_request+0xa4>
 8019e8e:	6885      	ldr	r5, [r0, #8]
 8019e90:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8019e94:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 8019e98:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8019e9c:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8019ea0:	7423      	strb	r3, [r4, #16]
 8019ea2:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 8019ea6:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 8019eaa:	f8a4 2011 	strh.w	r2, [r4, #17]
 8019eae:	74e3      	strb	r3, [r4, #19]
 8019eb0:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 8019eb4:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 8019eb8:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 8019ebc:	6161      	str	r1, [r4, #20]
 8019ebe:	61a2      	str	r2, [r4, #24]
 8019ec0:	61e3      	str	r3, [r4, #28]
 8019ec2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8019ec6:	689b      	ldr	r3, [r3, #8]
 8019ec8:	4798      	blx	r3
 8019eca:	6844      	ldr	r4, [r0, #4]
 8019ecc:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8019ed0:	f105 0110 	add.w	r1, r5, #16
 8019ed4:	4668      	mov	r0, sp
 8019ed6:	f7f7 fd05 	bl	80118e4 <ucdr_init_buffer>
 8019eda:	4641      	mov	r1, r8
 8019edc:	68e3      	ldr	r3, [r4, #12]
 8019ede:	4668      	mov	r0, sp
 8019ee0:	4798      	blx	r3
 8019ee2:	4639      	mov	r1, r7
 8019ee4:	4604      	mov	r4, r0
 8019ee6:	480a      	ldr	r0, [pc, #40]	; (8019f10 <rmw_take_request+0xb8>)
 8019ee8:	f7ff fb2c 	bl	8019544 <put_memory>
 8019eec:	b106      	cbz	r6, 8019ef0 <rmw_take_request+0x98>
 8019eee:	7034      	strb	r4, [r6, #0]
 8019ef0:	f084 0001 	eor.w	r0, r4, #1
 8019ef4:	b2c0      	uxtb	r0, r0
 8019ef6:	b009      	add	sp, #36	; 0x24
 8019ef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019efc:	2001      	movs	r0, #1
 8019efe:	b009      	add	sp, #36	; 0x24
 8019f00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019f04:	200c      	movs	r0, #12
 8019f06:	b009      	add	sp, #36	; 0x24
 8019f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019f0c:	080203d0 	.word	0x080203d0
 8019f10:	2001062c 	.word	0x2001062c

08019f14 <rmw_send_response>:
 8019f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f16:	4605      	mov	r5, r0
 8019f18:	6800      	ldr	r0, [r0, #0]
 8019f1a:	b091      	sub	sp, #68	; 0x44
 8019f1c:	460c      	mov	r4, r1
 8019f1e:	4616      	mov	r6, r2
 8019f20:	b128      	cbz	r0, 8019f2e <rmw_send_response+0x1a>
 8019f22:	4b29      	ldr	r3, [pc, #164]	; (8019fc8 <rmw_send_response+0xb4>)
 8019f24:	6819      	ldr	r1, [r3, #0]
 8019f26:	f7e6 f98b 	bl	8000240 <strcmp>
 8019f2a:	2800      	cmp	r0, #0
 8019f2c:	d141      	bne.n	8019fb2 <rmw_send_response+0x9e>
 8019f2e:	686d      	ldr	r5, [r5, #4]
 8019f30:	68a1      	ldr	r1, [r4, #8]
 8019f32:	6860      	ldr	r0, [r4, #4]
 8019f34:	6faf      	ldr	r7, [r5, #120]	; 0x78
 8019f36:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8019f3a:	9307      	str	r3, [sp, #28]
 8019f3c:	4623      	mov	r3, r4
 8019f3e:	9206      	str	r2, [sp, #24]
 8019f40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019f44:	789b      	ldrb	r3, [r3, #2]
 8019f46:	f88d 2017 	strb.w	r2, [sp, #23]
 8019f4a:	f88d 3016 	strb.w	r3, [sp, #22]
 8019f4e:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8019f52:	68e2      	ldr	r2, [r4, #12]
 8019f54:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019f58:	ab02      	add	r3, sp, #8
 8019f5a:	696c      	ldr	r4, [r5, #20]
 8019f5c:	c307      	stmia	r3!, {r0, r1, r2}
 8019f5e:	68e3      	ldr	r3, [r4, #12]
 8019f60:	4798      	blx	r3
 8019f62:	6844      	ldr	r4, [r0, #4]
 8019f64:	4630      	mov	r0, r6
 8019f66:	6923      	ldr	r3, [r4, #16]
 8019f68:	4798      	blx	r3
 8019f6a:	f100 0318 	add.w	r3, r0, #24
 8019f6e:	6938      	ldr	r0, [r7, #16]
 8019f70:	9300      	str	r3, [sp, #0]
 8019f72:	ab08      	add	r3, sp, #32
 8019f74:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019f78:	692a      	ldr	r2, [r5, #16]
 8019f7a:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8019f7c:	f7f9 fa6a 	bl	8013454 <uxr_prepare_output_stream>
 8019f80:	b910      	cbnz	r0, 8019f88 <rmw_send_response+0x74>
 8019f82:	2001      	movs	r0, #1
 8019f84:	b011      	add	sp, #68	; 0x44
 8019f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f88:	a902      	add	r1, sp, #8
 8019f8a:	a808      	add	r0, sp, #32
 8019f8c:	f7fa fbce 	bl	801472c <uxr_serialize_SampleIdentity>
 8019f90:	68a3      	ldr	r3, [r4, #8]
 8019f92:	a908      	add	r1, sp, #32
 8019f94:	4630      	mov	r0, r6
 8019f96:	4798      	blx	r3
 8019f98:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8019f9c:	6938      	ldr	r0, [r7, #16]
 8019f9e:	2b01      	cmp	r3, #1
 8019fa0:	d00a      	beq.n	8019fb8 <rmw_send_response+0xa4>
 8019fa2:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8019fa4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019fa8:	f7f8 fc56 	bl	8012858 <uxr_run_session_until_confirm_delivery>
 8019fac:	2000      	movs	r0, #0
 8019fae:	b011      	add	sp, #68	; 0x44
 8019fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019fb2:	200c      	movs	r0, #12
 8019fb4:	b011      	add	sp, #68	; 0x44
 8019fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019fb8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019fbc:	f7f8 f892 	bl	80120e4 <uxr_flash_output_streams>
 8019fc0:	2000      	movs	r0, #0
 8019fc2:	b011      	add	sp, #68	; 0x44
 8019fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019fc6:	bf00      	nop
 8019fc8:	080203d0 	.word	0x080203d0

08019fcc <rmw_take_response>:
 8019fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fd0:	4604      	mov	r4, r0
 8019fd2:	6800      	ldr	r0, [r0, #0]
 8019fd4:	b088      	sub	sp, #32
 8019fd6:	460f      	mov	r7, r1
 8019fd8:	4690      	mov	r8, r2
 8019fda:	461d      	mov	r5, r3
 8019fdc:	b120      	cbz	r0, 8019fe8 <rmw_take_response+0x1c>
 8019fde:	4b1d      	ldr	r3, [pc, #116]	; (801a054 <rmw_take_response+0x88>)
 8019fe0:	6819      	ldr	r1, [r3, #0]
 8019fe2:	f7e6 f92d 	bl	8000240 <strcmp>
 8019fe6:	bb68      	cbnz	r0, 801a044 <rmw_take_response+0x78>
 8019fe8:	b10d      	cbz	r5, 8019fee <rmw_take_response+0x22>
 8019fea:	2300      	movs	r3, #0
 8019fec:	702b      	strb	r3, [r5, #0]
 8019fee:	6864      	ldr	r4, [r4, #4]
 8019ff0:	f7f5 f9be 	bl	800f370 <rmw_uxrce_clean_expired_static_input_buffer>
 8019ff4:	4620      	mov	r0, r4
 8019ff6:	f7f5 f991 	bl	800f31c <rmw_uxrce_find_static_input_buffer_by_owner>
 8019ffa:	4606      	mov	r6, r0
 8019ffc:	b330      	cbz	r0, 801a04c <rmw_take_response+0x80>
 8019ffe:	6963      	ldr	r3, [r4, #20]
 801a000:	6884      	ldr	r4, [r0, #8]
 801a002:	68db      	ldr	r3, [r3, #12]
 801a004:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 801a008:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801a00c:	e9c7 0108 	strd	r0, r1, [r7, #32]
 801a010:	4798      	blx	r3
 801a012:	6847      	ldr	r7, [r0, #4]
 801a014:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 801a018:	f104 0110 	add.w	r1, r4, #16
 801a01c:	4668      	mov	r0, sp
 801a01e:	f7f7 fc61 	bl	80118e4 <ucdr_init_buffer>
 801a022:	4641      	mov	r1, r8
 801a024:	68fb      	ldr	r3, [r7, #12]
 801a026:	4668      	mov	r0, sp
 801a028:	4798      	blx	r3
 801a02a:	4631      	mov	r1, r6
 801a02c:	4604      	mov	r4, r0
 801a02e:	480a      	ldr	r0, [pc, #40]	; (801a058 <rmw_take_response+0x8c>)
 801a030:	f7ff fa88 	bl	8019544 <put_memory>
 801a034:	b105      	cbz	r5, 801a038 <rmw_take_response+0x6c>
 801a036:	702c      	strb	r4, [r5, #0]
 801a038:	f084 0001 	eor.w	r0, r4, #1
 801a03c:	b2c0      	uxtb	r0, r0
 801a03e:	b008      	add	sp, #32
 801a040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a044:	200c      	movs	r0, #12
 801a046:	b008      	add	sp, #32
 801a048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a04c:	2001      	movs	r0, #1
 801a04e:	b008      	add	sp, #32
 801a050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a054:	080203d0 	.word	0x080203d0
 801a058:	2001062c 	.word	0x2001062c

0801a05c <rmw_create_service>:
 801a05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a060:	b091      	sub	sp, #68	; 0x44
 801a062:	2900      	cmp	r1, #0
 801a064:	f000 80bb 	beq.w	801a1de <rmw_create_service+0x182>
 801a068:	4606      	mov	r6, r0
 801a06a:	2800      	cmp	r0, #0
 801a06c:	f000 80b7 	beq.w	801a1de <rmw_create_service+0x182>
 801a070:	4614      	mov	r4, r2
 801a072:	6800      	ldr	r0, [r0, #0]
 801a074:	4689      	mov	r9, r1
 801a076:	461d      	mov	r5, r3
 801a078:	f7f5 fb0a 	bl	800f690 <is_uxrce_rmw_identifier_valid>
 801a07c:	2c00      	cmp	r4, #0
 801a07e:	f000 80ae 	beq.w	801a1de <rmw_create_service+0x182>
 801a082:	f080 0001 	eor.w	r0, r0, #1
 801a086:	b2c0      	uxtb	r0, r0
 801a088:	2800      	cmp	r0, #0
 801a08a:	f040 80a8 	bne.w	801a1de <rmw_create_service+0x182>
 801a08e:	7823      	ldrb	r3, [r4, #0]
 801a090:	2b00      	cmp	r3, #0
 801a092:	f000 80a4 	beq.w	801a1de <rmw_create_service+0x182>
 801a096:	2d00      	cmp	r5, #0
 801a098:	f000 80a1 	beq.w	801a1de <rmw_create_service+0x182>
 801a09c:	4856      	ldr	r0, [pc, #344]	; (801a1f8 <rmw_create_service+0x19c>)
 801a09e:	f8d6 8004 	ldr.w	r8, [r6, #4]
 801a0a2:	f7ff fa3f 	bl	8019524 <get_memory>
 801a0a6:	4606      	mov	r6, r0
 801a0a8:	2800      	cmp	r0, #0
 801a0aa:	f000 8099 	beq.w	801a1e0 <rmw_create_service+0x184>
 801a0ae:	6887      	ldr	r7, [r0, #8]
 801a0b0:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 801a0b4:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 801a0b8:	f7ff faba 	bl	8019630 <rmw_get_implementation_identifier>
 801a0bc:	67f8      	str	r0, [r7, #124]	; 0x7c
 801a0be:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 801a0c2:	4620      	mov	r0, r4
 801a0c4:	f7e6 f91c 	bl	8000300 <strlen>
 801a0c8:	1c42      	adds	r2, r0, #1
 801a0ca:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 801a0ce:	2a3c      	cmp	r2, #60	; 0x3c
 801a0d0:	f200 808a 	bhi.w	801a1e8 <rmw_create_service+0x18c>
 801a0d4:	4621      	mov	r1, r4
 801a0d6:	4650      	mov	r0, sl
 801a0d8:	f003 fcd1 	bl	801da7e <memcpy>
 801a0dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a0e0:	4629      	mov	r1, r5
 801a0e2:	2250      	movs	r2, #80	; 0x50
 801a0e4:	f107 0020 	add.w	r0, r7, #32
 801a0e8:	f8c7 8078 	str.w	r8, [r7, #120]	; 0x78
 801a0ec:	677b      	str	r3, [r7, #116]	; 0x74
 801a0ee:	f003 fcc6 	bl	801da7e <memcpy>
 801a0f2:	4648      	mov	r0, r9
 801a0f4:	4941      	ldr	r1, [pc, #260]	; (801a1fc <rmw_create_service+0x1a0>)
 801a0f6:	f7f5 fae5 	bl	800f6c4 <get_service_typesupport_handle>
 801a0fa:	2800      	cmp	r0, #0
 801a0fc:	d074      	beq.n	801a1e8 <rmw_create_service+0x18c>
 801a0fe:	6843      	ldr	r3, [r0, #4]
 801a100:	617b      	str	r3, [r7, #20]
 801a102:	2b00      	cmp	r3, #0
 801a104:	d070      	beq.n	801a1e8 <rmw_create_service+0x18c>
 801a106:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a10a:	2108      	movs	r1, #8
 801a10c:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 801a204 <rmw_create_service+0x1a8>
 801a110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a114:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 801a208 <rmw_create_service+0x1ac>
 801a118:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	; 0x5a2
 801a11c:	1c42      	adds	r2, r0, #1
 801a11e:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
 801a122:	f7f7 fe8f 	bl	8011e44 <uxr_object_id>
 801a126:	2364      	movs	r3, #100	; 0x64
 801a128:	6138      	str	r0, [r7, #16]
 801a12a:	4652      	mov	r2, sl
 801a12c:	4649      	mov	r1, r9
 801a12e:	6978      	ldr	r0, [r7, #20]
 801a130:	f7f5 fa02 	bl	800f538 <generate_service_types>
 801a134:	2800      	cmp	r0, #0
 801a136:	d057      	beq.n	801a1e8 <rmw_create_service+0x18c>
 801a138:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 801a20c <rmw_create_service+0x1b0>
 801a13c:	233c      	movs	r3, #60	; 0x3c
 801a13e:	4a30      	ldr	r2, [pc, #192]	; (801a200 <rmw_create_service+0x1a4>)
 801a140:	4620      	mov	r0, r4
 801a142:	4659      	mov	r1, fp
 801a144:	f7f5 f9c6 	bl	800f4d4 <generate_service_topics>
 801a148:	2800      	cmp	r0, #0
 801a14a:	d04d      	beq.n	801a1e8 <rmw_create_service+0x18c>
 801a14c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a150:	a80c      	add	r0, sp, #48	; 0x30
 801a152:	4629      	mov	r1, r5
 801a154:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 801a158:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a15c:	f7f5 f9a2 	bl	800f4a4 <convert_qos_profile>
 801a160:	4a27      	ldr	r2, [pc, #156]	; (801a200 <rmw_create_service+0x1a4>)
 801a162:	a80c      	add	r0, sp, #48	; 0x30
 801a164:	9400      	str	r4, [sp, #0]
 801a166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a168:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a16c:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 801a170:	c803      	ldmia	r0, {r0, r1}
 801a172:	9a08      	ldr	r2, [sp, #32]
 801a174:	9005      	str	r0, [sp, #20]
 801a176:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801a17a:	2306      	movs	r3, #6
 801a17c:	f8ad 1018 	strh.w	r1, [sp, #24]
 801a180:	9307      	str	r3, [sp, #28]
 801a182:	6811      	ldr	r1, [r2, #0]
 801a184:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801a188:	693a      	ldr	r2, [r7, #16]
 801a18a:	f7f7 fe21 	bl	8011dd0 <uxr_buffer_create_replier_bin>
 801a18e:	4602      	mov	r2, r0
 801a190:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801a194:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801a198:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801a19c:	f7f5 f966 	bl	800f46c <run_xrce_session>
 801a1a0:	b310      	cbz	r0, 801a1e8 <rmw_create_service+0x18c>
 801a1a2:	7a2b      	ldrb	r3, [r5, #8]
 801a1a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a1a8:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801a1ac:	2b02      	cmp	r3, #2
 801a1ae:	920e      	str	r2, [sp, #56]	; 0x38
 801a1b0:	f04f 0200 	mov.w	r2, #0
 801a1b4:	920f      	str	r2, [sp, #60]	; 0x3c
 801a1b6:	bf0c      	ite	eq
 801a1b8:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	; 0x37c
 801a1bc:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	; 0x374
 801a1c0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a1c4:	930b      	str	r3, [sp, #44]	; 0x2c
 801a1c6:	ab0e      	add	r3, sp, #56	; 0x38
 801a1c8:	673a      	str	r2, [r7, #112]	; 0x70
 801a1ca:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 801a1ce:	9300      	str	r3, [sp, #0]
 801a1d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a1d2:	6811      	ldr	r1, [r2, #0]
 801a1d4:	693a      	ldr	r2, [r7, #16]
 801a1d6:	f001 faff 	bl	801b7d8 <uxr_buffer_request_data>
 801a1da:	8338      	strh	r0, [r7, #24]
 801a1dc:	e000      	b.n	801a1e0 <rmw_create_service+0x184>
 801a1de:	2600      	movs	r6, #0
 801a1e0:	4630      	mov	r0, r6
 801a1e2:	b011      	add	sp, #68	; 0x44
 801a1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1e8:	4630      	mov	r0, r6
 801a1ea:	2600      	movs	r6, #0
 801a1ec:	f7f5 f804 	bl	800f1f8 <rmw_uxrce_fini_service_memory>
 801a1f0:	4630      	mov	r0, r6
 801a1f2:	b011      	add	sp, #68	; 0x44
 801a1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1f8:	2001060c 	.word	0x2001060c
 801a1fc:	0801ea1c 	.word	0x0801ea1c
 801a200:	20010d40 	.word	0x20010d40
 801a204:	20010d7c 	.word	0x20010d7c
 801a208:	20010cdc 	.word	0x20010cdc
 801a20c:	20010ca0 	.word	0x20010ca0

0801a210 <rmw_destroy_service>:
 801a210:	b570      	push	{r4, r5, r6, lr}
 801a212:	b128      	cbz	r0, 801a220 <rmw_destroy_service+0x10>
 801a214:	4604      	mov	r4, r0
 801a216:	6800      	ldr	r0, [r0, #0]
 801a218:	460d      	mov	r5, r1
 801a21a:	f7f5 fa39 	bl	800f690 <is_uxrce_rmw_identifier_valid>
 801a21e:	b910      	cbnz	r0, 801a226 <rmw_destroy_service+0x16>
 801a220:	2401      	movs	r4, #1
 801a222:	4620      	mov	r0, r4
 801a224:	bd70      	pop	{r4, r5, r6, pc}
 801a226:	6863      	ldr	r3, [r4, #4]
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d0f9      	beq.n	801a220 <rmw_destroy_service+0x10>
 801a22c:	2d00      	cmp	r5, #0
 801a22e:	d0f7      	beq.n	801a220 <rmw_destroy_service+0x10>
 801a230:	6828      	ldr	r0, [r5, #0]
 801a232:	f7f5 fa2d 	bl	800f690 <is_uxrce_rmw_identifier_valid>
 801a236:	2800      	cmp	r0, #0
 801a238:	d0f2      	beq.n	801a220 <rmw_destroy_service+0x10>
 801a23a:	686e      	ldr	r6, [r5, #4]
 801a23c:	2e00      	cmp	r6, #0
 801a23e:	d0ef      	beq.n	801a220 <rmw_destroy_service+0x10>
 801a240:	6864      	ldr	r4, [r4, #4]
 801a242:	6932      	ldr	r2, [r6, #16]
 801a244:	6920      	ldr	r0, [r4, #16]
 801a246:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a24a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a24e:	6819      	ldr	r1, [r3, #0]
 801a250:	f001 fafc 	bl	801b84c <uxr_buffer_cancel_data>
 801a254:	4602      	mov	r2, r0
 801a256:	6920      	ldr	r0, [r4, #16]
 801a258:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801a25c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801a260:	f7f5 f904 	bl	800f46c <run_xrce_session>
 801a264:	6920      	ldr	r0, [r4, #16]
 801a266:	6932      	ldr	r2, [r6, #16]
 801a268:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a26c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a270:	6819      	ldr	r1, [r3, #0]
 801a272:	f7f7 fbab 	bl	80119cc <uxr_buffer_delete_entity>
 801a276:	4602      	mov	r2, r0
 801a278:	6920      	ldr	r0, [r4, #16]
 801a27a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801a27e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801a282:	f7f5 f8f3 	bl	800f46c <run_xrce_session>
 801a286:	4603      	mov	r3, r0
 801a288:	4628      	mov	r0, r5
 801a28a:	2b00      	cmp	r3, #0
 801a28c:	bf14      	ite	ne
 801a28e:	2400      	movne	r4, #0
 801a290:	2402      	moveq	r4, #2
 801a292:	f7f4 ffb1 	bl	800f1f8 <rmw_uxrce_fini_service_memory>
 801a296:	e7c4      	b.n	801a222 <rmw_destroy_service+0x12>

0801a298 <rmw_service_response_publisher_get_actual_qos>:
 801a298:	b181      	cbz	r1, 801a2bc <rmw_service_response_publisher_get_actual_qos+0x24>
 801a29a:	4603      	mov	r3, r0
 801a29c:	b510      	push	{r4, lr}
 801a29e:	fab0 f480 	clz	r4, r0
 801a2a2:	0964      	lsrs	r4, r4, #5
 801a2a4:	b140      	cbz	r0, 801a2b8 <rmw_service_response_publisher_get_actual_qos+0x20>
 801a2a6:	685b      	ldr	r3, [r3, #4]
 801a2a8:	4608      	mov	r0, r1
 801a2aa:	2250      	movs	r2, #80	; 0x50
 801a2ac:	f103 0120 	add.w	r1, r3, #32
 801a2b0:	f003 fbe5 	bl	801da7e <memcpy>
 801a2b4:	4620      	mov	r0, r4
 801a2b6:	bd10      	pop	{r4, pc}
 801a2b8:	200b      	movs	r0, #11
 801a2ba:	bd10      	pop	{r4, pc}
 801a2bc:	200b      	movs	r0, #11
 801a2be:	4770      	bx	lr

0801a2c0 <rmw_service_request_subscription_get_actual_qos>:
 801a2c0:	b178      	cbz	r0, 801a2e2 <rmw_service_request_subscription_get_actual_qos+0x22>
 801a2c2:	b510      	push	{r4, lr}
 801a2c4:	fab1 f481 	clz	r4, r1
 801a2c8:	0964      	lsrs	r4, r4, #5
 801a2ca:	b141      	cbz	r1, 801a2de <rmw_service_request_subscription_get_actual_qos+0x1e>
 801a2cc:	6843      	ldr	r3, [r0, #4]
 801a2ce:	2250      	movs	r2, #80	; 0x50
 801a2d0:	4608      	mov	r0, r1
 801a2d2:	f103 0120 	add.w	r1, r3, #32
 801a2d6:	f003 fbd2 	bl	801da7e <memcpy>
 801a2da:	4620      	mov	r0, r4
 801a2dc:	bd10      	pop	{r4, pc}
 801a2de:	200b      	movs	r0, #11
 801a2e0:	bd10      	pop	{r4, pc}
 801a2e2:	200b      	movs	r0, #11
 801a2e4:	4770      	bx	lr
 801a2e6:	bf00      	nop

0801a2e8 <rmw_create_subscription>:
 801a2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2ec:	b08d      	sub	sp, #52	; 0x34
 801a2ee:	2900      	cmp	r1, #0
 801a2f0:	f000 80d8 	beq.w	801a4a4 <rmw_create_subscription+0x1bc>
 801a2f4:	4604      	mov	r4, r0
 801a2f6:	2800      	cmp	r0, #0
 801a2f8:	f000 80d4 	beq.w	801a4a4 <rmw_create_subscription+0x1bc>
 801a2fc:	6800      	ldr	r0, [r0, #0]
 801a2fe:	460e      	mov	r6, r1
 801a300:	4615      	mov	r5, r2
 801a302:	461f      	mov	r7, r3
 801a304:	f7f5 f9c4 	bl	800f690 <is_uxrce_rmw_identifier_valid>
 801a308:	f080 0001 	eor.w	r0, r0, #1
 801a30c:	b2c0      	uxtb	r0, r0
 801a30e:	2800      	cmp	r0, #0
 801a310:	f040 80c8 	bne.w	801a4a4 <rmw_create_subscription+0x1bc>
 801a314:	2d00      	cmp	r5, #0
 801a316:	f000 80c5 	beq.w	801a4a4 <rmw_create_subscription+0x1bc>
 801a31a:	782b      	ldrb	r3, [r5, #0]
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	f000 80c1 	beq.w	801a4a4 <rmw_create_subscription+0x1bc>
 801a322:	2f00      	cmp	r7, #0
 801a324:	f000 80be 	beq.w	801a4a4 <rmw_create_subscription+0x1bc>
 801a328:	4867      	ldr	r0, [pc, #412]	; (801a4c8 <rmw_create_subscription+0x1e0>)
 801a32a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801a32e:	f7ff f8f9 	bl	8019524 <get_memory>
 801a332:	4604      	mov	r4, r0
 801a334:	2800      	cmp	r0, #0
 801a336:	f000 80b6 	beq.w	801a4a6 <rmw_create_subscription+0x1be>
 801a33a:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801a33e:	f108 0a98 	add.w	sl, r8, #152	; 0x98
 801a342:	f8c8 8080 	str.w	r8, [r8, #128]	; 0x80
 801a346:	f7ff f973 	bl	8019630 <rmw_get_implementation_identifier>
 801a34a:	f8c8 007c 	str.w	r0, [r8, #124]	; 0x7c
 801a34e:	f8c8 a084 	str.w	sl, [r8, #132]	; 0x84
 801a352:	4628      	mov	r0, r5
 801a354:	f7e5 ffd4 	bl	8000300 <strlen>
 801a358:	3001      	adds	r0, #1
 801a35a:	f108 047c 	add.w	r4, r8, #124	; 0x7c
 801a35e:	283c      	cmp	r0, #60	; 0x3c
 801a360:	f200 80a5 	bhi.w	801a4ae <rmw_create_subscription+0x1c6>
 801a364:	462b      	mov	r3, r5
 801a366:	4a59      	ldr	r2, [pc, #356]	; (801a4cc <rmw_create_subscription+0x1e4>)
 801a368:	213c      	movs	r1, #60	; 0x3c
 801a36a:	4650      	mov	r0, sl
 801a36c:	f003 f97c 	bl	801d668 <sniprintf>
 801a370:	4639      	mov	r1, r7
 801a372:	2250      	movs	r2, #80	; 0x50
 801a374:	f108 0028 	add.w	r0, r8, #40	; 0x28
 801a378:	f8c8 9020 	str.w	r9, [r8, #32]
 801a37c:	f003 fb7f 	bl	801da7e <memcpy>
 801a380:	4630      	mov	r0, r6
 801a382:	4953      	ldr	r1, [pc, #332]	; (801a4d0 <rmw_create_subscription+0x1e8>)
 801a384:	f7f5 f992 	bl	800f6ac <get_message_typesupport_handle>
 801a388:	2800      	cmp	r0, #0
 801a38a:	f000 8090 	beq.w	801a4ae <rmw_create_subscription+0x1c6>
 801a38e:	6842      	ldr	r2, [r0, #4]
 801a390:	f8c8 2018 	str.w	r2, [r8, #24]
 801a394:	2a00      	cmp	r2, #0
 801a396:	f000 808a 	beq.w	801a4ae <rmw_create_subscription+0x1c6>
 801a39a:	4629      	mov	r1, r5
 801a39c:	463b      	mov	r3, r7
 801a39e:	4648      	mov	r0, r9
 801a3a0:	f7ff fb84 	bl	8019aac <create_topic>
 801a3a4:	f8c8 001c 	str.w	r0, [r8, #28]
 801a3a8:	2800      	cmp	r0, #0
 801a3aa:	f000 8085 	beq.w	801a4b8 <rmw_create_subscription+0x1d0>
 801a3ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a3b2:	2104      	movs	r1, #4
 801a3b4:	2506      	movs	r5, #6
 801a3b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a3ba:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 801a3be:	1c42      	adds	r2, r0, #1
 801a3c0:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 801a3c4:	f7f7 fd3e 	bl	8011e44 <uxr_object_id>
 801a3c8:	f8c8 0010 	str.w	r0, [r8, #16]
 801a3cc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801a3d0:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 801a3d4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a3d8:	9500      	str	r5, [sp, #0]
 801a3da:	6819      	ldr	r1, [r3, #0]
 801a3dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a3e0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801a3e4:	f7f7 fbd6 	bl	8011b94 <uxr_buffer_create_subscriber_bin>
 801a3e8:	4602      	mov	r2, r0
 801a3ea:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801a3ee:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801a3f2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801a3f6:	f7f5 f839 	bl	800f46c <run_xrce_session>
 801a3fa:	2800      	cmp	r0, #0
 801a3fc:	d057      	beq.n	801a4ae <rmw_create_subscription+0x1c6>
 801a3fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a402:	4629      	mov	r1, r5
 801a404:	ae08      	add	r6, sp, #32
 801a406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a40a:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 801a40e:	1c42      	adds	r2, r0, #1
 801a410:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 801a414:	f7f7 fd16 	bl	8011e44 <uxr_object_id>
 801a418:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801a41c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 801a420:	4639      	mov	r1, r7
 801a422:	f8c8 0014 	str.w	r0, [r8, #20]
 801a426:	4630      	mov	r0, r6
 801a428:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 801a42c:	9305      	str	r3, [sp, #20]
 801a42e:	f7f5 f839 	bl	800f4a4 <convert_qos_profile>
 801a432:	9503      	str	r5, [sp, #12]
 801a434:	9b05      	ldr	r3, [sp, #20]
 801a436:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a43a:	9001      	str	r0, [sp, #4]
 801a43c:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 801a440:	f8ad 1008 	strh.w	r1, [sp, #8]
 801a444:	691b      	ldr	r3, [r3, #16]
 801a446:	9300      	str	r3, [sp, #0]
 801a448:	f8db 1000 	ldr.w	r1, [fp]
 801a44c:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 801a450:	f7f7 fc46 	bl	8011ce0 <uxr_buffer_create_datareader_bin>
 801a454:	4602      	mov	r2, r0
 801a456:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801a45a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801a45e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801a462:	f7f5 f803 	bl	800f46c <run_xrce_session>
 801a466:	b310      	cbz	r0, 801a4ae <rmw_create_subscription+0x1c6>
 801a468:	7a3b      	ldrb	r3, [r7, #8]
 801a46a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a46e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801a472:	2b02      	cmp	r3, #2
 801a474:	920a      	str	r2, [sp, #40]	; 0x28
 801a476:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801a47a:	f04f 0200 	mov.w	r2, #0
 801a47e:	bf08      	it	eq
 801a480:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 801a484:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a488:	bf18      	it	ne
 801a48a:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	; 0xd4
 801a48e:	920b      	str	r2, [sp, #44]	; 0x2c
 801a490:	9307      	str	r3, [sp, #28]
 801a492:	ab0a      	add	r3, sp, #40	; 0x28
 801a494:	9300      	str	r3, [sp, #0]
 801a496:	9b07      	ldr	r3, [sp, #28]
 801a498:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801a49c:	6809      	ldr	r1, [r1, #0]
 801a49e:	f001 f99b 	bl	801b7d8 <uxr_buffer_request_data>
 801a4a2:	e000      	b.n	801a4a6 <rmw_create_subscription+0x1be>
 801a4a4:	2400      	movs	r4, #0
 801a4a6:	4620      	mov	r0, r4
 801a4a8:	b00d      	add	sp, #52	; 0x34
 801a4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4ae:	f8d8 001c 	ldr.w	r0, [r8, #28]
 801a4b2:	b108      	cbz	r0, 801a4b8 <rmw_create_subscription+0x1d0>
 801a4b4:	f7f4 fecc 	bl	800f250 <rmw_uxrce_fini_topic_memory>
 801a4b8:	4620      	mov	r0, r4
 801a4ba:	2400      	movs	r4, #0
 801a4bc:	f7f4 fe86 	bl	800f1cc <rmw_uxrce_fini_subscription_memory>
 801a4c0:	4620      	mov	r0, r4
 801a4c2:	b00d      	add	sp, #52	; 0x34
 801a4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4c8:	2001063c 	.word	0x2001063c
 801a4cc:	0801f884 	.word	0x0801f884
 801a4d0:	0801ea1c 	.word	0x0801ea1c

0801a4d4 <rmw_subscription_get_actual_qos>:
 801a4d4:	b178      	cbz	r0, 801a4f6 <rmw_subscription_get_actual_qos+0x22>
 801a4d6:	b510      	push	{r4, lr}
 801a4d8:	fab1 f481 	clz	r4, r1
 801a4dc:	0964      	lsrs	r4, r4, #5
 801a4de:	b141      	cbz	r1, 801a4f2 <rmw_subscription_get_actual_qos+0x1e>
 801a4e0:	6843      	ldr	r3, [r0, #4]
 801a4e2:	2250      	movs	r2, #80	; 0x50
 801a4e4:	4608      	mov	r0, r1
 801a4e6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801a4ea:	f003 fac8 	bl	801da7e <memcpy>
 801a4ee:	4620      	mov	r0, r4
 801a4f0:	bd10      	pop	{r4, pc}
 801a4f2:	200b      	movs	r0, #11
 801a4f4:	bd10      	pop	{r4, pc}
 801a4f6:	200b      	movs	r0, #11
 801a4f8:	4770      	bx	lr
 801a4fa:	bf00      	nop

0801a4fc <rmw_destroy_subscription>:
 801a4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a500:	b128      	cbz	r0, 801a50e <rmw_destroy_subscription+0x12>
 801a502:	4604      	mov	r4, r0
 801a504:	6800      	ldr	r0, [r0, #0]
 801a506:	460d      	mov	r5, r1
 801a508:	f7f5 f8c2 	bl	800f690 <is_uxrce_rmw_identifier_valid>
 801a50c:	b918      	cbnz	r0, 801a516 <rmw_destroy_subscription+0x1a>
 801a50e:	2401      	movs	r4, #1
 801a510:	4620      	mov	r0, r4
 801a512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a516:	6863      	ldr	r3, [r4, #4]
 801a518:	2b00      	cmp	r3, #0
 801a51a:	d0f8      	beq.n	801a50e <rmw_destroy_subscription+0x12>
 801a51c:	fab5 f485 	clz	r4, r5
 801a520:	0964      	lsrs	r4, r4, #5
 801a522:	2d00      	cmp	r5, #0
 801a524:	d0f3      	beq.n	801a50e <rmw_destroy_subscription+0x12>
 801a526:	6828      	ldr	r0, [r5, #0]
 801a528:	f7f5 f8b2 	bl	800f690 <is_uxrce_rmw_identifier_valid>
 801a52c:	2800      	cmp	r0, #0
 801a52e:	d0ee      	beq.n	801a50e <rmw_destroy_subscription+0x12>
 801a530:	686e      	ldr	r6, [r5, #4]
 801a532:	2e00      	cmp	r6, #0
 801a534:	d0eb      	beq.n	801a50e <rmw_destroy_subscription+0x12>
 801a536:	6a37      	ldr	r7, [r6, #32]
 801a538:	6972      	ldr	r2, [r6, #20]
 801a53a:	6938      	ldr	r0, [r7, #16]
 801a53c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a540:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a544:	6819      	ldr	r1, [r3, #0]
 801a546:	f001 f981 	bl	801b84c <uxr_buffer_cancel_data>
 801a54a:	4602      	mov	r2, r0
 801a54c:	6938      	ldr	r0, [r7, #16]
 801a54e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801a552:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801a556:	f7f4 ff89 	bl	800f46c <run_xrce_session>
 801a55a:	69f0      	ldr	r0, [r6, #28]
 801a55c:	f7ff faf6 	bl	8019b4c <destroy_topic>
 801a560:	6a33      	ldr	r3, [r6, #32]
 801a562:	6972      	ldr	r2, [r6, #20]
 801a564:	6918      	ldr	r0, [r3, #16]
 801a566:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a56a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a56e:	6819      	ldr	r1, [r3, #0]
 801a570:	f7f7 fa2c 	bl	80119cc <uxr_buffer_delete_entity>
 801a574:	6a33      	ldr	r3, [r6, #32]
 801a576:	4680      	mov	r8, r0
 801a578:	6932      	ldr	r2, [r6, #16]
 801a57a:	6918      	ldr	r0, [r3, #16]
 801a57c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a580:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a584:	6819      	ldr	r1, [r3, #0]
 801a586:	f7f7 fa21 	bl	80119cc <uxr_buffer_delete_entity>
 801a58a:	4606      	mov	r6, r0
 801a58c:	6938      	ldr	r0, [r7, #16]
 801a58e:	4642      	mov	r2, r8
 801a590:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801a594:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801a598:	f7f4 ff68 	bl	800f46c <run_xrce_session>
 801a59c:	693f      	ldr	r7, [r7, #16]
 801a59e:	4632      	mov	r2, r6
 801a5a0:	4606      	mov	r6, r0
 801a5a2:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 801a5a6:	4638      	mov	r0, r7
 801a5a8:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 801a5ac:	f7f4 ff5e 	bl	800f46c <run_xrce_session>
 801a5b0:	b126      	cbz	r6, 801a5bc <rmw_destroy_subscription+0xc0>
 801a5b2:	b118      	cbz	r0, 801a5bc <rmw_destroy_subscription+0xc0>
 801a5b4:	4628      	mov	r0, r5
 801a5b6:	f7f4 fe09 	bl	800f1cc <rmw_uxrce_fini_subscription_memory>
 801a5ba:	e7a9      	b.n	801a510 <rmw_destroy_subscription+0x14>
 801a5bc:	2402      	movs	r4, #2
 801a5be:	e7f9      	b.n	801a5b4 <rmw_destroy_subscription+0xb8>

0801a5c0 <rmw_take_with_info>:
 801a5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a5c2:	4604      	mov	r4, r0
 801a5c4:	6800      	ldr	r0, [r0, #0]
 801a5c6:	b089      	sub	sp, #36	; 0x24
 801a5c8:	460f      	mov	r7, r1
 801a5ca:	4615      	mov	r5, r2
 801a5cc:	b128      	cbz	r0, 801a5da <rmw_take_with_info+0x1a>
 801a5ce:	4b24      	ldr	r3, [pc, #144]	; (801a660 <rmw_take_with_info+0xa0>)
 801a5d0:	6819      	ldr	r1, [r3, #0]
 801a5d2:	f7e5 fe35 	bl	8000240 <strcmp>
 801a5d6:	2800      	cmp	r0, #0
 801a5d8:	d13e      	bne.n	801a658 <rmw_take_with_info+0x98>
 801a5da:	b305      	cbz	r5, 801a61e <rmw_take_with_info+0x5e>
 801a5dc:	2300      	movs	r3, #0
 801a5de:	6864      	ldr	r4, [r4, #4]
 801a5e0:	702b      	strb	r3, [r5, #0]
 801a5e2:	f7f4 fec5 	bl	800f370 <rmw_uxrce_clean_expired_static_input_buffer>
 801a5e6:	4620      	mov	r0, r4
 801a5e8:	f7f4 fe98 	bl	800f31c <rmw_uxrce_find_static_input_buffer_by_owner>
 801a5ec:	4606      	mov	r6, r0
 801a5ee:	b1f0      	cbz	r0, 801a62e <rmw_take_with_info+0x6e>
 801a5f0:	6881      	ldr	r1, [r0, #8]
 801a5f2:	4668      	mov	r0, sp
 801a5f4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 801a5f8:	3110      	adds	r1, #16
 801a5fa:	f7f7 f973 	bl	80118e4 <ucdr_init_buffer>
 801a5fe:	69a3      	ldr	r3, [r4, #24]
 801a600:	4639      	mov	r1, r7
 801a602:	4668      	mov	r0, sp
 801a604:	68db      	ldr	r3, [r3, #12]
 801a606:	4798      	blx	r3
 801a608:	4604      	mov	r4, r0
 801a60a:	4631      	mov	r1, r6
 801a60c:	4815      	ldr	r0, [pc, #84]	; (801a664 <rmw_take_with_info+0xa4>)
 801a60e:	f7fe ff99 	bl	8019544 <put_memory>
 801a612:	702c      	strb	r4, [r5, #0]
 801a614:	f084 0001 	eor.w	r0, r4, #1
 801a618:	b2c0      	uxtb	r0, r0
 801a61a:	b009      	add	sp, #36	; 0x24
 801a61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a61e:	6864      	ldr	r4, [r4, #4]
 801a620:	f7f4 fea6 	bl	800f370 <rmw_uxrce_clean_expired_static_input_buffer>
 801a624:	4620      	mov	r0, r4
 801a626:	f7f4 fe79 	bl	800f31c <rmw_uxrce_find_static_input_buffer_by_owner>
 801a62a:	4605      	mov	r5, r0
 801a62c:	b910      	cbnz	r0, 801a634 <rmw_take_with_info+0x74>
 801a62e:	2001      	movs	r0, #1
 801a630:	b009      	add	sp, #36	; 0x24
 801a632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a634:	68a9      	ldr	r1, [r5, #8]
 801a636:	4668      	mov	r0, sp
 801a638:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 801a63c:	3110      	adds	r1, #16
 801a63e:	f7f7 f951 	bl	80118e4 <ucdr_init_buffer>
 801a642:	69a3      	ldr	r3, [r4, #24]
 801a644:	4639      	mov	r1, r7
 801a646:	4668      	mov	r0, sp
 801a648:	68db      	ldr	r3, [r3, #12]
 801a64a:	4798      	blx	r3
 801a64c:	4629      	mov	r1, r5
 801a64e:	4604      	mov	r4, r0
 801a650:	4804      	ldr	r0, [pc, #16]	; (801a664 <rmw_take_with_info+0xa4>)
 801a652:	f7fe ff77 	bl	8019544 <put_memory>
 801a656:	e7dd      	b.n	801a614 <rmw_take_with_info+0x54>
 801a658:	200c      	movs	r0, #12
 801a65a:	b009      	add	sp, #36	; 0x24
 801a65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a65e:	bf00      	nop
 801a660:	080203d0 	.word	0x080203d0
 801a664:	2001062c 	.word	0x2001062c

0801a668 <rmw_uxrce_transport_init>:
 801a668:	b508      	push	{r3, lr}
 801a66a:	b108      	cbz	r0, 801a670 <rmw_uxrce_transport_init+0x8>
 801a66c:	f100 0210 	add.w	r2, r0, #16
 801a670:	b139      	cbz	r1, 801a682 <rmw_uxrce_transport_init+0x1a>
 801a672:	6949      	ldr	r1, [r1, #20]
 801a674:	4610      	mov	r0, r2
 801a676:	f000 fb2b 	bl	801acd0 <uxr_init_custom_transport>
 801a67a:	f080 0001 	eor.w	r0, r0, #1
 801a67e:	b2c0      	uxtb	r0, r0
 801a680:	bd08      	pop	{r3, pc}
 801a682:	4b04      	ldr	r3, [pc, #16]	; (801a694 <rmw_uxrce_transport_init+0x2c>)
 801a684:	4610      	mov	r0, r2
 801a686:	6859      	ldr	r1, [r3, #4]
 801a688:	f000 fb22 	bl	801acd0 <uxr_init_custom_transport>
 801a68c:	f080 0001 	eor.w	r0, r0, #1
 801a690:	b2c0      	uxtb	r0, r0
 801a692:	bd08      	pop	{r3, pc}
 801a694:	2000bc3c 	.word	0x2000bc3c

0801a698 <rmw_wait>:
 801a698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a69c:	4698      	mov	r8, r3
 801a69e:	ea40 0301 	orr.w	r3, r0, r1
 801a6a2:	b089      	sub	sp, #36	; 0x24
 801a6a4:	ea48 0303 	orr.w	r3, r8, r3
 801a6a8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a6aa:	4313      	orrs	r3, r2
 801a6ac:	f000 8106 	beq.w	801a8bc <rmw_wait+0x224>
 801a6b0:	4605      	mov	r5, r0
 801a6b2:	460e      	mov	r6, r1
 801a6b4:	4691      	mov	r9, r2
 801a6b6:	b16c      	cbz	r4, 801a6d4 <rmw_wait+0x3c>
 801a6b8:	4ba6      	ldr	r3, [pc, #664]	; (801a954 <rmw_wait+0x2bc>)
 801a6ba:	af04      	add	r7, sp, #16
 801a6bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a6be:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801a6c2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801a6c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801a6ca:	f7fe fd4d 	bl	8019168 <rmw_time_equal>
 801a6ce:	2800      	cmp	r0, #0
 801a6d0:	f000 810b 	beq.w	801a8ea <rmw_wait+0x252>
 801a6d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a6d8:	f7f4 fe4a 	bl	800f370 <rmw_uxrce_clean_expired_static_input_buffer>
 801a6dc:	4b9e      	ldr	r3, [pc, #632]	; (801a958 <rmw_wait+0x2c0>)
 801a6de:	681c      	ldr	r4, [r3, #0]
 801a6e0:	b14c      	cbz	r4, 801a6f6 <rmw_wait+0x5e>
 801a6e2:	4623      	mov	r3, r4
 801a6e4:	2100      	movs	r1, #0
 801a6e6:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801a6ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a6ee:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d1f7      	bne.n	801a6e6 <rmw_wait+0x4e>
 801a6f6:	f1b9 0f00 	cmp.w	r9, #0
 801a6fa:	d011      	beq.n	801a720 <rmw_wait+0x88>
 801a6fc:	f8d9 1000 	ldr.w	r1, [r9]
 801a700:	b171      	cbz	r1, 801a720 <rmw_wait+0x88>
 801a702:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801a706:	2300      	movs	r3, #0
 801a708:	2001      	movs	r0, #1
 801a70a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a70e:	3301      	adds	r3, #1
 801a710:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801a712:	4299      	cmp	r1, r3
 801a714:	6912      	ldr	r2, [r2, #16]
 801a716:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a71a:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801a71e:	d1f4      	bne.n	801a70a <rmw_wait+0x72>
 801a720:	f1b8 0f00 	cmp.w	r8, #0
 801a724:	d011      	beq.n	801a74a <rmw_wait+0xb2>
 801a726:	f8d8 1000 	ldr.w	r1, [r8]
 801a72a:	b171      	cbz	r1, 801a74a <rmw_wait+0xb2>
 801a72c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801a730:	2300      	movs	r3, #0
 801a732:	2001      	movs	r0, #1
 801a734:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a738:	3301      	adds	r3, #1
 801a73a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801a73c:	4299      	cmp	r1, r3
 801a73e:	6912      	ldr	r2, [r2, #16]
 801a740:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a744:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801a748:	d1f4      	bne.n	801a734 <rmw_wait+0x9c>
 801a74a:	b185      	cbz	r5, 801a76e <rmw_wait+0xd6>
 801a74c:	6829      	ldr	r1, [r5, #0]
 801a74e:	b171      	cbz	r1, 801a76e <rmw_wait+0xd6>
 801a750:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801a754:	2300      	movs	r3, #0
 801a756:	2001      	movs	r0, #1
 801a758:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a75c:	3301      	adds	r3, #1
 801a75e:	6a12      	ldr	r2, [r2, #32]
 801a760:	4299      	cmp	r1, r3
 801a762:	6912      	ldr	r2, [r2, #16]
 801a764:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a768:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801a76c:	d1f4      	bne.n	801a758 <rmw_wait+0xc0>
 801a76e:	b344      	cbz	r4, 801a7c2 <rmw_wait+0x12a>
 801a770:	4622      	mov	r2, r4
 801a772:	2300      	movs	r3, #0
 801a774:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801a778:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 801a77c:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 801a780:	440b      	add	r3, r1
 801a782:	b2db      	uxtb	r3, r3
 801a784:	2a00      	cmp	r2, #0
 801a786:	d1f5      	bne.n	801a774 <rmw_wait+0xdc>
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d05f      	beq.n	801a84c <rmw_wait+0x1b4>
 801a78c:	1c7a      	adds	r2, r7, #1
 801a78e:	d00d      	beq.n	801a7ac <rmw_wait+0x114>
 801a790:	ee07 7a90 	vmov	s15, r7
 801a794:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801a798:	ee07 3a90 	vmov	s15, r3
 801a79c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a7a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801a7a4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801a7a8:	ee17 7a90 	vmov	r7, s15
 801a7ac:	68a0      	ldr	r0, [r4, #8]
 801a7ae:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 801a7b2:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	f040 808d 	bne.w	801a8d6 <rmw_wait+0x23e>
 801a7bc:	6864      	ldr	r4, [r4, #4]
 801a7be:	2c00      	cmp	r4, #0
 801a7c0:	d1f4      	bne.n	801a7ac <rmw_wait+0x114>
 801a7c2:	f1b9 0f00 	cmp.w	r9, #0
 801a7c6:	f000 80a1 	beq.w	801a90c <rmw_wait+0x274>
 801a7ca:	f8d9 7000 	ldr.w	r7, [r9]
 801a7ce:	2f00      	cmp	r7, #0
 801a7d0:	f000 80a4 	beq.w	801a91c <rmw_wait+0x284>
 801a7d4:	2400      	movs	r4, #0
 801a7d6:	4627      	mov	r7, r4
 801a7d8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801a7dc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a7e0:	f7f4 fd9c 	bl	800f31c <rmw_uxrce_find_static_input_buffer_by_owner>
 801a7e4:	2800      	cmp	r0, #0
 801a7e6:	d03b      	beq.n	801a860 <rmw_wait+0x1c8>
 801a7e8:	3401      	adds	r4, #1
 801a7ea:	f8d9 3000 	ldr.w	r3, [r9]
 801a7ee:	2701      	movs	r7, #1
 801a7f0:	42a3      	cmp	r3, r4
 801a7f2:	d8f1      	bhi.n	801a7d8 <rmw_wait+0x140>
 801a7f4:	2701      	movs	r7, #1
 801a7f6:	f1b8 0f00 	cmp.w	r8, #0
 801a7fa:	d010      	beq.n	801a81e <rmw_wait+0x186>
 801a7fc:	f8d8 3000 	ldr.w	r3, [r8]
 801a800:	b16b      	cbz	r3, 801a81e <rmw_wait+0x186>
 801a802:	2400      	movs	r4, #0
 801a804:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801a808:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a80c:	f7f4 fd86 	bl	800f31c <rmw_uxrce_find_static_input_buffer_by_owner>
 801a810:	b370      	cbz	r0, 801a870 <rmw_wait+0x1d8>
 801a812:	3401      	adds	r4, #1
 801a814:	f8d8 3000 	ldr.w	r3, [r8]
 801a818:	2701      	movs	r7, #1
 801a81a:	42a3      	cmp	r3, r4
 801a81c:	d8f2      	bhi.n	801a804 <rmw_wait+0x16c>
 801a81e:	2d00      	cmp	r5, #0
 801a820:	d035      	beq.n	801a88e <rmw_wait+0x1f6>
 801a822:	682b      	ldr	r3, [r5, #0]
 801a824:	b39b      	cbz	r3, 801a88e <rmw_wait+0x1f6>
 801a826:	2400      	movs	r4, #0
 801a828:	686b      	ldr	r3, [r5, #4]
 801a82a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a82e:	f7f4 fd75 	bl	800f31c <rmw_uxrce_find_static_input_buffer_by_owner>
 801a832:	b328      	cbz	r0, 801a880 <rmw_wait+0x1e8>
 801a834:	3401      	adds	r4, #1
 801a836:	682b      	ldr	r3, [r5, #0]
 801a838:	2701      	movs	r7, #1
 801a83a:	42a3      	cmp	r3, r4
 801a83c:	d8f4      	bhi.n	801a828 <rmw_wait+0x190>
 801a83e:	2e00      	cmp	r6, #0
 801a840:	d03c      	beq.n	801a8bc <rmw_wait+0x224>
 801a842:	6834      	ldr	r4, [r6, #0]
 801a844:	2c00      	cmp	r4, #0
 801a846:	d039      	beq.n	801a8bc <rmw_wait+0x224>
 801a848:	2701      	movs	r7, #1
 801a84a:	e023      	b.n	801a894 <rmw_wait+0x1fc>
 801a84c:	68a0      	ldr	r0, [r4, #8]
 801a84e:	2100      	movs	r1, #0
 801a850:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a854:	f7f7 ffc6 	bl	80127e4 <uxr_run_session_timeout>
 801a858:	6864      	ldr	r4, [r4, #4]
 801a85a:	2c00      	cmp	r4, #0
 801a85c:	d1f6      	bne.n	801a84c <rmw_wait+0x1b4>
 801a85e:	e7b0      	b.n	801a7c2 <rmw_wait+0x12a>
 801a860:	e9d9 3200 	ldrd	r3, r2, [r9]
 801a864:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801a868:	3401      	adds	r4, #1
 801a86a:	42a3      	cmp	r3, r4
 801a86c:	d8b4      	bhi.n	801a7d8 <rmw_wait+0x140>
 801a86e:	e7c2      	b.n	801a7f6 <rmw_wait+0x15e>
 801a870:	e9d8 3200 	ldrd	r3, r2, [r8]
 801a874:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801a878:	3401      	adds	r4, #1
 801a87a:	429c      	cmp	r4, r3
 801a87c:	d3c2      	bcc.n	801a804 <rmw_wait+0x16c>
 801a87e:	e7ce      	b.n	801a81e <rmw_wait+0x186>
 801a880:	e9d5 3200 	ldrd	r3, r2, [r5]
 801a884:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801a888:	3401      	adds	r4, #1
 801a88a:	42a3      	cmp	r3, r4
 801a88c:	d8cc      	bhi.n	801a828 <rmw_wait+0x190>
 801a88e:	b1a6      	cbz	r6, 801a8ba <rmw_wait+0x222>
 801a890:	6834      	ldr	r4, [r6, #0]
 801a892:	b194      	cbz	r4, 801a8ba <rmw_wait+0x222>
 801a894:	2300      	movs	r3, #0
 801a896:	461d      	mov	r5, r3
 801a898:	e004      	b.n	801a8a4 <rmw_wait+0x20c>
 801a89a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801a89e:	3301      	adds	r3, #1
 801a8a0:	42a3      	cmp	r3, r4
 801a8a2:	d00a      	beq.n	801a8ba <rmw_wait+0x222>
 801a8a4:	6870      	ldr	r0, [r6, #4]
 801a8a6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801a8aa:	7c0a      	ldrb	r2, [r1, #16]
 801a8ac:	2a00      	cmp	r2, #0
 801a8ae:	d0f4      	beq.n	801a89a <rmw_wait+0x202>
 801a8b0:	3301      	adds	r3, #1
 801a8b2:	4617      	mov	r7, r2
 801a8b4:	740d      	strb	r5, [r1, #16]
 801a8b6:	42a3      	cmp	r3, r4
 801a8b8:	d1f4      	bne.n	801a8a4 <rmw_wait+0x20c>
 801a8ba:	b147      	cbz	r7, 801a8ce <rmw_wait+0x236>
 801a8bc:	2000      	movs	r0, #0
 801a8be:	b009      	add	sp, #36	; 0x24
 801a8c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a8c4:	b11e      	cbz	r6, 801a8ce <rmw_wait+0x236>
 801a8c6:	6834      	ldr	r4, [r6, #0]
 801a8c8:	462f      	mov	r7, r5
 801a8ca:	2c00      	cmp	r4, #0
 801a8cc:	d1e2      	bne.n	801a894 <rmw_wait+0x1fc>
 801a8ce:	2002      	movs	r0, #2
 801a8d0:	b009      	add	sp, #36	; 0x24
 801a8d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a8d6:	4639      	mov	r1, r7
 801a8d8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a8dc:	f7f7 ff9c 	bl	8012818 <uxr_run_session_until_data>
 801a8e0:	6864      	ldr	r4, [r4, #4]
 801a8e2:	2c00      	cmp	r4, #0
 801a8e4:	f47f af62 	bne.w	801a7ac <rmw_wait+0x114>
 801a8e8:	e76b      	b.n	801a7c2 <rmw_wait+0x12a>
 801a8ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801a8ee:	f7fe fc91 	bl	8019214 <rmw_time_total_nsec>
 801a8f2:	2300      	movs	r3, #0
 801a8f4:	4a19      	ldr	r2, [pc, #100]	; (801a95c <rmw_wait+0x2c4>)
 801a8f6:	f7e5 fd5b 	bl	80003b0 <__aeabi_uldivmod>
 801a8fa:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801a8fe:	4607      	mov	r7, r0
 801a900:	f171 0300 	sbcs.w	r3, r1, #0
 801a904:	bfa8      	it	ge
 801a906:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 801a90a:	e6e5      	b.n	801a6d8 <rmw_wait+0x40>
 801a90c:	f1b8 0f00 	cmp.w	r8, #0
 801a910:	d00f      	beq.n	801a932 <rmw_wait+0x29a>
 801a912:	f8d8 3000 	ldr.w	r3, [r8]
 801a916:	b193      	cbz	r3, 801a93e <rmw_wait+0x2a6>
 801a918:	464f      	mov	r7, r9
 801a91a:	e772      	b.n	801a802 <rmw_wait+0x16a>
 801a91c:	f1b8 0f00 	cmp.w	r8, #0
 801a920:	d007      	beq.n	801a932 <rmw_wait+0x29a>
 801a922:	f8d8 3000 	ldr.w	r3, [r8]
 801a926:	2b00      	cmp	r3, #0
 801a928:	f47f af6b 	bne.w	801a802 <rmw_wait+0x16a>
 801a92c:	b155      	cbz	r5, 801a944 <rmw_wait+0x2ac>
 801a92e:	461f      	mov	r7, r3
 801a930:	e777      	b.n	801a822 <rmw_wait+0x18a>
 801a932:	2d00      	cmp	r5, #0
 801a934:	d0c6      	beq.n	801a8c4 <rmw_wait+0x22c>
 801a936:	682b      	ldr	r3, [r5, #0]
 801a938:	b143      	cbz	r3, 801a94c <rmw_wait+0x2b4>
 801a93a:	4647      	mov	r7, r8
 801a93c:	e773      	b.n	801a826 <rmw_wait+0x18e>
 801a93e:	b10d      	cbz	r5, 801a944 <rmw_wait+0x2ac>
 801a940:	464f      	mov	r7, r9
 801a942:	e76e      	b.n	801a822 <rmw_wait+0x18a>
 801a944:	462f      	mov	r7, r5
 801a946:	2e00      	cmp	r6, #0
 801a948:	d1a2      	bne.n	801a890 <rmw_wait+0x1f8>
 801a94a:	e7c0      	b.n	801a8ce <rmw_wait+0x236>
 801a94c:	4647      	mov	r7, r8
 801a94e:	2e00      	cmp	r6, #0
 801a950:	d19e      	bne.n	801a890 <rmw_wait+0x1f8>
 801a952:	e7bc      	b.n	801a8ce <rmw_wait+0x236>
 801a954:	0801e8d0 	.word	0x0801e8d0
 801a958:	2001061c 	.word	0x2001061c
 801a95c:	000f4240 	.word	0x000f4240

0801a960 <rmw_create_wait_set>:
 801a960:	b508      	push	{r3, lr}
 801a962:	4803      	ldr	r0, [pc, #12]	; (801a970 <rmw_create_wait_set+0x10>)
 801a964:	f7fe fdde 	bl	8019524 <get_memory>
 801a968:	b108      	cbz	r0, 801a96e <rmw_create_wait_set+0xe>
 801a96a:	6880      	ldr	r0, [r0, #8]
 801a96c:	3010      	adds	r0, #16
 801a96e:	bd08      	pop	{r3, pc}
 801a970:	2001065c 	.word	0x2001065c

0801a974 <rmw_destroy_wait_set>:
 801a974:	b508      	push	{r3, lr}
 801a976:	4b08      	ldr	r3, [pc, #32]	; (801a998 <rmw_destroy_wait_set+0x24>)
 801a978:	6819      	ldr	r1, [r3, #0]
 801a97a:	b911      	cbnz	r1, 801a982 <rmw_destroy_wait_set+0xe>
 801a97c:	e00a      	b.n	801a994 <rmw_destroy_wait_set+0x20>
 801a97e:	6849      	ldr	r1, [r1, #4]
 801a980:	b141      	cbz	r1, 801a994 <rmw_destroy_wait_set+0x20>
 801a982:	688b      	ldr	r3, [r1, #8]
 801a984:	3310      	adds	r3, #16
 801a986:	4298      	cmp	r0, r3
 801a988:	d1f9      	bne.n	801a97e <rmw_destroy_wait_set+0xa>
 801a98a:	4803      	ldr	r0, [pc, #12]	; (801a998 <rmw_destroy_wait_set+0x24>)
 801a98c:	f7fe fdda 	bl	8019544 <put_memory>
 801a990:	2000      	movs	r0, #0
 801a992:	bd08      	pop	{r3, pc}
 801a994:	2001      	movs	r0, #1
 801a996:	bd08      	pop	{r3, pc}
 801a998:	2001065c 	.word	0x2001065c

0801a99c <rmw_uros_epoch_nanos>:
 801a99c:	4b05      	ldr	r3, [pc, #20]	; (801a9b4 <rmw_uros_epoch_nanos+0x18>)
 801a99e:	681b      	ldr	r3, [r3, #0]
 801a9a0:	b123      	cbz	r3, 801a9ac <rmw_uros_epoch_nanos+0x10>
 801a9a2:	6898      	ldr	r0, [r3, #8]
 801a9a4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a9a8:	f7f7 bb92 	b.w	80120d0 <uxr_epoch_nanos>
 801a9ac:	2000      	movs	r0, #0
 801a9ae:	2100      	movs	r1, #0
 801a9b0:	4770      	bx	lr
 801a9b2:	bf00      	nop
 801a9b4:	2001061c 	.word	0x2001061c

0801a9b8 <service_msgs__msg__ServiceEventInfo__get_type_hash>:
 801a9b8:	4800      	ldr	r0, [pc, #0]	; (801a9bc <service_msgs__msg__ServiceEventInfo__get_type_hash+0x4>)
 801a9ba:	4770      	bx	lr
 801a9bc:	20001de0 	.word	0x20001de0

0801a9c0 <service_msgs__msg__ServiceEventInfo__get_type_description>:
 801a9c0:	b510      	push	{r4, lr}
 801a9c2:	4c08      	ldr	r4, [pc, #32]	; (801a9e4 <service_msgs__msg__ServiceEventInfo__get_type_description+0x24>)
 801a9c4:	7820      	ldrb	r0, [r4, #0]
 801a9c6:	b108      	cbz	r0, 801a9cc <service_msgs__msg__ServiceEventInfo__get_type_description+0xc>
 801a9c8:	4807      	ldr	r0, [pc, #28]	; (801a9e8 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 801a9ca:	bd10      	pop	{r4, pc}
 801a9cc:	f000 f858 	bl	801aa80 <builtin_interfaces__msg__Time__get_type_description>
 801a9d0:	300c      	adds	r0, #12
 801a9d2:	4b06      	ldr	r3, [pc, #24]	; (801a9ec <service_msgs__msg__ServiceEventInfo__get_type_description+0x2c>)
 801a9d4:	c807      	ldmia	r0, {r0, r1, r2}
 801a9d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a9da:	2301      	movs	r3, #1
 801a9dc:	4802      	ldr	r0, [pc, #8]	; (801a9e8 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 801a9de:	7023      	strb	r3, [r4, #0]
 801a9e0:	bd10      	pop	{r4, pc}
 801a9e2:	bf00      	nop
 801a9e4:	20010de1 	.word	0x20010de1
 801a9e8:	080203d4 	.word	0x080203d4
 801a9ec:	20001f64 	.word	0x20001f64

0801a9f0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>:
 801a9f0:	4800      	ldr	r0, [pc, #0]	; (801a9f4 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source+0x4>)
 801a9f2:	4770      	bx	lr
 801a9f4:	080203f8 	.word	0x080203f8

0801a9f8 <service_msgs__msg__ServiceEventInfo__get_type_description_sources>:
 801a9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9fa:	4e0f      	ldr	r6, [pc, #60]	; (801aa38 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x40>)
 801a9fc:	7837      	ldrb	r7, [r6, #0]
 801a9fe:	b10f      	cbz	r7, 801aa04 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0xc>
 801aa00:	480e      	ldr	r0, [pc, #56]	; (801aa3c <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 801aa02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa04:	4d0e      	ldr	r5, [pc, #56]	; (801aa40 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x48>)
 801aa06:	4c0f      	ldr	r4, [pc, #60]	; (801aa44 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x4c>)
 801aa08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801aa0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801aa0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801aa0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801aa10:	682b      	ldr	r3, [r5, #0]
 801aa12:	4638      	mov	r0, r7
 801aa14:	f844 3b04 	str.w	r3, [r4], #4
 801aa18:	f000 f83e 	bl	801aa98 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801aa1c:	2301      	movs	r3, #1
 801aa1e:	4684      	mov	ip, r0
 801aa20:	7033      	strb	r3, [r6, #0]
 801aa22:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801aa26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801aa28:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801aa2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801aa2e:	f8dc 3000 	ldr.w	r3, [ip]
 801aa32:	4802      	ldr	r0, [pc, #8]	; (801aa3c <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 801aa34:	6023      	str	r3, [r4, #0]
 801aa36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa38:	20010de0 	.word	0x20010de0
 801aa3c:	0802041c 	.word	0x0802041c
 801aa40:	080203f8 	.word	0x080203f8
 801aa44:	20010de4 	.word	0x20010de4

0801aa48 <service_msgs__msg__ServiceEventInfo__init>:
 801aa48:	b538      	push	{r3, r4, r5, lr}
 801aa4a:	b138      	cbz	r0, 801aa5c <service_msgs__msg__ServiceEventInfo__init+0x14>
 801aa4c:	1d05      	adds	r5, r0, #4
 801aa4e:	4628      	mov	r0, r5
 801aa50:	f000 f842 	bl	801aad8 <builtin_interfaces__msg__Time__init>
 801aa54:	4604      	mov	r4, r0
 801aa56:	b120      	cbz	r0, 801aa62 <service_msgs__msg__ServiceEventInfo__init+0x1a>
 801aa58:	4620      	mov	r0, r4
 801aa5a:	bd38      	pop	{r3, r4, r5, pc}
 801aa5c:	4604      	mov	r4, r0
 801aa5e:	4620      	mov	r0, r4
 801aa60:	bd38      	pop	{r3, r4, r5, pc}
 801aa62:	4628      	mov	r0, r5
 801aa64:	f000 f83c 	bl	801aae0 <builtin_interfaces__msg__Time__fini>
 801aa68:	4620      	mov	r0, r4
 801aa6a:	bd38      	pop	{r3, r4, r5, pc}

0801aa6c <service_msgs__msg__ServiceEventInfo__fini>:
 801aa6c:	b110      	cbz	r0, 801aa74 <service_msgs__msg__ServiceEventInfo__fini+0x8>
 801aa6e:	3004      	adds	r0, #4
 801aa70:	f000 b836 	b.w	801aae0 <builtin_interfaces__msg__Time__fini>
 801aa74:	4770      	bx	lr
 801aa76:	bf00      	nop

0801aa78 <builtin_interfaces__msg__Time__get_type_hash>:
 801aa78:	4800      	ldr	r0, [pc, #0]	; (801aa7c <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 801aa7a:	4770      	bx	lr
 801aa7c:	20002300 	.word	0x20002300

0801aa80 <builtin_interfaces__msg__Time__get_type_description>:
 801aa80:	4b03      	ldr	r3, [pc, #12]	; (801aa90 <builtin_interfaces__msg__Time__get_type_description+0x10>)
 801aa82:	781a      	ldrb	r2, [r3, #0]
 801aa84:	b90a      	cbnz	r2, 801aa8a <builtin_interfaces__msg__Time__get_type_description+0xa>
 801aa86:	2201      	movs	r2, #1
 801aa88:	701a      	strb	r2, [r3, #0]
 801aa8a:	4802      	ldr	r0, [pc, #8]	; (801aa94 <builtin_interfaces__msg__Time__get_type_description+0x14>)
 801aa8c:	4770      	bx	lr
 801aa8e:	bf00      	nop
 801aa90:	20010e2d 	.word	0x20010e2d
 801aa94:	08020428 	.word	0x08020428

0801aa98 <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 801aa98:	4800      	ldr	r0, [pc, #0]	; (801aa9c <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 801aa9a:	4770      	bx	lr
 801aa9c:	0802044c 	.word	0x0802044c

0801aaa0 <builtin_interfaces__msg__Time__get_type_description_sources>:
 801aaa0:	4b09      	ldr	r3, [pc, #36]	; (801aac8 <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 801aaa2:	781a      	ldrb	r2, [r3, #0]
 801aaa4:	b96a      	cbnz	r2, 801aac2 <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 801aaa6:	2201      	movs	r2, #1
 801aaa8:	b430      	push	{r4, r5}
 801aaaa:	4d08      	ldr	r5, [pc, #32]	; (801aacc <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 801aaac:	4c08      	ldr	r4, [pc, #32]	; (801aad0 <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 801aaae:	701a      	strb	r2, [r3, #0]
 801aab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801aab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801aab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801aab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801aab8:	682b      	ldr	r3, [r5, #0]
 801aaba:	4806      	ldr	r0, [pc, #24]	; (801aad4 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 801aabc:	6023      	str	r3, [r4, #0]
 801aabe:	bc30      	pop	{r4, r5}
 801aac0:	4770      	bx	lr
 801aac2:	4804      	ldr	r0, [pc, #16]	; (801aad4 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 801aac4:	4770      	bx	lr
 801aac6:	bf00      	nop
 801aac8:	20010e2c 	.word	0x20010e2c
 801aacc:	0802044c 	.word	0x0802044c
 801aad0:	20010e30 	.word	0x20010e30
 801aad4:	08020470 	.word	0x08020470

0801aad8 <builtin_interfaces__msg__Time__init>:
 801aad8:	3800      	subs	r0, #0
 801aada:	bf18      	it	ne
 801aadc:	2001      	movne	r0, #1
 801aade:	4770      	bx	lr

0801aae0 <builtin_interfaces__msg__Time__fini>:
 801aae0:	4770      	bx	lr
 801aae2:	bf00      	nop

0801aae4 <ucdr_serialize_sequence_char>:
 801aae4:	b570      	push	{r4, r5, r6, lr}
 801aae6:	4615      	mov	r5, r2
 801aae8:	460e      	mov	r6, r1
 801aaea:	7d01      	ldrb	r1, [r0, #20]
 801aaec:	4604      	mov	r4, r0
 801aaee:	f7f5 fd17 	bl	8010520 <ucdr_serialize_endian_uint32_t>
 801aaf2:	b90d      	cbnz	r5, 801aaf8 <ucdr_serialize_sequence_char+0x14>
 801aaf4:	2001      	movs	r0, #1
 801aaf6:	bd70      	pop	{r4, r5, r6, pc}
 801aaf8:	462b      	mov	r3, r5
 801aafa:	4632      	mov	r2, r6
 801aafc:	7d21      	ldrb	r1, [r4, #20]
 801aafe:	4620      	mov	r0, r4
 801ab00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab04:	f7f4 bfac 	b.w	800fa60 <ucdr_serialize_endian_array_char>

0801ab08 <ucdr_deserialize_sequence_char>:
 801ab08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab0c:	461d      	mov	r5, r3
 801ab0e:	4616      	mov	r6, r2
 801ab10:	460f      	mov	r7, r1
 801ab12:	461a      	mov	r2, r3
 801ab14:	7d01      	ldrb	r1, [r0, #20]
 801ab16:	4604      	mov	r4, r0
 801ab18:	f7f5 fe2a 	bl	8010770 <ucdr_deserialize_endian_uint32_t>
 801ab1c:	682b      	ldr	r3, [r5, #0]
 801ab1e:	429e      	cmp	r6, r3
 801ab20:	d201      	bcs.n	801ab26 <ucdr_deserialize_sequence_char+0x1e>
 801ab22:	2201      	movs	r2, #1
 801ab24:	75a2      	strb	r2, [r4, #22]
 801ab26:	b913      	cbnz	r3, 801ab2e <ucdr_deserialize_sequence_char+0x26>
 801ab28:	2001      	movs	r0, #1
 801ab2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ab2e:	463a      	mov	r2, r7
 801ab30:	7d21      	ldrb	r1, [r4, #20]
 801ab32:	4620      	mov	r0, r4
 801ab34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ab38:	f7f4 bfc4 	b.w	800fac4 <ucdr_deserialize_endian_array_char>

0801ab3c <ucdr_serialize_sequence_uint8_t>:
 801ab3c:	b570      	push	{r4, r5, r6, lr}
 801ab3e:	4615      	mov	r5, r2
 801ab40:	460e      	mov	r6, r1
 801ab42:	7d01      	ldrb	r1, [r0, #20]
 801ab44:	4604      	mov	r4, r0
 801ab46:	f7f5 fceb 	bl	8010520 <ucdr_serialize_endian_uint32_t>
 801ab4a:	b90d      	cbnz	r5, 801ab50 <ucdr_serialize_sequence_uint8_t+0x14>
 801ab4c:	2001      	movs	r0, #1
 801ab4e:	bd70      	pop	{r4, r5, r6, pc}
 801ab50:	462b      	mov	r3, r5
 801ab52:	4632      	mov	r2, r6
 801ab54:	7d21      	ldrb	r1, [r4, #20]
 801ab56:	4620      	mov	r0, r4
 801ab58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab5c:	f7f5 b818 	b.w	800fb90 <ucdr_serialize_endian_array_uint8_t>

0801ab60 <ucdr_deserialize_sequence_uint8_t>:
 801ab60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab64:	461d      	mov	r5, r3
 801ab66:	4616      	mov	r6, r2
 801ab68:	460f      	mov	r7, r1
 801ab6a:	461a      	mov	r2, r3
 801ab6c:	7d01      	ldrb	r1, [r0, #20]
 801ab6e:	4604      	mov	r4, r0
 801ab70:	f7f5 fdfe 	bl	8010770 <ucdr_deserialize_endian_uint32_t>
 801ab74:	682b      	ldr	r3, [r5, #0]
 801ab76:	429e      	cmp	r6, r3
 801ab78:	d201      	bcs.n	801ab7e <ucdr_deserialize_sequence_uint8_t+0x1e>
 801ab7a:	2201      	movs	r2, #1
 801ab7c:	75a2      	strb	r2, [r4, #22]
 801ab7e:	b913      	cbnz	r3, 801ab86 <ucdr_deserialize_sequence_uint8_t+0x26>
 801ab80:	2001      	movs	r0, #1
 801ab82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ab86:	463a      	mov	r2, r7
 801ab88:	7d21      	ldrb	r1, [r4, #20]
 801ab8a:	4620      	mov	r0, r4
 801ab8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ab90:	f7f5 b864 	b.w	800fc5c <ucdr_deserialize_endian_array_uint8_t>

0801ab94 <ucdr_serialize_string>:
 801ab94:	b510      	push	{r4, lr}
 801ab96:	b082      	sub	sp, #8
 801ab98:	4604      	mov	r4, r0
 801ab9a:	4608      	mov	r0, r1
 801ab9c:	9101      	str	r1, [sp, #4]
 801ab9e:	f7e5 fbaf 	bl	8000300 <strlen>
 801aba2:	4602      	mov	r2, r0
 801aba4:	9901      	ldr	r1, [sp, #4]
 801aba6:	4620      	mov	r0, r4
 801aba8:	3201      	adds	r2, #1
 801abaa:	b002      	add	sp, #8
 801abac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801abb0:	f7ff bf98 	b.w	801aae4 <ucdr_serialize_sequence_char>

0801abb4 <ucdr_deserialize_string>:
 801abb4:	b500      	push	{lr}
 801abb6:	b083      	sub	sp, #12
 801abb8:	ab01      	add	r3, sp, #4
 801abba:	f7ff ffa5 	bl	801ab08 <ucdr_deserialize_sequence_char>
 801abbe:	b003      	add	sp, #12
 801abc0:	f85d fb04 	ldr.w	pc, [sp], #4

0801abc4 <get_custom_error>:
 801abc4:	4b01      	ldr	r3, [pc, #4]	; (801abcc <get_custom_error+0x8>)
 801abc6:	7818      	ldrb	r0, [r3, #0]
 801abc8:	4770      	bx	lr
 801abca:	bf00      	nop
 801abcc:	20010e54 	.word	0x20010e54

0801abd0 <recv_custom_msg>:
 801abd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abd4:	4693      	mov	fp, r2
 801abd6:	b089      	sub	sp, #36	; 0x24
 801abd8:	2200      	movs	r2, #0
 801abda:	4604      	mov	r4, r0
 801abdc:	468a      	mov	sl, r1
 801abde:	9305      	str	r3, [sp, #20]
 801abe0:	f88d 201e 	strb.w	r2, [sp, #30]
 801abe4:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 801abe8:	b322      	cbz	r2, 801ac34 <recv_custom_msg+0x64>
 801abea:	f200 2902 	addw	r9, r0, #514	; 0x202
 801abee:	f10d 081f 	add.w	r8, sp, #31
 801abf2:	af05      	add	r7, sp, #20
 801abf4:	f10d 061e 	add.w	r6, sp, #30
 801abf8:	f44f 7500 	mov.w	r5, #512	; 0x200
 801abfc:	e002      	b.n	801ac04 <recv_custom_msg+0x34>
 801abfe:	9b05      	ldr	r3, [sp, #20]
 801ac00:	2b00      	cmp	r3, #0
 801ac02:	dd0f      	ble.n	801ac24 <recv_custom_msg+0x54>
 801ac04:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 801ac08:	4623      	mov	r3, r4
 801ac0a:	4622      	mov	r2, r4
 801ac0c:	4648      	mov	r0, r9
 801ac0e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801ac12:	e9cd 5600 	strd	r5, r6, [sp]
 801ac16:	f001 f913 	bl	801be40 <uxr_read_framed_msg>
 801ac1a:	2800      	cmp	r0, #0
 801ac1c:	d0ef      	beq.n	801abfe <recv_custom_msg+0x2e>
 801ac1e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801ac22:	b1b3      	cbz	r3, 801ac52 <recv_custom_msg+0x82>
 801ac24:	4b0f      	ldr	r3, [pc, #60]	; (801ac64 <recv_custom_msg+0x94>)
 801ac26:	2000      	movs	r0, #0
 801ac28:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801ac2c:	701a      	strb	r2, [r3, #0]
 801ac2e:	b009      	add	sp, #36	; 0x24
 801ac30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac34:	f10d 021f 	add.w	r2, sp, #31
 801ac38:	4601      	mov	r1, r0
 801ac3a:	9200      	str	r2, [sp, #0]
 801ac3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ac40:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 801ac44:	47a8      	blx	r5
 801ac46:	2800      	cmp	r0, #0
 801ac48:	d0ec      	beq.n	801ac24 <recv_custom_msg+0x54>
 801ac4a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	d1e8      	bne.n	801ac24 <recv_custom_msg+0x54>
 801ac52:	f8cb 0000 	str.w	r0, [fp]
 801ac56:	2001      	movs	r0, #1
 801ac58:	f8ca 4000 	str.w	r4, [sl]
 801ac5c:	b009      	add	sp, #36	; 0x24
 801ac5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac62:	bf00      	nop
 801ac64:	20010e54 	.word	0x20010e54

0801ac68 <send_custom_msg>:
 801ac68:	b530      	push	{r4, r5, lr}
 801ac6a:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 801ac6e:	b087      	sub	sp, #28
 801ac70:	4614      	mov	r4, r2
 801ac72:	b995      	cbnz	r5, 801ac9a <send_custom_msg+0x32>
 801ac74:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 801ac78:	f10d 0317 	add.w	r3, sp, #23
 801ac7c:	47a8      	blx	r5
 801ac7e:	1e03      	subs	r3, r0, #0
 801ac80:	bf18      	it	ne
 801ac82:	2301      	movne	r3, #1
 801ac84:	42a0      	cmp	r0, r4
 801ac86:	bf18      	it	ne
 801ac88:	2300      	movne	r3, #0
 801ac8a:	b91b      	cbnz	r3, 801ac94 <send_custom_msg+0x2c>
 801ac8c:	4a0a      	ldr	r2, [pc, #40]	; (801acb8 <send_custom_msg+0x50>)
 801ac8e:	f89d 1017 	ldrb.w	r1, [sp, #23]
 801ac92:	7011      	strb	r1, [r2, #0]
 801ac94:	4618      	mov	r0, r3
 801ac96:	b007      	add	sp, #28
 801ac98:	bd30      	pop	{r4, r5, pc}
 801ac9a:	460b      	mov	r3, r1
 801ac9c:	2200      	movs	r2, #0
 801ac9e:	f10d 0117 	add.w	r1, sp, #23
 801aca2:	9400      	str	r4, [sp, #0]
 801aca4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801aca8:	4602      	mov	r2, r0
 801acaa:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 801acae:	f200 2002 	addw	r0, r0, #514	; 0x202
 801acb2:	f000 fee7 	bl	801ba84 <uxr_write_framed_msg>
 801acb6:	e7e2      	b.n	801ac7e <send_custom_msg+0x16>
 801acb8:	20010e54 	.word	0x20010e54

0801acbc <uxr_set_custom_transport_callbacks>:
 801acbc:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 801acc0:	9901      	ldr	r1, [sp, #4]
 801acc2:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 801acc6:	9b00      	ldr	r3, [sp, #0]
 801acc8:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 801accc:	4770      	bx	lr
 801acce:	bf00      	nop

0801acd0 <uxr_init_custom_transport>:
 801acd0:	b538      	push	{r3, r4, r5, lr}
 801acd2:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 801acd6:	b303      	cbz	r3, 801ad1a <uxr_init_custom_transport+0x4a>
 801acd8:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 801acdc:	4604      	mov	r4, r0
 801acde:	b1e2      	cbz	r2, 801ad1a <uxr_init_custom_transport+0x4a>
 801ace0:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 801ace4:	b1ca      	cbz	r2, 801ad1a <uxr_init_custom_transport+0x4a>
 801ace6:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 801acea:	b1b2      	cbz	r2, 801ad1a <uxr_init_custom_transport+0x4a>
 801acec:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 801acf0:	4798      	blx	r3
 801acf2:	4605      	mov	r5, r0
 801acf4:	b188      	cbz	r0, 801ad1a <uxr_init_custom_transport+0x4a>
 801acf6:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 801acfa:	b98b      	cbnz	r3, 801ad20 <uxr_init_custom_transport+0x50>
 801acfc:	4b0b      	ldr	r3, [pc, #44]	; (801ad2c <uxr_init_custom_transport+0x5c>)
 801acfe:	4628      	mov	r0, r5
 801ad00:	490b      	ldr	r1, [pc, #44]	; (801ad30 <uxr_init_custom_transport+0x60>)
 801ad02:	4a0c      	ldr	r2, [pc, #48]	; (801ad34 <uxr_init_custom_transport+0x64>)
 801ad04:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 801ad08:	f44f 7300 	mov.w	r3, #512	; 0x200
 801ad0c:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 801ad10:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 801ad14:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 801ad18:	bd38      	pop	{r3, r4, r5, pc}
 801ad1a:	2500      	movs	r5, #0
 801ad1c:	4628      	mov	r0, r5
 801ad1e:	bd38      	pop	{r3, r4, r5, pc}
 801ad20:	2100      	movs	r1, #0
 801ad22:	f204 2002 	addw	r0, r4, #514	; 0x202
 801ad26:	f000 fea7 	bl	801ba78 <uxr_init_framing_io>
 801ad2a:	e7e7      	b.n	801acfc <uxr_init_custom_transport+0x2c>
 801ad2c:	0801abd1 	.word	0x0801abd1
 801ad30:	0801ac69 	.word	0x0801ac69
 801ad34:	0801abc5 	.word	0x0801abc5

0801ad38 <uxr_close_custom_transport>:
 801ad38:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 801ad3c:	4718      	bx	r3
 801ad3e:	bf00      	nop

0801ad40 <uxr_init_input_best_effort_stream>:
 801ad40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ad44:	8003      	strh	r3, [r0, #0]
 801ad46:	4770      	bx	lr

0801ad48 <uxr_reset_input_best_effort_stream>:
 801ad48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ad4c:	8003      	strh	r3, [r0, #0]
 801ad4e:	4770      	bx	lr

0801ad50 <uxr_receive_best_effort_message>:
 801ad50:	b538      	push	{r3, r4, r5, lr}
 801ad52:	4604      	mov	r4, r0
 801ad54:	8800      	ldrh	r0, [r0, #0]
 801ad56:	460d      	mov	r5, r1
 801ad58:	f000 fe76 	bl	801ba48 <uxr_seq_num_cmp>
 801ad5c:	4603      	mov	r3, r0
 801ad5e:	0fc0      	lsrs	r0, r0, #31
 801ad60:	2b00      	cmp	r3, #0
 801ad62:	bfb8      	it	lt
 801ad64:	8025      	strhlt	r5, [r4, #0]
 801ad66:	bd38      	pop	{r3, r4, r5, pc}

0801ad68 <on_full_input_buffer>:
 801ad68:	b570      	push	{r4, r5, r6, lr}
 801ad6a:	460c      	mov	r4, r1
 801ad6c:	4605      	mov	r5, r0
 801ad6e:	8908      	ldrh	r0, [r1, #8]
 801ad70:	682b      	ldr	r3, [r5, #0]
 801ad72:	7d26      	ldrb	r6, [r4, #20]
 801ad74:	e9d1 1200 	ldrd	r1, r2, [r1]
 801ad78:	fbb2 f2f0 	udiv	r2, r2, r0
 801ad7c:	eba3 0c01 	sub.w	ip, r3, r1
 801ad80:	fbbc fcf2 	udiv	ip, ip, r2
 801ad84:	f10c 0c01 	add.w	ip, ip, #1
 801ad88:	fa1f f38c 	uxth.w	r3, ip
 801ad8c:	fbb3 fcf0 	udiv	ip, r3, r0
 801ad90:	fb00 331c 	mls	r3, r0, ip, r3
 801ad94:	b29b      	uxth	r3, r3
 801ad96:	fb02 f303 	mul.w	r3, r2, r3
 801ad9a:	1d18      	adds	r0, r3, #4
 801ad9c:	4408      	add	r0, r1
 801ad9e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801ada2:	b116      	cbz	r6, 801adaa <on_full_input_buffer+0x42>
 801ada4:	2600      	movs	r6, #0
 801ada6:	f840 6c04 	str.w	r6, [r0, #-4]
 801adaa:	2a03      	cmp	r2, #3
 801adac:	d801      	bhi.n	801adb2 <on_full_input_buffer+0x4a>
 801adae:	2001      	movs	r0, #1
 801adb0:	bd70      	pop	{r4, r5, r6, pc}
 801adb2:	3308      	adds	r3, #8
 801adb4:	4628      	mov	r0, r5
 801adb6:	3a04      	subs	r2, #4
 801adb8:	4419      	add	r1, r3
 801adba:	692b      	ldr	r3, [r5, #16]
 801adbc:	f7f6 fd8a 	bl	80118d4 <ucdr_init_buffer_origin>
 801adc0:	4628      	mov	r0, r5
 801adc2:	4622      	mov	r2, r4
 801adc4:	4902      	ldr	r1, [pc, #8]	; (801add0 <on_full_input_buffer+0x68>)
 801adc6:	f7f6 fd61 	bl	801188c <ucdr_set_on_full_buffer_callback>
 801adca:	2000      	movs	r0, #0
 801adcc:	bd70      	pop	{r4, r5, r6, pc}
 801adce:	bf00      	nop
 801add0:	0801ad69 	.word	0x0801ad69

0801add4 <uxr_init_input_reliable_stream>:
 801add4:	b510      	push	{r4, lr}
 801add6:	e9c0 1200 	strd	r1, r2, [r0]
 801adda:	2400      	movs	r4, #0
 801addc:	9a02      	ldr	r2, [sp, #8]
 801adde:	8103      	strh	r3, [r0, #8]
 801ade0:	6102      	str	r2, [r0, #16]
 801ade2:	7504      	strb	r4, [r0, #20]
 801ade4:	b1c3      	cbz	r3, 801ae18 <uxr_init_input_reliable_stream+0x44>
 801ade6:	600c      	str	r4, [r1, #0]
 801ade8:	8901      	ldrh	r1, [r0, #8]
 801adea:	2901      	cmp	r1, #1
 801adec:	d914      	bls.n	801ae18 <uxr_init_input_reliable_stream+0x44>
 801adee:	f04f 0c01 	mov.w	ip, #1
 801adf2:	6843      	ldr	r3, [r0, #4]
 801adf4:	f10c 0e01 	add.w	lr, ip, #1
 801adf8:	fbbc f2f1 	udiv	r2, ip, r1
 801adfc:	fbb3 f3f1 	udiv	r3, r3, r1
 801ae00:	fb01 c212 	mls	r2, r1, r2, ip
 801ae04:	fa1f fc8e 	uxth.w	ip, lr
 801ae08:	b292      	uxth	r2, r2
 801ae0a:	fb02 f303 	mul.w	r3, r2, r3
 801ae0e:	6802      	ldr	r2, [r0, #0]
 801ae10:	50d4      	str	r4, [r2, r3]
 801ae12:	8901      	ldrh	r1, [r0, #8]
 801ae14:	4561      	cmp	r1, ip
 801ae16:	d8ec      	bhi.n	801adf2 <uxr_init_input_reliable_stream+0x1e>
 801ae18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ae1c:	60c3      	str	r3, [r0, #12]
 801ae1e:	bd10      	pop	{r4, pc}

0801ae20 <uxr_reset_input_reliable_stream>:
 801ae20:	8901      	ldrh	r1, [r0, #8]
 801ae22:	b1d9      	cbz	r1, 801ae5c <uxr_reset_input_reliable_stream+0x3c>
 801ae24:	b510      	push	{r4, lr}
 801ae26:	f04f 0e00 	mov.w	lr, #0
 801ae2a:	46f4      	mov	ip, lr
 801ae2c:	4674      	mov	r4, lr
 801ae2e:	6843      	ldr	r3, [r0, #4]
 801ae30:	f10e 0e01 	add.w	lr, lr, #1
 801ae34:	fbbc f2f1 	udiv	r2, ip, r1
 801ae38:	fbb3 f3f1 	udiv	r3, r3, r1
 801ae3c:	fb01 c212 	mls	r2, r1, r2, ip
 801ae40:	fa1f fc8e 	uxth.w	ip, lr
 801ae44:	b292      	uxth	r2, r2
 801ae46:	fb02 f303 	mul.w	r3, r2, r3
 801ae4a:	6802      	ldr	r2, [r0, #0]
 801ae4c:	50d4      	str	r4, [r2, r3]
 801ae4e:	8901      	ldrh	r1, [r0, #8]
 801ae50:	4561      	cmp	r1, ip
 801ae52:	d8ec      	bhi.n	801ae2e <uxr_reset_input_reliable_stream+0xe>
 801ae54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ae58:	60c3      	str	r3, [r0, #12]
 801ae5a:	bd10      	pop	{r4, pc}
 801ae5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ae60:	60c3      	str	r3, [r0, #12]
 801ae62:	4770      	bx	lr

0801ae64 <uxr_receive_reliable_message>:
 801ae64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ae68:	4604      	mov	r4, r0
 801ae6a:	460d      	mov	r5, r1
 801ae6c:	8901      	ldrh	r1, [r0, #8]
 801ae6e:	4617      	mov	r7, r2
 801ae70:	8980      	ldrh	r0, [r0, #12]
 801ae72:	4698      	mov	r8, r3
 801ae74:	f000 fde0 	bl	801ba38 <uxr_seq_num_add>
 801ae78:	4629      	mov	r1, r5
 801ae7a:	4606      	mov	r6, r0
 801ae7c:	89a0      	ldrh	r0, [r4, #12]
 801ae7e:	f000 fde3 	bl	801ba48 <uxr_seq_num_cmp>
 801ae82:	2800      	cmp	r0, #0
 801ae84:	db0a      	blt.n	801ae9c <uxr_receive_reliable_message+0x38>
 801ae86:	2600      	movs	r6, #0
 801ae88:	4629      	mov	r1, r5
 801ae8a:	89e0      	ldrh	r0, [r4, #14]
 801ae8c:	f000 fddc 	bl	801ba48 <uxr_seq_num_cmp>
 801ae90:	2800      	cmp	r0, #0
 801ae92:	da00      	bge.n	801ae96 <uxr_receive_reliable_message+0x32>
 801ae94:	81e5      	strh	r5, [r4, #14]
 801ae96:	4630      	mov	r0, r6
 801ae98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ae9c:	4630      	mov	r0, r6
 801ae9e:	4629      	mov	r1, r5
 801aea0:	f000 fdd2 	bl	801ba48 <uxr_seq_num_cmp>
 801aea4:	2800      	cmp	r0, #0
 801aea6:	dbee      	blt.n	801ae86 <uxr_receive_reliable_message+0x22>
 801aea8:	6923      	ldr	r3, [r4, #16]
 801aeaa:	4638      	mov	r0, r7
 801aeac:	4798      	blx	r3
 801aeae:	4681      	mov	r9, r0
 801aeb0:	2101      	movs	r1, #1
 801aeb2:	89a0      	ldrh	r0, [r4, #12]
 801aeb4:	f000 fdc0 	bl	801ba38 <uxr_seq_num_add>
 801aeb8:	f1b9 0f00 	cmp.w	r9, #0
 801aebc:	bf08      	it	eq
 801aebe:	4285      	cmpeq	r5, r0
 801aec0:	bf0c      	ite	eq
 801aec2:	2601      	moveq	r6, #1
 801aec4:	2600      	movne	r6, #0
 801aec6:	d104      	bne.n	801aed2 <uxr_receive_reliable_message+0x6e>
 801aec8:	2300      	movs	r3, #0
 801aeca:	9a08      	ldr	r2, [sp, #32]
 801aecc:	81a0      	strh	r0, [r4, #12]
 801aece:	7013      	strb	r3, [r2, #0]
 801aed0:	e7da      	b.n	801ae88 <uxr_receive_reliable_message+0x24>
 801aed2:	8922      	ldrh	r2, [r4, #8]
 801aed4:	6863      	ldr	r3, [r4, #4]
 801aed6:	fbb5 f0f2 	udiv	r0, r5, r2
 801aeda:	fbb3 f3f2 	udiv	r3, r3, r2
 801aede:	fb02 5010 	mls	r0, r2, r0, r5
 801aee2:	b280      	uxth	r0, r0
 801aee4:	fb03 f000 	mul.w	r0, r3, r0
 801aee8:	6823      	ldr	r3, [r4, #0]
 801aeea:	3004      	adds	r0, #4
 801aeec:	4418      	add	r0, r3
 801aeee:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	d1c7      	bne.n	801ae86 <uxr_receive_reliable_message+0x22>
 801aef6:	4639      	mov	r1, r7
 801aef8:	4642      	mov	r2, r8
 801aefa:	f002 fdc0 	bl	801da7e <memcpy>
 801aefe:	8921      	ldrh	r1, [r4, #8]
 801af00:	6863      	ldr	r3, [r4, #4]
 801af02:	fbb5 f2f1 	udiv	r2, r5, r1
 801af06:	fbb3 f3f1 	udiv	r3, r3, r1
 801af0a:	fb01 5212 	mls	r2, r1, r2, r5
 801af0e:	b292      	uxth	r2, r2
 801af10:	fb02 f303 	mul.w	r3, r2, r3
 801af14:	6822      	ldr	r2, [r4, #0]
 801af16:	f842 8003 	str.w	r8, [r2, r3]
 801af1a:	2301      	movs	r3, #1
 801af1c:	9a08      	ldr	r2, [sp, #32]
 801af1e:	7013      	strb	r3, [r2, #0]
 801af20:	f1b9 0f00 	cmp.w	r9, #0
 801af24:	d0af      	beq.n	801ae86 <uxr_receive_reliable_message+0x22>
 801af26:	89a6      	ldrh	r6, [r4, #12]
 801af28:	2101      	movs	r1, #1
 801af2a:	4630      	mov	r0, r6
 801af2c:	f000 fd84 	bl	801ba38 <uxr_seq_num_add>
 801af30:	8921      	ldrh	r1, [r4, #8]
 801af32:	6863      	ldr	r3, [r4, #4]
 801af34:	4606      	mov	r6, r0
 801af36:	fbb0 f2f1 	udiv	r2, r0, r1
 801af3a:	fbb3 f3f1 	udiv	r3, r3, r1
 801af3e:	fb01 0212 	mls	r2, r1, r2, r0
 801af42:	6820      	ldr	r0, [r4, #0]
 801af44:	b292      	uxth	r2, r2
 801af46:	fb02 f303 	mul.w	r3, r2, r3
 801af4a:	3304      	adds	r3, #4
 801af4c:	4418      	add	r0, r3
 801af4e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801af52:	2b00      	cmp	r3, #0
 801af54:	d097      	beq.n	801ae86 <uxr_receive_reliable_message+0x22>
 801af56:	6923      	ldr	r3, [r4, #16]
 801af58:	4798      	blx	r3
 801af5a:	2802      	cmp	r0, #2
 801af5c:	d002      	beq.n	801af64 <uxr_receive_reliable_message+0x100>
 801af5e:	2801      	cmp	r0, #1
 801af60:	d0e2      	beq.n	801af28 <uxr_receive_reliable_message+0xc4>
 801af62:	e790      	b.n	801ae86 <uxr_receive_reliable_message+0x22>
 801af64:	2601      	movs	r6, #1
 801af66:	e78f      	b.n	801ae88 <uxr_receive_reliable_message+0x24>

0801af68 <uxr_next_input_reliable_buffer_available>:
 801af68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af6c:	4604      	mov	r4, r0
 801af6e:	460f      	mov	r7, r1
 801af70:	8980      	ldrh	r0, [r0, #12]
 801af72:	2101      	movs	r1, #1
 801af74:	4690      	mov	r8, r2
 801af76:	f000 fd5f 	bl	801ba38 <uxr_seq_num_add>
 801af7a:	8922      	ldrh	r2, [r4, #8]
 801af7c:	6866      	ldr	r6, [r4, #4]
 801af7e:	fbb0 f3f2 	udiv	r3, r0, r2
 801af82:	fbb6 f6f2 	udiv	r6, r6, r2
 801af86:	fb02 0313 	mls	r3, r2, r3, r0
 801af8a:	b29b      	uxth	r3, r3
 801af8c:	fb03 f606 	mul.w	r6, r3, r6
 801af90:	6823      	ldr	r3, [r4, #0]
 801af92:	3604      	adds	r6, #4
 801af94:	441e      	add	r6, r3
 801af96:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801af9a:	f1b9 0f00 	cmp.w	r9, #0
 801af9e:	d023      	beq.n	801afe8 <uxr_next_input_reliable_buffer_available+0x80>
 801afa0:	4605      	mov	r5, r0
 801afa2:	6923      	ldr	r3, [r4, #16]
 801afa4:	4630      	mov	r0, r6
 801afa6:	4798      	blx	r3
 801afa8:	4682      	mov	sl, r0
 801afaa:	b300      	cbz	r0, 801afee <uxr_next_input_reliable_buffer_available+0x86>
 801afac:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801afb0:	2101      	movs	r1, #1
 801afb2:	4650      	mov	r0, sl
 801afb4:	f000 fd40 	bl	801ba38 <uxr_seq_num_add>
 801afb8:	8921      	ldrh	r1, [r4, #8]
 801afba:	4682      	mov	sl, r0
 801afbc:	6863      	ldr	r3, [r4, #4]
 801afbe:	6820      	ldr	r0, [r4, #0]
 801afc0:	fbba f2f1 	udiv	r2, sl, r1
 801afc4:	fbb3 f3f1 	udiv	r3, r3, r1
 801afc8:	fb01 a212 	mls	r2, r1, r2, sl
 801afcc:	b292      	uxth	r2, r2
 801afce:	fb02 f303 	mul.w	r3, r2, r3
 801afd2:	3304      	adds	r3, #4
 801afd4:	4418      	add	r0, r3
 801afd6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801afda:	b12b      	cbz	r3, 801afe8 <uxr_next_input_reliable_buffer_available+0x80>
 801afdc:	6923      	ldr	r3, [r4, #16]
 801afde:	4798      	blx	r3
 801afe0:	2802      	cmp	r0, #2
 801afe2:	d01b      	beq.n	801b01c <uxr_next_input_reliable_buffer_available+0xb4>
 801afe4:	2801      	cmp	r0, #1
 801afe6:	d0e3      	beq.n	801afb0 <uxr_next_input_reliable_buffer_available+0x48>
 801afe8:	2000      	movs	r0, #0
 801afea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801afee:	464a      	mov	r2, r9
 801aff0:	4631      	mov	r1, r6
 801aff2:	4638      	mov	r0, r7
 801aff4:	f7f6 fc76 	bl	80118e4 <ucdr_init_buffer>
 801aff8:	8921      	ldrh	r1, [r4, #8]
 801affa:	6863      	ldr	r3, [r4, #4]
 801affc:	2001      	movs	r0, #1
 801affe:	fbb5 f2f1 	udiv	r2, r5, r1
 801b002:	fbb3 f3f1 	udiv	r3, r3, r1
 801b006:	fb01 5212 	mls	r2, r1, r2, r5
 801b00a:	b292      	uxth	r2, r2
 801b00c:	fb02 f303 	mul.w	r3, r2, r3
 801b010:	6822      	ldr	r2, [r4, #0]
 801b012:	f842 a003 	str.w	sl, [r2, r3]
 801b016:	81a5      	strh	r5, [r4, #12]
 801b018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b01c:	8920      	ldrh	r0, [r4, #8]
 801b01e:	eb06 0108 	add.w	r1, r6, r8
 801b022:	6863      	ldr	r3, [r4, #4]
 801b024:	eba9 0208 	sub.w	r2, r9, r8
 801b028:	fbb5 f6f0 	udiv	r6, r5, r0
 801b02c:	fbb3 f3f0 	udiv	r3, r3, r0
 801b030:	fb00 5516 	mls	r5, r0, r6, r5
 801b034:	2000      	movs	r0, #0
 801b036:	b2ad      	uxth	r5, r5
 801b038:	fb03 f505 	mul.w	r5, r3, r5
 801b03c:	6823      	ldr	r3, [r4, #0]
 801b03e:	5158      	str	r0, [r3, r5]
 801b040:	4638      	mov	r0, r7
 801b042:	f7f6 fc4f 	bl	80118e4 <ucdr_init_buffer>
 801b046:	4638      	mov	r0, r7
 801b048:	4622      	mov	r2, r4
 801b04a:	4903      	ldr	r1, [pc, #12]	; (801b058 <uxr_next_input_reliable_buffer_available+0xf0>)
 801b04c:	f7f6 fc1e 	bl	801188c <ucdr_set_on_full_buffer_callback>
 801b050:	2001      	movs	r0, #1
 801b052:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801b056:	e7c8      	b.n	801afea <uxr_next_input_reliable_buffer_available+0x82>
 801b058:	0801ad69 	.word	0x0801ad69

0801b05c <uxr_process_heartbeat>:
 801b05c:	b538      	push	{r3, r4, r5, lr}
 801b05e:	4611      	mov	r1, r2
 801b060:	4604      	mov	r4, r0
 801b062:	89c0      	ldrh	r0, [r0, #14]
 801b064:	4615      	mov	r5, r2
 801b066:	f000 fcef 	bl	801ba48 <uxr_seq_num_cmp>
 801b06a:	2800      	cmp	r0, #0
 801b06c:	bfb8      	it	lt
 801b06e:	81e5      	strhlt	r5, [r4, #14]
 801b070:	bd38      	pop	{r3, r4, r5, pc}
 801b072:	bf00      	nop

0801b074 <uxr_compute_acknack>:
 801b074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b078:	8903      	ldrh	r3, [r0, #8]
 801b07a:	4604      	mov	r4, r0
 801b07c:	460f      	mov	r7, r1
 801b07e:	8985      	ldrh	r5, [r0, #12]
 801b080:	b1db      	cbz	r3, 801b0ba <uxr_compute_acknack+0x46>
 801b082:	4628      	mov	r0, r5
 801b084:	2601      	movs	r6, #1
 801b086:	e004      	b.n	801b092 <uxr_compute_acknack+0x1e>
 801b088:	4566      	cmp	r6, ip
 801b08a:	f106 0601 	add.w	r6, r6, #1
 801b08e:	d214      	bcs.n	801b0ba <uxr_compute_acknack+0x46>
 801b090:	89a0      	ldrh	r0, [r4, #12]
 801b092:	b2b1      	uxth	r1, r6
 801b094:	f000 fcd0 	bl	801ba38 <uxr_seq_num_add>
 801b098:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801b09c:	fbb0 f2fc 	udiv	r2, r0, ip
 801b0a0:	e9d4 1300 	ldrd	r1, r3, [r4]
 801b0a4:	fb0c 0212 	mls	r2, ip, r2, r0
 801b0a8:	fbb3 f3fc 	udiv	r3, r3, ip
 801b0ac:	b292      	uxth	r2, r2
 801b0ae:	fb02 f303 	mul.w	r3, r2, r3
 801b0b2:	58cb      	ldr	r3, [r1, r3]
 801b0b4:	2b00      	cmp	r3, #0
 801b0b6:	d1e7      	bne.n	801b088 <uxr_compute_acknack+0x14>
 801b0b8:	4605      	mov	r5, r0
 801b0ba:	803d      	strh	r5, [r7, #0]
 801b0bc:	2101      	movs	r1, #1
 801b0be:	89e6      	ldrh	r6, [r4, #14]
 801b0c0:	4628      	mov	r0, r5
 801b0c2:	f000 fcbd 	bl	801ba40 <uxr_seq_num_sub>
 801b0c6:	4601      	mov	r1, r0
 801b0c8:	4630      	mov	r0, r6
 801b0ca:	f000 fcb9 	bl	801ba40 <uxr_seq_num_sub>
 801b0ce:	4606      	mov	r6, r0
 801b0d0:	b328      	cbz	r0, 801b11e <uxr_compute_acknack+0xaa>
 801b0d2:	f04f 0900 	mov.w	r9, #0
 801b0d6:	f04f 0801 	mov.w	r8, #1
 801b0da:	464d      	mov	r5, r9
 801b0dc:	fa1f f189 	uxth.w	r1, r9
 801b0e0:	8838      	ldrh	r0, [r7, #0]
 801b0e2:	f000 fca9 	bl	801ba38 <uxr_seq_num_add>
 801b0e6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801b0ea:	6861      	ldr	r1, [r4, #4]
 801b0ec:	fa08 fe09 	lsl.w	lr, r8, r9
 801b0f0:	6822      	ldr	r2, [r4, #0]
 801b0f2:	f109 0901 	add.w	r9, r9, #1
 801b0f6:	ea4e 0e05 	orr.w	lr, lr, r5
 801b0fa:	fbb0 f3fc 	udiv	r3, r0, ip
 801b0fe:	fbb1 f1fc 	udiv	r1, r1, ip
 801b102:	fb03 001c 	mls	r0, r3, ip, r0
 801b106:	b283      	uxth	r3, r0
 801b108:	fb01 f303 	mul.w	r3, r1, r3
 801b10c:	58d3      	ldr	r3, [r2, r3]
 801b10e:	b90b      	cbnz	r3, 801b114 <uxr_compute_acknack+0xa0>
 801b110:	fa1f f58e 	uxth.w	r5, lr
 801b114:	454e      	cmp	r6, r9
 801b116:	d1e1      	bne.n	801b0dc <uxr_compute_acknack+0x68>
 801b118:	4628      	mov	r0, r5
 801b11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b11e:	4605      	mov	r5, r0
 801b120:	4628      	mov	r0, r5
 801b122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b126:	bf00      	nop

0801b128 <uxr_init_output_best_effort_stream>:
 801b128:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801b12c:	6001      	str	r1, [r0, #0]
 801b12e:	7303      	strb	r3, [r0, #12]
 801b130:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801b134:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801b138:	4770      	bx	lr
 801b13a:	bf00      	nop

0801b13c <uxr_reset_output_best_effort_stream>:
 801b13c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b140:	7b03      	ldrb	r3, [r0, #12]
 801b142:	81c2      	strh	r2, [r0, #14]
 801b144:	6043      	str	r3, [r0, #4]
 801b146:	4770      	bx	lr

0801b148 <uxr_prepare_best_effort_buffer_to_write>:
 801b148:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b14a:	4604      	mov	r4, r0
 801b14c:	b083      	sub	sp, #12
 801b14e:	6840      	ldr	r0, [r0, #4]
 801b150:	460d      	mov	r5, r1
 801b152:	4616      	mov	r6, r2
 801b154:	f7f8 f8bc 	bl	80132d0 <uxr_submessage_padding>
 801b158:	6863      	ldr	r3, [r4, #4]
 801b15a:	4418      	add	r0, r3
 801b15c:	68a3      	ldr	r3, [r4, #8]
 801b15e:	1942      	adds	r2, r0, r5
 801b160:	4293      	cmp	r3, r2
 801b162:	bf2c      	ite	cs
 801b164:	2701      	movcs	r7, #1
 801b166:	2700      	movcc	r7, #0
 801b168:	d202      	bcs.n	801b170 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801b16a:	4638      	mov	r0, r7
 801b16c:	b003      	add	sp, #12
 801b16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b170:	9000      	str	r0, [sp, #0]
 801b172:	2300      	movs	r3, #0
 801b174:	4630      	mov	r0, r6
 801b176:	6821      	ldr	r1, [r4, #0]
 801b178:	f7f6 fba2 	bl	80118c0 <ucdr_init_buffer_origin_offset>
 801b17c:	6861      	ldr	r1, [r4, #4]
 801b17e:	4638      	mov	r0, r7
 801b180:	4429      	add	r1, r5
 801b182:	6061      	str	r1, [r4, #4]
 801b184:	b003      	add	sp, #12
 801b186:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b188 <uxr_prepare_best_effort_buffer_to_send>:
 801b188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b18c:	4604      	mov	r4, r0
 801b18e:	461d      	mov	r5, r3
 801b190:	6840      	ldr	r0, [r0, #4]
 801b192:	7b23      	ldrb	r3, [r4, #12]
 801b194:	4298      	cmp	r0, r3
 801b196:	bf8c      	ite	hi
 801b198:	2601      	movhi	r6, #1
 801b19a:	2600      	movls	r6, #0
 801b19c:	d802      	bhi.n	801b1a4 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801b19e:	4630      	mov	r0, r6
 801b1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b1a4:	4688      	mov	r8, r1
 801b1a6:	89e0      	ldrh	r0, [r4, #14]
 801b1a8:	2101      	movs	r1, #1
 801b1aa:	4617      	mov	r7, r2
 801b1ac:	f000 fc44 	bl	801ba38 <uxr_seq_num_add>
 801b1b0:	6823      	ldr	r3, [r4, #0]
 801b1b2:	81e0      	strh	r0, [r4, #14]
 801b1b4:	8028      	strh	r0, [r5, #0]
 801b1b6:	4630      	mov	r0, r6
 801b1b8:	f8c8 3000 	str.w	r3, [r8]
 801b1bc:	6863      	ldr	r3, [r4, #4]
 801b1be:	603b      	str	r3, [r7, #0]
 801b1c0:	7b23      	ldrb	r3, [r4, #12]
 801b1c2:	6063      	str	r3, [r4, #4]
 801b1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b1c8 <on_full_output_buffer>:
 801b1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1ca:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801b1ce:	460c      	mov	r4, r1
 801b1d0:	6803      	ldr	r3, [r0, #0]
 801b1d2:	4605      	mov	r5, r0
 801b1d4:	7b26      	ldrb	r6, [r4, #12]
 801b1d6:	e9d1 1200 	ldrd	r1, r2, [r1]
 801b1da:	fbb2 f2fc 	udiv	r2, r2, ip
 801b1de:	eba3 0e01 	sub.w	lr, r3, r1
 801b1e2:	6903      	ldr	r3, [r0, #16]
 801b1e4:	fbbe fef2 	udiv	lr, lr, r2
 801b1e8:	f10e 0e01 	add.w	lr, lr, #1
 801b1ec:	fa1f fe8e 	uxth.w	lr, lr
 801b1f0:	fbbe f7fc 	udiv	r7, lr, ip
 801b1f4:	fb0c ec17 	mls	ip, ip, r7, lr
 801b1f8:	fa1f fc8c 	uxth.w	ip, ip
 801b1fc:	fb02 fc0c 	mul.w	ip, r2, ip
 801b200:	f851 200c 	ldr.w	r2, [r1, ip]
 801b204:	44b4      	add	ip, r6
 801b206:	1b92      	subs	r2, r2, r6
 801b208:	f10c 0c08 	add.w	ip, ip, #8
 801b20c:	3a04      	subs	r2, #4
 801b20e:	4461      	add	r1, ip
 801b210:	f7f6 fb60 	bl	80118d4 <ucdr_init_buffer_origin>
 801b214:	4628      	mov	r0, r5
 801b216:	4622      	mov	r2, r4
 801b218:	4902      	ldr	r1, [pc, #8]	; (801b224 <on_full_output_buffer+0x5c>)
 801b21a:	f7f6 fb37 	bl	801188c <ucdr_set_on_full_buffer_callback>
 801b21e:	2000      	movs	r0, #0
 801b220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b222:	bf00      	nop
 801b224:	0801b1c9 	.word	0x0801b1c9

0801b228 <uxr_init_output_reliable_stream>:
 801b228:	b530      	push	{r4, r5, lr}
 801b22a:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801b22e:	8103      	strh	r3, [r0, #8]
 801b230:	7304      	strb	r4, [r0, #12]
 801b232:	e9c0 1200 	strd	r1, r2, [r0]
 801b236:	b1e3      	cbz	r3, 801b272 <uxr_init_output_reliable_stream+0x4a>
 801b238:	600c      	str	r4, [r1, #0]
 801b23a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801b23e:	f1bc 0f01 	cmp.w	ip, #1
 801b242:	d916      	bls.n	801b272 <uxr_init_output_reliable_stream+0x4a>
 801b244:	f04f 0e01 	mov.w	lr, #1
 801b248:	6843      	ldr	r3, [r0, #4]
 801b24a:	f10e 0501 	add.w	r5, lr, #1
 801b24e:	7b04      	ldrb	r4, [r0, #12]
 801b250:	6801      	ldr	r1, [r0, #0]
 801b252:	fbbe f2fc 	udiv	r2, lr, ip
 801b256:	fbb3 f3fc 	udiv	r3, r3, ip
 801b25a:	fb0c e212 	mls	r2, ip, r2, lr
 801b25e:	fa1f fe85 	uxth.w	lr, r5
 801b262:	b292      	uxth	r2, r2
 801b264:	fb02 f303 	mul.w	r3, r2, r3
 801b268:	50cc      	str	r4, [r1, r3]
 801b26a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801b26e:	45f4      	cmp	ip, lr
 801b270:	d8ea      	bhi.n	801b248 <uxr_init_output_reliable_stream+0x20>
 801b272:	4b07      	ldr	r3, [pc, #28]	; (801b290 <uxr_init_output_reliable_stream+0x68>)
 801b274:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b278:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801b27c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801b280:	f8c0 300e 	str.w	r3, [r0, #14]
 801b284:	2300      	movs	r3, #0
 801b286:	8242      	strh	r2, [r0, #18]
 801b288:	8403      	strh	r3, [r0, #32]
 801b28a:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801b28e:	bd30      	pop	{r4, r5, pc}
 801b290:	ffff0000 	.word	0xffff0000
 801b294:	00000000 	.word	0x00000000

0801b298 <uxr_reset_output_reliable_stream>:
 801b298:	8901      	ldrh	r1, [r0, #8]
 801b29a:	b510      	push	{r4, lr}
 801b29c:	b1b1      	cbz	r1, 801b2cc <uxr_reset_output_reliable_stream+0x34>
 801b29e:	f04f 0e00 	mov.w	lr, #0
 801b2a2:	46f4      	mov	ip, lr
 801b2a4:	6843      	ldr	r3, [r0, #4]
 801b2a6:	f10e 0e01 	add.w	lr, lr, #1
 801b2aa:	7b04      	ldrb	r4, [r0, #12]
 801b2ac:	fbbc f2f1 	udiv	r2, ip, r1
 801b2b0:	fbb3 f3f1 	udiv	r3, r3, r1
 801b2b4:	fb01 c212 	mls	r2, r1, r2, ip
 801b2b8:	fa1f fc8e 	uxth.w	ip, lr
 801b2bc:	b292      	uxth	r2, r2
 801b2be:	fb02 f303 	mul.w	r3, r2, r3
 801b2c2:	6802      	ldr	r2, [r0, #0]
 801b2c4:	50d4      	str	r4, [r2, r3]
 801b2c6:	8901      	ldrh	r1, [r0, #8]
 801b2c8:	4561      	cmp	r1, ip
 801b2ca:	d8eb      	bhi.n	801b2a4 <uxr_reset_output_reliable_stream+0xc>
 801b2cc:	4b08      	ldr	r3, [pc, #32]	; (801b2f0 <uxr_reset_output_reliable_stream+0x58>)
 801b2ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b2d2:	ed9f 7b05 	vldr	d7, [pc, #20]	; 801b2e8 <uxr_reset_output_reliable_stream+0x50>
 801b2d6:	f8c0 300e 	str.w	r3, [r0, #14]
 801b2da:	2300      	movs	r3, #0
 801b2dc:	8242      	strh	r2, [r0, #18]
 801b2de:	8403      	strh	r3, [r0, #32]
 801b2e0:	ed80 7b06 	vstr	d7, [r0, #24]
 801b2e4:	bd10      	pop	{r4, pc}
 801b2e6:	bf00      	nop
 801b2e8:	ffffffff 	.word	0xffffffff
 801b2ec:	7fffffff 	.word	0x7fffffff
 801b2f0:	ffff0000 	.word	0xffff0000

0801b2f4 <uxr_prepare_reliable_buffer_to_write>:
 801b2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2f8:	4604      	mov	r4, r0
 801b2fa:	b091      	sub	sp, #68	; 0x44
 801b2fc:	8900      	ldrh	r0, [r0, #8]
 801b2fe:	468b      	mov	fp, r1
 801b300:	89e6      	ldrh	r6, [r4, #14]
 801b302:	9204      	str	r2, [sp, #16]
 801b304:	6865      	ldr	r5, [r4, #4]
 801b306:	6823      	ldr	r3, [r4, #0]
 801b308:	f894 900c 	ldrb.w	r9, [r4, #12]
 801b30c:	fbb6 f2f0 	udiv	r2, r6, r0
 801b310:	fbb5 f5f0 	udiv	r5, r5, r0
 801b314:	fb00 6212 	mls	r2, r0, r2, r6
 801b318:	1f2f      	subs	r7, r5, #4
 801b31a:	b292      	uxth	r2, r2
 801b31c:	fb05 3202 	mla	r2, r5, r2, r3
 801b320:	1d11      	adds	r1, r2, #4
 801b322:	f8d2 8000 	ldr.w	r8, [r2]
 801b326:	9103      	str	r1, [sp, #12]
 801b328:	2800      	cmp	r0, #0
 801b32a:	f000 814a 	beq.w	801b5c2 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801b32e:	f04f 0c00 	mov.w	ip, #0
 801b332:	46e2      	mov	sl, ip
 801b334:	4661      	mov	r1, ip
 801b336:	f10c 0c01 	add.w	ip, ip, #1
 801b33a:	fbb1 f2f0 	udiv	r2, r1, r0
 801b33e:	fb00 1212 	mls	r2, r0, r2, r1
 801b342:	fa1f f18c 	uxth.w	r1, ip
 801b346:	b292      	uxth	r2, r2
 801b348:	fb05 f202 	mul.w	r2, r5, r2
 801b34c:	589a      	ldr	r2, [r3, r2]
 801b34e:	454a      	cmp	r2, r9
 801b350:	d103      	bne.n	801b35a <uxr_prepare_reliable_buffer_to_write+0x66>
 801b352:	f10a 0a01 	add.w	sl, sl, #1
 801b356:	fa1f fa8a 	uxth.w	sl, sl
 801b35a:	4281      	cmp	r1, r0
 801b35c:	d3eb      	bcc.n	801b336 <uxr_prepare_reliable_buffer_to_write+0x42>
 801b35e:	4640      	mov	r0, r8
 801b360:	2104      	movs	r1, #4
 801b362:	f8cd a014 	str.w	sl, [sp, #20]
 801b366:	f7f6 fac1 	bl	80118ec <ucdr_alignment>
 801b36a:	4480      	add	r8, r0
 801b36c:	eb08 020b 	add.w	r2, r8, fp
 801b370:	42ba      	cmp	r2, r7
 801b372:	f240 80ca 	bls.w	801b50a <uxr_prepare_reliable_buffer_to_write+0x216>
 801b376:	7b22      	ldrb	r2, [r4, #12]
 801b378:	445a      	add	r2, fp
 801b37a:	42ba      	cmp	r2, r7
 801b37c:	f240 80b2 	bls.w	801b4e4 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801b380:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801b384:	b2bb      	uxth	r3, r7
 801b386:	eba2 0209 	sub.w	r2, r2, r9
 801b38a:	441a      	add	r2, r3
 801b38c:	b292      	uxth	r2, r2
 801b38e:	fb0a f902 	mul.w	r9, sl, r2
 801b392:	9205      	str	r2, [sp, #20]
 801b394:	45d9      	cmp	r9, fp
 801b396:	9206      	str	r2, [sp, #24]
 801b398:	f0c0 80b3 	bcc.w	801b502 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b39c:	f108 0204 	add.w	r2, r8, #4
 801b3a0:	42ba      	cmp	r2, r7
 801b3a2:	f080 80da 	bcs.w	801b55a <uxr_prepare_reliable_buffer_to_write+0x266>
 801b3a6:	f1a3 0904 	sub.w	r9, r3, #4
 801b3aa:	9b05      	ldr	r3, [sp, #20]
 801b3ac:	eba9 0908 	sub.w	r9, r9, r8
 801b3b0:	fa1f f989 	uxth.w	r9, r9
 801b3b4:	ebab 0b09 	sub.w	fp, fp, r9
 801b3b8:	fbbb f2f3 	udiv	r2, fp, r3
 801b3bc:	fb03 b312 	mls	r3, r3, r2, fp
 801b3c0:	2b00      	cmp	r3, #0
 801b3c2:	f040 80c4 	bne.w	801b54e <uxr_prepare_reliable_buffer_to_write+0x25a>
 801b3c6:	b293      	uxth	r3, r2
 801b3c8:	4553      	cmp	r3, sl
 801b3ca:	f200 809a 	bhi.w	801b502 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	f000 80f9 	beq.w	801b5c6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801b3d4:	f8cd 801c 	str.w	r8, [sp, #28]
 801b3d8:	f04f 0a00 	mov.w	sl, #0
 801b3dc:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801b3e0:	f10d 0b20 	add.w	fp, sp, #32
 801b3e4:	9505      	str	r5, [sp, #20]
 801b3e6:	461d      	mov	r5, r3
 801b3e8:	e000      	b.n	801b3ec <uxr_prepare_reliable_buffer_to_write+0xf8>
 801b3ea:	46c1      	mov	r9, r8
 801b3ec:	8922      	ldrh	r2, [r4, #8]
 801b3ee:	4658      	mov	r0, fp
 801b3f0:	6863      	ldr	r3, [r4, #4]
 801b3f2:	f10a 0a01 	add.w	sl, sl, #1
 801b3f6:	fbb6 f1f2 	udiv	r1, r6, r2
 801b3fa:	fbb3 f3f2 	udiv	r3, r3, r2
 801b3fe:	fb02 6111 	mls	r1, r2, r1, r6
 801b402:	463a      	mov	r2, r7
 801b404:	b289      	uxth	r1, r1
 801b406:	fb03 f101 	mul.w	r1, r3, r1
 801b40a:	6823      	ldr	r3, [r4, #0]
 801b40c:	3104      	adds	r1, #4
 801b40e:	4419      	add	r1, r3
 801b410:	2300      	movs	r3, #0
 801b412:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801b416:	f8cd c000 	str.w	ip, [sp]
 801b41a:	f7f6 fa51 	bl	80118c0 <ucdr_init_buffer_origin_offset>
 801b41e:	464a      	mov	r2, r9
 801b420:	2300      	movs	r3, #0
 801b422:	210d      	movs	r1, #13
 801b424:	4658      	mov	r0, fp
 801b426:	f7f7 ff13 	bl	8013250 <uxr_buffer_submessage_header>
 801b42a:	8921      	ldrh	r1, [r4, #8]
 801b42c:	6863      	ldr	r3, [r4, #4]
 801b42e:	4630      	mov	r0, r6
 801b430:	fbb6 f2f1 	udiv	r2, r6, r1
 801b434:	fbb3 f3f1 	udiv	r3, r3, r1
 801b438:	fb01 6212 	mls	r2, r1, r2, r6
 801b43c:	2101      	movs	r1, #1
 801b43e:	b292      	uxth	r2, r2
 801b440:	fb02 f303 	mul.w	r3, r2, r3
 801b444:	6822      	ldr	r2, [r4, #0]
 801b446:	50d7      	str	r7, [r2, r3]
 801b448:	f000 faf6 	bl	801ba38 <uxr_seq_num_add>
 801b44c:	4606      	mov	r6, r0
 801b44e:	fa1f f38a 	uxth.w	r3, sl
 801b452:	429d      	cmp	r5, r3
 801b454:	d8c9      	bhi.n	801b3ea <uxr_prepare_reliable_buffer_to_write+0xf6>
 801b456:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801b45a:	9d05      	ldr	r5, [sp, #20]
 801b45c:	8920      	ldrh	r0, [r4, #8]
 801b45e:	463a      	mov	r2, r7
 801b460:	6863      	ldr	r3, [r4, #4]
 801b462:	fbb6 f1f0 	udiv	r1, r6, r0
 801b466:	fbb3 f3f0 	udiv	r3, r3, r0
 801b46a:	fb00 6111 	mls	r1, r0, r1, r6
 801b46e:	4658      	mov	r0, fp
 801b470:	b289      	uxth	r1, r1
 801b472:	fb01 f303 	mul.w	r3, r1, r3
 801b476:	6821      	ldr	r1, [r4, #0]
 801b478:	3304      	adds	r3, #4
 801b47a:	4419      	add	r1, r3
 801b47c:	2300      	movs	r3, #0
 801b47e:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801b482:	9700      	str	r7, [sp, #0]
 801b484:	f7f6 fa1c 	bl	80118c0 <ucdr_init_buffer_origin_offset>
 801b488:	9f06      	ldr	r7, [sp, #24]
 801b48a:	4658      	mov	r0, fp
 801b48c:	2302      	movs	r3, #2
 801b48e:	b2ba      	uxth	r2, r7
 801b490:	210d      	movs	r1, #13
 801b492:	f7f7 fedd 	bl	8013250 <uxr_buffer_submessage_header>
 801b496:	f108 0104 	add.w	r1, r8, #4
 801b49a:	9b03      	ldr	r3, [sp, #12]
 801b49c:	f1a5 0208 	sub.w	r2, r5, #8
 801b4a0:	8925      	ldrh	r5, [r4, #8]
 801b4a2:	440b      	add	r3, r1
 801b4a4:	eba2 0208 	sub.w	r2, r2, r8
 801b4a8:	fbb6 f0f5 	udiv	r0, r6, r5
 801b4ac:	4619      	mov	r1, r3
 801b4ae:	6863      	ldr	r3, [r4, #4]
 801b4b0:	fb05 6010 	mls	r0, r5, r0, r6
 801b4b4:	fbb3 f3f5 	udiv	r3, r3, r5
 801b4b8:	b280      	uxth	r0, r0
 801b4ba:	6825      	ldr	r5, [r4, #0]
 801b4bc:	fb00 f303 	mul.w	r3, r0, r3
 801b4c0:	7b20      	ldrb	r0, [r4, #12]
 801b4c2:	3004      	adds	r0, #4
 801b4c4:	4438      	add	r0, r7
 801b4c6:	50e8      	str	r0, [r5, r3]
 801b4c8:	9d04      	ldr	r5, [sp, #16]
 801b4ca:	4628      	mov	r0, r5
 801b4cc:	f7f6 fa0a 	bl	80118e4 <ucdr_init_buffer>
 801b4d0:	4628      	mov	r0, r5
 801b4d2:	4622      	mov	r2, r4
 801b4d4:	493d      	ldr	r1, [pc, #244]	; (801b5cc <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801b4d6:	f7f6 f9d9 	bl	801188c <ucdr_set_on_full_buffer_callback>
 801b4da:	2001      	movs	r0, #1
 801b4dc:	81e6      	strh	r6, [r4, #14]
 801b4de:	b011      	add	sp, #68	; 0x44
 801b4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4e4:	2101      	movs	r1, #1
 801b4e6:	89e0      	ldrh	r0, [r4, #14]
 801b4e8:	f000 faa6 	bl	801ba38 <uxr_seq_num_add>
 801b4ec:	4605      	mov	r5, r0
 801b4ee:	8921      	ldrh	r1, [r4, #8]
 801b4f0:	8a60      	ldrh	r0, [r4, #18]
 801b4f2:	f000 faa1 	bl	801ba38 <uxr_seq_num_add>
 801b4f6:	4601      	mov	r1, r0
 801b4f8:	4628      	mov	r0, r5
 801b4fa:	f000 faa5 	bl	801ba48 <uxr_seq_num_cmp>
 801b4fe:	2800      	cmp	r0, #0
 801b500:	dd44      	ble.n	801b58c <uxr_prepare_reliable_buffer_to_write+0x298>
 801b502:	2000      	movs	r0, #0
 801b504:	b011      	add	sp, #68	; 0x44
 801b506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b50a:	8921      	ldrh	r1, [r4, #8]
 801b50c:	8a60      	ldrh	r0, [r4, #18]
 801b50e:	9205      	str	r2, [sp, #20]
 801b510:	f000 fa92 	bl	801ba38 <uxr_seq_num_add>
 801b514:	4601      	mov	r1, r0
 801b516:	4630      	mov	r0, r6
 801b518:	f000 fa96 	bl	801ba48 <uxr_seq_num_cmp>
 801b51c:	2800      	cmp	r0, #0
 801b51e:	9a05      	ldr	r2, [sp, #20]
 801b520:	dcef      	bgt.n	801b502 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b522:	8925      	ldrh	r5, [r4, #8]
 801b524:	e9d4 7300 	ldrd	r7, r3, [r4]
 801b528:	fbb6 f4f5 	udiv	r4, r6, r5
 801b52c:	fbb3 f3f5 	udiv	r3, r3, r5
 801b530:	fb05 6414 	mls	r4, r5, r4, r6
 801b534:	b2a4      	uxth	r4, r4
 801b536:	fb04 f303 	mul.w	r3, r4, r3
 801b53a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801b53e:	50fa      	str	r2, [r7, r3]
 801b540:	2300      	movs	r3, #0
 801b542:	f8cd 8000 	str.w	r8, [sp]
 801b546:	f7f6 f9bb 	bl	80118c0 <ucdr_init_buffer_origin_offset>
 801b54a:	2001      	movs	r0, #1
 801b54c:	e7da      	b.n	801b504 <uxr_prepare_reliable_buffer_to_write+0x210>
 801b54e:	3201      	adds	r2, #1
 801b550:	9306      	str	r3, [sp, #24]
 801b552:	b293      	uxth	r3, r2
 801b554:	4553      	cmp	r3, sl
 801b556:	d8d4      	bhi.n	801b502 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b558:	e739      	b.n	801b3ce <uxr_prepare_reliable_buffer_to_write+0xda>
 801b55a:	4630      	mov	r0, r6
 801b55c:	2101      	movs	r1, #1
 801b55e:	9307      	str	r3, [sp, #28]
 801b560:	f000 fa6a 	bl	801ba38 <uxr_seq_num_add>
 801b564:	4606      	mov	r6, r0
 801b566:	8920      	ldrh	r0, [r4, #8]
 801b568:	6862      	ldr	r2, [r4, #4]
 801b56a:	fbb6 f1f0 	udiv	r1, r6, r0
 801b56e:	fbb2 f2f0 	udiv	r2, r2, r0
 801b572:	fb00 6111 	mls	r1, r0, r1, r6
 801b576:	b289      	uxth	r1, r1
 801b578:	fb01 f202 	mul.w	r2, r1, r2
 801b57c:	6821      	ldr	r1, [r4, #0]
 801b57e:	3204      	adds	r2, #4
 801b580:	188b      	adds	r3, r1, r2
 801b582:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801b586:	9303      	str	r3, [sp, #12]
 801b588:	9b07      	ldr	r3, [sp, #28]
 801b58a:	e70c      	b.n	801b3a6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801b58c:	8921      	ldrh	r1, [r4, #8]
 801b58e:	6863      	ldr	r3, [r4, #4]
 801b590:	9804      	ldr	r0, [sp, #16]
 801b592:	fbb5 f2f1 	udiv	r2, r5, r1
 801b596:	fbb3 f3f1 	udiv	r3, r3, r1
 801b59a:	fb01 5212 	mls	r2, r1, r2, r5
 801b59e:	6821      	ldr	r1, [r4, #0]
 801b5a0:	b292      	uxth	r2, r2
 801b5a2:	fb02 f303 	mul.w	r3, r2, r3
 801b5a6:	7b22      	ldrb	r2, [r4, #12]
 801b5a8:	3304      	adds	r3, #4
 801b5aa:	445a      	add	r2, fp
 801b5ac:	4419      	add	r1, r3
 801b5ae:	f841 2c04 	str.w	r2, [r1, #-4]
 801b5b2:	7b23      	ldrb	r3, [r4, #12]
 801b5b4:	9300      	str	r3, [sp, #0]
 801b5b6:	2300      	movs	r3, #0
 801b5b8:	f7f6 f982 	bl	80118c0 <ucdr_init_buffer_origin_offset>
 801b5bc:	2001      	movs	r0, #1
 801b5be:	81e5      	strh	r5, [r4, #14]
 801b5c0:	e7a0      	b.n	801b504 <uxr_prepare_reliable_buffer_to_write+0x210>
 801b5c2:	4682      	mov	sl, r0
 801b5c4:	e6cb      	b.n	801b35e <uxr_prepare_reliable_buffer_to_write+0x6a>
 801b5c6:	f10d 0b20 	add.w	fp, sp, #32
 801b5ca:	e747      	b.n	801b45c <uxr_prepare_reliable_buffer_to_write+0x168>
 801b5cc:	0801b1c9 	.word	0x0801b1c9

0801b5d0 <uxr_prepare_next_reliable_buffer_to_send>:
 801b5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5d2:	4604      	mov	r4, r0
 801b5d4:	461d      	mov	r5, r3
 801b5d6:	460f      	mov	r7, r1
 801b5d8:	8a00      	ldrh	r0, [r0, #16]
 801b5da:	2101      	movs	r1, #1
 801b5dc:	4616      	mov	r6, r2
 801b5de:	f000 fa2b 	bl	801ba38 <uxr_seq_num_add>
 801b5e2:	8028      	strh	r0, [r5, #0]
 801b5e4:	8922      	ldrh	r2, [r4, #8]
 801b5e6:	6863      	ldr	r3, [r4, #4]
 801b5e8:	fbb0 f1f2 	udiv	r1, r0, r2
 801b5ec:	fbb3 f3f2 	udiv	r3, r3, r2
 801b5f0:	fb02 0c11 	mls	ip, r2, r1, r0
 801b5f4:	89e1      	ldrh	r1, [r4, #14]
 801b5f6:	fa1f fc8c 	uxth.w	ip, ip
 801b5fa:	fb0c fc03 	mul.w	ip, ip, r3
 801b5fe:	6823      	ldr	r3, [r4, #0]
 801b600:	f10c 0c04 	add.w	ip, ip, #4
 801b604:	4463      	add	r3, ip
 801b606:	603b      	str	r3, [r7, #0]
 801b608:	6823      	ldr	r3, [r4, #0]
 801b60a:	449c      	add	ip, r3
 801b60c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801b610:	6033      	str	r3, [r6, #0]
 801b612:	f000 fa19 	bl	801ba48 <uxr_seq_num_cmp>
 801b616:	2800      	cmp	r0, #0
 801b618:	dd01      	ble.n	801b61e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801b61a:	2000      	movs	r0, #0
 801b61c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b61e:	7b23      	ldrb	r3, [r4, #12]
 801b620:	6832      	ldr	r2, [r6, #0]
 801b622:	429a      	cmp	r2, r3
 801b624:	d9f9      	bls.n	801b61a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801b626:	8a61      	ldrh	r1, [r4, #18]
 801b628:	8a20      	ldrh	r0, [r4, #16]
 801b62a:	f000 fa09 	bl	801ba40 <uxr_seq_num_sub>
 801b62e:	8923      	ldrh	r3, [r4, #8]
 801b630:	4283      	cmp	r3, r0
 801b632:	d0f2      	beq.n	801b61a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801b634:	8828      	ldrh	r0, [r5, #0]
 801b636:	89e3      	ldrh	r3, [r4, #14]
 801b638:	8220      	strh	r0, [r4, #16]
 801b63a:	4298      	cmp	r0, r3
 801b63c:	d001      	beq.n	801b642 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801b63e:	2001      	movs	r0, #1
 801b640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b642:	2101      	movs	r1, #1
 801b644:	f000 f9f8 	bl	801ba38 <uxr_seq_num_add>
 801b648:	4603      	mov	r3, r0
 801b64a:	2001      	movs	r0, #1
 801b64c:	81e3      	strh	r3, [r4, #14]
 801b64e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b650 <uxr_update_output_stream_heartbeat_timestamp>:
 801b650:	b570      	push	{r4, r5, r6, lr}
 801b652:	8a01      	ldrh	r1, [r0, #16]
 801b654:	4604      	mov	r4, r0
 801b656:	8a40      	ldrh	r0, [r0, #18]
 801b658:	4615      	mov	r5, r2
 801b65a:	461e      	mov	r6, r3
 801b65c:	f000 f9f4 	bl	801ba48 <uxr_seq_num_cmp>
 801b660:	2800      	cmp	r0, #0
 801b662:	db07      	blt.n	801b674 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801b664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b668:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801b66c:	2000      	movs	r0, #0
 801b66e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801b672:	bd70      	pop	{r4, r5, r6, pc}
 801b674:	f894 0020 	ldrb.w	r0, [r4, #32]
 801b678:	b940      	cbnz	r0, 801b68c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801b67a:	2301      	movs	r3, #1
 801b67c:	f884 3020 	strb.w	r3, [r4, #32]
 801b680:	3564      	adds	r5, #100	; 0x64
 801b682:	f146 0600 	adc.w	r6, r6, #0
 801b686:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801b68a:	bd70      	pop	{r4, r5, r6, pc}
 801b68c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801b690:	4295      	cmp	r5, r2
 801b692:	eb76 0303 	sbcs.w	r3, r6, r3
 801b696:	db04      	blt.n	801b6a2 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801b698:	1c43      	adds	r3, r0, #1
 801b69a:	2001      	movs	r0, #1
 801b69c:	f884 3020 	strb.w	r3, [r4, #32]
 801b6a0:	e7ee      	b.n	801b680 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801b6a2:	2000      	movs	r0, #0
 801b6a4:	e7ec      	b.n	801b680 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801b6a6:	bf00      	nop

0801b6a8 <uxr_begin_output_nack_buffer_it>:
 801b6a8:	8a40      	ldrh	r0, [r0, #18]
 801b6aa:	4770      	bx	lr

0801b6ac <uxr_next_reliable_nack_buffer_to_send>:
 801b6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b6b0:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 801b6b4:	b197      	cbz	r7, 801b6dc <uxr_next_reliable_nack_buffer_to_send+0x30>
 801b6b6:	4680      	mov	r8, r0
 801b6b8:	460d      	mov	r5, r1
 801b6ba:	4616      	mov	r6, r2
 801b6bc:	461c      	mov	r4, r3
 801b6be:	8818      	ldrh	r0, [r3, #0]
 801b6c0:	2101      	movs	r1, #1
 801b6c2:	f000 f9b9 	bl	801ba38 <uxr_seq_num_add>
 801b6c6:	8020      	strh	r0, [r4, #0]
 801b6c8:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801b6cc:	f000 f9bc 	bl	801ba48 <uxr_seq_num_cmp>
 801b6d0:	2800      	cmp	r0, #0
 801b6d2:	dd06      	ble.n	801b6e2 <uxr_next_reliable_nack_buffer_to_send+0x36>
 801b6d4:	2300      	movs	r3, #0
 801b6d6:	461f      	mov	r7, r3
 801b6d8:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 801b6dc:	4638      	mov	r0, r7
 801b6de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6e2:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801b6e6:	8820      	ldrh	r0, [r4, #0]
 801b6e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b6ec:	fbb0 f3f2 	udiv	r3, r0, r2
 801b6f0:	fbb1 fcf2 	udiv	ip, r1, r2
 801b6f4:	fb02 0313 	mls	r3, r2, r3, r0
 801b6f8:	b29b      	uxth	r3, r3
 801b6fa:	fb03 fc0c 	mul.w	ip, r3, ip
 801b6fe:	f8d8 3000 	ldr.w	r3, [r8]
 801b702:	f10c 0c04 	add.w	ip, ip, #4
 801b706:	4463      	add	r3, ip
 801b708:	602b      	str	r3, [r5, #0]
 801b70a:	f8d8 3000 	ldr.w	r3, [r8]
 801b70e:	4463      	add	r3, ip
 801b710:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801b714:	6033      	str	r3, [r6, #0]
 801b716:	f898 200c 	ldrb.w	r2, [r8, #12]
 801b71a:	429a      	cmp	r2, r3
 801b71c:	d0d0      	beq.n	801b6c0 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801b71e:	e7dd      	b.n	801b6dc <uxr_next_reliable_nack_buffer_to_send+0x30>

0801b720 <uxr_process_acknack>:
 801b720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b722:	4604      	mov	r4, r0
 801b724:	460e      	mov	r6, r1
 801b726:	4610      	mov	r0, r2
 801b728:	2101      	movs	r1, #1
 801b72a:	f000 f989 	bl	801ba40 <uxr_seq_num_sub>
 801b72e:	8a61      	ldrh	r1, [r4, #18]
 801b730:	f000 f986 	bl	801ba40 <uxr_seq_num_sub>
 801b734:	b1c8      	cbz	r0, 801b76a <uxr_process_acknack+0x4a>
 801b736:	4605      	mov	r5, r0
 801b738:	2700      	movs	r7, #0
 801b73a:	2101      	movs	r1, #1
 801b73c:	8a60      	ldrh	r0, [r4, #18]
 801b73e:	f000 f97b 	bl	801ba38 <uxr_seq_num_add>
 801b742:	8923      	ldrh	r3, [r4, #8]
 801b744:	6862      	ldr	r2, [r4, #4]
 801b746:	3701      	adds	r7, #1
 801b748:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801b74c:	6821      	ldr	r1, [r4, #0]
 801b74e:	42bd      	cmp	r5, r7
 801b750:	8260      	strh	r0, [r4, #18]
 801b752:	fbb0 fef3 	udiv	lr, r0, r3
 801b756:	fbb2 f2f3 	udiv	r2, r2, r3
 801b75a:	fb03 031e 	mls	r3, r3, lr, r0
 801b75e:	b29b      	uxth	r3, r3
 801b760:	fb02 f303 	mul.w	r3, r2, r3
 801b764:	f841 c003 	str.w	ip, [r1, r3]
 801b768:	d1e7      	bne.n	801b73a <uxr_process_acknack+0x1a>
 801b76a:	3e00      	subs	r6, #0
 801b76c:	f04f 0300 	mov.w	r3, #0
 801b770:	bf18      	it	ne
 801b772:	2601      	movne	r6, #1
 801b774:	f884 3020 	strb.w	r3, [r4, #32]
 801b778:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801b77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b77e:	bf00      	nop

0801b780 <uxr_is_output_up_to_date>:
 801b780:	8a01      	ldrh	r1, [r0, #16]
 801b782:	8a40      	ldrh	r0, [r0, #18]
 801b784:	b508      	push	{r3, lr}
 801b786:	f000 f95f 	bl	801ba48 <uxr_seq_num_cmp>
 801b78a:	fab0 f080 	clz	r0, r0
 801b78e:	0940      	lsrs	r0, r0, #5
 801b790:	bd08      	pop	{r3, pc}
 801b792:	bf00      	nop

0801b794 <get_available_free_slots>:
 801b794:	8901      	ldrh	r1, [r0, #8]
 801b796:	b1e1      	cbz	r1, 801b7d2 <get_available_free_slots+0x3e>
 801b798:	6843      	ldr	r3, [r0, #4]
 801b79a:	f04f 0c00 	mov.w	ip, #0
 801b79e:	b530      	push	{r4, r5, lr}
 801b7a0:	fbb3 fef1 	udiv	lr, r3, r1
 801b7a4:	6805      	ldr	r5, [r0, #0]
 801b7a6:	4662      	mov	r2, ip
 801b7a8:	7b04      	ldrb	r4, [r0, #12]
 801b7aa:	4660      	mov	r0, ip
 801b7ac:	f10c 0c01 	add.w	ip, ip, #1
 801b7b0:	fbb2 f3f1 	udiv	r3, r2, r1
 801b7b4:	fb01 2313 	mls	r3, r1, r3, r2
 801b7b8:	fa1f f28c 	uxth.w	r2, ip
 801b7bc:	b29b      	uxth	r3, r3
 801b7be:	fb0e f303 	mul.w	r3, lr, r3
 801b7c2:	58eb      	ldr	r3, [r5, r3]
 801b7c4:	429c      	cmp	r4, r3
 801b7c6:	d101      	bne.n	801b7cc <get_available_free_slots+0x38>
 801b7c8:	3001      	adds	r0, #1
 801b7ca:	b280      	uxth	r0, r0
 801b7cc:	428a      	cmp	r2, r1
 801b7ce:	d3ed      	bcc.n	801b7ac <get_available_free_slots+0x18>
 801b7d0:	bd30      	pop	{r4, r5, pc}
 801b7d2:	4608      	mov	r0, r1
 801b7d4:	4770      	bx	lr
 801b7d6:	bf00      	nop

0801b7d8 <uxr_buffer_request_data>:
 801b7d8:	b530      	push	{r4, r5, lr}
 801b7da:	b095      	sub	sp, #84	; 0x54
 801b7dc:	4604      	mov	r4, r0
 801b7de:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801b7e0:	9303      	str	r3, [sp, #12]
 801b7e2:	2d00      	cmp	r5, #0
 801b7e4:	f88d 301c 	strb.w	r3, [sp, #28]
 801b7e8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801b7ec:	f04f 0200 	mov.w	r2, #0
 801b7f0:	bf14      	ite	ne
 801b7f2:	2101      	movne	r1, #1
 801b7f4:	4611      	moveq	r1, r2
 801b7f6:	f88d 201d 	strb.w	r2, [sp, #29]
 801b7fa:	f88d 201e 	strb.w	r2, [sp, #30]
 801b7fe:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b802:	d021      	beq.n	801b848 <uxr_buffer_request_data+0x70>
 801b804:	686b      	ldr	r3, [r5, #4]
 801b806:	2210      	movs	r2, #16
 801b808:	6829      	ldr	r1, [r5, #0]
 801b80a:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 801b80e:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 801b812:	2308      	movs	r3, #8
 801b814:	2100      	movs	r1, #0
 801b816:	4620      	mov	r0, r4
 801b818:	e9cd 3100 	strd	r3, r1, [sp]
 801b81c:	ab0c      	add	r3, sp, #48	; 0x30
 801b81e:	9905      	ldr	r1, [sp, #20]
 801b820:	f7f7 fa6a 	bl	8012cf8 <uxr_prepare_stream_to_write_submessage>
 801b824:	b918      	cbnz	r0, 801b82e <uxr_buffer_request_data+0x56>
 801b826:	4604      	mov	r4, r0
 801b828:	4620      	mov	r0, r4
 801b82a:	b015      	add	sp, #84	; 0x54
 801b82c:	bd30      	pop	{r4, r5, pc}
 801b82e:	9904      	ldr	r1, [sp, #16]
 801b830:	aa06      	add	r2, sp, #24
 801b832:	4620      	mov	r0, r4
 801b834:	f7f7 fb9c 	bl	8012f70 <uxr_init_base_object_request>
 801b838:	4604      	mov	r4, r0
 801b83a:	a906      	add	r1, sp, #24
 801b83c:	a80c      	add	r0, sp, #48	; 0x30
 801b83e:	f7f8 fecf 	bl	80145e0 <uxr_serialize_READ_DATA_Payload>
 801b842:	4620      	mov	r0, r4
 801b844:	b015      	add	sp, #84	; 0x54
 801b846:	bd30      	pop	{r4, r5, pc}
 801b848:	2208      	movs	r2, #8
 801b84a:	e7e2      	b.n	801b812 <uxr_buffer_request_data+0x3a>

0801b84c <uxr_buffer_cancel_data>:
 801b84c:	b510      	push	{r4, lr}
 801b84e:	2300      	movs	r3, #0
 801b850:	b094      	sub	sp, #80	; 0x50
 801b852:	4604      	mov	r4, r0
 801b854:	9205      	str	r2, [sp, #20]
 801b856:	9301      	str	r3, [sp, #4]
 801b858:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b85c:	f88d 301e 	strb.w	r3, [sp, #30]
 801b860:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 801b864:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 801b868:	2308      	movs	r3, #8
 801b86a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801b86e:	2201      	movs	r2, #1
 801b870:	9300      	str	r3, [sp, #0]
 801b872:	ab0c      	add	r3, sp, #48	; 0x30
 801b874:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 801b878:	2210      	movs	r2, #16
 801b87a:	f7f7 fa3d 	bl	8012cf8 <uxr_prepare_stream_to_write_submessage>
 801b87e:	b918      	cbnz	r0, 801b888 <uxr_buffer_cancel_data+0x3c>
 801b880:	4604      	mov	r4, r0
 801b882:	4620      	mov	r0, r4
 801b884:	b014      	add	sp, #80	; 0x50
 801b886:	bd10      	pop	{r4, pc}
 801b888:	9905      	ldr	r1, [sp, #20]
 801b88a:	aa06      	add	r2, sp, #24
 801b88c:	4620      	mov	r0, r4
 801b88e:	f7f7 fb6f 	bl	8012f70 <uxr_init_base_object_request>
 801b892:	4604      	mov	r4, r0
 801b894:	a906      	add	r1, sp, #24
 801b896:	a80c      	add	r0, sp, #48	; 0x30
 801b898:	f7f8 fea2 	bl	80145e0 <uxr_serialize_READ_DATA_Payload>
 801b89c:	4620      	mov	r0, r4
 801b89e:	b014      	add	sp, #80	; 0x50
 801b8a0:	bd10      	pop	{r4, pc}
 801b8a2:	bf00      	nop

0801b8a4 <read_submessage_format>:
 801b8a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b8a8:	b095      	sub	sp, #84	; 0x54
 801b8aa:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 801b8ae:	b113      	cbz	r3, 801b8b6 <read_submessage_format+0x12>
 801b8b0:	b015      	add	sp, #84	; 0x54
 801b8b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b8b6:	4606      	mov	r6, r0
 801b8b8:	981c      	ldr	r0, [sp, #112]	; 0x70
 801b8ba:	460c      	mov	r4, r1
 801b8bc:	4615      	mov	r5, r2
 801b8be:	9004      	str	r0, [sp, #16]
 801b8c0:	4699      	mov	r9, r3
 801b8c2:	981d      	ldr	r0, [sp, #116]	; 0x74
 801b8c4:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 801b8c8:	9005      	str	r0, [sp, #20]
 801b8ca:	a80c      	add	r0, sp, #48	; 0x30
 801b8cc:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801b8d0:	1a52      	subs	r2, r2, r1
 801b8d2:	f7f6 f807 	bl	80118e4 <ucdr_init_buffer>
 801b8d6:	a80c      	add	r0, sp, #48	; 0x30
 801b8d8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801b8dc:	f7f5 ffd6 	bl	801188c <ucdr_set_on_full_buffer_callback>
 801b8e0:	69e2      	ldr	r2, [r4, #28]
 801b8e2:	b19a      	cbz	r2, 801b90c <read_submessage_format+0x68>
 801b8e4:	f1b8 0f07 	cmp.w	r8, #7
 801b8e8:	f882 9014 	strb.w	r9, [r2, #20]
 801b8ec:	d040      	beq.n	801b970 <read_submessage_format+0xcc>
 801b8ee:	f1b8 0f08 	cmp.w	r8, #8
 801b8f2:	d02e      	beq.n	801b952 <read_submessage_format+0xae>
 801b8f4:	f1b8 0f06 	cmp.w	r8, #6
 801b8f8:	d011      	beq.n	801b91e <read_submessage_format+0x7a>
 801b8fa:	2301      	movs	r3, #1
 801b8fc:	7513      	strb	r3, [r2, #20]
 801b8fe:	4629      	mov	r1, r5
 801b900:	4620      	mov	r0, r4
 801b902:	f7f6 f843 	bl	801198c <ucdr_advance_buffer>
 801b906:	b015      	add	sp, #84	; 0x54
 801b908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b90c:	f1b8 0f07 	cmp.w	r8, #7
 801b910:	d02e      	beq.n	801b970 <read_submessage_format+0xcc>
 801b912:	f1b8 0f08 	cmp.w	r8, #8
 801b916:	d01c      	beq.n	801b952 <read_submessage_format+0xae>
 801b918:	f1b8 0f06 	cmp.w	r8, #6
 801b91c:	d1ef      	bne.n	801b8fe <read_submessage_format+0x5a>
 801b91e:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 801b922:	f1b8 0f00 	cmp.w	r8, #0
 801b926:	d011      	beq.n	801b94c <read_submessage_format+0xa8>
 801b928:	ab0c      	add	r3, sp, #48	; 0x30
 801b92a:	9501      	str	r5, [sp, #4]
 801b92c:	463a      	mov	r2, r7
 801b92e:	4630      	mov	r0, r6
 801b930:	9300      	str	r3, [sp, #0]
 801b932:	2306      	movs	r3, #6
 801b934:	f88d 3016 	strb.w	r3, [sp, #22]
 801b938:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 801b93c:	9302      	str	r3, [sp, #8]
 801b93e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801b942:	47c0      	blx	r8
 801b944:	2301      	movs	r3, #1
 801b946:	69e2      	ldr	r2, [r4, #28]
 801b948:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801b94c:	2a00      	cmp	r2, #0
 801b94e:	d1d4      	bne.n	801b8fa <read_submessage_format+0x56>
 801b950:	e7d5      	b.n	801b8fe <read_submessage_format+0x5a>
 801b952:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 801b956:	2b00      	cmp	r3, #0
 801b958:	d0f8      	beq.n	801b94c <read_submessage_format+0xa8>
 801b95a:	a80c      	add	r0, sp, #48	; 0x30
 801b95c:	a906      	add	r1, sp, #24
 801b95e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801b962:	f7f8 ff09 	bl	8014778 <uxr_deserialize_SampleIdentity>
 801b966:	b9a0      	cbnz	r0, 801b992 <read_submessage_format+0xee>
 801b968:	69e2      	ldr	r2, [r4, #28]
 801b96a:	2a00      	cmp	r2, #0
 801b96c:	d1c5      	bne.n	801b8fa <read_submessage_format+0x56>
 801b96e:	e7c6      	b.n	801b8fe <read_submessage_format+0x5a>
 801b970:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 801b974:	b13b      	cbz	r3, 801b986 <read_submessage_format+0xe2>
 801b976:	a906      	add	r1, sp, #24
 801b978:	a80c      	add	r0, sp, #48	; 0x30
 801b97a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801b97e:	f7f8 fbcf 	bl	8014120 <uxr_deserialize_BaseObjectRequest>
 801b982:	bb60      	cbnz	r0, 801b9de <read_submessage_format+0x13a>
 801b984:	69e2      	ldr	r2, [r4, #28]
 801b986:	68a3      	ldr	r3, [r4, #8]
 801b988:	442b      	add	r3, r5
 801b98a:	60a3      	str	r3, [r4, #8]
 801b98c:	2a00      	cmp	r2, #0
 801b98e:	d1b4      	bne.n	801b8fa <read_submessage_format+0x56>
 801b990:	e7b5      	b.n	801b8fe <read_submessage_format+0x5a>
 801b992:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b994:	a80c      	add	r0, sp, #48	; 0x30
 801b996:	eba8 0803 	sub.w	r8, r8, r3
 801b99a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801b99e:	44a8      	add	r8, r5
 801b9a0:	1a52      	subs	r2, r2, r1
 801b9a2:	f7f5 ff9f 	bl	80118e4 <ucdr_init_buffer>
 801b9a6:	a80c      	add	r0, sp, #48	; 0x30
 801b9a8:	fa1f f888 	uxth.w	r8, r8
 801b9ac:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801b9b0:	f7f5 ff6c 	bl	801188c <ucdr_set_on_full_buffer_callback>
 801b9b4:	ab0c      	add	r3, sp, #48	; 0x30
 801b9b6:	2108      	movs	r1, #8
 801b9b8:	f8cd 8004 	str.w	r8, [sp, #4]
 801b9bc:	9300      	str	r3, [sp, #0]
 801b9be:	463a      	mov	r2, r7
 801b9c0:	f88d 1016 	strb.w	r1, [sp, #22]
 801b9c4:	ab06      	add	r3, sp, #24
 801b9c6:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 801b9ca:	4630      	mov	r0, r6
 801b9cc:	9102      	str	r1, [sp, #8]
 801b9ce:	9905      	ldr	r1, [sp, #20]
 801b9d0:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 801b9d4:	47b8      	blx	r7
 801b9d6:	2301      	movs	r3, #1
 801b9d8:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801b9dc:	e7c4      	b.n	801b968 <read_submessage_format+0xc4>
 801b9de:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801b9e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b9e4:	a80c      	add	r0, sp, #48	; 0x30
 801b9e6:	1a52      	subs	r2, r2, r1
 801b9e8:	eba8 0803 	sub.w	r8, r8, r3
 801b9ec:	f7f5 ff7a 	bl	80118e4 <ucdr_init_buffer>
 801b9f0:	a80c      	add	r0, sp, #48	; 0x30
 801b9f2:	44a8      	add	r8, r5
 801b9f4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801b9f8:	f7f5 ff48 	bl	801188c <ucdr_set_on_full_buffer_callback>
 801b9fc:	ab0c      	add	r3, sp, #48	; 0x30
 801b9fe:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801ba02:	fa1f f888 	uxth.w	r8, r8
 801ba06:	9300      	str	r3, [sp, #0]
 801ba08:	463a      	mov	r2, r7
 801ba0a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801ba0e:	4630      	mov	r0, r6
 801ba10:	f8cd 8004 	str.w	r8, [sp, #4]
 801ba14:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801ba18:	2107      	movs	r1, #7
 801ba1a:	f88d 1016 	strb.w	r1, [sp, #22]
 801ba1e:	b29b      	uxth	r3, r3
 801ba20:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 801ba24:	9102      	str	r1, [sp, #8]
 801ba26:	9905      	ldr	r1, [sp, #20]
 801ba28:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 801ba2c:	47b8      	blx	r7
 801ba2e:	2301      	movs	r3, #1
 801ba30:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801ba34:	e7a6      	b.n	801b984 <read_submessage_format+0xe0>
 801ba36:	bf00      	nop

0801ba38 <uxr_seq_num_add>:
 801ba38:	4408      	add	r0, r1
 801ba3a:	b280      	uxth	r0, r0
 801ba3c:	4770      	bx	lr
 801ba3e:	bf00      	nop

0801ba40 <uxr_seq_num_sub>:
 801ba40:	1a40      	subs	r0, r0, r1
 801ba42:	b280      	uxth	r0, r0
 801ba44:	4770      	bx	lr
 801ba46:	bf00      	nop

0801ba48 <uxr_seq_num_cmp>:
 801ba48:	4288      	cmp	r0, r1
 801ba4a:	d011      	beq.n	801ba70 <uxr_seq_num_cmp+0x28>
 801ba4c:	d309      	bcc.n	801ba62 <uxr_seq_num_cmp+0x1a>
 801ba4e:	4288      	cmp	r0, r1
 801ba50:	d910      	bls.n	801ba74 <uxr_seq_num_cmp+0x2c>
 801ba52:	1a40      	subs	r0, r0, r1
 801ba54:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801ba58:	bfd4      	ite	le
 801ba5a:	2001      	movle	r0, #1
 801ba5c:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801ba60:	4770      	bx	lr
 801ba62:	1a0b      	subs	r3, r1, r0
 801ba64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ba68:	daf1      	bge.n	801ba4e <uxr_seq_num_cmp+0x6>
 801ba6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ba6e:	4770      	bx	lr
 801ba70:	2000      	movs	r0, #0
 801ba72:	4770      	bx	lr
 801ba74:	2001      	movs	r0, #1
 801ba76:	4770      	bx	lr

0801ba78 <uxr_init_framing_io>:
 801ba78:	2300      	movs	r3, #0
 801ba7a:	7041      	strb	r1, [r0, #1]
 801ba7c:	7003      	strb	r3, [r0, #0]
 801ba7e:	8583      	strh	r3, [r0, #44]	; 0x2c
 801ba80:	4770      	bx	lr
 801ba82:	bf00      	nop

0801ba84 <uxr_write_framed_msg>:
 801ba84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba88:	4617      	mov	r7, r2
 801ba8a:	7842      	ldrb	r2, [r0, #1]
 801ba8c:	460e      	mov	r6, r1
 801ba8e:	b083      	sub	sp, #12
 801ba90:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 801ba94:	469b      	mov	fp, r3
 801ba96:	237e      	movs	r3, #126	; 0x7e
 801ba98:	4604      	mov	r4, r0
 801ba9a:	2901      	cmp	r1, #1
 801ba9c:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 801baa0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801baa4:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801baa8:	f240 8115 	bls.w	801bcd6 <uxr_write_framed_msg+0x252>
 801baac:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801bab0:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 801bab4:	2202      	movs	r2, #2
 801bab6:	2901      	cmp	r1, #1
 801bab8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801babc:	d952      	bls.n	801bb64 <uxr_write_framed_msg+0xe0>
 801babe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bac0:	2103      	movs	r1, #3
 801bac2:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 801bac6:	b2dd      	uxtb	r5, r3
 801bac8:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801bacc:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801bad0:	2a01      	cmp	r2, #1
 801bad2:	d95c      	bls.n	801bb8e <uxr_write_framed_msg+0x10a>
 801bad4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bad6:	1862      	adds	r2, r4, r1
 801bad8:	3101      	adds	r1, #1
 801bada:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801bade:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 801bae2:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801bae6:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801baea:	2a01      	cmp	r2, #1
 801baec:	d961      	bls.n	801bbb2 <uxr_write_framed_msg+0x12e>
 801baee:	1c4a      	adds	r2, r1, #1
 801baf0:	4421      	add	r1, r4
 801baf2:	b2d2      	uxtb	r2, r2
 801baf4:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 801baf8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801bafc:	2b00      	cmp	r3, #0
 801bafe:	d06a      	beq.n	801bbd6 <uxr_write_framed_msg+0x152>
 801bb00:	f04f 0800 	mov.w	r8, #0
 801bb04:	46c1      	mov	r9, r8
 801bb06:	e016      	b.n	801bb36 <uxr_write_framed_msg+0xb2>
 801bb08:	2a29      	cmp	r2, #41	; 0x29
 801bb0a:	d868      	bhi.n	801bbde <uxr_write_framed_msg+0x15a>
 801bb0c:	18a0      	adds	r0, r4, r2
 801bb0e:	3201      	adds	r2, #1
 801bb10:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801bb14:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801bb18:	ea88 0101 	eor.w	r1, r8, r1
 801bb1c:	4b7d      	ldr	r3, [pc, #500]	; (801bd14 <uxr_write_framed_msg+0x290>)
 801bb1e:	f109 0901 	add.w	r9, r9, #1
 801bb22:	b2c9      	uxtb	r1, r1
 801bb24:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 801bb28:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 801bb2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bb2e:	454b      	cmp	r3, r9
 801bb30:	d969      	bls.n	801bc06 <uxr_write_framed_msg+0x182>
 801bb32:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801bb36:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801bb3a:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 801bb3e:	2801      	cmp	r0, #1
 801bb40:	d8e2      	bhi.n	801bb08 <uxr_write_framed_msg+0x84>
 801bb42:	1c50      	adds	r0, r2, #1
 801bb44:	b2c0      	uxtb	r0, r0
 801bb46:	2829      	cmp	r0, #41	; 0x29
 801bb48:	d849      	bhi.n	801bbde <uxr_write_framed_msg+0x15a>
 801bb4a:	18a0      	adds	r0, r4, r2
 801bb4c:	f04f 037d 	mov.w	r3, #125	; 0x7d
 801bb50:	3202      	adds	r2, #2
 801bb52:	f081 0520 	eor.w	r5, r1, #32
 801bb56:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801bb5a:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 801bb5e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801bb62:	e7d9      	b.n	801bb18 <uxr_write_framed_msg+0x94>
 801bb64:	2104      	movs	r1, #4
 801bb66:	f04f 0c03 	mov.w	ip, #3
 801bb6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bb6c:	4422      	add	r2, r4
 801bb6e:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 801bb72:	44a4      	add	ip, r4
 801bb74:	b2dd      	uxtb	r5, r3
 801bb76:	f080 0020 	eor.w	r0, r0, #32
 801bb7a:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 801bb7e:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801bb82:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 801bb86:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801bb8a:	2a01      	cmp	r2, #1
 801bb8c:	d8a2      	bhi.n	801bad4 <uxr_write_framed_msg+0x50>
 801bb8e:	1862      	adds	r2, r4, r1
 801bb90:	207d      	movs	r0, #125	; 0x7d
 801bb92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bb94:	f085 0520 	eor.w	r5, r5, #32
 801bb98:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 801bb9c:	3102      	adds	r1, #2
 801bb9e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801bba2:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 801bba6:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801bbaa:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801bbae:	2a01      	cmp	r2, #1
 801bbb0:	d89d      	bhi.n	801baee <uxr_write_framed_msg+0x6a>
 801bbb2:	1c4d      	adds	r5, r1, #1
 801bbb4:	1c8a      	adds	r2, r1, #2
 801bbb6:	f080 0020 	eor.w	r0, r0, #32
 801bbba:	4421      	add	r1, r4
 801bbbc:	fa54 f585 	uxtab	r5, r4, r5
 801bbc0:	b2d2      	uxtb	r2, r2
 801bbc2:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 801bbc6:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 801bbca:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 801bbce:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801bbd2:	2b00      	cmp	r3, #0
 801bbd4:	d194      	bne.n	801bb00 <uxr_write_framed_msg+0x7c>
 801bbd6:	4619      	mov	r1, r3
 801bbd8:	f8ad 3004 	strh.w	r3, [sp, #4]
 801bbdc:	e019      	b.n	801bc12 <uxr_write_framed_msg+0x18e>
 801bbde:	2500      	movs	r5, #0
 801bbe0:	e000      	b.n	801bbe4 <uxr_write_framed_msg+0x160>
 801bbe2:	b160      	cbz	r0, 801bbfe <uxr_write_framed_msg+0x17a>
 801bbe4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801bbe8:	1b52      	subs	r2, r2, r5
 801bbea:	4653      	mov	r3, sl
 801bbec:	4638      	mov	r0, r7
 801bbee:	4421      	add	r1, r4
 801bbf0:	47b0      	blx	r6
 801bbf2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801bbf6:	4405      	add	r5, r0
 801bbf8:	4295      	cmp	r5, r2
 801bbfa:	d3f2      	bcc.n	801bbe2 <uxr_write_framed_msg+0x15e>
 801bbfc:	d066      	beq.n	801bccc <uxr_write_framed_msg+0x248>
 801bbfe:	2000      	movs	r0, #0
 801bc00:	b003      	add	sp, #12
 801bc02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc06:	fa5f f188 	uxtb.w	r1, r8
 801bc0a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801bc0e:	f8ad 8004 	strh.w	r8, [sp, #4]
 801bc12:	f04f 0900 	mov.w	r9, #0
 801bc16:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 801bc1a:	46c8      	mov	r8, r9
 801bc1c:	e013      	b.n	801bc46 <uxr_write_framed_msg+0x1c2>
 801bc1e:	2a29      	cmp	r2, #41	; 0x29
 801bc20:	d824      	bhi.n	801bc6c <uxr_write_framed_msg+0x1e8>
 801bc22:	18a3      	adds	r3, r4, r2
 801bc24:	3201      	adds	r2, #1
 801bc26:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 801bc2a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801bc2e:	f109 0901 	add.w	r9, r9, #1
 801bc32:	f1b9 0f02 	cmp.w	r9, #2
 801bc36:	d02d      	beq.n	801bc94 <uxr_write_framed_msg+0x210>
 801bc38:	f109 0308 	add.w	r3, r9, #8
 801bc3c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801bc40:	446b      	add	r3, sp
 801bc42:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 801bc46:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 801bc4a:	2b01      	cmp	r3, #1
 801bc4c:	d8e7      	bhi.n	801bc1e <uxr_write_framed_msg+0x19a>
 801bc4e:	1c53      	adds	r3, r2, #1
 801bc50:	b2db      	uxtb	r3, r3
 801bc52:	2b29      	cmp	r3, #41	; 0x29
 801bc54:	d80a      	bhi.n	801bc6c <uxr_write_framed_msg+0x1e8>
 801bc56:	18a3      	adds	r3, r4, r2
 801bc58:	f081 0120 	eor.w	r1, r1, #32
 801bc5c:	3202      	adds	r2, #2
 801bc5e:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 801bc62:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 801bc66:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801bc6a:	e7e0      	b.n	801bc2e <uxr_write_framed_msg+0x1aa>
 801bc6c:	2500      	movs	r5, #0
 801bc6e:	e001      	b.n	801bc74 <uxr_write_framed_msg+0x1f0>
 801bc70:	2800      	cmp	r0, #0
 801bc72:	d0c4      	beq.n	801bbfe <uxr_write_framed_msg+0x17a>
 801bc74:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801bc78:	1b52      	subs	r2, r2, r5
 801bc7a:	4653      	mov	r3, sl
 801bc7c:	4638      	mov	r0, r7
 801bc7e:	4421      	add	r1, r4
 801bc80:	47b0      	blx	r6
 801bc82:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801bc86:	4405      	add	r5, r0
 801bc88:	4295      	cmp	r5, r2
 801bc8a:	d3f1      	bcc.n	801bc70 <uxr_write_framed_msg+0x1ec>
 801bc8c:	d1b7      	bne.n	801bbfe <uxr_write_framed_msg+0x17a>
 801bc8e:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 801bc92:	e7d1      	b.n	801bc38 <uxr_write_framed_msg+0x1b4>
 801bc94:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801bc98:	b19a      	cbz	r2, 801bcc2 <uxr_write_framed_msg+0x23e>
 801bc9a:	2500      	movs	r5, #0
 801bc9c:	e001      	b.n	801bca2 <uxr_write_framed_msg+0x21e>
 801bc9e:	2800      	cmp	r0, #0
 801bca0:	d0ad      	beq.n	801bbfe <uxr_write_framed_msg+0x17a>
 801bca2:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801bca6:	1b52      	subs	r2, r2, r5
 801bca8:	4653      	mov	r3, sl
 801bcaa:	4638      	mov	r0, r7
 801bcac:	4421      	add	r1, r4
 801bcae:	47b0      	blx	r6
 801bcb0:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801bcb4:	4405      	add	r5, r0
 801bcb6:	4295      	cmp	r5, r2
 801bcb8:	d3f1      	bcc.n	801bc9e <uxr_write_framed_msg+0x21a>
 801bcba:	d1a0      	bne.n	801bbfe <uxr_write_framed_msg+0x17a>
 801bcbc:	2300      	movs	r3, #0
 801bcbe:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801bcc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bcc4:	b298      	uxth	r0, r3
 801bcc6:	b003      	add	sp, #12
 801bcc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bccc:	f04f 0300 	mov.w	r3, #0
 801bcd0:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801bcd4:	e72a      	b.n	801bb2c <uxr_write_framed_msg+0xa8>
 801bcd6:	217d      	movs	r1, #125	; 0x7d
 801bcd8:	f082 0220 	eor.w	r2, r2, #32
 801bcdc:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 801bce0:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801bce4:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 801bce8:	2203      	movs	r2, #3
 801bcea:	2901      	cmp	r1, #1
 801bcec:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801bcf0:	d803      	bhi.n	801bcfa <uxr_write_framed_msg+0x276>
 801bcf2:	2105      	movs	r1, #5
 801bcf4:	f04f 0c04 	mov.w	ip, #4
 801bcf8:	e737      	b.n	801bb6a <uxr_write_framed_msg+0xe6>
 801bcfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bcfc:	2104      	movs	r1, #4
 801bcfe:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 801bd02:	b2dd      	uxtb	r5, r3
 801bd04:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801bd08:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801bd0c:	2a01      	cmp	r2, #1
 801bd0e:	f63f aee1 	bhi.w	801bad4 <uxr_write_framed_msg+0x50>
 801bd12:	e73c      	b.n	801bb8e <uxr_write_framed_msg+0x10a>
 801bd14:	0802047c 	.word	0x0802047c

0801bd18 <uxr_framing_read_transport>:
 801bd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd1c:	4604      	mov	r4, r0
 801bd1e:	b085      	sub	sp, #20
 801bd20:	4692      	mov	sl, r2
 801bd22:	4689      	mov	r9, r1
 801bd24:	461d      	mov	r5, r3
 801bd26:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801bd28:	f7f7 fad8 	bl	80132dc <uxr_millis>
 801bd2c:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801bd30:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 801bd34:	4680      	mov	r8, r0
 801bd36:	42ba      	cmp	r2, r7
 801bd38:	d05f      	beq.n	801bdfa <uxr_framing_read_transport+0xe2>
 801bd3a:	d817      	bhi.n	801bd6c <uxr_framing_read_transport+0x54>
 801bd3c:	3f01      	subs	r7, #1
 801bd3e:	1aba      	subs	r2, r7, r2
 801bd40:	2700      	movs	r7, #0
 801bd42:	b2d2      	uxtb	r2, r2
 801bd44:	42b2      	cmp	r2, r6
 801bd46:	d81a      	bhi.n	801bd7e <uxr_framing_read_transport+0x66>
 801bd48:	19d3      	adds	r3, r2, r7
 801bd4a:	42b3      	cmp	r3, r6
 801bd4c:	d852      	bhi.n	801bdf4 <uxr_framing_read_transport+0xdc>
 801bd4e:	b9d2      	cbnz	r2, 801bd86 <uxr_framing_read_transport+0x6e>
 801bd50:	2600      	movs	r6, #0
 801bd52:	f7f7 fac3 	bl	80132dc <uxr_millis>
 801bd56:	682b      	ldr	r3, [r5, #0]
 801bd58:	eba0 0008 	sub.w	r0, r0, r8
 801bd5c:	1a1b      	subs	r3, r3, r0
 801bd5e:	4630      	mov	r0, r6
 801bd60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bd64:	602b      	str	r3, [r5, #0]
 801bd66:	b005      	add	sp, #20
 801bd68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd6c:	2f00      	cmp	r7, #0
 801bd6e:	d060      	beq.n	801be32 <uxr_framing_read_transport+0x11a>
 801bd70:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 801bd74:	3f01      	subs	r7, #1
 801bd76:	b2d2      	uxtb	r2, r2
 801bd78:	b2ff      	uxtb	r7, r7
 801bd7a:	42b2      	cmp	r2, r6
 801bd7c:	d9e4      	bls.n	801bd48 <uxr_framing_read_transport+0x30>
 801bd7e:	b2f2      	uxtb	r2, r6
 801bd80:	2700      	movs	r7, #0
 801bd82:	2a00      	cmp	r2, #0
 801bd84:	d0e4      	beq.n	801bd50 <uxr_framing_read_transport+0x38>
 801bd86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bd88:	4650      	mov	r0, sl
 801bd8a:	9203      	str	r2, [sp, #12]
 801bd8c:	9300      	str	r3, [sp, #0]
 801bd8e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801bd92:	682b      	ldr	r3, [r5, #0]
 801bd94:	3102      	adds	r1, #2
 801bd96:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 801be3c <uxr_framing_read_transport+0x124>
 801bd9a:	4421      	add	r1, r4
 801bd9c:	47c8      	blx	r9
 801bd9e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801bda2:	4606      	mov	r6, r0
 801bda4:	4403      	add	r3, r0
 801bda6:	0859      	lsrs	r1, r3, #1
 801bda8:	fbab 2101 	umull	r2, r1, fp, r1
 801bdac:	222a      	movs	r2, #42	; 0x2a
 801bdae:	0889      	lsrs	r1, r1, #2
 801bdb0:	fb02 3111 	mls	r1, r2, r1, r3
 801bdb4:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 801bdb8:	2800      	cmp	r0, #0
 801bdba:	d0c9      	beq.n	801bd50 <uxr_framing_read_transport+0x38>
 801bdbc:	9a03      	ldr	r2, [sp, #12]
 801bdbe:	4290      	cmp	r0, r2
 801bdc0:	d1c7      	bne.n	801bd52 <uxr_framing_read_transport+0x3a>
 801bdc2:	2f00      	cmp	r7, #0
 801bdc4:	d0c5      	beq.n	801bd52 <uxr_framing_read_transport+0x3a>
 801bdc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bdc8:	3102      	adds	r1, #2
 801bdca:	463a      	mov	r2, r7
 801bdcc:	4650      	mov	r0, sl
 801bdce:	4421      	add	r1, r4
 801bdd0:	9300      	str	r3, [sp, #0]
 801bdd2:	2300      	movs	r3, #0
 801bdd4:	47c8      	blx	r9
 801bdd6:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801bdda:	4406      	add	r6, r0
 801bddc:	1813      	adds	r3, r2, r0
 801bdde:	085a      	lsrs	r2, r3, #1
 801bde0:	fbab 1b02 	umull	r1, fp, fp, r2
 801bde4:	222a      	movs	r2, #42	; 0x2a
 801bde6:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 801bdea:	fb02 331b 	mls	r3, r2, fp, r3
 801bdee:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801bdf2:	e7ae      	b.n	801bd52 <uxr_framing_read_transport+0x3a>
 801bdf4:	1ab6      	subs	r6, r6, r2
 801bdf6:	b2f7      	uxtb	r7, r6
 801bdf8:	e7a9      	b.n	801bd4e <uxr_framing_read_transport+0x36>
 801bdfa:	2300      	movs	r3, #0
 801bdfc:	2e28      	cmp	r6, #40	; 0x28
 801bdfe:	85a3      	strh	r3, [r4, #44]	; 0x2c
 801be00:	d9bd      	bls.n	801bd7e <uxr_framing_read_transport+0x66>
 801be02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be04:	2229      	movs	r2, #41	; 0x29
 801be06:	1ca1      	adds	r1, r4, #2
 801be08:	4650      	mov	r0, sl
 801be0a:	9300      	str	r3, [sp, #0]
 801be0c:	682b      	ldr	r3, [r5, #0]
 801be0e:	47c8      	blx	r9
 801be10:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801be14:	4606      	mov	r6, r0
 801be16:	212a      	movs	r1, #42	; 0x2a
 801be18:	4403      	add	r3, r0
 801be1a:	4808      	ldr	r0, [pc, #32]	; (801be3c <uxr_framing_read_transport+0x124>)
 801be1c:	085a      	lsrs	r2, r3, #1
 801be1e:	fba0 0202 	umull	r0, r2, r0, r2
 801be22:	0892      	lsrs	r2, r2, #2
 801be24:	fb01 3312 	mls	r3, r1, r2, r3
 801be28:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801be2c:	2e00      	cmp	r6, #0
 801be2e:	d08f      	beq.n	801bd50 <uxr_framing_read_transport+0x38>
 801be30:	e78f      	b.n	801bd52 <uxr_framing_read_transport+0x3a>
 801be32:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 801be36:	b2d2      	uxtb	r2, r2
 801be38:	e784      	b.n	801bd44 <uxr_framing_read_transport+0x2c>
 801be3a:	bf00      	nop
 801be3c:	30c30c31 	.word	0x30c30c31

0801be40 <uxr_read_framed_msg>:
 801be40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be44:	461e      	mov	r6, r3
 801be46:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801be4a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 801be4e:	b083      	sub	sp, #12
 801be50:	4604      	mov	r4, r0
 801be52:	4688      	mov	r8, r1
 801be54:	429d      	cmp	r5, r3
 801be56:	4691      	mov	r9, r2
 801be58:	f000 818c 	beq.w	801c174 <uxr_read_framed_msg+0x334>
 801be5c:	7823      	ldrb	r3, [r4, #0]
 801be5e:	4dc3      	ldr	r5, [pc, #780]	; (801c16c <uxr_read_framed_msg+0x32c>)
 801be60:	4fc3      	ldr	r7, [pc, #780]	; (801c170 <uxr_read_framed_msg+0x330>)
 801be62:	2b07      	cmp	r3, #7
 801be64:	d8fd      	bhi.n	801be62 <uxr_read_framed_msg+0x22>
 801be66:	e8df f013 	tbh	[pc, r3, lsl #1]
 801be6a:	011c      	.short	0x011c
 801be6c:	00d900fb 	.word	0x00d900fb
 801be70:	008f00ba 	.word	0x008f00ba
 801be74:	00320051 	.word	0x00320051
 801be78:	0008      	.short	0x0008
 801be7a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801be7e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801be82:	4299      	cmp	r1, r3
 801be84:	f000 814d 	beq.w	801c122 <uxr_read_framed_msg+0x2e2>
 801be88:	18e2      	adds	r2, r4, r3
 801be8a:	7892      	ldrb	r2, [r2, #2]
 801be8c:	2a7d      	cmp	r2, #125	; 0x7d
 801be8e:	f000 81b8 	beq.w	801c202 <uxr_read_framed_msg+0x3c2>
 801be92:	3301      	adds	r3, #1
 801be94:	212a      	movs	r1, #42	; 0x2a
 801be96:	2a7e      	cmp	r2, #126	; 0x7e
 801be98:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801be9c:	fba5 c000 	umull	ip, r0, r5, r0
 801bea0:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801bea4:	fb01 3310 	mls	r3, r1, r0, r3
 801bea8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801beac:	f000 8257 	beq.w	801c35e <uxr_read_framed_msg+0x51e>
 801beb0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801beb2:	2000      	movs	r0, #0
 801beb4:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 801beb6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801beba:	7020      	strb	r0, [r4, #0]
 801bebc:	b29b      	uxth	r3, r3
 801bebe:	4299      	cmp	r1, r3
 801bec0:	86a3      	strh	r3, [r4, #52]	; 0x34
 801bec2:	f000 8178 	beq.w	801c1b6 <uxr_read_framed_msg+0x376>
 801bec6:	2000      	movs	r0, #0
 801bec8:	b003      	add	sp, #12
 801beca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bece:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801bed2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801bed6:	4298      	cmp	r0, r3
 801bed8:	f000 8132 	beq.w	801c140 <uxr_read_framed_msg+0x300>
 801bedc:	18e2      	adds	r2, r4, r3
 801bede:	7891      	ldrb	r1, [r2, #2]
 801bee0:	297d      	cmp	r1, #125	; 0x7d
 801bee2:	f000 8170 	beq.w	801c1c6 <uxr_read_framed_msg+0x386>
 801bee6:	3301      	adds	r3, #1
 801bee8:	202a      	movs	r0, #42	; 0x2a
 801beea:	297e      	cmp	r1, #126	; 0x7e
 801beec:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801bef0:	fba5 c202 	umull	ip, r2, r5, r2
 801bef4:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801bef8:	fb00 3312 	mls	r3, r0, r2, r3
 801befc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801bf00:	f000 821d 	beq.w	801c33e <uxr_read_framed_msg+0x4fe>
 801bf04:	2307      	movs	r3, #7
 801bf06:	86a1      	strh	r1, [r4, #52]	; 0x34
 801bf08:	7023      	strb	r3, [r4, #0]
 801bf0a:	e7aa      	b.n	801be62 <uxr_read_framed_msg+0x22>
 801bf0c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801bf0e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801bf12:	459e      	cmp	lr, r3
 801bf14:	d827      	bhi.n	801bf66 <uxr_read_framed_msg+0x126>
 801bf16:	e032      	b.n	801bf7e <uxr_read_framed_msg+0x13e>
 801bf18:	fba5 b101 	umull	fp, r1, r5, r1
 801bf1c:	f89c c002 	ldrb.w	ip, [ip, #2]
 801bf20:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 801bf24:	0889      	lsrs	r1, r1, #2
 801bf26:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 801bf2a:	fb0b 0111 	mls	r1, fp, r1, r0
 801bf2e:	f000 80d4 	beq.w	801c0da <uxr_read_framed_msg+0x29a>
 801bf32:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801bf36:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 801bf3a:	f000 80cb 	beq.w	801c0d4 <uxr_read_framed_msg+0x294>
 801bf3e:	f806 c003 	strb.w	ip, [r6, r3]
 801bf42:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801bf44:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801bf46:	ea80 010c 	eor.w	r1, r0, ip
 801bf4a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801bf4e:	3301      	adds	r3, #1
 801bf50:	b2c9      	uxtb	r1, r1
 801bf52:	b29b      	uxth	r3, r3
 801bf54:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 801bf58:	4573      	cmp	r3, lr
 801bf5a:	8663      	strh	r3, [r4, #50]	; 0x32
 801bf5c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801bf60:	86e2      	strh	r2, [r4, #54]	; 0x36
 801bf62:	f080 811d 	bcs.w	801c1a0 <uxr_read_framed_msg+0x360>
 801bf66:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801bf6a:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 801bf6e:	1c50      	adds	r0, r2, #1
 801bf70:	eb04 0c02 	add.w	ip, r4, r2
 801bf74:	4592      	cmp	sl, r2
 801bf76:	ea4f 0150 	mov.w	r1, r0, lsr #1
 801bf7a:	d1cd      	bne.n	801bf18 <uxr_read_framed_msg+0xd8>
 801bf7c:	459e      	cmp	lr, r3
 801bf7e:	f040 8114 	bne.w	801c1aa <uxr_read_framed_msg+0x36a>
 801bf82:	2306      	movs	r3, #6
 801bf84:	7023      	strb	r3, [r4, #0]
 801bf86:	e76c      	b.n	801be62 <uxr_read_framed_msg+0x22>
 801bf88:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801bf8c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801bf90:	4298      	cmp	r0, r3
 801bf92:	f000 80c6 	beq.w	801c122 <uxr_read_framed_msg+0x2e2>
 801bf96:	18e2      	adds	r2, r4, r3
 801bf98:	7891      	ldrb	r1, [r2, #2]
 801bf9a:	297d      	cmp	r1, #125	; 0x7d
 801bf9c:	f000 8193 	beq.w	801c2c6 <uxr_read_framed_msg+0x486>
 801bfa0:	3301      	adds	r3, #1
 801bfa2:	202a      	movs	r0, #42	; 0x2a
 801bfa4:	297e      	cmp	r1, #126	; 0x7e
 801bfa6:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801bfaa:	fba5 c202 	umull	ip, r2, r5, r2
 801bfae:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801bfb2:	fb00 3312 	mls	r3, r0, r2, r3
 801bfb6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801bfba:	f000 81d0 	beq.w	801c35e <uxr_read_framed_msg+0x51e>
 801bfbe:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801bfc0:	2000      	movs	r0, #0
 801bfc2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801bfc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bfc8:	8660      	strh	r0, [r4, #50]	; 0x32
 801bfca:	b29b      	uxth	r3, r3
 801bfcc:	86e0      	strh	r0, [r4, #54]	; 0x36
 801bfce:	428b      	cmp	r3, r1
 801bfd0:	8623      	strh	r3, [r4, #48]	; 0x30
 801bfd2:	f240 80e2 	bls.w	801c19a <uxr_read_framed_msg+0x35a>
 801bfd6:	7020      	strb	r0, [r4, #0]
 801bfd8:	b003      	add	sp, #12
 801bfda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfde:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801bfe2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801bfe6:	4298      	cmp	r0, r3
 801bfe8:	f000 80aa 	beq.w	801c140 <uxr_read_framed_msg+0x300>
 801bfec:	18e2      	adds	r2, r4, r3
 801bfee:	7891      	ldrb	r1, [r2, #2]
 801bff0:	297d      	cmp	r1, #125	; 0x7d
 801bff2:	f000 8186 	beq.w	801c302 <uxr_read_framed_msg+0x4c2>
 801bff6:	3301      	adds	r3, #1
 801bff8:	202a      	movs	r0, #42	; 0x2a
 801bffa:	297e      	cmp	r1, #126	; 0x7e
 801bffc:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801c000:	fba5 c202 	umull	ip, r2, r5, r2
 801c004:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c008:	fb00 3312 	mls	r3, r0, r2, r3
 801c00c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c010:	f000 8195 	beq.w	801c33e <uxr_read_framed_msg+0x4fe>
 801c014:	2304      	movs	r3, #4
 801c016:	8621      	strh	r1, [r4, #48]	; 0x30
 801c018:	7023      	strb	r3, [r4, #0]
 801c01a:	e722      	b.n	801be62 <uxr_read_framed_msg+0x22>
 801c01c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801c020:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801c024:	4290      	cmp	r0, r2
 801c026:	f000 80b4 	beq.w	801c192 <uxr_read_framed_msg+0x352>
 801c02a:	18a3      	adds	r3, r4, r2
 801c02c:	7899      	ldrb	r1, [r3, #2]
 801c02e:	297d      	cmp	r1, #125	; 0x7d
 801c030:	f000 8107 	beq.w	801c242 <uxr_read_framed_msg+0x402>
 801c034:	3201      	adds	r2, #1
 801c036:	232a      	movs	r3, #42	; 0x2a
 801c038:	297e      	cmp	r1, #126	; 0x7e
 801c03a:	ea4f 0052 	mov.w	r0, r2, lsr #1
 801c03e:	fba5 c000 	umull	ip, r0, r5, r0
 801c042:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801c046:	fb03 2210 	mls	r2, r3, r0, r2
 801c04a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801c04e:	f000 818a 	beq.w	801c366 <uxr_read_framed_msg+0x526>
 801c052:	7863      	ldrb	r3, [r4, #1]
 801c054:	428b      	cmp	r3, r1
 801c056:	bf0c      	ite	eq
 801c058:	2303      	moveq	r3, #3
 801c05a:	2300      	movne	r3, #0
 801c05c:	7023      	strb	r3, [r4, #0]
 801c05e:	e700      	b.n	801be62 <uxr_read_framed_msg+0x22>
 801c060:	2300      	movs	r3, #0
 801c062:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801c066:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 801c06a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801c06e:	4299      	cmp	r1, r3
 801c070:	d06a      	beq.n	801c148 <uxr_read_framed_msg+0x308>
 801c072:	18e2      	adds	r2, r4, r3
 801c074:	7890      	ldrb	r0, [r2, #2]
 801c076:	287d      	cmp	r0, #125	; 0x7d
 801c078:	f000 8100 	beq.w	801c27c <uxr_read_framed_msg+0x43c>
 801c07c:	3301      	adds	r3, #1
 801c07e:	212a      	movs	r1, #42	; 0x2a
 801c080:	287e      	cmp	r0, #126	; 0x7e
 801c082:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 801c086:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801c08a:	fba5 c202 	umull	ip, r2, r5, r2
 801c08e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c092:	fb01 3312 	mls	r3, r1, r2, r3
 801c096:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c09a:	d055      	beq.n	801c148 <uxr_read_framed_msg+0x308>
 801c09c:	2302      	movs	r3, #2
 801c09e:	7023      	strb	r3, [r4, #0]
 801c0a0:	e6df      	b.n	801be62 <uxr_read_framed_msg+0x22>
 801c0a2:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 801c0a6:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 801c0aa:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801c0ae:	1c5a      	adds	r2, r3, #1
 801c0b0:	459c      	cmp	ip, r3
 801c0b2:	eb04 0103 	add.w	r1, r4, r3
 801c0b6:	ea4f 0352 	mov.w	r3, r2, lsr #1
 801c0ba:	f43f af04 	beq.w	801bec6 <uxr_read_framed_msg+0x86>
 801c0be:	fba5 0303 	umull	r0, r3, r5, r3
 801c0c2:	7889      	ldrb	r1, [r1, #2]
 801c0c4:	089b      	lsrs	r3, r3, #2
 801c0c6:	297e      	cmp	r1, #126	; 0x7e
 801c0c8:	fb0e 2313 	mls	r3, lr, r3, r2
 801c0cc:	b2db      	uxtb	r3, r3
 801c0ce:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c0d2:	d1ec      	bne.n	801c0ae <uxr_read_framed_msg+0x26e>
 801c0d4:	2301      	movs	r3, #1
 801c0d6:	7023      	strb	r3, [r4, #0]
 801c0d8:	e6c3      	b.n	801be62 <uxr_read_framed_msg+0x22>
 801c0da:	1c50      	adds	r0, r2, #1
 801c0dc:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 801c0e0:	3202      	adds	r2, #2
 801c0e2:	0841      	lsrs	r1, r0, #1
 801c0e4:	fba5 c101 	umull	ip, r1, r5, r1
 801c0e8:	0889      	lsrs	r1, r1, #2
 801c0ea:	fb0b 0111 	mls	r1, fp, r1, r0
 801c0ee:	1860      	adds	r0, r4, r1
 801c0f0:	b2c9      	uxtb	r1, r1
 801c0f2:	458a      	cmp	sl, r1
 801c0f4:	f43f af42 	beq.w	801bf7c <uxr_read_framed_msg+0x13c>
 801c0f8:	0851      	lsrs	r1, r2, #1
 801c0fa:	7880      	ldrb	r0, [r0, #2]
 801c0fc:	fba5 a101 	umull	sl, r1, r5, r1
 801c100:	287e      	cmp	r0, #126	; 0x7e
 801c102:	f080 0c20 	eor.w	ip, r0, #32
 801c106:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801c10a:	fb0b 2211 	mls	r2, fp, r1, r2
 801c10e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801c112:	f47f af14 	bne.w	801bf3e <uxr_read_framed_msg+0xfe>
 801c116:	459e      	cmp	lr, r3
 801c118:	f43f af33 	beq.w	801bf82 <uxr_read_framed_msg+0x142>
 801c11c:	2301      	movs	r3, #1
 801c11e:	7023      	strb	r3, [r4, #0]
 801c120:	e69f      	b.n	801be62 <uxr_read_framed_msg+0x22>
 801c122:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c124:	9300      	str	r3, [sp, #0]
 801c126:	2301      	movs	r3, #1
 801c128:	9301      	str	r3, [sp, #4]
 801c12a:	464a      	mov	r2, r9
 801c12c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c12e:	4641      	mov	r1, r8
 801c130:	4620      	mov	r0, r4
 801c132:	f7ff fdf1 	bl	801bd18 <uxr_framing_read_transport>
 801c136:	2800      	cmp	r0, #0
 801c138:	f43f aec5 	beq.w	801bec6 <uxr_read_framed_msg+0x86>
 801c13c:	7823      	ldrb	r3, [r4, #0]
 801c13e:	e690      	b.n	801be62 <uxr_read_framed_msg+0x22>
 801c140:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c142:	9300      	str	r3, [sp, #0]
 801c144:	2302      	movs	r3, #2
 801c146:	e7ef      	b.n	801c128 <uxr_read_framed_msg+0x2e8>
 801c148:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c14a:	464a      	mov	r2, r9
 801c14c:	4641      	mov	r1, r8
 801c14e:	4620      	mov	r0, r4
 801c150:	9300      	str	r3, [sp, #0]
 801c152:	2304      	movs	r3, #4
 801c154:	9301      	str	r3, [sp, #4]
 801c156:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c158:	f7ff fdde 	bl	801bd18 <uxr_framing_read_transport>
 801c15c:	2800      	cmp	r0, #0
 801c15e:	d1ed      	bne.n	801c13c <uxr_read_framed_msg+0x2fc>
 801c160:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801c164:	2b7e      	cmp	r3, #126	; 0x7e
 801c166:	d0e9      	beq.n	801c13c <uxr_read_framed_msg+0x2fc>
 801c168:	e6ad      	b.n	801bec6 <uxr_read_framed_msg+0x86>
 801c16a:	bf00      	nop
 801c16c:	30c30c31 	.word	0x30c30c31
 801c170:	0802047c 	.word	0x0802047c
 801c174:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c176:	9300      	str	r3, [sp, #0]
 801c178:	2305      	movs	r3, #5
 801c17a:	9301      	str	r3, [sp, #4]
 801c17c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c17e:	f7ff fdcb 	bl	801bd18 <uxr_framing_read_transport>
 801c182:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801c186:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801c18a:	429a      	cmp	r2, r3
 801c18c:	f43f ae9b 	beq.w	801bec6 <uxr_read_framed_msg+0x86>
 801c190:	e664      	b.n	801be5c <uxr_read_framed_msg+0x1c>
 801c192:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c194:	9300      	str	r3, [sp, #0]
 801c196:	2303      	movs	r3, #3
 801c198:	e7c6      	b.n	801c128 <uxr_read_framed_msg+0x2e8>
 801c19a:	2305      	movs	r3, #5
 801c19c:	7023      	strb	r3, [r4, #0]
 801c19e:	e660      	b.n	801be62 <uxr_read_framed_msg+0x22>
 801c1a0:	f43f aeef 	beq.w	801bf82 <uxr_read_framed_msg+0x142>
 801c1a4:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801c1a8:	d094      	beq.n	801c0d4 <uxr_read_framed_msg+0x294>
 801c1aa:	ebae 0303 	sub.w	r3, lr, r3
 801c1ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c1b0:	3302      	adds	r3, #2
 801c1b2:	9200      	str	r2, [sp, #0]
 801c1b4:	e7b8      	b.n	801c128 <uxr_read_framed_msg+0x2e8>
 801c1b6:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801c1ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c1bc:	7013      	strb	r3, [r2, #0]
 801c1be:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801c1c0:	b003      	add	sp, #12
 801c1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1c6:	1c59      	adds	r1, r3, #1
 801c1c8:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801c1cc:	084a      	lsrs	r2, r1, #1
 801c1ce:	fba5 e202 	umull	lr, r2, r5, r2
 801c1d2:	0892      	lsrs	r2, r2, #2
 801c1d4:	fb0c 1212 	mls	r2, ip, r2, r1
 801c1d8:	b2d1      	uxtb	r1, r2
 801c1da:	4288      	cmp	r0, r1
 801c1dc:	d0b0      	beq.n	801c140 <uxr_read_framed_msg+0x300>
 801c1de:	3302      	adds	r3, #2
 801c1e0:	4422      	add	r2, r4
 801c1e2:	7891      	ldrb	r1, [r2, #2]
 801c1e4:	085a      	lsrs	r2, r3, #1
 801c1e6:	fba5 0202 	umull	r0, r2, r5, r2
 801c1ea:	297e      	cmp	r1, #126	; 0x7e
 801c1ec:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c1f0:	fb0c 3312 	mls	r3, ip, r2, r3
 801c1f4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c1f8:	f000 80a1 	beq.w	801c33e <uxr_read_framed_msg+0x4fe>
 801c1fc:	f081 0120 	eor.w	r1, r1, #32
 801c200:	e680      	b.n	801bf04 <uxr_read_framed_msg+0xc4>
 801c202:	f103 0c01 	add.w	ip, r3, #1
 801c206:	202a      	movs	r0, #42	; 0x2a
 801c208:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801c20c:	fba5 e202 	umull	lr, r2, r5, r2
 801c210:	0892      	lsrs	r2, r2, #2
 801c212:	fb00 c212 	mls	r2, r0, r2, ip
 801c216:	fa5f fc82 	uxtb.w	ip, r2
 801c21a:	4561      	cmp	r1, ip
 801c21c:	d081      	beq.n	801c122 <uxr_read_framed_msg+0x2e2>
 801c21e:	3302      	adds	r3, #2
 801c220:	4422      	add	r2, r4
 801c222:	0859      	lsrs	r1, r3, #1
 801c224:	7892      	ldrb	r2, [r2, #2]
 801c226:	fba5 c101 	umull	ip, r1, r5, r1
 801c22a:	2a7e      	cmp	r2, #126	; 0x7e
 801c22c:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801c230:	fb00 3311 	mls	r3, r0, r1, r3
 801c234:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c238:	f000 8091 	beq.w	801c35e <uxr_read_framed_msg+0x51e>
 801c23c:	f082 0220 	eor.w	r2, r2, #32
 801c240:	e636      	b.n	801beb0 <uxr_read_framed_msg+0x70>
 801c242:	1c51      	adds	r1, r2, #1
 801c244:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801c248:	084b      	lsrs	r3, r1, #1
 801c24a:	fba5 e303 	umull	lr, r3, r5, r3
 801c24e:	089b      	lsrs	r3, r3, #2
 801c250:	fb0c 1313 	mls	r3, ip, r3, r1
 801c254:	b2d9      	uxtb	r1, r3
 801c256:	4288      	cmp	r0, r1
 801c258:	d09b      	beq.n	801c192 <uxr_read_framed_msg+0x352>
 801c25a:	3202      	adds	r2, #2
 801c25c:	4423      	add	r3, r4
 801c25e:	0850      	lsrs	r0, r2, #1
 801c260:	789b      	ldrb	r3, [r3, #2]
 801c262:	fba5 1000 	umull	r1, r0, r5, r0
 801c266:	2b7e      	cmp	r3, #126	; 0x7e
 801c268:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801c26c:	fb0c 2210 	mls	r2, ip, r0, r2
 801c270:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801c274:	d077      	beq.n	801c366 <uxr_read_framed_msg+0x526>
 801c276:	f083 0120 	eor.w	r1, r3, #32
 801c27a:	e6ea      	b.n	801c052 <uxr_read_framed_msg+0x212>
 801c27c:	f103 0c01 	add.w	ip, r3, #1
 801c280:	202a      	movs	r0, #42	; 0x2a
 801c282:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801c286:	fba5 e202 	umull	lr, r2, r5, r2
 801c28a:	0892      	lsrs	r2, r2, #2
 801c28c:	fb00 c212 	mls	r2, r0, r2, ip
 801c290:	fa5f fc82 	uxtb.w	ip, r2
 801c294:	4561      	cmp	r1, ip
 801c296:	f43f af57 	beq.w	801c148 <uxr_read_framed_msg+0x308>
 801c29a:	3302      	adds	r3, #2
 801c29c:	4422      	add	r2, r4
 801c29e:	7891      	ldrb	r1, [r2, #2]
 801c2a0:	085a      	lsrs	r2, r3, #1
 801c2a2:	fba5 c202 	umull	ip, r2, r5, r2
 801c2a6:	297e      	cmp	r1, #126	; 0x7e
 801c2a8:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801c2ac:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c2b0:	fb00 3312 	mls	r3, r0, r2, r3
 801c2b4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c2b8:	f43f af46 	beq.w	801c148 <uxr_read_framed_msg+0x308>
 801c2bc:	f081 0120 	eor.w	r1, r1, #32
 801c2c0:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801c2c4:	e6ea      	b.n	801c09c <uxr_read_framed_msg+0x25c>
 801c2c6:	1c59      	adds	r1, r3, #1
 801c2c8:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801c2cc:	084a      	lsrs	r2, r1, #1
 801c2ce:	fba5 e202 	umull	lr, r2, r5, r2
 801c2d2:	0892      	lsrs	r2, r2, #2
 801c2d4:	fb0c 1212 	mls	r2, ip, r2, r1
 801c2d8:	b2d1      	uxtb	r1, r2
 801c2da:	4288      	cmp	r0, r1
 801c2dc:	f43f af21 	beq.w	801c122 <uxr_read_framed_msg+0x2e2>
 801c2e0:	3302      	adds	r3, #2
 801c2e2:	4422      	add	r2, r4
 801c2e4:	7891      	ldrb	r1, [r2, #2]
 801c2e6:	085a      	lsrs	r2, r3, #1
 801c2e8:	fba5 0202 	umull	r0, r2, r5, r2
 801c2ec:	297e      	cmp	r1, #126	; 0x7e
 801c2ee:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c2f2:	fb0c 3312 	mls	r3, ip, r2, r3
 801c2f6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c2fa:	d030      	beq.n	801c35e <uxr_read_framed_msg+0x51e>
 801c2fc:	f081 0120 	eor.w	r1, r1, #32
 801c300:	e65d      	b.n	801bfbe <uxr_read_framed_msg+0x17e>
 801c302:	1c59      	adds	r1, r3, #1
 801c304:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801c308:	084a      	lsrs	r2, r1, #1
 801c30a:	fba5 e202 	umull	lr, r2, r5, r2
 801c30e:	0892      	lsrs	r2, r2, #2
 801c310:	fb0c 1212 	mls	r2, ip, r2, r1
 801c314:	b2d1      	uxtb	r1, r2
 801c316:	4288      	cmp	r0, r1
 801c318:	f43f af12 	beq.w	801c140 <uxr_read_framed_msg+0x300>
 801c31c:	3302      	adds	r3, #2
 801c31e:	4422      	add	r2, r4
 801c320:	7891      	ldrb	r1, [r2, #2]
 801c322:	085a      	lsrs	r2, r3, #1
 801c324:	fba5 0202 	umull	r0, r2, r5, r2
 801c328:	297e      	cmp	r1, #126	; 0x7e
 801c32a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c32e:	fb0c 3312 	mls	r3, ip, r2, r3
 801c332:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c336:	d002      	beq.n	801c33e <uxr_read_framed_msg+0x4fe>
 801c338:	f081 0120 	eor.w	r1, r1, #32
 801c33c:	e66a      	b.n	801c014 <uxr_read_framed_msg+0x1d4>
 801c33e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c340:	9300      	str	r3, [sp, #0]
 801c342:	2302      	movs	r3, #2
 801c344:	9301      	str	r3, [sp, #4]
 801c346:	464a      	mov	r2, r9
 801c348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c34a:	4641      	mov	r1, r8
 801c34c:	4620      	mov	r0, r4
 801c34e:	f7ff fce3 	bl	801bd18 <uxr_framing_read_transport>
 801c352:	2800      	cmp	r0, #0
 801c354:	f47f aef2 	bne.w	801c13c <uxr_read_framed_msg+0x2fc>
 801c358:	2301      	movs	r3, #1
 801c35a:	7023      	strb	r3, [r4, #0]
 801c35c:	e581      	b.n	801be62 <uxr_read_framed_msg+0x22>
 801c35e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c360:	9300      	str	r3, [sp, #0]
 801c362:	2301      	movs	r3, #1
 801c364:	e7ee      	b.n	801c344 <uxr_read_framed_msg+0x504>
 801c366:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c368:	9300      	str	r3, [sp, #0]
 801c36a:	2303      	movs	r3, #3
 801c36c:	e7ea      	b.n	801c344 <uxr_read_framed_msg+0x504>
 801c36e:	bf00      	nop

0801c370 <rcl_get_automatic_discovery_range>:
 801c370:	b530      	push	{r4, r5, lr}
 801c372:	2300      	movs	r3, #0
 801c374:	b083      	sub	sp, #12
 801c376:	9301      	str	r3, [sp, #4]
 801c378:	b1c0      	cbz	r0, 801c3ac <rcl_get_automatic_discovery_range+0x3c>
 801c37a:	4604      	mov	r4, r0
 801c37c:	a901      	add	r1, sp, #4
 801c37e:	4818      	ldr	r0, [pc, #96]	; (801c3e0 <rcl_get_automatic_discovery_range+0x70>)
 801c380:	f7fc fbf6 	bl	8018b70 <rcutils_get_env>
 801c384:	b110      	cbz	r0, 801c38c <rcl_get_automatic_discovery_range+0x1c>
 801c386:	2001      	movs	r0, #1
 801c388:	b003      	add	sp, #12
 801c38a:	bd30      	pop	{r4, r5, pc}
 801c38c:	9d01      	ldr	r5, [sp, #4]
 801c38e:	782b      	ldrb	r3, [r5, #0]
 801c390:	b13b      	cbz	r3, 801c3a2 <rcl_get_automatic_discovery_range+0x32>
 801c392:	4914      	ldr	r1, [pc, #80]	; (801c3e4 <rcl_get_automatic_discovery_range+0x74>)
 801c394:	4628      	mov	r0, r5
 801c396:	f7e3 ff53 	bl	8000240 <strcmp>
 801c39a:	b950      	cbnz	r0, 801c3b2 <rcl_get_automatic_discovery_range+0x42>
 801c39c:	2301      	movs	r3, #1
 801c39e:	7023      	strb	r3, [r4, #0]
 801c3a0:	e7f2      	b.n	801c388 <rcl_get_automatic_discovery_range+0x18>
 801c3a2:	2303      	movs	r3, #3
 801c3a4:	2000      	movs	r0, #0
 801c3a6:	7023      	strb	r3, [r4, #0]
 801c3a8:	b003      	add	sp, #12
 801c3aa:	bd30      	pop	{r4, r5, pc}
 801c3ac:	200b      	movs	r0, #11
 801c3ae:	b003      	add	sp, #12
 801c3b0:	bd30      	pop	{r4, r5, pc}
 801c3b2:	490d      	ldr	r1, [pc, #52]	; (801c3e8 <rcl_get_automatic_discovery_range+0x78>)
 801c3b4:	4628      	mov	r0, r5
 801c3b6:	f7e3 ff43 	bl	8000240 <strcmp>
 801c3ba:	b168      	cbz	r0, 801c3d8 <rcl_get_automatic_discovery_range+0x68>
 801c3bc:	490b      	ldr	r1, [pc, #44]	; (801c3ec <rcl_get_automatic_discovery_range+0x7c>)
 801c3be:	4628      	mov	r0, r5
 801c3c0:	f7e3 ff3e 	bl	8000240 <strcmp>
 801c3c4:	2800      	cmp	r0, #0
 801c3c6:	d0ec      	beq.n	801c3a2 <rcl_get_automatic_discovery_range+0x32>
 801c3c8:	4909      	ldr	r1, [pc, #36]	; (801c3f0 <rcl_get_automatic_discovery_range+0x80>)
 801c3ca:	4628      	mov	r0, r5
 801c3cc:	f7e3 ff38 	bl	8000240 <strcmp>
 801c3d0:	b910      	cbnz	r0, 801c3d8 <rcl_get_automatic_discovery_range+0x68>
 801c3d2:	2304      	movs	r3, #4
 801c3d4:	7023      	strb	r3, [r4, #0]
 801c3d6:	e7d7      	b.n	801c388 <rcl_get_automatic_discovery_range+0x18>
 801c3d8:	2302      	movs	r3, #2
 801c3da:	2000      	movs	r0, #0
 801c3dc:	7023      	strb	r3, [r4, #0]
 801c3de:	e7d3      	b.n	801c388 <rcl_get_automatic_discovery_range+0x18>
 801c3e0:	0802067c 	.word	0x0802067c
 801c3e4:	0802069c 	.word	0x0802069c
 801c3e8:	080206a0 	.word	0x080206a0
 801c3ec:	080206ac 	.word	0x080206ac
 801c3f0:	080206b4 	.word	0x080206b4

0801c3f4 <rcl_automatic_discovery_range_to_string>:
 801c3f4:	2804      	cmp	r0, #4
 801c3f6:	d803      	bhi.n	801c400 <rcl_automatic_discovery_range_to_string+0xc>
 801c3f8:	4b02      	ldr	r3, [pc, #8]	; (801c404 <rcl_automatic_discovery_range_to_string+0x10>)
 801c3fa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801c3fe:	4770      	bx	lr
 801c400:	2000      	movs	r0, #0
 801c402:	4770      	bx	lr
 801c404:	080207a4 	.word	0x080207a4

0801c408 <rcl_get_discovery_static_peers>:
 801c408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c40c:	2300      	movs	r3, #0
 801c40e:	b08e      	sub	sp, #56	; 0x38
 801c410:	9306      	str	r3, [sp, #24]
 801c412:	2900      	cmp	r1, #0
 801c414:	d04b      	beq.n	801c4ae <rcl_get_discovery_static_peers+0xa6>
 801c416:	4605      	mov	r5, r0
 801c418:	2800      	cmp	r0, #0
 801c41a:	d048      	beq.n	801c4ae <rcl_get_discovery_static_peers+0xa6>
 801c41c:	460c      	mov	r4, r1
 801c41e:	482c      	ldr	r0, [pc, #176]	; (801c4d0 <rcl_get_discovery_static_peers+0xc8>)
 801c420:	a906      	add	r1, sp, #24
 801c422:	f7fc fba5 	bl	8018b70 <rcutils_get_env>
 801c426:	b118      	cbz	r0, 801c430 <rcl_get_discovery_static_peers+0x28>
 801c428:	2001      	movs	r0, #1
 801c42a:	b00e      	add	sp, #56	; 0x38
 801c42c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c430:	9b06      	ldr	r3, [sp, #24]
 801c432:	2b00      	cmp	r3, #0
 801c434:	d0f8      	beq.n	801c428 <rcl_get_discovery_static_peers+0x20>
 801c436:	af07      	add	r7, sp, #28
 801c438:	4638      	mov	r0, r7
 801c43a:	f000 fc73 	bl	801cd24 <rcutils_get_zero_initialized_string_array>
 801c43e:	f104 0308 	add.w	r3, r4, #8
 801c442:	9703      	str	r7, [sp, #12]
 801c444:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c448:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801c44c:	213b      	movs	r1, #59	; 0x3b
 801c44e:	9806      	ldr	r0, [sp, #24]
 801c450:	e894 000c 	ldmia.w	r4, {r2, r3}
 801c454:	f000 fba8 	bl	801cba8 <rcutils_split>
 801c458:	2800      	cmp	r0, #0
 801c45a:	d1e5      	bne.n	801c428 <rcl_get_discovery_static_peers+0x20>
 801c45c:	4622      	mov	r2, r4
 801c45e:	9907      	ldr	r1, [sp, #28]
 801c460:	4628      	mov	r0, r5
 801c462:	f000 fcaf 	bl	801cdc4 <rmw_discovery_options_init>
 801c466:	4604      	mov	r4, r0
 801c468:	bb78      	cbnz	r0, 801c4ca <rcl_get_discovery_static_peers+0xc2>
 801c46a:	9e07      	ldr	r6, [sp, #28]
 801c46c:	b336      	cbz	r6, 801c4bc <rcl_get_discovery_static_peers+0xb4>
 801c46e:	f8dd a020 	ldr.w	sl, [sp, #32]
 801c472:	4680      	mov	r8, r0
 801c474:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 801c478:	ea4f 2904 	mov.w	r9, r4, lsl #8
 801c47c:	4608      	mov	r0, r1
 801c47e:	9105      	str	r1, [sp, #20]
 801c480:	f7e3 ff3e 	bl	8000300 <strlen>
 801c484:	28ff      	cmp	r0, #255	; 0xff
 801c486:	9905      	ldr	r1, [sp, #20]
 801c488:	d815      	bhi.n	801c4b6 <rcl_get_discovery_static_peers+0xae>
 801c48a:	6868      	ldr	r0, [r5, #4]
 801c48c:	f44f 7280 	mov.w	r2, #256	; 0x100
 801c490:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 801c494:	3401      	adds	r4, #1
 801c496:	f001 f9e8 	bl	801d86a <strncpy>
 801c49a:	686b      	ldr	r3, [r5, #4]
 801c49c:	9e07      	ldr	r6, [sp, #28]
 801c49e:	444b      	add	r3, r9
 801c4a0:	42b4      	cmp	r4, r6
 801c4a2:	f883 80ff 	strb.w	r8, [r3, #255]	; 0xff
 801c4a6:	d209      	bcs.n	801c4bc <rcl_get_discovery_static_peers+0xb4>
 801c4a8:	f8dd a020 	ldr.w	sl, [sp, #32]
 801c4ac:	e7e2      	b.n	801c474 <rcl_get_discovery_static_peers+0x6c>
 801c4ae:	200b      	movs	r0, #11
 801c4b0:	b00e      	add	sp, #56	; 0x38
 801c4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c4b6:	3401      	adds	r4, #1
 801c4b8:	42b4      	cmp	r4, r6
 801c4ba:	d3db      	bcc.n	801c474 <rcl_get_discovery_static_peers+0x6c>
 801c4bc:	4638      	mov	r0, r7
 801c4be:	f000 fc4f 	bl	801cd60 <rcutils_string_array_fini>
 801c4c2:	3800      	subs	r0, #0
 801c4c4:	bf18      	it	ne
 801c4c6:	2001      	movne	r0, #1
 801c4c8:	e7af      	b.n	801c42a <rcl_get_discovery_static_peers+0x22>
 801c4ca:	f7f9 f94f 	bl	801576c <rcl_convert_rmw_ret_to_rcl_ret>
 801c4ce:	e7ac      	b.n	801c42a <rcl_get_discovery_static_peers+0x22>
 801c4d0:	080206c4 	.word	0x080206c4

0801c4d4 <rcl_get_default_domain_id>:
 801c4d4:	b530      	push	{r4, r5, lr}
 801c4d6:	2300      	movs	r3, #0
 801c4d8:	b083      	sub	sp, #12
 801c4da:	9300      	str	r3, [sp, #0]
 801c4dc:	b1d0      	cbz	r0, 801c514 <rcl_get_default_domain_id+0x40>
 801c4de:	4604      	mov	r4, r0
 801c4e0:	4669      	mov	r1, sp
 801c4e2:	4815      	ldr	r0, [pc, #84]	; (801c538 <rcl_get_default_domain_id+0x64>)
 801c4e4:	f7fc fb44 	bl	8018b70 <rcutils_get_env>
 801c4e8:	4602      	mov	r2, r0
 801c4ea:	b110      	cbz	r0, 801c4f2 <rcl_get_default_domain_id+0x1e>
 801c4ec:	2001      	movs	r0, #1
 801c4ee:	b003      	add	sp, #12
 801c4f0:	bd30      	pop	{r4, r5, pc}
 801c4f2:	9b00      	ldr	r3, [sp, #0]
 801c4f4:	b18b      	cbz	r3, 801c51a <rcl_get_default_domain_id+0x46>
 801c4f6:	7818      	ldrb	r0, [r3, #0]
 801c4f8:	2800      	cmp	r0, #0
 801c4fa:	d0f8      	beq.n	801c4ee <rcl_get_default_domain_id+0x1a>
 801c4fc:	a901      	add	r1, sp, #4
 801c4fe:	4618      	mov	r0, r3
 801c500:	9201      	str	r2, [sp, #4]
 801c502:	f000 ffe5 	bl	801d4d0 <strtoul>
 801c506:	4605      	mov	r5, r0
 801c508:	b150      	cbz	r0, 801c520 <rcl_get_default_domain_id+0x4c>
 801c50a:	1c43      	adds	r3, r0, #1
 801c50c:	d00d      	beq.n	801c52a <rcl_get_default_domain_id+0x56>
 801c50e:	2000      	movs	r0, #0
 801c510:	6025      	str	r5, [r4, #0]
 801c512:	e7ec      	b.n	801c4ee <rcl_get_default_domain_id+0x1a>
 801c514:	200b      	movs	r0, #11
 801c516:	b003      	add	sp, #12
 801c518:	bd30      	pop	{r4, r5, pc}
 801c51a:	4618      	mov	r0, r3
 801c51c:	b003      	add	sp, #12
 801c51e:	bd30      	pop	{r4, r5, pc}
 801c520:	9b01      	ldr	r3, [sp, #4]
 801c522:	781b      	ldrb	r3, [r3, #0]
 801c524:	2b00      	cmp	r3, #0
 801c526:	d0f2      	beq.n	801c50e <rcl_get_default_domain_id+0x3a>
 801c528:	e7e0      	b.n	801c4ec <rcl_get_default_domain_id+0x18>
 801c52a:	f001 fa73 	bl	801da14 <__errno>
 801c52e:	6803      	ldr	r3, [r0, #0]
 801c530:	2b22      	cmp	r3, #34	; 0x22
 801c532:	d1ec      	bne.n	801c50e <rcl_get_default_domain_id+0x3a>
 801c534:	e7da      	b.n	801c4ec <rcl_get_default_domain_id+0x18>
 801c536:	bf00      	nop
 801c538:	080207b8 	.word	0x080207b8

0801c53c <rcl_expand_topic_name>:
 801c53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c540:	b08d      	sub	sp, #52	; 0x34
 801c542:	4698      	mov	r8, r3
 801c544:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c546:	9207      	str	r2, [sp, #28]
 801c548:	2b00      	cmp	r3, #0
 801c54a:	bf18      	it	ne
 801c54c:	f1b8 0f00 	cmpne.w	r8, #0
 801c550:	bf0c      	ite	eq
 801c552:	2301      	moveq	r3, #1
 801c554:	2300      	movne	r3, #0
 801c556:	2a00      	cmp	r2, #0
 801c558:	bf08      	it	eq
 801c55a:	f043 0301 	orreq.w	r3, r3, #1
 801c55e:	2900      	cmp	r1, #0
 801c560:	bf08      	it	eq
 801c562:	f043 0301 	orreq.w	r3, r3, #1
 801c566:	2b00      	cmp	r3, #0
 801c568:	d13d      	bne.n	801c5e6 <rcl_expand_topic_name+0xaa>
 801c56a:	fab0 f280 	clz	r2, r0
 801c56e:	4604      	mov	r4, r0
 801c570:	0952      	lsrs	r2, r2, #5
 801c572:	2800      	cmp	r0, #0
 801c574:	d037      	beq.n	801c5e6 <rcl_expand_topic_name+0xaa>
 801c576:	460f      	mov	r7, r1
 801c578:	a90b      	add	r1, sp, #44	; 0x2c
 801c57a:	f000 fa51 	bl	801ca20 <rcl_validate_topic_name>
 801c57e:	4605      	mov	r5, r0
 801c580:	bb68      	cbnz	r0, 801c5de <rcl_expand_topic_name+0xa2>
 801c582:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c584:	2b00      	cmp	r3, #0
 801c586:	d137      	bne.n	801c5f8 <rcl_expand_topic_name+0xbc>
 801c588:	4602      	mov	r2, r0
 801c58a:	a90b      	add	r1, sp, #44	; 0x2c
 801c58c:	4638      	mov	r0, r7
 801c58e:	f7fc ff69 	bl	8019464 <rmw_validate_node_name>
 801c592:	bb68      	cbnz	r0, 801c5f0 <rcl_expand_topic_name+0xb4>
 801c594:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c596:	2b00      	cmp	r3, #0
 801c598:	d133      	bne.n	801c602 <rcl_expand_topic_name+0xc6>
 801c59a:	462a      	mov	r2, r5
 801c59c:	a90b      	add	r1, sp, #44	; 0x2c
 801c59e:	9807      	ldr	r0, [sp, #28]
 801c5a0:	f7fc ff42 	bl	8019428 <rmw_validate_namespace>
 801c5a4:	bb20      	cbnz	r0, 801c5f0 <rcl_expand_topic_name+0xb4>
 801c5a6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801c5a8:	2d00      	cmp	r5, #0
 801c5aa:	f040 80a2 	bne.w	801c6f2 <rcl_expand_topic_name+0x1b6>
 801c5ae:	217b      	movs	r1, #123	; 0x7b
 801c5b0:	4620      	mov	r0, r4
 801c5b2:	f001 f93b 	bl	801d82c <strchr>
 801c5b6:	7823      	ldrb	r3, [r4, #0]
 801c5b8:	4681      	mov	r9, r0
 801c5ba:	bb20      	cbnz	r0, 801c606 <rcl_expand_topic_name+0xca>
 801c5bc:	2b2f      	cmp	r3, #47	; 0x2f
 801c5be:	d122      	bne.n	801c606 <rcl_expand_topic_name+0xca>
 801c5c0:	ab19      	add	r3, sp, #100	; 0x64
 801c5c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c5c6:	ab16      	add	r3, sp, #88	; 0x58
 801c5c8:	e88d 0003 	stmia.w	sp, {r0, r1}
 801c5cc:	4620      	mov	r0, r4
 801c5ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 801c5d0:	f7fc fc30 	bl	8018e34 <rcutils_strdup>
 801c5d4:	2800      	cmp	r0, #0
 801c5d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c5d8:	bf08      	it	eq
 801c5da:	250a      	moveq	r5, #10
 801c5dc:	6018      	str	r0, [r3, #0]
 801c5de:	4628      	mov	r0, r5
 801c5e0:	b00d      	add	sp, #52	; 0x34
 801c5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5e6:	250b      	movs	r5, #11
 801c5e8:	4628      	mov	r0, r5
 801c5ea:	b00d      	add	sp, #52	; 0x34
 801c5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5f0:	f7f9 f8bc 	bl	801576c <rcl_convert_rmw_ret_to_rcl_ret>
 801c5f4:	4605      	mov	r5, r0
 801c5f6:	e7f2      	b.n	801c5de <rcl_expand_topic_name+0xa2>
 801c5f8:	2567      	movs	r5, #103	; 0x67
 801c5fa:	4628      	mov	r0, r5
 801c5fc:	b00d      	add	sp, #52	; 0x34
 801c5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c602:	25c9      	movs	r5, #201	; 0xc9
 801c604:	e7eb      	b.n	801c5de <rcl_expand_topic_name+0xa2>
 801c606:	2b7e      	cmp	r3, #126	; 0x7e
 801c608:	d075      	beq.n	801c6f6 <rcl_expand_topic_name+0x1ba>
 801c60a:	f1b9 0f00 	cmp.w	r9, #0
 801c60e:	f000 80c2 	beq.w	801c796 <rcl_expand_topic_name+0x25a>
 801c612:	2300      	movs	r3, #0
 801c614:	46a2      	mov	sl, r4
 801c616:	461e      	mov	r6, r3
 801c618:	9508      	str	r5, [sp, #32]
 801c61a:	4655      	mov	r5, sl
 801c61c:	9409      	str	r4, [sp, #36]	; 0x24
 801c61e:	46b2      	mov	sl, r6
 801c620:	464c      	mov	r4, r9
 801c622:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801c626:	2c00      	cmp	r4, #0
 801c628:	f000 80ae 	beq.w	801c788 <rcl_expand_topic_name+0x24c>
 801c62c:	217d      	movs	r1, #125	; 0x7d
 801c62e:	4628      	mov	r0, r5
 801c630:	f001 f8fc 	bl	801d82c <strchr>
 801c634:	eba0 0904 	sub.w	r9, r0, r4
 801c638:	4621      	mov	r1, r4
 801c63a:	4869      	ldr	r0, [pc, #420]	; (801c7e0 <rcl_expand_topic_name+0x2a4>)
 801c63c:	f109 0601 	add.w	r6, r9, #1
 801c640:	4632      	mov	r2, r6
 801c642:	f001 f900 	bl	801d846 <strncmp>
 801c646:	2800      	cmp	r0, #0
 801c648:	d051      	beq.n	801c6ee <rcl_expand_topic_name+0x1b2>
 801c64a:	4632      	mov	r2, r6
 801c64c:	4621      	mov	r1, r4
 801c64e:	4865      	ldr	r0, [pc, #404]	; (801c7e4 <rcl_expand_topic_name+0x2a8>)
 801c650:	f001 f8f9 	bl	801d846 <strncmp>
 801c654:	b128      	cbz	r0, 801c662 <rcl_expand_topic_name+0x126>
 801c656:	4632      	mov	r2, r6
 801c658:	4621      	mov	r1, r4
 801c65a:	4863      	ldr	r0, [pc, #396]	; (801c7e8 <rcl_expand_topic_name+0x2ac>)
 801c65c:	f001 f8f3 	bl	801d846 <strncmp>
 801c660:	bb38      	cbnz	r0, 801c6b2 <rcl_expand_topic_name+0x176>
 801c662:	46d9      	mov	r9, fp
 801c664:	ab18      	add	r3, sp, #96	; 0x60
 801c666:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c66a:	ab16      	add	r3, sp, #88	; 0x58
 801c66c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801c670:	4620      	mov	r0, r4
 801c672:	4631      	mov	r1, r6
 801c674:	cb0c      	ldmia	r3, {r2, r3}
 801c676:	f7fc fc03 	bl	8018e80 <rcutils_strndup>
 801c67a:	4604      	mov	r4, r0
 801c67c:	2800      	cmp	r0, #0
 801c67e:	f000 80a3 	beq.w	801c7c8 <rcl_expand_topic_name+0x28c>
 801c682:	464a      	mov	r2, r9
 801c684:	4628      	mov	r0, r5
 801c686:	ab16      	add	r3, sp, #88	; 0x58
 801c688:	4621      	mov	r1, r4
 801c68a:	f7fc fad3 	bl	8018c34 <rcutils_repl_str>
 801c68e:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c690:	4605      	mov	r5, r0
 801c692:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c694:	4620      	mov	r0, r4
 801c696:	4798      	blx	r3
 801c698:	4650      	mov	r0, sl
 801c69a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c69c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c69e:	4798      	blx	r3
 801c6a0:	2d00      	cmp	r5, #0
 801c6a2:	d06c      	beq.n	801c77e <rcl_expand_topic_name+0x242>
 801c6a4:	217b      	movs	r1, #123	; 0x7b
 801c6a6:	4628      	mov	r0, r5
 801c6a8:	f001 f8c0 	bl	801d82c <strchr>
 801c6ac:	46aa      	mov	sl, r5
 801c6ae:	4604      	mov	r4, r0
 801c6b0:	e7b9      	b.n	801c626 <rcl_expand_topic_name+0xea>
 801c6b2:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801c6b6:	1c61      	adds	r1, r4, #1
 801c6b8:	4640      	mov	r0, r8
 801c6ba:	f7fc fcdd 	bl	8019078 <rcutils_string_map_getn>
 801c6be:	4681      	mov	r9, r0
 801c6c0:	2800      	cmp	r0, #0
 801c6c2:	d1cf      	bne.n	801c664 <rcl_expand_topic_name+0x128>
 801c6c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c6c6:	aa18      	add	r2, sp, #96	; 0x60
 801c6c8:	2569      	movs	r5, #105	; 0x69
 801c6ca:	6018      	str	r0, [r3, #0]
 801c6cc:	ab16      	add	r3, sp, #88	; 0x58
 801c6ce:	ca07      	ldmia	r2, {r0, r1, r2}
 801c6d0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801c6d4:	4631      	mov	r1, r6
 801c6d6:	4620      	mov	r0, r4
 801c6d8:	cb0c      	ldmia	r3, {r2, r3}
 801c6da:	f7fc fbd1 	bl	8018e80 <rcutils_strndup>
 801c6de:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c6e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c6e2:	4798      	blx	r3
 801c6e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c6e6:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c6e8:	4650      	mov	r0, sl
 801c6ea:	4798      	blx	r3
 801c6ec:	e777      	b.n	801c5de <rcl_expand_topic_name+0xa2>
 801c6ee:	46b9      	mov	r9, r7
 801c6f0:	e7b8      	b.n	801c664 <rcl_expand_topic_name+0x128>
 801c6f2:	25ca      	movs	r5, #202	; 0xca
 801c6f4:	e773      	b.n	801c5de <rcl_expand_topic_name+0xa2>
 801c6f6:	9e07      	ldr	r6, [sp, #28]
 801c6f8:	4630      	mov	r0, r6
 801c6fa:	f7e3 fe01 	bl	8000300 <strlen>
 801c6fe:	4a3b      	ldr	r2, [pc, #236]	; (801c7ec <rcl_expand_topic_name+0x2b0>)
 801c700:	4b3b      	ldr	r3, [pc, #236]	; (801c7f0 <rcl_expand_topic_name+0x2b4>)
 801c702:	9603      	str	r6, [sp, #12]
 801c704:	2801      	cmp	r0, #1
 801c706:	bf18      	it	ne
 801c708:	4613      	movne	r3, r2
 801c70a:	9704      	str	r7, [sp, #16]
 801c70c:	9302      	str	r3, [sp, #8]
 801c70e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801c710:	9300      	str	r3, [sp, #0]
 801c712:	1c63      	adds	r3, r4, #1
 801c714:	9305      	str	r3, [sp, #20]
 801c716:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c71a:	9301      	str	r3, [sp, #4]
 801c71c:	ab16      	add	r3, sp, #88	; 0x58
 801c71e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c720:	f7fc fa4e 	bl	8018bc0 <rcutils_format_string_limit>
 801c724:	4606      	mov	r6, r0
 801c726:	b350      	cbz	r0, 801c77e <rcl_expand_topic_name+0x242>
 801c728:	f1b9 0f00 	cmp.w	r9, #0
 801c72c:	d005      	beq.n	801c73a <rcl_expand_topic_name+0x1fe>
 801c72e:	217b      	movs	r1, #123	; 0x7b
 801c730:	46b2      	mov	sl, r6
 801c732:	f001 f87b 	bl	801d82c <strchr>
 801c736:	4681      	mov	r9, r0
 801c738:	e76e      	b.n	801c618 <rcl_expand_topic_name+0xdc>
 801c73a:	7833      	ldrb	r3, [r6, #0]
 801c73c:	2b2f      	cmp	r3, #47	; 0x2f
 801c73e:	d01b      	beq.n	801c778 <rcl_expand_topic_name+0x23c>
 801c740:	9c07      	ldr	r4, [sp, #28]
 801c742:	4620      	mov	r0, r4
 801c744:	f7e3 fddc 	bl	8000300 <strlen>
 801c748:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c74c:	4a29      	ldr	r2, [pc, #164]	; (801c7f4 <rcl_expand_topic_name+0x2b8>)
 801c74e:	9301      	str	r3, [sp, #4]
 801c750:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801c752:	9604      	str	r6, [sp, #16]
 801c754:	9300      	str	r3, [sp, #0]
 801c756:	4b28      	ldr	r3, [pc, #160]	; (801c7f8 <rcl_expand_topic_name+0x2bc>)
 801c758:	9403      	str	r4, [sp, #12]
 801c75a:	2801      	cmp	r0, #1
 801c75c:	bf18      	it	ne
 801c75e:	4613      	movne	r3, r2
 801c760:	9302      	str	r3, [sp, #8]
 801c762:	ab16      	add	r3, sp, #88	; 0x58
 801c764:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c766:	f7fc fa2b 	bl	8018bc0 <rcutils_format_string_limit>
 801c76a:	4603      	mov	r3, r0
 801c76c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c76e:	4630      	mov	r0, r6
 801c770:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c772:	461e      	mov	r6, r3
 801c774:	4790      	blx	r2
 801c776:	b116      	cbz	r6, 801c77e <rcl_expand_topic_name+0x242>
 801c778:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c77a:	601e      	str	r6, [r3, #0]
 801c77c:	e72f      	b.n	801c5de <rcl_expand_topic_name+0xa2>
 801c77e:	2300      	movs	r3, #0
 801c780:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801c782:	250a      	movs	r5, #10
 801c784:	6013      	str	r3, [r2, #0]
 801c786:	e72a      	b.n	801c5de <rcl_expand_topic_name+0xa2>
 801c788:	4653      	mov	r3, sl
 801c78a:	4656      	mov	r6, sl
 801c78c:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801c790:	2b00      	cmp	r3, #0
 801c792:	d1d2      	bne.n	801c73a <rcl_expand_topic_name+0x1fe>
 801c794:	7823      	ldrb	r3, [r4, #0]
 801c796:	2b2f      	cmp	r3, #47	; 0x2f
 801c798:	d01e      	beq.n	801c7d8 <rcl_expand_topic_name+0x29c>
 801c79a:	9e07      	ldr	r6, [sp, #28]
 801c79c:	4630      	mov	r0, r6
 801c79e:	f7e3 fdaf 	bl	8000300 <strlen>
 801c7a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c7a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c7a8:	9603      	str	r6, [sp, #12]
 801c7aa:	9404      	str	r4, [sp, #16]
 801c7ac:	e9cd 2300 	strd	r2, r3, [sp]
 801c7b0:	4a10      	ldr	r2, [pc, #64]	; (801c7f4 <rcl_expand_topic_name+0x2b8>)
 801c7b2:	4b11      	ldr	r3, [pc, #68]	; (801c7f8 <rcl_expand_topic_name+0x2bc>)
 801c7b4:	2801      	cmp	r0, #1
 801c7b6:	bf18      	it	ne
 801c7b8:	4613      	movne	r3, r2
 801c7ba:	9302      	str	r3, [sp, #8]
 801c7bc:	ab16      	add	r3, sp, #88	; 0x58
 801c7be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c7c0:	f7fc f9fe 	bl	8018bc0 <rcutils_format_string_limit>
 801c7c4:	4606      	mov	r6, r0
 801c7c6:	e7d6      	b.n	801c776 <rcl_expand_topic_name+0x23a>
 801c7c8:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 801c7cc:	4650      	mov	r0, sl
 801c7ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c7d0:	6014      	str	r4, [r2, #0]
 801c7d2:	250a      	movs	r5, #10
 801c7d4:	4798      	blx	r3
 801c7d6:	e702      	b.n	801c5de <rcl_expand_topic_name+0xa2>
 801c7d8:	2300      	movs	r3, #0
 801c7da:	461e      	mov	r6, r3
 801c7dc:	e7cc      	b.n	801c778 <rcl_expand_topic_name+0x23c>
 801c7de:	bf00      	nop
 801c7e0:	080207d0 	.word	0x080207d0
 801c7e4:	080207d8 	.word	0x080207d8
 801c7e8:	080207e0 	.word	0x080207e0
 801c7ec:	080207c8 	.word	0x080207c8
 801c7f0:	0801f880 	.word	0x0801f880
 801c7f4:	0801fdc8 	.word	0x0801fdc8
 801c7f8:	0801f890 	.word	0x0801f890

0801c7fc <rcl_get_default_topic_name_substitutions>:
 801c7fc:	2800      	cmp	r0, #0
 801c7fe:	bf0c      	ite	eq
 801c800:	200b      	moveq	r0, #11
 801c802:	2000      	movne	r0, #0
 801c804:	4770      	bx	lr
 801c806:	bf00      	nop

0801c808 <rcl_get_zero_initialized_guard_condition>:
 801c808:	4a03      	ldr	r2, [pc, #12]	; (801c818 <rcl_get_zero_initialized_guard_condition+0x10>)
 801c80a:	4603      	mov	r3, r0
 801c80c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c810:	e883 0003 	stmia.w	r3, {r0, r1}
 801c814:	4618      	mov	r0, r3
 801c816:	4770      	bx	lr
 801c818:	080207ec 	.word	0x080207ec

0801c81c <rcl_guard_condition_init>:
 801c81c:	b082      	sub	sp, #8
 801c81e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c820:	b087      	sub	sp, #28
 801c822:	4604      	mov	r4, r0
 801c824:	460d      	mov	r5, r1
 801c826:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 801c82a:	f10d 0c04 	add.w	ip, sp, #4
 801c82e:	e9ce 2300 	strd	r2, r3, [lr]
 801c832:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c836:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c83a:	f8de 3000 	ldr.w	r3, [lr]
 801c83e:	a801      	add	r0, sp, #4
 801c840:	f8cc 3000 	str.w	r3, [ip]
 801c844:	f7f2 f8d4 	bl	800e9f0 <rcutils_allocator_is_valid>
 801c848:	b354      	cbz	r4, 801c8a0 <rcl_guard_condition_init+0x84>
 801c84a:	f080 0301 	eor.w	r3, r0, #1
 801c84e:	b2db      	uxtb	r3, r3
 801c850:	bb33      	cbnz	r3, 801c8a0 <rcl_guard_condition_init+0x84>
 801c852:	6866      	ldr	r6, [r4, #4]
 801c854:	b9ee      	cbnz	r6, 801c892 <rcl_guard_condition_init+0x76>
 801c856:	b31d      	cbz	r5, 801c8a0 <rcl_guard_condition_init+0x84>
 801c858:	4628      	mov	r0, r5
 801c85a:	f7f8 ffa5 	bl	80157a8 <rcl_context_is_valid>
 801c85e:	b308      	cbz	r0, 801c8a4 <rcl_guard_condition_init+0x88>
 801c860:	9b01      	ldr	r3, [sp, #4]
 801c862:	201c      	movs	r0, #28
 801c864:	9905      	ldr	r1, [sp, #20]
 801c866:	4798      	blx	r3
 801c868:	4607      	mov	r7, r0
 801c86a:	6060      	str	r0, [r4, #4]
 801c86c:	b310      	cbz	r0, 801c8b4 <rcl_guard_condition_init+0x98>
 801c86e:	6828      	ldr	r0, [r5, #0]
 801c870:	3028      	adds	r0, #40	; 0x28
 801c872:	f000 fbbb 	bl	801cfec <rmw_create_guard_condition>
 801c876:	6038      	str	r0, [r7, #0]
 801c878:	6860      	ldr	r0, [r4, #4]
 801c87a:	6807      	ldr	r7, [r0, #0]
 801c87c:	b1a7      	cbz	r7, 801c8a8 <rcl_guard_condition_init+0x8c>
 801c87e:	2301      	movs	r3, #1
 801c880:	ac01      	add	r4, sp, #4
 801c882:	f100 0708 	add.w	r7, r0, #8
 801c886:	7103      	strb	r3, [r0, #4]
 801c888:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c88a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801c88c:	6823      	ldr	r3, [r4, #0]
 801c88e:	603b      	str	r3, [r7, #0]
 801c890:	e000      	b.n	801c894 <rcl_guard_condition_init+0x78>
 801c892:	2664      	movs	r6, #100	; 0x64
 801c894:	4630      	mov	r0, r6
 801c896:	b007      	add	sp, #28
 801c898:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c89c:	b002      	add	sp, #8
 801c89e:	4770      	bx	lr
 801c8a0:	260b      	movs	r6, #11
 801c8a2:	e7f7      	b.n	801c894 <rcl_guard_condition_init+0x78>
 801c8a4:	2665      	movs	r6, #101	; 0x65
 801c8a6:	e7f5      	b.n	801c894 <rcl_guard_condition_init+0x78>
 801c8a8:	9b02      	ldr	r3, [sp, #8]
 801c8aa:	2601      	movs	r6, #1
 801c8ac:	9905      	ldr	r1, [sp, #20]
 801c8ae:	4798      	blx	r3
 801c8b0:	6067      	str	r7, [r4, #4]
 801c8b2:	e7ef      	b.n	801c894 <rcl_guard_condition_init+0x78>
 801c8b4:	260a      	movs	r6, #10
 801c8b6:	e7ed      	b.n	801c894 <rcl_guard_condition_init+0x78>

0801c8b8 <rcl_guard_condition_init_from_rmw>:
 801c8b8:	b082      	sub	sp, #8
 801c8ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c8be:	b086      	sub	sp, #24
 801c8c0:	4604      	mov	r4, r0
 801c8c2:	460e      	mov	r6, r1
 801c8c4:	4615      	mov	r5, r2
 801c8c6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801c8ca:	f10d 0e04 	add.w	lr, sp, #4
 801c8ce:	f84c 3f04 	str.w	r3, [ip, #4]!
 801c8d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c8d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801c8da:	f8dc 3000 	ldr.w	r3, [ip]
 801c8de:	a801      	add	r0, sp, #4
 801c8e0:	f8ce 3000 	str.w	r3, [lr]
 801c8e4:	f7f2 f884 	bl	800e9f0 <rcutils_allocator_is_valid>
 801c8e8:	f080 0301 	eor.w	r3, r0, #1
 801c8ec:	b2db      	uxtb	r3, r3
 801c8ee:	bb3b      	cbnz	r3, 801c940 <rcl_guard_condition_init_from_rmw+0x88>
 801c8f0:	b334      	cbz	r4, 801c940 <rcl_guard_condition_init_from_rmw+0x88>
 801c8f2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801c8f6:	f1b8 0f00 	cmp.w	r8, #0
 801c8fa:	d11a      	bne.n	801c932 <rcl_guard_condition_init_from_rmw+0x7a>
 801c8fc:	b305      	cbz	r5, 801c940 <rcl_guard_condition_init_from_rmw+0x88>
 801c8fe:	4628      	mov	r0, r5
 801c900:	f7f8 ff52 	bl	80157a8 <rcl_context_is_valid>
 801c904:	b1f0      	cbz	r0, 801c944 <rcl_guard_condition_init_from_rmw+0x8c>
 801c906:	9b01      	ldr	r3, [sp, #4]
 801c908:	201c      	movs	r0, #28
 801c90a:	9905      	ldr	r1, [sp, #20]
 801c90c:	4798      	blx	r3
 801c90e:	4607      	mov	r7, r0
 801c910:	6060      	str	r0, [r4, #4]
 801c912:	b320      	cbz	r0, 801c95e <rcl_guard_condition_init_from_rmw+0xa6>
 801c914:	b1c6      	cbz	r6, 801c948 <rcl_guard_condition_init_from_rmw+0x90>
 801c916:	6006      	str	r6, [r0, #0]
 801c918:	f880 8004 	strb.w	r8, [r0, #4]
 801c91c:	ac01      	add	r4, sp, #4
 801c91e:	f107 0c08 	add.w	ip, r7, #8
 801c922:	2500      	movs	r5, #0
 801c924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c926:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c92a:	6823      	ldr	r3, [r4, #0]
 801c92c:	f8cc 3000 	str.w	r3, [ip]
 801c930:	e000      	b.n	801c934 <rcl_guard_condition_init_from_rmw+0x7c>
 801c932:	2564      	movs	r5, #100	; 0x64
 801c934:	4628      	mov	r0, r5
 801c936:	b006      	add	sp, #24
 801c938:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c93c:	b002      	add	sp, #8
 801c93e:	4770      	bx	lr
 801c940:	250b      	movs	r5, #11
 801c942:	e7f7      	b.n	801c934 <rcl_guard_condition_init_from_rmw+0x7c>
 801c944:	2565      	movs	r5, #101	; 0x65
 801c946:	e7f5      	b.n	801c934 <rcl_guard_condition_init_from_rmw+0x7c>
 801c948:	6828      	ldr	r0, [r5, #0]
 801c94a:	3028      	adds	r0, #40	; 0x28
 801c94c:	f000 fb4e 	bl	801cfec <rmw_create_guard_condition>
 801c950:	6038      	str	r0, [r7, #0]
 801c952:	6867      	ldr	r7, [r4, #4]
 801c954:	683e      	ldr	r6, [r7, #0]
 801c956:	b126      	cbz	r6, 801c962 <rcl_guard_condition_init_from_rmw+0xaa>
 801c958:	2301      	movs	r3, #1
 801c95a:	713b      	strb	r3, [r7, #4]
 801c95c:	e7de      	b.n	801c91c <rcl_guard_condition_init_from_rmw+0x64>
 801c95e:	250a      	movs	r5, #10
 801c960:	e7e8      	b.n	801c934 <rcl_guard_condition_init_from_rmw+0x7c>
 801c962:	9b02      	ldr	r3, [sp, #8]
 801c964:	4638      	mov	r0, r7
 801c966:	9905      	ldr	r1, [sp, #20]
 801c968:	2501      	movs	r5, #1
 801c96a:	4798      	blx	r3
 801c96c:	6066      	str	r6, [r4, #4]
 801c96e:	e7e1      	b.n	801c934 <rcl_guard_condition_init_from_rmw+0x7c>

0801c970 <rcl_guard_condition_fini>:
 801c970:	b570      	push	{r4, r5, r6, lr}
 801c972:	b082      	sub	sp, #8
 801c974:	b1f0      	cbz	r0, 801c9b4 <rcl_guard_condition_fini+0x44>
 801c976:	6843      	ldr	r3, [r0, #4]
 801c978:	4604      	mov	r4, r0
 801c97a:	b163      	cbz	r3, 801c996 <rcl_guard_condition_fini+0x26>
 801c97c:	6818      	ldr	r0, [r3, #0]
 801c97e:	68de      	ldr	r6, [r3, #12]
 801c980:	6999      	ldr	r1, [r3, #24]
 801c982:	b160      	cbz	r0, 801c99e <rcl_guard_condition_fini+0x2e>
 801c984:	791d      	ldrb	r5, [r3, #4]
 801c986:	b965      	cbnz	r5, 801c9a2 <rcl_guard_condition_fini+0x32>
 801c988:	4618      	mov	r0, r3
 801c98a:	47b0      	blx	r6
 801c98c:	2300      	movs	r3, #0
 801c98e:	4628      	mov	r0, r5
 801c990:	6063      	str	r3, [r4, #4]
 801c992:	b002      	add	sp, #8
 801c994:	bd70      	pop	{r4, r5, r6, pc}
 801c996:	461d      	mov	r5, r3
 801c998:	4628      	mov	r0, r5
 801c99a:	b002      	add	sp, #8
 801c99c:	bd70      	pop	{r4, r5, r6, pc}
 801c99e:	4605      	mov	r5, r0
 801c9a0:	e7f2      	b.n	801c988 <rcl_guard_condition_fini+0x18>
 801c9a2:	9101      	str	r1, [sp, #4]
 801c9a4:	f000 fb38 	bl	801d018 <rmw_destroy_guard_condition>
 801c9a8:	1e05      	subs	r5, r0, #0
 801c9aa:	6863      	ldr	r3, [r4, #4]
 801c9ac:	9901      	ldr	r1, [sp, #4]
 801c9ae:	bf18      	it	ne
 801c9b0:	2501      	movne	r5, #1
 801c9b2:	e7e9      	b.n	801c988 <rcl_guard_condition_fini+0x18>
 801c9b4:	250b      	movs	r5, #11
 801c9b6:	4628      	mov	r0, r5
 801c9b8:	b002      	add	sp, #8
 801c9ba:	bd70      	pop	{r4, r5, r6, pc}

0801c9bc <rcl_guard_condition_get_default_options>:
 801c9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c9be:	b087      	sub	sp, #28
 801c9c0:	4606      	mov	r6, r0
 801c9c2:	4c0b      	ldr	r4, [pc, #44]	; (801c9f0 <rcl_guard_condition_get_default_options+0x34>)
 801c9c4:	4668      	mov	r0, sp
 801c9c6:	f7f2 f805 	bl	800e9d4 <rcutils_get_default_allocator>
 801c9ca:	46ee      	mov	lr, sp
 801c9cc:	46a4      	mov	ip, r4
 801c9ce:	4625      	mov	r5, r4
 801c9d0:	4634      	mov	r4, r6
 801c9d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c9d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c9da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c9dc:	f8de 7000 	ldr.w	r7, [lr]
 801c9e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c9e2:	4630      	mov	r0, r6
 801c9e4:	f8cc 7000 	str.w	r7, [ip]
 801c9e8:	6027      	str	r7, [r4, #0]
 801c9ea:	b007      	add	sp, #28
 801c9ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c9ee:	bf00      	nop
 801c9f0:	20010e58 	.word	0x20010e58

0801c9f4 <rcl_trigger_guard_condition>:
 801c9f4:	b148      	cbz	r0, 801ca0a <rcl_trigger_guard_condition+0x16>
 801c9f6:	b508      	push	{r3, lr}
 801c9f8:	6843      	ldr	r3, [r0, #4]
 801c9fa:	b143      	cbz	r3, 801ca0e <rcl_trigger_guard_condition+0x1a>
 801c9fc:	6818      	ldr	r0, [r3, #0]
 801c9fe:	f000 fb1f 	bl	801d040 <rmw_trigger_guard_condition>
 801ca02:	3800      	subs	r0, #0
 801ca04:	bf18      	it	ne
 801ca06:	2001      	movne	r0, #1
 801ca08:	bd08      	pop	{r3, pc}
 801ca0a:	200b      	movs	r0, #11
 801ca0c:	4770      	bx	lr
 801ca0e:	200b      	movs	r0, #11
 801ca10:	bd08      	pop	{r3, pc}
 801ca12:	bf00      	nop

0801ca14 <rcl_guard_condition_get_rmw_handle>:
 801ca14:	b110      	cbz	r0, 801ca1c <rcl_guard_condition_get_rmw_handle+0x8>
 801ca16:	6840      	ldr	r0, [r0, #4]
 801ca18:	b100      	cbz	r0, 801ca1c <rcl_guard_condition_get_rmw_handle+0x8>
 801ca1a:	6800      	ldr	r0, [r0, #0]
 801ca1c:	4770      	bx	lr
 801ca1e:	bf00      	nop

0801ca20 <rcl_validate_topic_name>:
 801ca20:	2800      	cmp	r0, #0
 801ca22:	f000 8089 	beq.w	801cb38 <rcl_validate_topic_name+0x118>
 801ca26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ca2a:	460e      	mov	r6, r1
 801ca2c:	2900      	cmp	r1, #0
 801ca2e:	f000 8085 	beq.w	801cb3c <rcl_validate_topic_name+0x11c>
 801ca32:	4604      	mov	r4, r0
 801ca34:	4617      	mov	r7, r2
 801ca36:	f7e3 fc63 	bl	8000300 <strlen>
 801ca3a:	b1b0      	cbz	r0, 801ca6a <rcl_validate_topic_name+0x4a>
 801ca3c:	f894 e000 	ldrb.w	lr, [r4]
 801ca40:	f8df c160 	ldr.w	ip, [pc, #352]	; 801cba4 <rcl_validate_topic_name+0x184>
 801ca44:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801ca48:	f013 0304 	ands.w	r3, r3, #4
 801ca4c:	d139      	bne.n	801cac2 <rcl_validate_topic_name+0xa2>
 801ca4e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801ca52:	f814 2008 	ldrb.w	r2, [r4, r8]
 801ca56:	2a2f      	cmp	r2, #47	; 0x2f
 801ca58:	d10f      	bne.n	801ca7a <rcl_validate_topic_name+0x5a>
 801ca5a:	2202      	movs	r2, #2
 801ca5c:	6032      	str	r2, [r6, #0]
 801ca5e:	b3a7      	cbz	r7, 801caca <rcl_validate_topic_name+0xaa>
 801ca60:	4618      	mov	r0, r3
 801ca62:	f8c7 8000 	str.w	r8, [r7]
 801ca66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca6a:	2301      	movs	r3, #1
 801ca6c:	6033      	str	r3, [r6, #0]
 801ca6e:	b367      	cbz	r7, 801caca <rcl_validate_topic_name+0xaa>
 801ca70:	2300      	movs	r3, #0
 801ca72:	4618      	mov	r0, r3
 801ca74:	603b      	str	r3, [r7, #0]
 801ca76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca7a:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 801ca7e:	461d      	mov	r5, r3
 801ca80:	4619      	mov	r1, r3
 801ca82:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801ca86:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 801ca8a:	f1b9 0f09 	cmp.w	r9, #9
 801ca8e:	d91f      	bls.n	801cad0 <rcl_validate_topic_name+0xb0>
 801ca90:	f022 0920 	bic.w	r9, r2, #32
 801ca94:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 801ca98:	f1b9 0f19 	cmp.w	r9, #25
 801ca9c:	d918      	bls.n	801cad0 <rcl_validate_topic_name+0xb0>
 801ca9e:	2a5f      	cmp	r2, #95	; 0x5f
 801caa0:	d024      	beq.n	801caec <rcl_validate_topic_name+0xcc>
 801caa2:	2a2f      	cmp	r2, #47	; 0x2f
 801caa4:	d058      	beq.n	801cb58 <rcl_validate_topic_name+0x138>
 801caa6:	2a7e      	cmp	r2, #126	; 0x7e
 801caa8:	d04a      	beq.n	801cb40 <rcl_validate_topic_name+0x120>
 801caaa:	2a7b      	cmp	r2, #123	; 0x7b
 801caac:	d05b      	beq.n	801cb66 <rcl_validate_topic_name+0x146>
 801caae:	2a7d      	cmp	r2, #125	; 0x7d
 801cab0:	d169      	bne.n	801cb86 <rcl_validate_topic_name+0x166>
 801cab2:	2d00      	cmp	r5, #0
 801cab4:	d15c      	bne.n	801cb70 <rcl_validate_topic_name+0x150>
 801cab6:	2305      	movs	r3, #5
 801cab8:	6033      	str	r3, [r6, #0]
 801caba:	b137      	cbz	r7, 801caca <rcl_validate_topic_name+0xaa>
 801cabc:	2000      	movs	r0, #0
 801cabe:	6039      	str	r1, [r7, #0]
 801cac0:	e7d9      	b.n	801ca76 <rcl_validate_topic_name+0x56>
 801cac2:	2304      	movs	r3, #4
 801cac4:	6033      	str	r3, [r6, #0]
 801cac6:	2f00      	cmp	r7, #0
 801cac8:	d1d2      	bne.n	801ca70 <rcl_validate_topic_name+0x50>
 801caca:	2000      	movs	r0, #0
 801cacc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cad0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801cad4:	0752      	lsls	r2, r2, #29
 801cad6:	d509      	bpl.n	801caec <rcl_validate_topic_name+0xcc>
 801cad8:	2900      	cmp	r1, #0
 801cada:	bf0c      	ite	eq
 801cadc:	2200      	moveq	r2, #0
 801cade:	f005 0201 	andne.w	r2, r5, #1
 801cae2:	b11a      	cbz	r2, 801caec <rcl_validate_topic_name+0xcc>
 801cae4:	1e4d      	subs	r5, r1, #1
 801cae6:	429d      	cmp	r5, r3
 801cae8:	d031      	beq.n	801cb4e <rcl_validate_topic_name+0x12e>
 801caea:	4615      	mov	r5, r2
 801caec:	3101      	adds	r1, #1
 801caee:	4288      	cmp	r0, r1
 801caf0:	d1c7      	bne.n	801ca82 <rcl_validate_topic_name+0x62>
 801caf2:	2d00      	cmp	r5, #0
 801caf4:	d142      	bne.n	801cb7c <rcl_validate_topic_name+0x15c>
 801caf6:	4628      	mov	r0, r5
 801caf8:	2301      	movs	r3, #1
 801cafa:	e00c      	b.n	801cb16 <rcl_validate_topic_name+0xf6>
 801cafc:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801cb00:	d101      	bne.n	801cb06 <rcl_validate_topic_name+0xe6>
 801cb02:	2801      	cmp	r0, #1
 801cb04:	d047      	beq.n	801cb96 <rcl_validate_topic_name+0x176>
 801cb06:	1c5a      	adds	r2, r3, #1
 801cb08:	428b      	cmp	r3, r1
 801cb0a:	f100 0001 	add.w	r0, r0, #1
 801cb0e:	f104 0401 	add.w	r4, r4, #1
 801cb12:	4613      	mov	r3, r2
 801cb14:	d22e      	bcs.n	801cb74 <rcl_validate_topic_name+0x154>
 801cb16:	4580      	cmp	r8, r0
 801cb18:	d0f5      	beq.n	801cb06 <rcl_validate_topic_name+0xe6>
 801cb1a:	7822      	ldrb	r2, [r4, #0]
 801cb1c:	2a2f      	cmp	r2, #47	; 0x2f
 801cb1e:	d1ed      	bne.n	801cafc <rcl_validate_topic_name+0xdc>
 801cb20:	7862      	ldrb	r2, [r4, #1]
 801cb22:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801cb26:	0752      	lsls	r2, r2, #29
 801cb28:	d5ed      	bpl.n	801cb06 <rcl_validate_topic_name+0xe6>
 801cb2a:	2204      	movs	r2, #4
 801cb2c:	6032      	str	r2, [r6, #0]
 801cb2e:	2f00      	cmp	r7, #0
 801cb30:	d0cb      	beq.n	801caca <rcl_validate_topic_name+0xaa>
 801cb32:	2000      	movs	r0, #0
 801cb34:	603b      	str	r3, [r7, #0]
 801cb36:	e79e      	b.n	801ca76 <rcl_validate_topic_name+0x56>
 801cb38:	200b      	movs	r0, #11
 801cb3a:	4770      	bx	lr
 801cb3c:	200b      	movs	r0, #11
 801cb3e:	e79a      	b.n	801ca76 <rcl_validate_topic_name+0x56>
 801cb40:	2900      	cmp	r1, #0
 801cb42:	d0d3      	beq.n	801caec <rcl_validate_topic_name+0xcc>
 801cb44:	2306      	movs	r3, #6
 801cb46:	6033      	str	r3, [r6, #0]
 801cb48:	2f00      	cmp	r7, #0
 801cb4a:	d1b7      	bne.n	801cabc <rcl_validate_topic_name+0x9c>
 801cb4c:	e7bd      	b.n	801caca <rcl_validate_topic_name+0xaa>
 801cb4e:	2309      	movs	r3, #9
 801cb50:	6033      	str	r3, [r6, #0]
 801cb52:	2f00      	cmp	r7, #0
 801cb54:	d1b2      	bne.n	801cabc <rcl_validate_topic_name+0x9c>
 801cb56:	e7b8      	b.n	801caca <rcl_validate_topic_name+0xaa>
 801cb58:	2d00      	cmp	r5, #0
 801cb5a:	d0c7      	beq.n	801caec <rcl_validate_topic_name+0xcc>
 801cb5c:	2308      	movs	r3, #8
 801cb5e:	6033      	str	r3, [r6, #0]
 801cb60:	2f00      	cmp	r7, #0
 801cb62:	d1ab      	bne.n	801cabc <rcl_validate_topic_name+0x9c>
 801cb64:	e7b1      	b.n	801caca <rcl_validate_topic_name+0xaa>
 801cb66:	2d00      	cmp	r5, #0
 801cb68:	d1f8      	bne.n	801cb5c <rcl_validate_topic_name+0x13c>
 801cb6a:	460b      	mov	r3, r1
 801cb6c:	2501      	movs	r5, #1
 801cb6e:	e7bd      	b.n	801caec <rcl_validate_topic_name+0xcc>
 801cb70:	2500      	movs	r5, #0
 801cb72:	e7bb      	b.n	801caec <rcl_validate_topic_name+0xcc>
 801cb74:	2300      	movs	r3, #0
 801cb76:	4618      	mov	r0, r3
 801cb78:	6033      	str	r3, [r6, #0]
 801cb7a:	e77c      	b.n	801ca76 <rcl_validate_topic_name+0x56>
 801cb7c:	2205      	movs	r2, #5
 801cb7e:	6032      	str	r2, [r6, #0]
 801cb80:	2f00      	cmp	r7, #0
 801cb82:	d1d6      	bne.n	801cb32 <rcl_validate_topic_name+0x112>
 801cb84:	e7a1      	b.n	801caca <rcl_validate_topic_name+0xaa>
 801cb86:	2d00      	cmp	r5, #0
 801cb88:	bf14      	ite	ne
 801cb8a:	2308      	movne	r3, #8
 801cb8c:	2303      	moveq	r3, #3
 801cb8e:	6033      	str	r3, [r6, #0]
 801cb90:	2f00      	cmp	r7, #0
 801cb92:	d193      	bne.n	801cabc <rcl_validate_topic_name+0x9c>
 801cb94:	e799      	b.n	801caca <rcl_validate_topic_name+0xaa>
 801cb96:	2307      	movs	r3, #7
 801cb98:	6033      	str	r3, [r6, #0]
 801cb9a:	2f00      	cmp	r7, #0
 801cb9c:	d095      	beq.n	801caca <rcl_validate_topic_name+0xaa>
 801cb9e:	2301      	movs	r3, #1
 801cba0:	e7c7      	b.n	801cb32 <rcl_validate_topic_name+0x112>
 801cba2:	bf00      	nop
 801cba4:	08020864 	.word	0x08020864

0801cba8 <rcutils_split>:
 801cba8:	b082      	sub	sp, #8
 801cbaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbae:	b08d      	sub	sp, #52	; 0x34
 801cbb0:	ac16      	add	r4, sp, #88	; 0x58
 801cbb2:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801cbb4:	e884 000c 	stmia.w	r4, {r2, r3}
 801cbb8:	2f00      	cmp	r7, #0
 801cbba:	f000 80a8 	beq.w	801cd0e <rcutils_split+0x166>
 801cbbe:	4605      	mov	r5, r0
 801cbc0:	2800      	cmp	r0, #0
 801cbc2:	d07e      	beq.n	801ccc2 <rcutils_split+0x11a>
 801cbc4:	7803      	ldrb	r3, [r0, #0]
 801cbc6:	2b00      	cmp	r3, #0
 801cbc8:	d07b      	beq.n	801ccc2 <rcutils_split+0x11a>
 801cbca:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 801cbce:	460e      	mov	r6, r1
 801cbd0:	9203      	str	r2, [sp, #12]
 801cbd2:	f107 0408 	add.w	r4, r7, #8
 801cbd6:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 801cbda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801cbde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801cbe0:	4628      	mov	r0, r5
 801cbe2:	f8c4 b000 	str.w	fp, [r4]
 801cbe6:	f7e3 fb8b 	bl	8000300 <strlen>
 801cbea:	782c      	ldrb	r4, [r5, #0]
 801cbec:	182b      	adds	r3, r5, r0
 801cbee:	1ba4      	subs	r4, r4, r6
 801cbf0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801cbf4:	fab4 f484 	clz	r4, r4
 801cbf8:	42b3      	cmp	r3, r6
 801cbfa:	bf14      	ite	ne
 801cbfc:	4680      	movne	r8, r0
 801cbfe:	f1a0 0801 	subeq.w	r8, r0, #1
 801cc02:	2001      	movs	r0, #1
 801cc04:	0964      	lsrs	r4, r4, #5
 801cc06:	6038      	str	r0, [r7, #0]
 801cc08:	4544      	cmp	r4, r8
 801cc0a:	d26b      	bcs.n	801cce4 <rcutils_split+0x13c>
 801cc0c:	192b      	adds	r3, r5, r4
 801cc0e:	eb05 0108 	add.w	r1, r5, r8
 801cc12:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cc16:	42b2      	cmp	r2, r6
 801cc18:	d101      	bne.n	801cc1e <rcutils_split+0x76>
 801cc1a:	3001      	adds	r0, #1
 801cc1c:	6038      	str	r0, [r7, #0]
 801cc1e:	4299      	cmp	r1, r3
 801cc20:	d1f7      	bne.n	801cc12 <rcutils_split+0x6a>
 801cc22:	9b03      	ldr	r3, [sp, #12]
 801cc24:	0080      	lsls	r0, r0, #2
 801cc26:	4659      	mov	r1, fp
 801cc28:	4798      	blx	r3
 801cc2a:	4603      	mov	r3, r0
 801cc2c:	6078      	str	r0, [r7, #4]
 801cc2e:	2800      	cmp	r0, #0
 801cc30:	d05f      	beq.n	801ccf2 <rcutils_split+0x14a>
 801cc32:	f04f 0a00 	mov.w	sl, #0
 801cc36:	46a1      	mov	r9, r4
 801cc38:	e002      	b.n	801cc40 <rcutils_split+0x98>
 801cc3a:	3401      	adds	r4, #1
 801cc3c:	45a0      	cmp	r8, r4
 801cc3e:	d922      	bls.n	801cc86 <rcutils_split+0xde>
 801cc40:	5d2a      	ldrb	r2, [r5, r4]
 801cc42:	42b2      	cmp	r2, r6
 801cc44:	d1f9      	bne.n	801cc3a <rcutils_split+0x92>
 801cc46:	45a1      	cmp	r9, r4
 801cc48:	eba4 0209 	sub.w	r2, r4, r9
 801cc4c:	d032      	beq.n	801ccb4 <rcutils_split+0x10c>
 801cc4e:	4659      	mov	r1, fp
 801cc50:	1c90      	adds	r0, r2, #2
 801cc52:	9302      	str	r3, [sp, #8]
 801cc54:	9b03      	ldr	r3, [sp, #12]
 801cc56:	9201      	str	r2, [sp, #4]
 801cc58:	4798      	blx	r3
 801cc5a:	9a01      	ldr	r2, [sp, #4]
 801cc5c:	9b02      	ldr	r3, [sp, #8]
 801cc5e:	1c51      	adds	r1, r2, #1
 801cc60:	687a      	ldr	r2, [r7, #4]
 801cc62:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 801cc66:	eb05 0309 	add.w	r3, r5, r9
 801cc6a:	f852 002a 	ldr.w	r0, [r2, sl, lsl #2]
 801cc6e:	2800      	cmp	r0, #0
 801cc70:	d04f      	beq.n	801cd12 <rcutils_split+0x16a>
 801cc72:	4a2b      	ldr	r2, [pc, #172]	; (801cd20 <rcutils_split+0x178>)
 801cc74:	f10a 0a01 	add.w	sl, sl, #1
 801cc78:	f000 fcf6 	bl	801d668 <sniprintf>
 801cc7c:	687b      	ldr	r3, [r7, #4]
 801cc7e:	3401      	adds	r4, #1
 801cc80:	45a0      	cmp	r8, r4
 801cc82:	46a1      	mov	r9, r4
 801cc84:	d8dc      	bhi.n	801cc40 <rcutils_split+0x98>
 801cc86:	45a1      	cmp	r9, r4
 801cc88:	d039      	beq.n	801ccfe <rcutils_split+0x156>
 801cc8a:	eba4 0409 	sub.w	r4, r4, r9
 801cc8e:	4659      	mov	r1, fp
 801cc90:	9301      	str	r3, [sp, #4]
 801cc92:	1ca0      	adds	r0, r4, #2
 801cc94:	9b03      	ldr	r3, [sp, #12]
 801cc96:	4798      	blx	r3
 801cc98:	9b01      	ldr	r3, [sp, #4]
 801cc9a:	4a21      	ldr	r2, [pc, #132]	; (801cd20 <rcutils_split+0x178>)
 801cc9c:	1c61      	adds	r1, r4, #1
 801cc9e:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 801cca2:	eb05 0309 	add.w	r3, r5, r9
 801cca6:	6878      	ldr	r0, [r7, #4]
 801cca8:	2500      	movs	r5, #0
 801ccaa:	f850 002a 	ldr.w	r0, [r0, sl, lsl #2]
 801ccae:	f000 fcdb 	bl	801d668 <sniprintf>
 801ccb2:	e011      	b.n	801ccd8 <rcutils_split+0x130>
 801ccb4:	683a      	ldr	r2, [r7, #0]
 801ccb6:	2100      	movs	r1, #0
 801ccb8:	3a01      	subs	r2, #1
 801ccba:	603a      	str	r2, [r7, #0]
 801ccbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801ccc0:	e7dd      	b.n	801cc7e <rcutils_split+0xd6>
 801ccc2:	ac04      	add	r4, sp, #16
 801ccc4:	a804      	add	r0, sp, #16
 801ccc6:	f000 f82d 	bl	801cd24 <rcutils_get_zero_initialized_string_array>
 801ccca:	2500      	movs	r5, #0
 801cccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ccce:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801ccd0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801ccd4:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801ccd8:	4628      	mov	r0, r5
 801ccda:	b00d      	add	sp, #52	; 0x34
 801ccdc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cce0:	b002      	add	sp, #8
 801cce2:	4770      	bx	lr
 801cce4:	9b03      	ldr	r3, [sp, #12]
 801cce6:	4659      	mov	r1, fp
 801cce8:	2004      	movs	r0, #4
 801ccea:	4798      	blx	r3
 801ccec:	4603      	mov	r3, r0
 801ccee:	6078      	str	r0, [r7, #4]
 801ccf0:	b928      	cbnz	r0, 801ccfe <rcutils_split+0x156>
 801ccf2:	4638      	mov	r0, r7
 801ccf4:	f000 f834 	bl	801cd60 <rcutils_string_array_fini>
 801ccf8:	b970      	cbnz	r0, 801cd18 <rcutils_split+0x170>
 801ccfa:	2502      	movs	r5, #2
 801ccfc:	e7ec      	b.n	801ccd8 <rcutils_split+0x130>
 801ccfe:	683a      	ldr	r2, [r7, #0]
 801cd00:	2100      	movs	r1, #0
 801cd02:	3a01      	subs	r2, #1
 801cd04:	460d      	mov	r5, r1
 801cd06:	603a      	str	r2, [r7, #0]
 801cd08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801cd0c:	e7e4      	b.n	801ccd8 <rcutils_split+0x130>
 801cd0e:	250b      	movs	r5, #11
 801cd10:	e7e2      	b.n	801ccd8 <rcutils_split+0x130>
 801cd12:	f8c7 a000 	str.w	sl, [r7]
 801cd16:	e7ec      	b.n	801ccf2 <rcutils_split+0x14a>
 801cd18:	2502      	movs	r5, #2
 801cd1a:	f7f1 fe8d 	bl	800ea38 <rcutils_reset_error>
 801cd1e:	e7db      	b.n	801ccd8 <rcutils_split+0x130>
 801cd20:	0801f884 	.word	0x0801f884

0801cd24 <rcutils_get_zero_initialized_string_array>:
 801cd24:	b570      	push	{r4, r5, r6, lr}
 801cd26:	b086      	sub	sp, #24
 801cd28:	4606      	mov	r6, r0
 801cd2a:	4c0c      	ldr	r4, [pc, #48]	; (801cd5c <rcutils_get_zero_initialized_string_array+0x38>)
 801cd2c:	4668      	mov	r0, sp
 801cd2e:	f7f1 fe25 	bl	800e97c <rcutils_get_zero_initialized_allocator>
 801cd32:	46ee      	mov	lr, sp
 801cd34:	f104 0508 	add.w	r5, r4, #8
 801cd38:	46a4      	mov	ip, r4
 801cd3a:	4634      	mov	r4, r6
 801cd3c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801cd40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801cd42:	f8de 3000 	ldr.w	r3, [lr]
 801cd46:	602b      	str	r3, [r5, #0]
 801cd48:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801cd4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801cd4e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801cd52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801cd56:	4630      	mov	r0, r6
 801cd58:	b006      	add	sp, #24
 801cd5a:	bd70      	pop	{r4, r5, r6, pc}
 801cd5c:	20010e6c 	.word	0x20010e6c

0801cd60 <rcutils_string_array_fini>:
 801cd60:	b328      	cbz	r0, 801cdae <rcutils_string_array_fini+0x4e>
 801cd62:	b570      	push	{r4, r5, r6, lr}
 801cd64:	4604      	mov	r4, r0
 801cd66:	6840      	ldr	r0, [r0, #4]
 801cd68:	b1e0      	cbz	r0, 801cda4 <rcutils_string_array_fini+0x44>
 801cd6a:	f104 0008 	add.w	r0, r4, #8
 801cd6e:	f7f1 fe3f 	bl	800e9f0 <rcutils_allocator_is_valid>
 801cd72:	b1c0      	cbz	r0, 801cda6 <rcutils_string_array_fini+0x46>
 801cd74:	6823      	ldr	r3, [r4, #0]
 801cd76:	b1c3      	cbz	r3, 801cdaa <rcutils_string_array_fini+0x4a>
 801cd78:	2500      	movs	r5, #0
 801cd7a:	6860      	ldr	r0, [r4, #4]
 801cd7c:	462e      	mov	r6, r5
 801cd7e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801cd82:	68e3      	ldr	r3, [r4, #12]
 801cd84:	69a1      	ldr	r1, [r4, #24]
 801cd86:	4798      	blx	r3
 801cd88:	e9d4 3000 	ldrd	r3, r0, [r4]
 801cd8c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801cd90:	3501      	adds	r5, #1
 801cd92:	429d      	cmp	r5, r3
 801cd94:	d3f3      	bcc.n	801cd7e <rcutils_string_array_fini+0x1e>
 801cd96:	68e3      	ldr	r3, [r4, #12]
 801cd98:	69a1      	ldr	r1, [r4, #24]
 801cd9a:	4798      	blx	r3
 801cd9c:	2300      	movs	r3, #0
 801cd9e:	4618      	mov	r0, r3
 801cda0:	e9c4 3300 	strd	r3, r3, [r4]
 801cda4:	bd70      	pop	{r4, r5, r6, pc}
 801cda6:	200b      	movs	r0, #11
 801cda8:	bd70      	pop	{r4, r5, r6, pc}
 801cdaa:	6860      	ldr	r0, [r4, #4]
 801cdac:	e7f3      	b.n	801cd96 <rcutils_string_array_fini+0x36>
 801cdae:	200b      	movs	r0, #11
 801cdb0:	4770      	bx	lr
 801cdb2:	bf00      	nop

0801cdb4 <rmw_get_zero_initialized_discovery_options>:
 801cdb4:	b510      	push	{r4, lr}
 801cdb6:	4604      	mov	r4, r0
 801cdb8:	2220      	movs	r2, #32
 801cdba:	2100      	movs	r1, #0
 801cdbc:	f000 fd2e 	bl	801d81c <memset>
 801cdc0:	4620      	mov	r0, r4
 801cdc2:	bd10      	pop	{r4, pc}

0801cdc4 <rmw_discovery_options_init>:
 801cdc4:	b570      	push	{r4, r5, r6, lr}
 801cdc6:	b318      	cbz	r0, 801ce10 <rmw_discovery_options_init+0x4c>
 801cdc8:	4604      	mov	r4, r0
 801cdca:	4610      	mov	r0, r2
 801cdcc:	460e      	mov	r6, r1
 801cdce:	4615      	mov	r5, r2
 801cdd0:	f7f1 fe0e 	bl	800e9f0 <rcutils_allocator_is_valid>
 801cdd4:	b1e0      	cbz	r0, 801ce10 <rmw_discovery_options_init+0x4c>
 801cdd6:	68a3      	ldr	r3, [r4, #8]
 801cdd8:	b9d3      	cbnz	r3, 801ce10 <rmw_discovery_options_init+0x4c>
 801cdda:	6863      	ldr	r3, [r4, #4]
 801cddc:	b9c3      	cbnz	r3, 801ce10 <rmw_discovery_options_init+0x4c>
 801cdde:	7823      	ldrb	r3, [r4, #0]
 801cde0:	b90b      	cbnz	r3, 801cde6 <rmw_discovery_options_init+0x22>
 801cde2:	2302      	movs	r3, #2
 801cde4:	7023      	strb	r3, [r4, #0]
 801cde6:	b1a6      	cbz	r6, 801ce12 <rmw_discovery_options_init+0x4e>
 801cde8:	f44f 7180 	mov.w	r1, #256	; 0x100
 801cdec:	4630      	mov	r0, r6
 801cdee:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 801cdf2:	4798      	blx	r3
 801cdf4:	6060      	str	r0, [r4, #4]
 801cdf6:	b170      	cbz	r0, 801ce16 <rmw_discovery_options_init+0x52>
 801cdf8:	f104 0c0c 	add.w	ip, r4, #12
 801cdfc:	60a6      	str	r6, [r4, #8]
 801cdfe:	2600      	movs	r6, #0
 801ce00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ce02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ce06:	682b      	ldr	r3, [r5, #0]
 801ce08:	4630      	mov	r0, r6
 801ce0a:	f8cc 3000 	str.w	r3, [ip]
 801ce0e:	bd70      	pop	{r4, r5, r6, pc}
 801ce10:	260b      	movs	r6, #11
 801ce12:	4630      	mov	r0, r6
 801ce14:	bd70      	pop	{r4, r5, r6, pc}
 801ce16:	260a      	movs	r6, #10
 801ce18:	e7fb      	b.n	801ce12 <rmw_discovery_options_init+0x4e>
 801ce1a:	bf00      	nop

0801ce1c <on_status>:
 801ce1c:	b082      	sub	sp, #8
 801ce1e:	b002      	add	sp, #8
 801ce20:	4770      	bx	lr
 801ce22:	bf00      	nop

0801ce24 <on_topic>:
 801ce24:	4a23      	ldr	r2, [pc, #140]	; (801ceb4 <on_topic+0x90>)
 801ce26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce2a:	6812      	ldr	r2, [r2, #0]
 801ce2c:	b094      	sub	sp, #80	; 0x50
 801ce2e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801ce30:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801ce34:	9113      	str	r1, [sp, #76]	; 0x4c
 801ce36:	9312      	str	r3, [sp, #72]	; 0x48
 801ce38:	b3c2      	cbz	r2, 801ceac <on_topic+0x88>
 801ce3a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801ce3e:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801ce42:	e001      	b.n	801ce48 <on_topic+0x24>
 801ce44:	6852      	ldr	r2, [r2, #4]
 801ce46:	b38a      	cbz	r2, 801ceac <on_topic+0x88>
 801ce48:	6894      	ldr	r4, [r2, #8]
 801ce4a:	8aa3      	ldrh	r3, [r4, #20]
 801ce4c:	428b      	cmp	r3, r1
 801ce4e:	d1f9      	bne.n	801ce44 <on_topic+0x20>
 801ce50:	7da3      	ldrb	r3, [r4, #22]
 801ce52:	4283      	cmp	r3, r0
 801ce54:	d1f6      	bne.n	801ce44 <on_topic+0x20>
 801ce56:	2248      	movs	r2, #72	; 0x48
 801ce58:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801ce5c:	4668      	mov	r0, sp
 801ce5e:	f000 fe0e 	bl	801da7e <memcpy>
 801ce62:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801ce66:	4620      	mov	r0, r4
 801ce68:	cb0c      	ldmia	r3, {r2, r3}
 801ce6a:	f7f2 f9fd 	bl	800f268 <rmw_uxrce_get_static_input_buffer_for_entity>
 801ce6e:	4607      	mov	r7, r0
 801ce70:	b1e0      	cbz	r0, 801ceac <on_topic+0x88>
 801ce72:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801ce76:	462a      	mov	r2, r5
 801ce78:	4630      	mov	r0, r6
 801ce7a:	f108 0110 	add.w	r1, r8, #16
 801ce7e:	f7f2 feb9 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 801ce82:	b930      	cbnz	r0, 801ce92 <on_topic+0x6e>
 801ce84:	4639      	mov	r1, r7
 801ce86:	480c      	ldr	r0, [pc, #48]	; (801ceb8 <on_topic+0x94>)
 801ce88:	b014      	add	sp, #80	; 0x50
 801ce8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ce8e:	f7fc bb59 	b.w	8019544 <put_memory>
 801ce92:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801ce96:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801ce9a:	f7fd fd7f 	bl	801a99c <rmw_uros_epoch_nanos>
 801ce9e:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801cea2:	2305      	movs	r3, #5
 801cea4:	e942 0102 	strd	r0, r1, [r2, #-8]
 801cea8:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801ceac:	b014      	add	sp, #80	; 0x50
 801ceae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ceb2:	bf00      	nop
 801ceb4:	2001063c 	.word	0x2001063c
 801ceb8:	2001062c 	.word	0x2001062c

0801cebc <on_request>:
 801cebc:	4824      	ldr	r0, [pc, #144]	; (801cf50 <on_request+0x94>)
 801cebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cec2:	6800      	ldr	r0, [r0, #0]
 801cec4:	b094      	sub	sp, #80	; 0x50
 801cec6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801cec8:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801cecc:	9113      	str	r1, [sp, #76]	; 0x4c
 801cece:	2800      	cmp	r0, #0
 801ced0:	d03b      	beq.n	801cf4a <on_request+0x8e>
 801ced2:	461d      	mov	r5, r3
 801ced4:	e001      	b.n	801ceda <on_request+0x1e>
 801ced6:	6840      	ldr	r0, [r0, #4]
 801ced8:	b3b8      	cbz	r0, 801cf4a <on_request+0x8e>
 801ceda:	6884      	ldr	r4, [r0, #8]
 801cedc:	8b21      	ldrh	r1, [r4, #24]
 801cede:	4291      	cmp	r1, r2
 801cee0:	d1f9      	bne.n	801ced6 <on_request+0x1a>
 801cee2:	2248      	movs	r2, #72	; 0x48
 801cee4:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801cee8:	4668      	mov	r0, sp
 801ceea:	f000 fdc8 	bl	801da7e <memcpy>
 801ceee:	f104 0320 	add.w	r3, r4, #32
 801cef2:	4620      	mov	r0, r4
 801cef4:	cb0c      	ldmia	r3, {r2, r3}
 801cef6:	f7f2 f9b7 	bl	800f268 <rmw_uxrce_get_static_input_buffer_for_entity>
 801cefa:	4680      	mov	r8, r0
 801cefc:	b328      	cbz	r0, 801cf4a <on_request+0x8e>
 801cefe:	4630      	mov	r0, r6
 801cf00:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801cf04:	463a      	mov	r2, r7
 801cf06:	f106 0110 	add.w	r1, r6, #16
 801cf0a:	f7f2 fe73 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 801cf0e:	b930      	cbnz	r0, 801cf1e <on_request+0x62>
 801cf10:	4641      	mov	r1, r8
 801cf12:	4810      	ldr	r0, [pc, #64]	; (801cf54 <on_request+0x98>)
 801cf14:	b014      	add	sp, #80	; 0x50
 801cf16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cf1a:	f7fc bb13 	b.w	8019544 <put_memory>
 801cf1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801cf20:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 801cf24:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801cf28:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801cf2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cf30:	e895 0003 	ldmia.w	r5, {r0, r1}
 801cf34:	e88c 0003 	stmia.w	ip, {r0, r1}
 801cf38:	f7fd fd30 	bl	801a99c <rmw_uros_epoch_nanos>
 801cf3c:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801cf40:	2303      	movs	r3, #3
 801cf42:	e942 0102 	strd	r0, r1, [r2, #-8]
 801cf46:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801cf4a:	b014      	add	sp, #80	; 0x50
 801cf4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf50:	2001060c 	.word	0x2001060c
 801cf54:	2001062c 	.word	0x2001062c

0801cf58 <on_reply>:
 801cf58:	4822      	ldr	r0, [pc, #136]	; (801cfe4 <on_reply+0x8c>)
 801cf5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf5e:	6800      	ldr	r0, [r0, #0]
 801cf60:	b094      	sub	sp, #80	; 0x50
 801cf62:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801cf64:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801cf68:	9113      	str	r1, [sp, #76]	; 0x4c
 801cf6a:	b3b8      	cbz	r0, 801cfdc <on_reply+0x84>
 801cf6c:	461d      	mov	r5, r3
 801cf6e:	e001      	b.n	801cf74 <on_reply+0x1c>
 801cf70:	6840      	ldr	r0, [r0, #4]
 801cf72:	b398      	cbz	r0, 801cfdc <on_reply+0x84>
 801cf74:	6884      	ldr	r4, [r0, #8]
 801cf76:	8b21      	ldrh	r1, [r4, #24]
 801cf78:	4291      	cmp	r1, r2
 801cf7a:	d1f9      	bne.n	801cf70 <on_reply+0x18>
 801cf7c:	2248      	movs	r2, #72	; 0x48
 801cf7e:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801cf82:	4668      	mov	r0, sp
 801cf84:	f000 fd7b 	bl	801da7e <memcpy>
 801cf88:	f104 0320 	add.w	r3, r4, #32
 801cf8c:	4620      	mov	r0, r4
 801cf8e:	cb0c      	ldmia	r3, {r2, r3}
 801cf90:	f7f2 f96a 	bl	800f268 <rmw_uxrce_get_static_input_buffer_for_entity>
 801cf94:	4680      	mov	r8, r0
 801cf96:	b308      	cbz	r0, 801cfdc <on_reply+0x84>
 801cf98:	4630      	mov	r0, r6
 801cf9a:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801cf9e:	463a      	mov	r2, r7
 801cfa0:	f106 0110 	add.w	r1, r6, #16
 801cfa4:	f7f2 fe26 	bl	800fbf4 <ucdr_deserialize_array_uint8_t>
 801cfa8:	b930      	cbnz	r0, 801cfb8 <on_reply+0x60>
 801cfaa:	4641      	mov	r1, r8
 801cfac:	480e      	ldr	r0, [pc, #56]	; (801cfe8 <on_reply+0x90>)
 801cfae:	b014      	add	sp, #80	; 0x50
 801cfb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cfb4:	f7fc bac6 	b.w	8019544 <put_memory>
 801cfb8:	2200      	movs	r2, #0
 801cfba:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801cfbe:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801cfc2:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 801cfc6:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 801cfca:	f7fd fce7 	bl	801a99c <rmw_uros_epoch_nanos>
 801cfce:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801cfd2:	2304      	movs	r3, #4
 801cfd4:	e942 0102 	strd	r0, r1, [r2, #-8]
 801cfd8:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801cfdc:	b014      	add	sp, #80	; 0x50
 801cfde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cfe2:	bf00      	nop
 801cfe4:	2000bc58 	.word	0x2000bc58
 801cfe8:	2001062c 	.word	0x2001062c

0801cfec <rmw_create_guard_condition>:
 801cfec:	b538      	push	{r3, r4, r5, lr}
 801cfee:	4605      	mov	r5, r0
 801cff0:	4808      	ldr	r0, [pc, #32]	; (801d014 <rmw_create_guard_condition+0x28>)
 801cff2:	f7fc fa97 	bl	8019524 <get_memory>
 801cff6:	4603      	mov	r3, r0
 801cff8:	b148      	cbz	r0, 801d00e <rmw_create_guard_condition+0x22>
 801cffa:	6884      	ldr	r4, [r0, #8]
 801cffc:	2300      	movs	r3, #0
 801cffe:	61e5      	str	r5, [r4, #28]
 801d000:	7423      	strb	r3, [r4, #16]
 801d002:	f7fc fb15 	bl	8019630 <rmw_get_implementation_identifier>
 801d006:	f104 0314 	add.w	r3, r4, #20
 801d00a:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801d00e:	4618      	mov	r0, r3
 801d010:	bd38      	pop	{r3, r4, r5, pc}
 801d012:	bf00      	nop
 801d014:	200105cc 	.word	0x200105cc

0801d018 <rmw_destroy_guard_condition>:
 801d018:	b508      	push	{r3, lr}
 801d01a:	4b08      	ldr	r3, [pc, #32]	; (801d03c <rmw_destroy_guard_condition+0x24>)
 801d01c:	6819      	ldr	r1, [r3, #0]
 801d01e:	b911      	cbnz	r1, 801d026 <rmw_destroy_guard_condition+0xe>
 801d020:	e00a      	b.n	801d038 <rmw_destroy_guard_condition+0x20>
 801d022:	6849      	ldr	r1, [r1, #4]
 801d024:	b141      	cbz	r1, 801d038 <rmw_destroy_guard_condition+0x20>
 801d026:	688b      	ldr	r3, [r1, #8]
 801d028:	3314      	adds	r3, #20
 801d02a:	4298      	cmp	r0, r3
 801d02c:	d1f9      	bne.n	801d022 <rmw_destroy_guard_condition+0xa>
 801d02e:	4803      	ldr	r0, [pc, #12]	; (801d03c <rmw_destroy_guard_condition+0x24>)
 801d030:	f7fc fa88 	bl	8019544 <put_memory>
 801d034:	2000      	movs	r0, #0
 801d036:	bd08      	pop	{r3, pc}
 801d038:	2001      	movs	r0, #1
 801d03a:	bd08      	pop	{r3, pc}
 801d03c:	200105cc 	.word	0x200105cc

0801d040 <rmw_trigger_guard_condition>:
 801d040:	b160      	cbz	r0, 801d05c <rmw_trigger_guard_condition+0x1c>
 801d042:	b510      	push	{r4, lr}
 801d044:	4604      	mov	r4, r0
 801d046:	6800      	ldr	r0, [r0, #0]
 801d048:	f7f2 fb22 	bl	800f690 <is_uxrce_rmw_identifier_valid>
 801d04c:	b908      	cbnz	r0, 801d052 <rmw_trigger_guard_condition+0x12>
 801d04e:	2001      	movs	r0, #1
 801d050:	bd10      	pop	{r4, pc}
 801d052:	6863      	ldr	r3, [r4, #4]
 801d054:	2201      	movs	r2, #1
 801d056:	2000      	movs	r0, #0
 801d058:	741a      	strb	r2, [r3, #16]
 801d05a:	bd10      	pop	{r4, pc}
 801d05c:	2001      	movs	r0, #1
 801d05e:	4770      	bx	lr

0801d060 <calloc>:
 801d060:	4b02      	ldr	r3, [pc, #8]	; (801d06c <calloc+0xc>)
 801d062:	460a      	mov	r2, r1
 801d064:	4601      	mov	r1, r0
 801d066:	6818      	ldr	r0, [r3, #0]
 801d068:	f000 b802 	b.w	801d070 <_calloc_r>
 801d06c:	20002478 	.word	0x20002478

0801d070 <_calloc_r>:
 801d070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d072:	fba1 2402 	umull	r2, r4, r1, r2
 801d076:	b94c      	cbnz	r4, 801d08c <_calloc_r+0x1c>
 801d078:	4611      	mov	r1, r2
 801d07a:	9201      	str	r2, [sp, #4]
 801d07c:	f000 f886 	bl	801d18c <_malloc_r>
 801d080:	9a01      	ldr	r2, [sp, #4]
 801d082:	4605      	mov	r5, r0
 801d084:	b930      	cbnz	r0, 801d094 <_calloc_r+0x24>
 801d086:	4628      	mov	r0, r5
 801d088:	b003      	add	sp, #12
 801d08a:	bd30      	pop	{r4, r5, pc}
 801d08c:	220c      	movs	r2, #12
 801d08e:	6002      	str	r2, [r0, #0]
 801d090:	2500      	movs	r5, #0
 801d092:	e7f8      	b.n	801d086 <_calloc_r+0x16>
 801d094:	4621      	mov	r1, r4
 801d096:	f000 fbc1 	bl	801d81c <memset>
 801d09a:	e7f4      	b.n	801d086 <_calloc_r+0x16>

0801d09c <getenv>:
 801d09c:	b507      	push	{r0, r1, r2, lr}
 801d09e:	4b04      	ldr	r3, [pc, #16]	; (801d0b0 <getenv+0x14>)
 801d0a0:	4601      	mov	r1, r0
 801d0a2:	aa01      	add	r2, sp, #4
 801d0a4:	6818      	ldr	r0, [r3, #0]
 801d0a6:	f000 f805 	bl	801d0b4 <_findenv_r>
 801d0aa:	b003      	add	sp, #12
 801d0ac:	f85d fb04 	ldr.w	pc, [sp], #4
 801d0b0:	20002478 	.word	0x20002478

0801d0b4 <_findenv_r>:
 801d0b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0b8:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801d128 <_findenv_r+0x74>
 801d0bc:	4607      	mov	r7, r0
 801d0be:	4689      	mov	r9, r1
 801d0c0:	4616      	mov	r6, r2
 801d0c2:	f000 fd09 	bl	801dad8 <__env_lock>
 801d0c6:	f8da 4000 	ldr.w	r4, [sl]
 801d0ca:	b134      	cbz	r4, 801d0da <_findenv_r+0x26>
 801d0cc:	464b      	mov	r3, r9
 801d0ce:	4698      	mov	r8, r3
 801d0d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d0d4:	b13a      	cbz	r2, 801d0e6 <_findenv_r+0x32>
 801d0d6:	2a3d      	cmp	r2, #61	; 0x3d
 801d0d8:	d1f9      	bne.n	801d0ce <_findenv_r+0x1a>
 801d0da:	4638      	mov	r0, r7
 801d0dc:	f000 fd02 	bl	801dae4 <__env_unlock>
 801d0e0:	2000      	movs	r0, #0
 801d0e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0e6:	eba8 0809 	sub.w	r8, r8, r9
 801d0ea:	46a3      	mov	fp, r4
 801d0ec:	f854 0b04 	ldr.w	r0, [r4], #4
 801d0f0:	2800      	cmp	r0, #0
 801d0f2:	d0f2      	beq.n	801d0da <_findenv_r+0x26>
 801d0f4:	4642      	mov	r2, r8
 801d0f6:	4649      	mov	r1, r9
 801d0f8:	f000 fba5 	bl	801d846 <strncmp>
 801d0fc:	2800      	cmp	r0, #0
 801d0fe:	d1f4      	bne.n	801d0ea <_findenv_r+0x36>
 801d100:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801d104:	eb03 0508 	add.w	r5, r3, r8
 801d108:	f813 3008 	ldrb.w	r3, [r3, r8]
 801d10c:	2b3d      	cmp	r3, #61	; 0x3d
 801d10e:	d1ec      	bne.n	801d0ea <_findenv_r+0x36>
 801d110:	f8da 3000 	ldr.w	r3, [sl]
 801d114:	ebab 0303 	sub.w	r3, fp, r3
 801d118:	109b      	asrs	r3, r3, #2
 801d11a:	4638      	mov	r0, r7
 801d11c:	6033      	str	r3, [r6, #0]
 801d11e:	f000 fce1 	bl	801dae4 <__env_unlock>
 801d122:	1c68      	adds	r0, r5, #1
 801d124:	e7dd      	b.n	801d0e2 <_findenv_r+0x2e>
 801d126:	bf00      	nop
 801d128:	20000000 	.word	0x20000000

0801d12c <malloc>:
 801d12c:	4b02      	ldr	r3, [pc, #8]	; (801d138 <malloc+0xc>)
 801d12e:	4601      	mov	r1, r0
 801d130:	6818      	ldr	r0, [r3, #0]
 801d132:	f000 b82b 	b.w	801d18c <_malloc_r>
 801d136:	bf00      	nop
 801d138:	20002478 	.word	0x20002478

0801d13c <free>:
 801d13c:	4b02      	ldr	r3, [pc, #8]	; (801d148 <free+0xc>)
 801d13e:	4601      	mov	r1, r0
 801d140:	6818      	ldr	r0, [r3, #0]
 801d142:	f000 bcd5 	b.w	801daf0 <_free_r>
 801d146:	bf00      	nop
 801d148:	20002478 	.word	0x20002478

0801d14c <sbrk_aligned>:
 801d14c:	b570      	push	{r4, r5, r6, lr}
 801d14e:	4e0e      	ldr	r6, [pc, #56]	; (801d188 <sbrk_aligned+0x3c>)
 801d150:	460c      	mov	r4, r1
 801d152:	6831      	ldr	r1, [r6, #0]
 801d154:	4605      	mov	r5, r0
 801d156:	b911      	cbnz	r1, 801d15e <sbrk_aligned+0x12>
 801d158:	f000 fc3a 	bl	801d9d0 <_sbrk_r>
 801d15c:	6030      	str	r0, [r6, #0]
 801d15e:	4621      	mov	r1, r4
 801d160:	4628      	mov	r0, r5
 801d162:	f000 fc35 	bl	801d9d0 <_sbrk_r>
 801d166:	1c43      	adds	r3, r0, #1
 801d168:	d00a      	beq.n	801d180 <sbrk_aligned+0x34>
 801d16a:	1cc4      	adds	r4, r0, #3
 801d16c:	f024 0403 	bic.w	r4, r4, #3
 801d170:	42a0      	cmp	r0, r4
 801d172:	d007      	beq.n	801d184 <sbrk_aligned+0x38>
 801d174:	1a21      	subs	r1, r4, r0
 801d176:	4628      	mov	r0, r5
 801d178:	f000 fc2a 	bl	801d9d0 <_sbrk_r>
 801d17c:	3001      	adds	r0, #1
 801d17e:	d101      	bne.n	801d184 <sbrk_aligned+0x38>
 801d180:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801d184:	4620      	mov	r0, r4
 801d186:	bd70      	pop	{r4, r5, r6, pc}
 801d188:	20010e8c 	.word	0x20010e8c

0801d18c <_malloc_r>:
 801d18c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d190:	1ccd      	adds	r5, r1, #3
 801d192:	f025 0503 	bic.w	r5, r5, #3
 801d196:	3508      	adds	r5, #8
 801d198:	2d0c      	cmp	r5, #12
 801d19a:	bf38      	it	cc
 801d19c:	250c      	movcc	r5, #12
 801d19e:	2d00      	cmp	r5, #0
 801d1a0:	4607      	mov	r7, r0
 801d1a2:	db01      	blt.n	801d1a8 <_malloc_r+0x1c>
 801d1a4:	42a9      	cmp	r1, r5
 801d1a6:	d905      	bls.n	801d1b4 <_malloc_r+0x28>
 801d1a8:	230c      	movs	r3, #12
 801d1aa:	603b      	str	r3, [r7, #0]
 801d1ac:	2600      	movs	r6, #0
 801d1ae:	4630      	mov	r0, r6
 801d1b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d1b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801d288 <_malloc_r+0xfc>
 801d1b8:	f000 f868 	bl	801d28c <__malloc_lock>
 801d1bc:	f8d8 3000 	ldr.w	r3, [r8]
 801d1c0:	461c      	mov	r4, r3
 801d1c2:	bb5c      	cbnz	r4, 801d21c <_malloc_r+0x90>
 801d1c4:	4629      	mov	r1, r5
 801d1c6:	4638      	mov	r0, r7
 801d1c8:	f7ff ffc0 	bl	801d14c <sbrk_aligned>
 801d1cc:	1c43      	adds	r3, r0, #1
 801d1ce:	4604      	mov	r4, r0
 801d1d0:	d155      	bne.n	801d27e <_malloc_r+0xf2>
 801d1d2:	f8d8 4000 	ldr.w	r4, [r8]
 801d1d6:	4626      	mov	r6, r4
 801d1d8:	2e00      	cmp	r6, #0
 801d1da:	d145      	bne.n	801d268 <_malloc_r+0xdc>
 801d1dc:	2c00      	cmp	r4, #0
 801d1de:	d048      	beq.n	801d272 <_malloc_r+0xe6>
 801d1e0:	6823      	ldr	r3, [r4, #0]
 801d1e2:	4631      	mov	r1, r6
 801d1e4:	4638      	mov	r0, r7
 801d1e6:	eb04 0903 	add.w	r9, r4, r3
 801d1ea:	f000 fbf1 	bl	801d9d0 <_sbrk_r>
 801d1ee:	4581      	cmp	r9, r0
 801d1f0:	d13f      	bne.n	801d272 <_malloc_r+0xe6>
 801d1f2:	6821      	ldr	r1, [r4, #0]
 801d1f4:	1a6d      	subs	r5, r5, r1
 801d1f6:	4629      	mov	r1, r5
 801d1f8:	4638      	mov	r0, r7
 801d1fa:	f7ff ffa7 	bl	801d14c <sbrk_aligned>
 801d1fe:	3001      	adds	r0, #1
 801d200:	d037      	beq.n	801d272 <_malloc_r+0xe6>
 801d202:	6823      	ldr	r3, [r4, #0]
 801d204:	442b      	add	r3, r5
 801d206:	6023      	str	r3, [r4, #0]
 801d208:	f8d8 3000 	ldr.w	r3, [r8]
 801d20c:	2b00      	cmp	r3, #0
 801d20e:	d038      	beq.n	801d282 <_malloc_r+0xf6>
 801d210:	685a      	ldr	r2, [r3, #4]
 801d212:	42a2      	cmp	r2, r4
 801d214:	d12b      	bne.n	801d26e <_malloc_r+0xe2>
 801d216:	2200      	movs	r2, #0
 801d218:	605a      	str	r2, [r3, #4]
 801d21a:	e00f      	b.n	801d23c <_malloc_r+0xb0>
 801d21c:	6822      	ldr	r2, [r4, #0]
 801d21e:	1b52      	subs	r2, r2, r5
 801d220:	d41f      	bmi.n	801d262 <_malloc_r+0xd6>
 801d222:	2a0b      	cmp	r2, #11
 801d224:	d917      	bls.n	801d256 <_malloc_r+0xca>
 801d226:	1961      	adds	r1, r4, r5
 801d228:	42a3      	cmp	r3, r4
 801d22a:	6025      	str	r5, [r4, #0]
 801d22c:	bf18      	it	ne
 801d22e:	6059      	strne	r1, [r3, #4]
 801d230:	6863      	ldr	r3, [r4, #4]
 801d232:	bf08      	it	eq
 801d234:	f8c8 1000 	streq.w	r1, [r8]
 801d238:	5162      	str	r2, [r4, r5]
 801d23a:	604b      	str	r3, [r1, #4]
 801d23c:	4638      	mov	r0, r7
 801d23e:	f104 060b 	add.w	r6, r4, #11
 801d242:	f000 f829 	bl	801d298 <__malloc_unlock>
 801d246:	f026 0607 	bic.w	r6, r6, #7
 801d24a:	1d23      	adds	r3, r4, #4
 801d24c:	1af2      	subs	r2, r6, r3
 801d24e:	d0ae      	beq.n	801d1ae <_malloc_r+0x22>
 801d250:	1b9b      	subs	r3, r3, r6
 801d252:	50a3      	str	r3, [r4, r2]
 801d254:	e7ab      	b.n	801d1ae <_malloc_r+0x22>
 801d256:	42a3      	cmp	r3, r4
 801d258:	6862      	ldr	r2, [r4, #4]
 801d25a:	d1dd      	bne.n	801d218 <_malloc_r+0x8c>
 801d25c:	f8c8 2000 	str.w	r2, [r8]
 801d260:	e7ec      	b.n	801d23c <_malloc_r+0xb0>
 801d262:	4623      	mov	r3, r4
 801d264:	6864      	ldr	r4, [r4, #4]
 801d266:	e7ac      	b.n	801d1c2 <_malloc_r+0x36>
 801d268:	4634      	mov	r4, r6
 801d26a:	6876      	ldr	r6, [r6, #4]
 801d26c:	e7b4      	b.n	801d1d8 <_malloc_r+0x4c>
 801d26e:	4613      	mov	r3, r2
 801d270:	e7cc      	b.n	801d20c <_malloc_r+0x80>
 801d272:	230c      	movs	r3, #12
 801d274:	603b      	str	r3, [r7, #0]
 801d276:	4638      	mov	r0, r7
 801d278:	f000 f80e 	bl	801d298 <__malloc_unlock>
 801d27c:	e797      	b.n	801d1ae <_malloc_r+0x22>
 801d27e:	6025      	str	r5, [r4, #0]
 801d280:	e7dc      	b.n	801d23c <_malloc_r+0xb0>
 801d282:	605b      	str	r3, [r3, #4]
 801d284:	deff      	udf	#255	; 0xff
 801d286:	bf00      	nop
 801d288:	20010e88 	.word	0x20010e88

0801d28c <__malloc_lock>:
 801d28c:	4801      	ldr	r0, [pc, #4]	; (801d294 <__malloc_lock+0x8>)
 801d28e:	f000 bbec 	b.w	801da6a <__retarget_lock_acquire_recursive>
 801d292:	bf00      	nop
 801d294:	20010fd1 	.word	0x20010fd1

0801d298 <__malloc_unlock>:
 801d298:	4801      	ldr	r0, [pc, #4]	; (801d2a0 <__malloc_unlock+0x8>)
 801d29a:	f000 bbe7 	b.w	801da6c <__retarget_lock_release_recursive>
 801d29e:	bf00      	nop
 801d2a0:	20010fd1 	.word	0x20010fd1

0801d2a4 <srand>:
 801d2a4:	b538      	push	{r3, r4, r5, lr}
 801d2a6:	4b10      	ldr	r3, [pc, #64]	; (801d2e8 <srand+0x44>)
 801d2a8:	681d      	ldr	r5, [r3, #0]
 801d2aa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801d2ac:	4604      	mov	r4, r0
 801d2ae:	b9b3      	cbnz	r3, 801d2de <srand+0x3a>
 801d2b0:	2018      	movs	r0, #24
 801d2b2:	f7ff ff3b 	bl	801d12c <malloc>
 801d2b6:	4602      	mov	r2, r0
 801d2b8:	6328      	str	r0, [r5, #48]	; 0x30
 801d2ba:	b920      	cbnz	r0, 801d2c6 <srand+0x22>
 801d2bc:	4b0b      	ldr	r3, [pc, #44]	; (801d2ec <srand+0x48>)
 801d2be:	480c      	ldr	r0, [pc, #48]	; (801d2f0 <srand+0x4c>)
 801d2c0:	2146      	movs	r1, #70	; 0x46
 801d2c2:	f000 fbeb 	bl	801da9c <__assert_func>
 801d2c6:	490b      	ldr	r1, [pc, #44]	; (801d2f4 <srand+0x50>)
 801d2c8:	4b0b      	ldr	r3, [pc, #44]	; (801d2f8 <srand+0x54>)
 801d2ca:	e9c0 1300 	strd	r1, r3, [r0]
 801d2ce:	4b0b      	ldr	r3, [pc, #44]	; (801d2fc <srand+0x58>)
 801d2d0:	6083      	str	r3, [r0, #8]
 801d2d2:	230b      	movs	r3, #11
 801d2d4:	8183      	strh	r3, [r0, #12]
 801d2d6:	2100      	movs	r1, #0
 801d2d8:	2001      	movs	r0, #1
 801d2da:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d2de:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801d2e0:	2200      	movs	r2, #0
 801d2e2:	611c      	str	r4, [r3, #16]
 801d2e4:	615a      	str	r2, [r3, #20]
 801d2e6:	bd38      	pop	{r3, r4, r5, pc}
 801d2e8:	20002478 	.word	0x20002478
 801d2ec:	080207f4 	.word	0x080207f4
 801d2f0:	0802080b 	.word	0x0802080b
 801d2f4:	abcd330e 	.word	0xabcd330e
 801d2f8:	e66d1234 	.word	0xe66d1234
 801d2fc:	0005deec 	.word	0x0005deec

0801d300 <rand>:
 801d300:	4b16      	ldr	r3, [pc, #88]	; (801d35c <rand+0x5c>)
 801d302:	b510      	push	{r4, lr}
 801d304:	681c      	ldr	r4, [r3, #0]
 801d306:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801d308:	b9b3      	cbnz	r3, 801d338 <rand+0x38>
 801d30a:	2018      	movs	r0, #24
 801d30c:	f7ff ff0e 	bl	801d12c <malloc>
 801d310:	4602      	mov	r2, r0
 801d312:	6320      	str	r0, [r4, #48]	; 0x30
 801d314:	b920      	cbnz	r0, 801d320 <rand+0x20>
 801d316:	4b12      	ldr	r3, [pc, #72]	; (801d360 <rand+0x60>)
 801d318:	4812      	ldr	r0, [pc, #72]	; (801d364 <rand+0x64>)
 801d31a:	2152      	movs	r1, #82	; 0x52
 801d31c:	f000 fbbe 	bl	801da9c <__assert_func>
 801d320:	4911      	ldr	r1, [pc, #68]	; (801d368 <rand+0x68>)
 801d322:	4b12      	ldr	r3, [pc, #72]	; (801d36c <rand+0x6c>)
 801d324:	e9c0 1300 	strd	r1, r3, [r0]
 801d328:	4b11      	ldr	r3, [pc, #68]	; (801d370 <rand+0x70>)
 801d32a:	6083      	str	r3, [r0, #8]
 801d32c:	230b      	movs	r3, #11
 801d32e:	8183      	strh	r3, [r0, #12]
 801d330:	2100      	movs	r1, #0
 801d332:	2001      	movs	r0, #1
 801d334:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d338:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801d33a:	480e      	ldr	r0, [pc, #56]	; (801d374 <rand+0x74>)
 801d33c:	690b      	ldr	r3, [r1, #16]
 801d33e:	694c      	ldr	r4, [r1, #20]
 801d340:	4a0d      	ldr	r2, [pc, #52]	; (801d378 <rand+0x78>)
 801d342:	4358      	muls	r0, r3
 801d344:	fb02 0004 	mla	r0, r2, r4, r0
 801d348:	fba3 3202 	umull	r3, r2, r3, r2
 801d34c:	3301      	adds	r3, #1
 801d34e:	eb40 0002 	adc.w	r0, r0, r2
 801d352:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801d356:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801d35a:	bd10      	pop	{r4, pc}
 801d35c:	20002478 	.word	0x20002478
 801d360:	080207f4 	.word	0x080207f4
 801d364:	0802080b 	.word	0x0802080b
 801d368:	abcd330e 	.word	0xabcd330e
 801d36c:	e66d1234 	.word	0xe66d1234
 801d370:	0005deec 	.word	0x0005deec
 801d374:	5851f42d 	.word	0x5851f42d
 801d378:	4c957f2d 	.word	0x4c957f2d

0801d37c <realloc>:
 801d37c:	4b02      	ldr	r3, [pc, #8]	; (801d388 <realloc+0xc>)
 801d37e:	460a      	mov	r2, r1
 801d380:	4601      	mov	r1, r0
 801d382:	6818      	ldr	r0, [r3, #0]
 801d384:	f000 b802 	b.w	801d38c <_realloc_r>
 801d388:	20002478 	.word	0x20002478

0801d38c <_realloc_r>:
 801d38c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d390:	4680      	mov	r8, r0
 801d392:	4614      	mov	r4, r2
 801d394:	460e      	mov	r6, r1
 801d396:	b921      	cbnz	r1, 801d3a2 <_realloc_r+0x16>
 801d398:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d39c:	4611      	mov	r1, r2
 801d39e:	f7ff bef5 	b.w	801d18c <_malloc_r>
 801d3a2:	b92a      	cbnz	r2, 801d3b0 <_realloc_r+0x24>
 801d3a4:	f000 fba4 	bl	801daf0 <_free_r>
 801d3a8:	4625      	mov	r5, r4
 801d3aa:	4628      	mov	r0, r5
 801d3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d3b0:	f000 fbea 	bl	801db88 <_malloc_usable_size_r>
 801d3b4:	4284      	cmp	r4, r0
 801d3b6:	4607      	mov	r7, r0
 801d3b8:	d802      	bhi.n	801d3c0 <_realloc_r+0x34>
 801d3ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d3be:	d812      	bhi.n	801d3e6 <_realloc_r+0x5a>
 801d3c0:	4621      	mov	r1, r4
 801d3c2:	4640      	mov	r0, r8
 801d3c4:	f7ff fee2 	bl	801d18c <_malloc_r>
 801d3c8:	4605      	mov	r5, r0
 801d3ca:	2800      	cmp	r0, #0
 801d3cc:	d0ed      	beq.n	801d3aa <_realloc_r+0x1e>
 801d3ce:	42bc      	cmp	r4, r7
 801d3d0:	4622      	mov	r2, r4
 801d3d2:	4631      	mov	r1, r6
 801d3d4:	bf28      	it	cs
 801d3d6:	463a      	movcs	r2, r7
 801d3d8:	f000 fb51 	bl	801da7e <memcpy>
 801d3dc:	4631      	mov	r1, r6
 801d3de:	4640      	mov	r0, r8
 801d3e0:	f000 fb86 	bl	801daf0 <_free_r>
 801d3e4:	e7e1      	b.n	801d3aa <_realloc_r+0x1e>
 801d3e6:	4635      	mov	r5, r6
 801d3e8:	e7df      	b.n	801d3aa <_realloc_r+0x1e>
	...

0801d3ec <_strtoul_l.constprop.0>:
 801d3ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d3f0:	4f36      	ldr	r7, [pc, #216]	; (801d4cc <_strtoul_l.constprop.0+0xe0>)
 801d3f2:	4686      	mov	lr, r0
 801d3f4:	460d      	mov	r5, r1
 801d3f6:	4628      	mov	r0, r5
 801d3f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d3fc:	5d3e      	ldrb	r6, [r7, r4]
 801d3fe:	f016 0608 	ands.w	r6, r6, #8
 801d402:	d1f8      	bne.n	801d3f6 <_strtoul_l.constprop.0+0xa>
 801d404:	2c2d      	cmp	r4, #45	; 0x2d
 801d406:	d130      	bne.n	801d46a <_strtoul_l.constprop.0+0x7e>
 801d408:	782c      	ldrb	r4, [r5, #0]
 801d40a:	2601      	movs	r6, #1
 801d40c:	1c85      	adds	r5, r0, #2
 801d40e:	2b00      	cmp	r3, #0
 801d410:	d057      	beq.n	801d4c2 <_strtoul_l.constprop.0+0xd6>
 801d412:	2b10      	cmp	r3, #16
 801d414:	d109      	bne.n	801d42a <_strtoul_l.constprop.0+0x3e>
 801d416:	2c30      	cmp	r4, #48	; 0x30
 801d418:	d107      	bne.n	801d42a <_strtoul_l.constprop.0+0x3e>
 801d41a:	7828      	ldrb	r0, [r5, #0]
 801d41c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801d420:	2858      	cmp	r0, #88	; 0x58
 801d422:	d149      	bne.n	801d4b8 <_strtoul_l.constprop.0+0xcc>
 801d424:	786c      	ldrb	r4, [r5, #1]
 801d426:	2310      	movs	r3, #16
 801d428:	3502      	adds	r5, #2
 801d42a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801d42e:	2700      	movs	r7, #0
 801d430:	fbb8 f8f3 	udiv	r8, r8, r3
 801d434:	fb03 f908 	mul.w	r9, r3, r8
 801d438:	ea6f 0909 	mvn.w	r9, r9
 801d43c:	4638      	mov	r0, r7
 801d43e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801d442:	f1bc 0f09 	cmp.w	ip, #9
 801d446:	d815      	bhi.n	801d474 <_strtoul_l.constprop.0+0x88>
 801d448:	4664      	mov	r4, ip
 801d44a:	42a3      	cmp	r3, r4
 801d44c:	dd23      	ble.n	801d496 <_strtoul_l.constprop.0+0xaa>
 801d44e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801d452:	d007      	beq.n	801d464 <_strtoul_l.constprop.0+0x78>
 801d454:	4580      	cmp	r8, r0
 801d456:	d31b      	bcc.n	801d490 <_strtoul_l.constprop.0+0xa4>
 801d458:	d101      	bne.n	801d45e <_strtoul_l.constprop.0+0x72>
 801d45a:	45a1      	cmp	r9, r4
 801d45c:	db18      	blt.n	801d490 <_strtoul_l.constprop.0+0xa4>
 801d45e:	fb00 4003 	mla	r0, r0, r3, r4
 801d462:	2701      	movs	r7, #1
 801d464:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d468:	e7e9      	b.n	801d43e <_strtoul_l.constprop.0+0x52>
 801d46a:	2c2b      	cmp	r4, #43	; 0x2b
 801d46c:	bf04      	itt	eq
 801d46e:	782c      	ldrbeq	r4, [r5, #0]
 801d470:	1c85      	addeq	r5, r0, #2
 801d472:	e7cc      	b.n	801d40e <_strtoul_l.constprop.0+0x22>
 801d474:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801d478:	f1bc 0f19 	cmp.w	ip, #25
 801d47c:	d801      	bhi.n	801d482 <_strtoul_l.constprop.0+0x96>
 801d47e:	3c37      	subs	r4, #55	; 0x37
 801d480:	e7e3      	b.n	801d44a <_strtoul_l.constprop.0+0x5e>
 801d482:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801d486:	f1bc 0f19 	cmp.w	ip, #25
 801d48a:	d804      	bhi.n	801d496 <_strtoul_l.constprop.0+0xaa>
 801d48c:	3c57      	subs	r4, #87	; 0x57
 801d48e:	e7dc      	b.n	801d44a <_strtoul_l.constprop.0+0x5e>
 801d490:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801d494:	e7e6      	b.n	801d464 <_strtoul_l.constprop.0+0x78>
 801d496:	1c7b      	adds	r3, r7, #1
 801d498:	d106      	bne.n	801d4a8 <_strtoul_l.constprop.0+0xbc>
 801d49a:	2322      	movs	r3, #34	; 0x22
 801d49c:	f8ce 3000 	str.w	r3, [lr]
 801d4a0:	4638      	mov	r0, r7
 801d4a2:	b932      	cbnz	r2, 801d4b2 <_strtoul_l.constprop.0+0xc6>
 801d4a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d4a8:	b106      	cbz	r6, 801d4ac <_strtoul_l.constprop.0+0xc0>
 801d4aa:	4240      	negs	r0, r0
 801d4ac:	2a00      	cmp	r2, #0
 801d4ae:	d0f9      	beq.n	801d4a4 <_strtoul_l.constprop.0+0xb8>
 801d4b0:	b107      	cbz	r7, 801d4b4 <_strtoul_l.constprop.0+0xc8>
 801d4b2:	1e69      	subs	r1, r5, #1
 801d4b4:	6011      	str	r1, [r2, #0]
 801d4b6:	e7f5      	b.n	801d4a4 <_strtoul_l.constprop.0+0xb8>
 801d4b8:	2430      	movs	r4, #48	; 0x30
 801d4ba:	2b00      	cmp	r3, #0
 801d4bc:	d1b5      	bne.n	801d42a <_strtoul_l.constprop.0+0x3e>
 801d4be:	2308      	movs	r3, #8
 801d4c0:	e7b3      	b.n	801d42a <_strtoul_l.constprop.0+0x3e>
 801d4c2:	2c30      	cmp	r4, #48	; 0x30
 801d4c4:	d0a9      	beq.n	801d41a <_strtoul_l.constprop.0+0x2e>
 801d4c6:	230a      	movs	r3, #10
 801d4c8:	e7af      	b.n	801d42a <_strtoul_l.constprop.0+0x3e>
 801d4ca:	bf00      	nop
 801d4cc:	08020864 	.word	0x08020864

0801d4d0 <strtoul>:
 801d4d0:	4613      	mov	r3, r2
 801d4d2:	460a      	mov	r2, r1
 801d4d4:	4601      	mov	r1, r0
 801d4d6:	4802      	ldr	r0, [pc, #8]	; (801d4e0 <strtoul+0x10>)
 801d4d8:	6800      	ldr	r0, [r0, #0]
 801d4da:	f7ff bf87 	b.w	801d3ec <_strtoul_l.constprop.0>
 801d4de:	bf00      	nop
 801d4e0:	20002478 	.word	0x20002478

0801d4e4 <std>:
 801d4e4:	2300      	movs	r3, #0
 801d4e6:	b510      	push	{r4, lr}
 801d4e8:	4604      	mov	r4, r0
 801d4ea:	e9c0 3300 	strd	r3, r3, [r0]
 801d4ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d4f2:	6083      	str	r3, [r0, #8]
 801d4f4:	8181      	strh	r1, [r0, #12]
 801d4f6:	6643      	str	r3, [r0, #100]	; 0x64
 801d4f8:	81c2      	strh	r2, [r0, #14]
 801d4fa:	6183      	str	r3, [r0, #24]
 801d4fc:	4619      	mov	r1, r3
 801d4fe:	2208      	movs	r2, #8
 801d500:	305c      	adds	r0, #92	; 0x5c
 801d502:	f000 f98b 	bl	801d81c <memset>
 801d506:	4b0d      	ldr	r3, [pc, #52]	; (801d53c <std+0x58>)
 801d508:	6263      	str	r3, [r4, #36]	; 0x24
 801d50a:	4b0d      	ldr	r3, [pc, #52]	; (801d540 <std+0x5c>)
 801d50c:	62a3      	str	r3, [r4, #40]	; 0x28
 801d50e:	4b0d      	ldr	r3, [pc, #52]	; (801d544 <std+0x60>)
 801d510:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d512:	4b0d      	ldr	r3, [pc, #52]	; (801d548 <std+0x64>)
 801d514:	6323      	str	r3, [r4, #48]	; 0x30
 801d516:	4b0d      	ldr	r3, [pc, #52]	; (801d54c <std+0x68>)
 801d518:	6224      	str	r4, [r4, #32]
 801d51a:	429c      	cmp	r4, r3
 801d51c:	d006      	beq.n	801d52c <std+0x48>
 801d51e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801d522:	4294      	cmp	r4, r2
 801d524:	d002      	beq.n	801d52c <std+0x48>
 801d526:	33d0      	adds	r3, #208	; 0xd0
 801d528:	429c      	cmp	r4, r3
 801d52a:	d105      	bne.n	801d538 <std+0x54>
 801d52c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d534:	f000 ba98 	b.w	801da68 <__retarget_lock_init_recursive>
 801d538:	bd10      	pop	{r4, pc}
 801d53a:	bf00      	nop
 801d53c:	0801d6d1 	.word	0x0801d6d1
 801d540:	0801d6f3 	.word	0x0801d6f3
 801d544:	0801d72b 	.word	0x0801d72b
 801d548:	0801d74f 	.word	0x0801d74f
 801d54c:	20010e90 	.word	0x20010e90

0801d550 <stdio_exit_handler>:
 801d550:	4a02      	ldr	r2, [pc, #8]	; (801d55c <stdio_exit_handler+0xc>)
 801d552:	4903      	ldr	r1, [pc, #12]	; (801d560 <stdio_exit_handler+0x10>)
 801d554:	4803      	ldr	r0, [pc, #12]	; (801d564 <stdio_exit_handler+0x14>)
 801d556:	f000 b869 	b.w	801d62c <_fwalk_sglue>
 801d55a:	bf00      	nop
 801d55c:	20002420 	.word	0x20002420
 801d560:	0801e275 	.word	0x0801e275
 801d564:	2000242c 	.word	0x2000242c

0801d568 <cleanup_stdio>:
 801d568:	6841      	ldr	r1, [r0, #4]
 801d56a:	4b0c      	ldr	r3, [pc, #48]	; (801d59c <cleanup_stdio+0x34>)
 801d56c:	4299      	cmp	r1, r3
 801d56e:	b510      	push	{r4, lr}
 801d570:	4604      	mov	r4, r0
 801d572:	d001      	beq.n	801d578 <cleanup_stdio+0x10>
 801d574:	f000 fe7e 	bl	801e274 <_fflush_r>
 801d578:	68a1      	ldr	r1, [r4, #8]
 801d57a:	4b09      	ldr	r3, [pc, #36]	; (801d5a0 <cleanup_stdio+0x38>)
 801d57c:	4299      	cmp	r1, r3
 801d57e:	d002      	beq.n	801d586 <cleanup_stdio+0x1e>
 801d580:	4620      	mov	r0, r4
 801d582:	f000 fe77 	bl	801e274 <_fflush_r>
 801d586:	68e1      	ldr	r1, [r4, #12]
 801d588:	4b06      	ldr	r3, [pc, #24]	; (801d5a4 <cleanup_stdio+0x3c>)
 801d58a:	4299      	cmp	r1, r3
 801d58c:	d004      	beq.n	801d598 <cleanup_stdio+0x30>
 801d58e:	4620      	mov	r0, r4
 801d590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d594:	f000 be6e 	b.w	801e274 <_fflush_r>
 801d598:	bd10      	pop	{r4, pc}
 801d59a:	bf00      	nop
 801d59c:	20010e90 	.word	0x20010e90
 801d5a0:	20010ef8 	.word	0x20010ef8
 801d5a4:	20010f60 	.word	0x20010f60

0801d5a8 <global_stdio_init.part.0>:
 801d5a8:	b510      	push	{r4, lr}
 801d5aa:	4b0b      	ldr	r3, [pc, #44]	; (801d5d8 <global_stdio_init.part.0+0x30>)
 801d5ac:	4c0b      	ldr	r4, [pc, #44]	; (801d5dc <global_stdio_init.part.0+0x34>)
 801d5ae:	4a0c      	ldr	r2, [pc, #48]	; (801d5e0 <global_stdio_init.part.0+0x38>)
 801d5b0:	601a      	str	r2, [r3, #0]
 801d5b2:	4620      	mov	r0, r4
 801d5b4:	2200      	movs	r2, #0
 801d5b6:	2104      	movs	r1, #4
 801d5b8:	f7ff ff94 	bl	801d4e4 <std>
 801d5bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801d5c0:	2201      	movs	r2, #1
 801d5c2:	2109      	movs	r1, #9
 801d5c4:	f7ff ff8e 	bl	801d4e4 <std>
 801d5c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801d5cc:	2202      	movs	r2, #2
 801d5ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d5d2:	2112      	movs	r1, #18
 801d5d4:	f7ff bf86 	b.w	801d4e4 <std>
 801d5d8:	20010fc8 	.word	0x20010fc8
 801d5dc:	20010e90 	.word	0x20010e90
 801d5e0:	0801d551 	.word	0x0801d551

0801d5e4 <__sfp_lock_acquire>:
 801d5e4:	4801      	ldr	r0, [pc, #4]	; (801d5ec <__sfp_lock_acquire+0x8>)
 801d5e6:	f000 ba40 	b.w	801da6a <__retarget_lock_acquire_recursive>
 801d5ea:	bf00      	nop
 801d5ec:	20010fd2 	.word	0x20010fd2

0801d5f0 <__sfp_lock_release>:
 801d5f0:	4801      	ldr	r0, [pc, #4]	; (801d5f8 <__sfp_lock_release+0x8>)
 801d5f2:	f000 ba3b 	b.w	801da6c <__retarget_lock_release_recursive>
 801d5f6:	bf00      	nop
 801d5f8:	20010fd2 	.word	0x20010fd2

0801d5fc <__sinit>:
 801d5fc:	b510      	push	{r4, lr}
 801d5fe:	4604      	mov	r4, r0
 801d600:	f7ff fff0 	bl	801d5e4 <__sfp_lock_acquire>
 801d604:	6a23      	ldr	r3, [r4, #32]
 801d606:	b11b      	cbz	r3, 801d610 <__sinit+0x14>
 801d608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d60c:	f7ff bff0 	b.w	801d5f0 <__sfp_lock_release>
 801d610:	4b04      	ldr	r3, [pc, #16]	; (801d624 <__sinit+0x28>)
 801d612:	6223      	str	r3, [r4, #32]
 801d614:	4b04      	ldr	r3, [pc, #16]	; (801d628 <__sinit+0x2c>)
 801d616:	681b      	ldr	r3, [r3, #0]
 801d618:	2b00      	cmp	r3, #0
 801d61a:	d1f5      	bne.n	801d608 <__sinit+0xc>
 801d61c:	f7ff ffc4 	bl	801d5a8 <global_stdio_init.part.0>
 801d620:	e7f2      	b.n	801d608 <__sinit+0xc>
 801d622:	bf00      	nop
 801d624:	0801d569 	.word	0x0801d569
 801d628:	20010fc8 	.word	0x20010fc8

0801d62c <_fwalk_sglue>:
 801d62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d630:	4607      	mov	r7, r0
 801d632:	4688      	mov	r8, r1
 801d634:	4614      	mov	r4, r2
 801d636:	2600      	movs	r6, #0
 801d638:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d63c:	f1b9 0901 	subs.w	r9, r9, #1
 801d640:	d505      	bpl.n	801d64e <_fwalk_sglue+0x22>
 801d642:	6824      	ldr	r4, [r4, #0]
 801d644:	2c00      	cmp	r4, #0
 801d646:	d1f7      	bne.n	801d638 <_fwalk_sglue+0xc>
 801d648:	4630      	mov	r0, r6
 801d64a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d64e:	89ab      	ldrh	r3, [r5, #12]
 801d650:	2b01      	cmp	r3, #1
 801d652:	d907      	bls.n	801d664 <_fwalk_sglue+0x38>
 801d654:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d658:	3301      	adds	r3, #1
 801d65a:	d003      	beq.n	801d664 <_fwalk_sglue+0x38>
 801d65c:	4629      	mov	r1, r5
 801d65e:	4638      	mov	r0, r7
 801d660:	47c0      	blx	r8
 801d662:	4306      	orrs	r6, r0
 801d664:	3568      	adds	r5, #104	; 0x68
 801d666:	e7e9      	b.n	801d63c <_fwalk_sglue+0x10>

0801d668 <sniprintf>:
 801d668:	b40c      	push	{r2, r3}
 801d66a:	b530      	push	{r4, r5, lr}
 801d66c:	4b17      	ldr	r3, [pc, #92]	; (801d6cc <sniprintf+0x64>)
 801d66e:	1e0c      	subs	r4, r1, #0
 801d670:	681d      	ldr	r5, [r3, #0]
 801d672:	b09d      	sub	sp, #116	; 0x74
 801d674:	da08      	bge.n	801d688 <sniprintf+0x20>
 801d676:	238b      	movs	r3, #139	; 0x8b
 801d678:	602b      	str	r3, [r5, #0]
 801d67a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d67e:	b01d      	add	sp, #116	; 0x74
 801d680:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d684:	b002      	add	sp, #8
 801d686:	4770      	bx	lr
 801d688:	f44f 7302 	mov.w	r3, #520	; 0x208
 801d68c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d690:	bf14      	ite	ne
 801d692:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801d696:	4623      	moveq	r3, r4
 801d698:	9304      	str	r3, [sp, #16]
 801d69a:	9307      	str	r3, [sp, #28]
 801d69c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d6a0:	9002      	str	r0, [sp, #8]
 801d6a2:	9006      	str	r0, [sp, #24]
 801d6a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d6a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d6aa:	ab21      	add	r3, sp, #132	; 0x84
 801d6ac:	a902      	add	r1, sp, #8
 801d6ae:	4628      	mov	r0, r5
 801d6b0:	9301      	str	r3, [sp, #4]
 801d6b2:	f000 facb 	bl	801dc4c <_svfiprintf_r>
 801d6b6:	1c43      	adds	r3, r0, #1
 801d6b8:	bfbc      	itt	lt
 801d6ba:	238b      	movlt	r3, #139	; 0x8b
 801d6bc:	602b      	strlt	r3, [r5, #0]
 801d6be:	2c00      	cmp	r4, #0
 801d6c0:	d0dd      	beq.n	801d67e <sniprintf+0x16>
 801d6c2:	9b02      	ldr	r3, [sp, #8]
 801d6c4:	2200      	movs	r2, #0
 801d6c6:	701a      	strb	r2, [r3, #0]
 801d6c8:	e7d9      	b.n	801d67e <sniprintf+0x16>
 801d6ca:	bf00      	nop
 801d6cc:	20002478 	.word	0x20002478

0801d6d0 <__sread>:
 801d6d0:	b510      	push	{r4, lr}
 801d6d2:	460c      	mov	r4, r1
 801d6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d6d8:	f000 f968 	bl	801d9ac <_read_r>
 801d6dc:	2800      	cmp	r0, #0
 801d6de:	bfab      	itete	ge
 801d6e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d6e2:	89a3      	ldrhlt	r3, [r4, #12]
 801d6e4:	181b      	addge	r3, r3, r0
 801d6e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d6ea:	bfac      	ite	ge
 801d6ec:	6563      	strge	r3, [r4, #84]	; 0x54
 801d6ee:	81a3      	strhlt	r3, [r4, #12]
 801d6f0:	bd10      	pop	{r4, pc}

0801d6f2 <__swrite>:
 801d6f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d6f6:	461f      	mov	r7, r3
 801d6f8:	898b      	ldrh	r3, [r1, #12]
 801d6fa:	05db      	lsls	r3, r3, #23
 801d6fc:	4605      	mov	r5, r0
 801d6fe:	460c      	mov	r4, r1
 801d700:	4616      	mov	r6, r2
 801d702:	d505      	bpl.n	801d710 <__swrite+0x1e>
 801d704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d708:	2302      	movs	r3, #2
 801d70a:	2200      	movs	r2, #0
 801d70c:	f000 f93c 	bl	801d988 <_lseek_r>
 801d710:	89a3      	ldrh	r3, [r4, #12]
 801d712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d71a:	81a3      	strh	r3, [r4, #12]
 801d71c:	4632      	mov	r2, r6
 801d71e:	463b      	mov	r3, r7
 801d720:	4628      	mov	r0, r5
 801d722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d726:	f000 b963 	b.w	801d9f0 <_write_r>

0801d72a <__sseek>:
 801d72a:	b510      	push	{r4, lr}
 801d72c:	460c      	mov	r4, r1
 801d72e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d732:	f000 f929 	bl	801d988 <_lseek_r>
 801d736:	1c43      	adds	r3, r0, #1
 801d738:	89a3      	ldrh	r3, [r4, #12]
 801d73a:	bf15      	itete	ne
 801d73c:	6560      	strne	r0, [r4, #84]	; 0x54
 801d73e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d742:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d746:	81a3      	strheq	r3, [r4, #12]
 801d748:	bf18      	it	ne
 801d74a:	81a3      	strhne	r3, [r4, #12]
 801d74c:	bd10      	pop	{r4, pc}

0801d74e <__sclose>:
 801d74e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d752:	f000 b8b3 	b.w	801d8bc <_close_r>

0801d756 <_vsniprintf_r>:
 801d756:	b530      	push	{r4, r5, lr}
 801d758:	4614      	mov	r4, r2
 801d75a:	2c00      	cmp	r4, #0
 801d75c:	b09b      	sub	sp, #108	; 0x6c
 801d75e:	4605      	mov	r5, r0
 801d760:	461a      	mov	r2, r3
 801d762:	da05      	bge.n	801d770 <_vsniprintf_r+0x1a>
 801d764:	238b      	movs	r3, #139	; 0x8b
 801d766:	6003      	str	r3, [r0, #0]
 801d768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d76c:	b01b      	add	sp, #108	; 0x6c
 801d76e:	bd30      	pop	{r4, r5, pc}
 801d770:	f44f 7302 	mov.w	r3, #520	; 0x208
 801d774:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d778:	bf14      	ite	ne
 801d77a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801d77e:	4623      	moveq	r3, r4
 801d780:	9302      	str	r3, [sp, #8]
 801d782:	9305      	str	r3, [sp, #20]
 801d784:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d788:	9100      	str	r1, [sp, #0]
 801d78a:	9104      	str	r1, [sp, #16]
 801d78c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d790:	4669      	mov	r1, sp
 801d792:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d794:	f000 fa5a 	bl	801dc4c <_svfiprintf_r>
 801d798:	1c43      	adds	r3, r0, #1
 801d79a:	bfbc      	itt	lt
 801d79c:	238b      	movlt	r3, #139	; 0x8b
 801d79e:	602b      	strlt	r3, [r5, #0]
 801d7a0:	2c00      	cmp	r4, #0
 801d7a2:	d0e3      	beq.n	801d76c <_vsniprintf_r+0x16>
 801d7a4:	9b00      	ldr	r3, [sp, #0]
 801d7a6:	2200      	movs	r2, #0
 801d7a8:	701a      	strb	r2, [r3, #0]
 801d7aa:	e7df      	b.n	801d76c <_vsniprintf_r+0x16>

0801d7ac <vsniprintf>:
 801d7ac:	b507      	push	{r0, r1, r2, lr}
 801d7ae:	9300      	str	r3, [sp, #0]
 801d7b0:	4613      	mov	r3, r2
 801d7b2:	460a      	mov	r2, r1
 801d7b4:	4601      	mov	r1, r0
 801d7b6:	4803      	ldr	r0, [pc, #12]	; (801d7c4 <vsniprintf+0x18>)
 801d7b8:	6800      	ldr	r0, [r0, #0]
 801d7ba:	f7ff ffcc 	bl	801d756 <_vsniprintf_r>
 801d7be:	b003      	add	sp, #12
 801d7c0:	f85d fb04 	ldr.w	pc, [sp], #4
 801d7c4:	20002478 	.word	0x20002478

0801d7c8 <memcmp>:
 801d7c8:	b510      	push	{r4, lr}
 801d7ca:	3901      	subs	r1, #1
 801d7cc:	4402      	add	r2, r0
 801d7ce:	4290      	cmp	r0, r2
 801d7d0:	d101      	bne.n	801d7d6 <memcmp+0xe>
 801d7d2:	2000      	movs	r0, #0
 801d7d4:	e005      	b.n	801d7e2 <memcmp+0x1a>
 801d7d6:	7803      	ldrb	r3, [r0, #0]
 801d7d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d7dc:	42a3      	cmp	r3, r4
 801d7de:	d001      	beq.n	801d7e4 <memcmp+0x1c>
 801d7e0:	1b18      	subs	r0, r3, r4
 801d7e2:	bd10      	pop	{r4, pc}
 801d7e4:	3001      	adds	r0, #1
 801d7e6:	e7f2      	b.n	801d7ce <memcmp+0x6>

0801d7e8 <memmove>:
 801d7e8:	4288      	cmp	r0, r1
 801d7ea:	b510      	push	{r4, lr}
 801d7ec:	eb01 0402 	add.w	r4, r1, r2
 801d7f0:	d902      	bls.n	801d7f8 <memmove+0x10>
 801d7f2:	4284      	cmp	r4, r0
 801d7f4:	4623      	mov	r3, r4
 801d7f6:	d807      	bhi.n	801d808 <memmove+0x20>
 801d7f8:	1e43      	subs	r3, r0, #1
 801d7fa:	42a1      	cmp	r1, r4
 801d7fc:	d008      	beq.n	801d810 <memmove+0x28>
 801d7fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d802:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d806:	e7f8      	b.n	801d7fa <memmove+0x12>
 801d808:	4402      	add	r2, r0
 801d80a:	4601      	mov	r1, r0
 801d80c:	428a      	cmp	r2, r1
 801d80e:	d100      	bne.n	801d812 <memmove+0x2a>
 801d810:	bd10      	pop	{r4, pc}
 801d812:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d816:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d81a:	e7f7      	b.n	801d80c <memmove+0x24>

0801d81c <memset>:
 801d81c:	4402      	add	r2, r0
 801d81e:	4603      	mov	r3, r0
 801d820:	4293      	cmp	r3, r2
 801d822:	d100      	bne.n	801d826 <memset+0xa>
 801d824:	4770      	bx	lr
 801d826:	f803 1b01 	strb.w	r1, [r3], #1
 801d82a:	e7f9      	b.n	801d820 <memset+0x4>

0801d82c <strchr>:
 801d82c:	b2c9      	uxtb	r1, r1
 801d82e:	4603      	mov	r3, r0
 801d830:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d834:	b11a      	cbz	r2, 801d83e <strchr+0x12>
 801d836:	428a      	cmp	r2, r1
 801d838:	d1f9      	bne.n	801d82e <strchr+0x2>
 801d83a:	4618      	mov	r0, r3
 801d83c:	4770      	bx	lr
 801d83e:	2900      	cmp	r1, #0
 801d840:	bf18      	it	ne
 801d842:	2300      	movne	r3, #0
 801d844:	e7f9      	b.n	801d83a <strchr+0xe>

0801d846 <strncmp>:
 801d846:	b510      	push	{r4, lr}
 801d848:	b16a      	cbz	r2, 801d866 <strncmp+0x20>
 801d84a:	3901      	subs	r1, #1
 801d84c:	1884      	adds	r4, r0, r2
 801d84e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d852:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801d856:	429a      	cmp	r2, r3
 801d858:	d103      	bne.n	801d862 <strncmp+0x1c>
 801d85a:	42a0      	cmp	r0, r4
 801d85c:	d001      	beq.n	801d862 <strncmp+0x1c>
 801d85e:	2a00      	cmp	r2, #0
 801d860:	d1f5      	bne.n	801d84e <strncmp+0x8>
 801d862:	1ad0      	subs	r0, r2, r3
 801d864:	bd10      	pop	{r4, pc}
 801d866:	4610      	mov	r0, r2
 801d868:	e7fc      	b.n	801d864 <strncmp+0x1e>

0801d86a <strncpy>:
 801d86a:	b510      	push	{r4, lr}
 801d86c:	3901      	subs	r1, #1
 801d86e:	4603      	mov	r3, r0
 801d870:	b132      	cbz	r2, 801d880 <strncpy+0x16>
 801d872:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d876:	f803 4b01 	strb.w	r4, [r3], #1
 801d87a:	3a01      	subs	r2, #1
 801d87c:	2c00      	cmp	r4, #0
 801d87e:	d1f7      	bne.n	801d870 <strncpy+0x6>
 801d880:	441a      	add	r2, r3
 801d882:	2100      	movs	r1, #0
 801d884:	4293      	cmp	r3, r2
 801d886:	d100      	bne.n	801d88a <strncpy+0x20>
 801d888:	bd10      	pop	{r4, pc}
 801d88a:	f803 1b01 	strb.w	r1, [r3], #1
 801d88e:	e7f9      	b.n	801d884 <strncpy+0x1a>

0801d890 <strstr>:
 801d890:	780a      	ldrb	r2, [r1, #0]
 801d892:	b570      	push	{r4, r5, r6, lr}
 801d894:	b96a      	cbnz	r2, 801d8b2 <strstr+0x22>
 801d896:	bd70      	pop	{r4, r5, r6, pc}
 801d898:	429a      	cmp	r2, r3
 801d89a:	d109      	bne.n	801d8b0 <strstr+0x20>
 801d89c:	460c      	mov	r4, r1
 801d89e:	4605      	mov	r5, r0
 801d8a0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801d8a4:	2b00      	cmp	r3, #0
 801d8a6:	d0f6      	beq.n	801d896 <strstr+0x6>
 801d8a8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801d8ac:	429e      	cmp	r6, r3
 801d8ae:	d0f7      	beq.n	801d8a0 <strstr+0x10>
 801d8b0:	3001      	adds	r0, #1
 801d8b2:	7803      	ldrb	r3, [r0, #0]
 801d8b4:	2b00      	cmp	r3, #0
 801d8b6:	d1ef      	bne.n	801d898 <strstr+0x8>
 801d8b8:	4618      	mov	r0, r3
 801d8ba:	e7ec      	b.n	801d896 <strstr+0x6>

0801d8bc <_close_r>:
 801d8bc:	b538      	push	{r3, r4, r5, lr}
 801d8be:	4d06      	ldr	r5, [pc, #24]	; (801d8d8 <_close_r+0x1c>)
 801d8c0:	2300      	movs	r3, #0
 801d8c2:	4604      	mov	r4, r0
 801d8c4:	4608      	mov	r0, r1
 801d8c6:	602b      	str	r3, [r5, #0]
 801d8c8:	f7e5 fdbd 	bl	8003446 <_close>
 801d8cc:	1c43      	adds	r3, r0, #1
 801d8ce:	d102      	bne.n	801d8d6 <_close_r+0x1a>
 801d8d0:	682b      	ldr	r3, [r5, #0]
 801d8d2:	b103      	cbz	r3, 801d8d6 <_close_r+0x1a>
 801d8d4:	6023      	str	r3, [r4, #0]
 801d8d6:	bd38      	pop	{r3, r4, r5, pc}
 801d8d8:	20010fcc 	.word	0x20010fcc

0801d8dc <_reclaim_reent>:
 801d8dc:	4b29      	ldr	r3, [pc, #164]	; (801d984 <_reclaim_reent+0xa8>)
 801d8de:	681b      	ldr	r3, [r3, #0]
 801d8e0:	4283      	cmp	r3, r0
 801d8e2:	b570      	push	{r4, r5, r6, lr}
 801d8e4:	4604      	mov	r4, r0
 801d8e6:	d04b      	beq.n	801d980 <_reclaim_reent+0xa4>
 801d8e8:	69c3      	ldr	r3, [r0, #28]
 801d8ea:	b143      	cbz	r3, 801d8fe <_reclaim_reent+0x22>
 801d8ec:	68db      	ldr	r3, [r3, #12]
 801d8ee:	2b00      	cmp	r3, #0
 801d8f0:	d144      	bne.n	801d97c <_reclaim_reent+0xa0>
 801d8f2:	69e3      	ldr	r3, [r4, #28]
 801d8f4:	6819      	ldr	r1, [r3, #0]
 801d8f6:	b111      	cbz	r1, 801d8fe <_reclaim_reent+0x22>
 801d8f8:	4620      	mov	r0, r4
 801d8fa:	f000 f8f9 	bl	801daf0 <_free_r>
 801d8fe:	6961      	ldr	r1, [r4, #20]
 801d900:	b111      	cbz	r1, 801d908 <_reclaim_reent+0x2c>
 801d902:	4620      	mov	r0, r4
 801d904:	f000 f8f4 	bl	801daf0 <_free_r>
 801d908:	69e1      	ldr	r1, [r4, #28]
 801d90a:	b111      	cbz	r1, 801d912 <_reclaim_reent+0x36>
 801d90c:	4620      	mov	r0, r4
 801d90e:	f000 f8ef 	bl	801daf0 <_free_r>
 801d912:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801d914:	b111      	cbz	r1, 801d91c <_reclaim_reent+0x40>
 801d916:	4620      	mov	r0, r4
 801d918:	f000 f8ea 	bl	801daf0 <_free_r>
 801d91c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d91e:	b111      	cbz	r1, 801d926 <_reclaim_reent+0x4a>
 801d920:	4620      	mov	r0, r4
 801d922:	f000 f8e5 	bl	801daf0 <_free_r>
 801d926:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801d928:	b111      	cbz	r1, 801d930 <_reclaim_reent+0x54>
 801d92a:	4620      	mov	r0, r4
 801d92c:	f000 f8e0 	bl	801daf0 <_free_r>
 801d930:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801d932:	b111      	cbz	r1, 801d93a <_reclaim_reent+0x5e>
 801d934:	4620      	mov	r0, r4
 801d936:	f000 f8db 	bl	801daf0 <_free_r>
 801d93a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801d93c:	b111      	cbz	r1, 801d944 <_reclaim_reent+0x68>
 801d93e:	4620      	mov	r0, r4
 801d940:	f000 f8d6 	bl	801daf0 <_free_r>
 801d944:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801d946:	b111      	cbz	r1, 801d94e <_reclaim_reent+0x72>
 801d948:	4620      	mov	r0, r4
 801d94a:	f000 f8d1 	bl	801daf0 <_free_r>
 801d94e:	6a23      	ldr	r3, [r4, #32]
 801d950:	b1b3      	cbz	r3, 801d980 <_reclaim_reent+0xa4>
 801d952:	4620      	mov	r0, r4
 801d954:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d958:	4718      	bx	r3
 801d95a:	5949      	ldr	r1, [r1, r5]
 801d95c:	b941      	cbnz	r1, 801d970 <_reclaim_reent+0x94>
 801d95e:	3504      	adds	r5, #4
 801d960:	69e3      	ldr	r3, [r4, #28]
 801d962:	2d80      	cmp	r5, #128	; 0x80
 801d964:	68d9      	ldr	r1, [r3, #12]
 801d966:	d1f8      	bne.n	801d95a <_reclaim_reent+0x7e>
 801d968:	4620      	mov	r0, r4
 801d96a:	f000 f8c1 	bl	801daf0 <_free_r>
 801d96e:	e7c0      	b.n	801d8f2 <_reclaim_reent+0x16>
 801d970:	680e      	ldr	r6, [r1, #0]
 801d972:	4620      	mov	r0, r4
 801d974:	f000 f8bc 	bl	801daf0 <_free_r>
 801d978:	4631      	mov	r1, r6
 801d97a:	e7ef      	b.n	801d95c <_reclaim_reent+0x80>
 801d97c:	2500      	movs	r5, #0
 801d97e:	e7ef      	b.n	801d960 <_reclaim_reent+0x84>
 801d980:	bd70      	pop	{r4, r5, r6, pc}
 801d982:	bf00      	nop
 801d984:	20002478 	.word	0x20002478

0801d988 <_lseek_r>:
 801d988:	b538      	push	{r3, r4, r5, lr}
 801d98a:	4d07      	ldr	r5, [pc, #28]	; (801d9a8 <_lseek_r+0x20>)
 801d98c:	4604      	mov	r4, r0
 801d98e:	4608      	mov	r0, r1
 801d990:	4611      	mov	r1, r2
 801d992:	2200      	movs	r2, #0
 801d994:	602a      	str	r2, [r5, #0]
 801d996:	461a      	mov	r2, r3
 801d998:	f7e5 fd7c 	bl	8003494 <_lseek>
 801d99c:	1c43      	adds	r3, r0, #1
 801d99e:	d102      	bne.n	801d9a6 <_lseek_r+0x1e>
 801d9a0:	682b      	ldr	r3, [r5, #0]
 801d9a2:	b103      	cbz	r3, 801d9a6 <_lseek_r+0x1e>
 801d9a4:	6023      	str	r3, [r4, #0]
 801d9a6:	bd38      	pop	{r3, r4, r5, pc}
 801d9a8:	20010fcc 	.word	0x20010fcc

0801d9ac <_read_r>:
 801d9ac:	b538      	push	{r3, r4, r5, lr}
 801d9ae:	4d07      	ldr	r5, [pc, #28]	; (801d9cc <_read_r+0x20>)
 801d9b0:	4604      	mov	r4, r0
 801d9b2:	4608      	mov	r0, r1
 801d9b4:	4611      	mov	r1, r2
 801d9b6:	2200      	movs	r2, #0
 801d9b8:	602a      	str	r2, [r5, #0]
 801d9ba:	461a      	mov	r2, r3
 801d9bc:	f7e5 fd0a 	bl	80033d4 <_read>
 801d9c0:	1c43      	adds	r3, r0, #1
 801d9c2:	d102      	bne.n	801d9ca <_read_r+0x1e>
 801d9c4:	682b      	ldr	r3, [r5, #0]
 801d9c6:	b103      	cbz	r3, 801d9ca <_read_r+0x1e>
 801d9c8:	6023      	str	r3, [r4, #0]
 801d9ca:	bd38      	pop	{r3, r4, r5, pc}
 801d9cc:	20010fcc 	.word	0x20010fcc

0801d9d0 <_sbrk_r>:
 801d9d0:	b538      	push	{r3, r4, r5, lr}
 801d9d2:	4d06      	ldr	r5, [pc, #24]	; (801d9ec <_sbrk_r+0x1c>)
 801d9d4:	2300      	movs	r3, #0
 801d9d6:	4604      	mov	r4, r0
 801d9d8:	4608      	mov	r0, r1
 801d9da:	602b      	str	r3, [r5, #0]
 801d9dc:	f7e5 fd68 	bl	80034b0 <_sbrk>
 801d9e0:	1c43      	adds	r3, r0, #1
 801d9e2:	d102      	bne.n	801d9ea <_sbrk_r+0x1a>
 801d9e4:	682b      	ldr	r3, [r5, #0]
 801d9e6:	b103      	cbz	r3, 801d9ea <_sbrk_r+0x1a>
 801d9e8:	6023      	str	r3, [r4, #0]
 801d9ea:	bd38      	pop	{r3, r4, r5, pc}
 801d9ec:	20010fcc 	.word	0x20010fcc

0801d9f0 <_write_r>:
 801d9f0:	b538      	push	{r3, r4, r5, lr}
 801d9f2:	4d07      	ldr	r5, [pc, #28]	; (801da10 <_write_r+0x20>)
 801d9f4:	4604      	mov	r4, r0
 801d9f6:	4608      	mov	r0, r1
 801d9f8:	4611      	mov	r1, r2
 801d9fa:	2200      	movs	r2, #0
 801d9fc:	602a      	str	r2, [r5, #0]
 801d9fe:	461a      	mov	r2, r3
 801da00:	f7e5 fd05 	bl	800340e <_write>
 801da04:	1c43      	adds	r3, r0, #1
 801da06:	d102      	bne.n	801da0e <_write_r+0x1e>
 801da08:	682b      	ldr	r3, [r5, #0]
 801da0a:	b103      	cbz	r3, 801da0e <_write_r+0x1e>
 801da0c:	6023      	str	r3, [r4, #0]
 801da0e:	bd38      	pop	{r3, r4, r5, pc}
 801da10:	20010fcc 	.word	0x20010fcc

0801da14 <__errno>:
 801da14:	4b01      	ldr	r3, [pc, #4]	; (801da1c <__errno+0x8>)
 801da16:	6818      	ldr	r0, [r3, #0]
 801da18:	4770      	bx	lr
 801da1a:	bf00      	nop
 801da1c:	20002478 	.word	0x20002478

0801da20 <__libc_init_array>:
 801da20:	b570      	push	{r4, r5, r6, lr}
 801da22:	4d0d      	ldr	r5, [pc, #52]	; (801da58 <__libc_init_array+0x38>)
 801da24:	4c0d      	ldr	r4, [pc, #52]	; (801da5c <__libc_init_array+0x3c>)
 801da26:	1b64      	subs	r4, r4, r5
 801da28:	10a4      	asrs	r4, r4, #2
 801da2a:	2600      	movs	r6, #0
 801da2c:	42a6      	cmp	r6, r4
 801da2e:	d109      	bne.n	801da44 <__libc_init_array+0x24>
 801da30:	4d0b      	ldr	r5, [pc, #44]	; (801da60 <__libc_init_array+0x40>)
 801da32:	4c0c      	ldr	r4, [pc, #48]	; (801da64 <__libc_init_array+0x44>)
 801da34:	f000 ff00 	bl	801e838 <_init>
 801da38:	1b64      	subs	r4, r4, r5
 801da3a:	10a4      	asrs	r4, r4, #2
 801da3c:	2600      	movs	r6, #0
 801da3e:	42a6      	cmp	r6, r4
 801da40:	d105      	bne.n	801da4e <__libc_init_array+0x2e>
 801da42:	bd70      	pop	{r4, r5, r6, pc}
 801da44:	f855 3b04 	ldr.w	r3, [r5], #4
 801da48:	4798      	blx	r3
 801da4a:	3601      	adds	r6, #1
 801da4c:	e7ee      	b.n	801da2c <__libc_init_array+0xc>
 801da4e:	f855 3b04 	ldr.w	r3, [r5], #4
 801da52:	4798      	blx	r3
 801da54:	3601      	adds	r6, #1
 801da56:	e7f2      	b.n	801da3e <__libc_init_array+0x1e>
 801da58:	080209dc 	.word	0x080209dc
 801da5c:	080209dc 	.word	0x080209dc
 801da60:	080209dc 	.word	0x080209dc
 801da64:	080209fc 	.word	0x080209fc

0801da68 <__retarget_lock_init_recursive>:
 801da68:	4770      	bx	lr

0801da6a <__retarget_lock_acquire_recursive>:
 801da6a:	4770      	bx	lr

0801da6c <__retarget_lock_release_recursive>:
 801da6c:	4770      	bx	lr

0801da6e <strcpy>:
 801da6e:	4603      	mov	r3, r0
 801da70:	f811 2b01 	ldrb.w	r2, [r1], #1
 801da74:	f803 2b01 	strb.w	r2, [r3], #1
 801da78:	2a00      	cmp	r2, #0
 801da7a:	d1f9      	bne.n	801da70 <strcpy+0x2>
 801da7c:	4770      	bx	lr

0801da7e <memcpy>:
 801da7e:	440a      	add	r2, r1
 801da80:	4291      	cmp	r1, r2
 801da82:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801da86:	d100      	bne.n	801da8a <memcpy+0xc>
 801da88:	4770      	bx	lr
 801da8a:	b510      	push	{r4, lr}
 801da8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801da90:	f803 4f01 	strb.w	r4, [r3, #1]!
 801da94:	4291      	cmp	r1, r2
 801da96:	d1f9      	bne.n	801da8c <memcpy+0xe>
 801da98:	bd10      	pop	{r4, pc}
	...

0801da9c <__assert_func>:
 801da9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801da9e:	4614      	mov	r4, r2
 801daa0:	461a      	mov	r2, r3
 801daa2:	4b09      	ldr	r3, [pc, #36]	; (801dac8 <__assert_func+0x2c>)
 801daa4:	681b      	ldr	r3, [r3, #0]
 801daa6:	4605      	mov	r5, r0
 801daa8:	68d8      	ldr	r0, [r3, #12]
 801daaa:	b14c      	cbz	r4, 801dac0 <__assert_func+0x24>
 801daac:	4b07      	ldr	r3, [pc, #28]	; (801dacc <__assert_func+0x30>)
 801daae:	9100      	str	r1, [sp, #0]
 801dab0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801dab4:	4906      	ldr	r1, [pc, #24]	; (801dad0 <__assert_func+0x34>)
 801dab6:	462b      	mov	r3, r5
 801dab8:	f000 fc04 	bl	801e2c4 <fiprintf>
 801dabc:	f000 fc14 	bl	801e2e8 <abort>
 801dac0:	4b04      	ldr	r3, [pc, #16]	; (801dad4 <__assert_func+0x38>)
 801dac2:	461c      	mov	r4, r3
 801dac4:	e7f3      	b.n	801daae <__assert_func+0x12>
 801dac6:	bf00      	nop
 801dac8:	20002478 	.word	0x20002478
 801dacc:	08020964 	.word	0x08020964
 801dad0:	08020971 	.word	0x08020971
 801dad4:	0802099f 	.word	0x0802099f

0801dad8 <__env_lock>:
 801dad8:	4801      	ldr	r0, [pc, #4]	; (801dae0 <__env_lock+0x8>)
 801dada:	f7ff bfc6 	b.w	801da6a <__retarget_lock_acquire_recursive>
 801dade:	bf00      	nop
 801dae0:	20010fd0 	.word	0x20010fd0

0801dae4 <__env_unlock>:
 801dae4:	4801      	ldr	r0, [pc, #4]	; (801daec <__env_unlock+0x8>)
 801dae6:	f7ff bfc1 	b.w	801da6c <__retarget_lock_release_recursive>
 801daea:	bf00      	nop
 801daec:	20010fd0 	.word	0x20010fd0

0801daf0 <_free_r>:
 801daf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801daf2:	2900      	cmp	r1, #0
 801daf4:	d044      	beq.n	801db80 <_free_r+0x90>
 801daf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dafa:	9001      	str	r0, [sp, #4]
 801dafc:	2b00      	cmp	r3, #0
 801dafe:	f1a1 0404 	sub.w	r4, r1, #4
 801db02:	bfb8      	it	lt
 801db04:	18e4      	addlt	r4, r4, r3
 801db06:	f7ff fbc1 	bl	801d28c <__malloc_lock>
 801db0a:	4a1e      	ldr	r2, [pc, #120]	; (801db84 <_free_r+0x94>)
 801db0c:	9801      	ldr	r0, [sp, #4]
 801db0e:	6813      	ldr	r3, [r2, #0]
 801db10:	b933      	cbnz	r3, 801db20 <_free_r+0x30>
 801db12:	6063      	str	r3, [r4, #4]
 801db14:	6014      	str	r4, [r2, #0]
 801db16:	b003      	add	sp, #12
 801db18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801db1c:	f7ff bbbc 	b.w	801d298 <__malloc_unlock>
 801db20:	42a3      	cmp	r3, r4
 801db22:	d908      	bls.n	801db36 <_free_r+0x46>
 801db24:	6825      	ldr	r5, [r4, #0]
 801db26:	1961      	adds	r1, r4, r5
 801db28:	428b      	cmp	r3, r1
 801db2a:	bf01      	itttt	eq
 801db2c:	6819      	ldreq	r1, [r3, #0]
 801db2e:	685b      	ldreq	r3, [r3, #4]
 801db30:	1949      	addeq	r1, r1, r5
 801db32:	6021      	streq	r1, [r4, #0]
 801db34:	e7ed      	b.n	801db12 <_free_r+0x22>
 801db36:	461a      	mov	r2, r3
 801db38:	685b      	ldr	r3, [r3, #4]
 801db3a:	b10b      	cbz	r3, 801db40 <_free_r+0x50>
 801db3c:	42a3      	cmp	r3, r4
 801db3e:	d9fa      	bls.n	801db36 <_free_r+0x46>
 801db40:	6811      	ldr	r1, [r2, #0]
 801db42:	1855      	adds	r5, r2, r1
 801db44:	42a5      	cmp	r5, r4
 801db46:	d10b      	bne.n	801db60 <_free_r+0x70>
 801db48:	6824      	ldr	r4, [r4, #0]
 801db4a:	4421      	add	r1, r4
 801db4c:	1854      	adds	r4, r2, r1
 801db4e:	42a3      	cmp	r3, r4
 801db50:	6011      	str	r1, [r2, #0]
 801db52:	d1e0      	bne.n	801db16 <_free_r+0x26>
 801db54:	681c      	ldr	r4, [r3, #0]
 801db56:	685b      	ldr	r3, [r3, #4]
 801db58:	6053      	str	r3, [r2, #4]
 801db5a:	440c      	add	r4, r1
 801db5c:	6014      	str	r4, [r2, #0]
 801db5e:	e7da      	b.n	801db16 <_free_r+0x26>
 801db60:	d902      	bls.n	801db68 <_free_r+0x78>
 801db62:	230c      	movs	r3, #12
 801db64:	6003      	str	r3, [r0, #0]
 801db66:	e7d6      	b.n	801db16 <_free_r+0x26>
 801db68:	6825      	ldr	r5, [r4, #0]
 801db6a:	1961      	adds	r1, r4, r5
 801db6c:	428b      	cmp	r3, r1
 801db6e:	bf04      	itt	eq
 801db70:	6819      	ldreq	r1, [r3, #0]
 801db72:	685b      	ldreq	r3, [r3, #4]
 801db74:	6063      	str	r3, [r4, #4]
 801db76:	bf04      	itt	eq
 801db78:	1949      	addeq	r1, r1, r5
 801db7a:	6021      	streq	r1, [r4, #0]
 801db7c:	6054      	str	r4, [r2, #4]
 801db7e:	e7ca      	b.n	801db16 <_free_r+0x26>
 801db80:	b003      	add	sp, #12
 801db82:	bd30      	pop	{r4, r5, pc}
 801db84:	20010e88 	.word	0x20010e88

0801db88 <_malloc_usable_size_r>:
 801db88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801db8c:	1f18      	subs	r0, r3, #4
 801db8e:	2b00      	cmp	r3, #0
 801db90:	bfbc      	itt	lt
 801db92:	580b      	ldrlt	r3, [r1, r0]
 801db94:	18c0      	addlt	r0, r0, r3
 801db96:	4770      	bx	lr

0801db98 <__ssputs_r>:
 801db98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801db9c:	688e      	ldr	r6, [r1, #8]
 801db9e:	461f      	mov	r7, r3
 801dba0:	42be      	cmp	r6, r7
 801dba2:	680b      	ldr	r3, [r1, #0]
 801dba4:	4682      	mov	sl, r0
 801dba6:	460c      	mov	r4, r1
 801dba8:	4690      	mov	r8, r2
 801dbaa:	d82c      	bhi.n	801dc06 <__ssputs_r+0x6e>
 801dbac:	898a      	ldrh	r2, [r1, #12]
 801dbae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801dbb2:	d026      	beq.n	801dc02 <__ssputs_r+0x6a>
 801dbb4:	6965      	ldr	r5, [r4, #20]
 801dbb6:	6909      	ldr	r1, [r1, #16]
 801dbb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dbbc:	eba3 0901 	sub.w	r9, r3, r1
 801dbc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801dbc4:	1c7b      	adds	r3, r7, #1
 801dbc6:	444b      	add	r3, r9
 801dbc8:	106d      	asrs	r5, r5, #1
 801dbca:	429d      	cmp	r5, r3
 801dbcc:	bf38      	it	cc
 801dbce:	461d      	movcc	r5, r3
 801dbd0:	0553      	lsls	r3, r2, #21
 801dbd2:	d527      	bpl.n	801dc24 <__ssputs_r+0x8c>
 801dbd4:	4629      	mov	r1, r5
 801dbd6:	f7ff fad9 	bl	801d18c <_malloc_r>
 801dbda:	4606      	mov	r6, r0
 801dbdc:	b360      	cbz	r0, 801dc38 <__ssputs_r+0xa0>
 801dbde:	6921      	ldr	r1, [r4, #16]
 801dbe0:	464a      	mov	r2, r9
 801dbe2:	f7ff ff4c 	bl	801da7e <memcpy>
 801dbe6:	89a3      	ldrh	r3, [r4, #12]
 801dbe8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801dbec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dbf0:	81a3      	strh	r3, [r4, #12]
 801dbf2:	6126      	str	r6, [r4, #16]
 801dbf4:	6165      	str	r5, [r4, #20]
 801dbf6:	444e      	add	r6, r9
 801dbf8:	eba5 0509 	sub.w	r5, r5, r9
 801dbfc:	6026      	str	r6, [r4, #0]
 801dbfe:	60a5      	str	r5, [r4, #8]
 801dc00:	463e      	mov	r6, r7
 801dc02:	42be      	cmp	r6, r7
 801dc04:	d900      	bls.n	801dc08 <__ssputs_r+0x70>
 801dc06:	463e      	mov	r6, r7
 801dc08:	6820      	ldr	r0, [r4, #0]
 801dc0a:	4632      	mov	r2, r6
 801dc0c:	4641      	mov	r1, r8
 801dc0e:	f7ff fdeb 	bl	801d7e8 <memmove>
 801dc12:	68a3      	ldr	r3, [r4, #8]
 801dc14:	1b9b      	subs	r3, r3, r6
 801dc16:	60a3      	str	r3, [r4, #8]
 801dc18:	6823      	ldr	r3, [r4, #0]
 801dc1a:	4433      	add	r3, r6
 801dc1c:	6023      	str	r3, [r4, #0]
 801dc1e:	2000      	movs	r0, #0
 801dc20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dc24:	462a      	mov	r2, r5
 801dc26:	f7ff fbb1 	bl	801d38c <_realloc_r>
 801dc2a:	4606      	mov	r6, r0
 801dc2c:	2800      	cmp	r0, #0
 801dc2e:	d1e0      	bne.n	801dbf2 <__ssputs_r+0x5a>
 801dc30:	6921      	ldr	r1, [r4, #16]
 801dc32:	4650      	mov	r0, sl
 801dc34:	f7ff ff5c 	bl	801daf0 <_free_r>
 801dc38:	230c      	movs	r3, #12
 801dc3a:	f8ca 3000 	str.w	r3, [sl]
 801dc3e:	89a3      	ldrh	r3, [r4, #12]
 801dc40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dc44:	81a3      	strh	r3, [r4, #12]
 801dc46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dc4a:	e7e9      	b.n	801dc20 <__ssputs_r+0x88>

0801dc4c <_svfiprintf_r>:
 801dc4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc50:	4698      	mov	r8, r3
 801dc52:	898b      	ldrh	r3, [r1, #12]
 801dc54:	061b      	lsls	r3, r3, #24
 801dc56:	b09d      	sub	sp, #116	; 0x74
 801dc58:	4607      	mov	r7, r0
 801dc5a:	460d      	mov	r5, r1
 801dc5c:	4614      	mov	r4, r2
 801dc5e:	d50e      	bpl.n	801dc7e <_svfiprintf_r+0x32>
 801dc60:	690b      	ldr	r3, [r1, #16]
 801dc62:	b963      	cbnz	r3, 801dc7e <_svfiprintf_r+0x32>
 801dc64:	2140      	movs	r1, #64	; 0x40
 801dc66:	f7ff fa91 	bl	801d18c <_malloc_r>
 801dc6a:	6028      	str	r0, [r5, #0]
 801dc6c:	6128      	str	r0, [r5, #16]
 801dc6e:	b920      	cbnz	r0, 801dc7a <_svfiprintf_r+0x2e>
 801dc70:	230c      	movs	r3, #12
 801dc72:	603b      	str	r3, [r7, #0]
 801dc74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dc78:	e0d0      	b.n	801de1c <_svfiprintf_r+0x1d0>
 801dc7a:	2340      	movs	r3, #64	; 0x40
 801dc7c:	616b      	str	r3, [r5, #20]
 801dc7e:	2300      	movs	r3, #0
 801dc80:	9309      	str	r3, [sp, #36]	; 0x24
 801dc82:	2320      	movs	r3, #32
 801dc84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801dc88:	f8cd 800c 	str.w	r8, [sp, #12]
 801dc8c:	2330      	movs	r3, #48	; 0x30
 801dc8e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801de34 <_svfiprintf_r+0x1e8>
 801dc92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801dc96:	f04f 0901 	mov.w	r9, #1
 801dc9a:	4623      	mov	r3, r4
 801dc9c:	469a      	mov	sl, r3
 801dc9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dca2:	b10a      	cbz	r2, 801dca8 <_svfiprintf_r+0x5c>
 801dca4:	2a25      	cmp	r2, #37	; 0x25
 801dca6:	d1f9      	bne.n	801dc9c <_svfiprintf_r+0x50>
 801dca8:	ebba 0b04 	subs.w	fp, sl, r4
 801dcac:	d00b      	beq.n	801dcc6 <_svfiprintf_r+0x7a>
 801dcae:	465b      	mov	r3, fp
 801dcb0:	4622      	mov	r2, r4
 801dcb2:	4629      	mov	r1, r5
 801dcb4:	4638      	mov	r0, r7
 801dcb6:	f7ff ff6f 	bl	801db98 <__ssputs_r>
 801dcba:	3001      	adds	r0, #1
 801dcbc:	f000 80a9 	beq.w	801de12 <_svfiprintf_r+0x1c6>
 801dcc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dcc2:	445a      	add	r2, fp
 801dcc4:	9209      	str	r2, [sp, #36]	; 0x24
 801dcc6:	f89a 3000 	ldrb.w	r3, [sl]
 801dcca:	2b00      	cmp	r3, #0
 801dccc:	f000 80a1 	beq.w	801de12 <_svfiprintf_r+0x1c6>
 801dcd0:	2300      	movs	r3, #0
 801dcd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801dcd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dcda:	f10a 0a01 	add.w	sl, sl, #1
 801dcde:	9304      	str	r3, [sp, #16]
 801dce0:	9307      	str	r3, [sp, #28]
 801dce2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801dce6:	931a      	str	r3, [sp, #104]	; 0x68
 801dce8:	4654      	mov	r4, sl
 801dcea:	2205      	movs	r2, #5
 801dcec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dcf0:	4850      	ldr	r0, [pc, #320]	; (801de34 <_svfiprintf_r+0x1e8>)
 801dcf2:	f7e2 fab5 	bl	8000260 <memchr>
 801dcf6:	9a04      	ldr	r2, [sp, #16]
 801dcf8:	b9d8      	cbnz	r0, 801dd32 <_svfiprintf_r+0xe6>
 801dcfa:	06d0      	lsls	r0, r2, #27
 801dcfc:	bf44      	itt	mi
 801dcfe:	2320      	movmi	r3, #32
 801dd00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dd04:	0711      	lsls	r1, r2, #28
 801dd06:	bf44      	itt	mi
 801dd08:	232b      	movmi	r3, #43	; 0x2b
 801dd0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dd0e:	f89a 3000 	ldrb.w	r3, [sl]
 801dd12:	2b2a      	cmp	r3, #42	; 0x2a
 801dd14:	d015      	beq.n	801dd42 <_svfiprintf_r+0xf6>
 801dd16:	9a07      	ldr	r2, [sp, #28]
 801dd18:	4654      	mov	r4, sl
 801dd1a:	2000      	movs	r0, #0
 801dd1c:	f04f 0c0a 	mov.w	ip, #10
 801dd20:	4621      	mov	r1, r4
 801dd22:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dd26:	3b30      	subs	r3, #48	; 0x30
 801dd28:	2b09      	cmp	r3, #9
 801dd2a:	d94d      	bls.n	801ddc8 <_svfiprintf_r+0x17c>
 801dd2c:	b1b0      	cbz	r0, 801dd5c <_svfiprintf_r+0x110>
 801dd2e:	9207      	str	r2, [sp, #28]
 801dd30:	e014      	b.n	801dd5c <_svfiprintf_r+0x110>
 801dd32:	eba0 0308 	sub.w	r3, r0, r8
 801dd36:	fa09 f303 	lsl.w	r3, r9, r3
 801dd3a:	4313      	orrs	r3, r2
 801dd3c:	9304      	str	r3, [sp, #16]
 801dd3e:	46a2      	mov	sl, r4
 801dd40:	e7d2      	b.n	801dce8 <_svfiprintf_r+0x9c>
 801dd42:	9b03      	ldr	r3, [sp, #12]
 801dd44:	1d19      	adds	r1, r3, #4
 801dd46:	681b      	ldr	r3, [r3, #0]
 801dd48:	9103      	str	r1, [sp, #12]
 801dd4a:	2b00      	cmp	r3, #0
 801dd4c:	bfbb      	ittet	lt
 801dd4e:	425b      	neglt	r3, r3
 801dd50:	f042 0202 	orrlt.w	r2, r2, #2
 801dd54:	9307      	strge	r3, [sp, #28]
 801dd56:	9307      	strlt	r3, [sp, #28]
 801dd58:	bfb8      	it	lt
 801dd5a:	9204      	strlt	r2, [sp, #16]
 801dd5c:	7823      	ldrb	r3, [r4, #0]
 801dd5e:	2b2e      	cmp	r3, #46	; 0x2e
 801dd60:	d10c      	bne.n	801dd7c <_svfiprintf_r+0x130>
 801dd62:	7863      	ldrb	r3, [r4, #1]
 801dd64:	2b2a      	cmp	r3, #42	; 0x2a
 801dd66:	d134      	bne.n	801ddd2 <_svfiprintf_r+0x186>
 801dd68:	9b03      	ldr	r3, [sp, #12]
 801dd6a:	1d1a      	adds	r2, r3, #4
 801dd6c:	681b      	ldr	r3, [r3, #0]
 801dd6e:	9203      	str	r2, [sp, #12]
 801dd70:	2b00      	cmp	r3, #0
 801dd72:	bfb8      	it	lt
 801dd74:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801dd78:	3402      	adds	r4, #2
 801dd7a:	9305      	str	r3, [sp, #20]
 801dd7c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801de44 <_svfiprintf_r+0x1f8>
 801dd80:	7821      	ldrb	r1, [r4, #0]
 801dd82:	2203      	movs	r2, #3
 801dd84:	4650      	mov	r0, sl
 801dd86:	f7e2 fa6b 	bl	8000260 <memchr>
 801dd8a:	b138      	cbz	r0, 801dd9c <_svfiprintf_r+0x150>
 801dd8c:	9b04      	ldr	r3, [sp, #16]
 801dd8e:	eba0 000a 	sub.w	r0, r0, sl
 801dd92:	2240      	movs	r2, #64	; 0x40
 801dd94:	4082      	lsls	r2, r0
 801dd96:	4313      	orrs	r3, r2
 801dd98:	3401      	adds	r4, #1
 801dd9a:	9304      	str	r3, [sp, #16]
 801dd9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dda0:	4825      	ldr	r0, [pc, #148]	; (801de38 <_svfiprintf_r+0x1ec>)
 801dda2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801dda6:	2206      	movs	r2, #6
 801dda8:	f7e2 fa5a 	bl	8000260 <memchr>
 801ddac:	2800      	cmp	r0, #0
 801ddae:	d038      	beq.n	801de22 <_svfiprintf_r+0x1d6>
 801ddb0:	4b22      	ldr	r3, [pc, #136]	; (801de3c <_svfiprintf_r+0x1f0>)
 801ddb2:	bb1b      	cbnz	r3, 801ddfc <_svfiprintf_r+0x1b0>
 801ddb4:	9b03      	ldr	r3, [sp, #12]
 801ddb6:	3307      	adds	r3, #7
 801ddb8:	f023 0307 	bic.w	r3, r3, #7
 801ddbc:	3308      	adds	r3, #8
 801ddbe:	9303      	str	r3, [sp, #12]
 801ddc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ddc2:	4433      	add	r3, r6
 801ddc4:	9309      	str	r3, [sp, #36]	; 0x24
 801ddc6:	e768      	b.n	801dc9a <_svfiprintf_r+0x4e>
 801ddc8:	fb0c 3202 	mla	r2, ip, r2, r3
 801ddcc:	460c      	mov	r4, r1
 801ddce:	2001      	movs	r0, #1
 801ddd0:	e7a6      	b.n	801dd20 <_svfiprintf_r+0xd4>
 801ddd2:	2300      	movs	r3, #0
 801ddd4:	3401      	adds	r4, #1
 801ddd6:	9305      	str	r3, [sp, #20]
 801ddd8:	4619      	mov	r1, r3
 801ddda:	f04f 0c0a 	mov.w	ip, #10
 801ddde:	4620      	mov	r0, r4
 801dde0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dde4:	3a30      	subs	r2, #48	; 0x30
 801dde6:	2a09      	cmp	r2, #9
 801dde8:	d903      	bls.n	801ddf2 <_svfiprintf_r+0x1a6>
 801ddea:	2b00      	cmp	r3, #0
 801ddec:	d0c6      	beq.n	801dd7c <_svfiprintf_r+0x130>
 801ddee:	9105      	str	r1, [sp, #20]
 801ddf0:	e7c4      	b.n	801dd7c <_svfiprintf_r+0x130>
 801ddf2:	fb0c 2101 	mla	r1, ip, r1, r2
 801ddf6:	4604      	mov	r4, r0
 801ddf8:	2301      	movs	r3, #1
 801ddfa:	e7f0      	b.n	801ddde <_svfiprintf_r+0x192>
 801ddfc:	ab03      	add	r3, sp, #12
 801ddfe:	9300      	str	r3, [sp, #0]
 801de00:	462a      	mov	r2, r5
 801de02:	4b0f      	ldr	r3, [pc, #60]	; (801de40 <_svfiprintf_r+0x1f4>)
 801de04:	a904      	add	r1, sp, #16
 801de06:	4638      	mov	r0, r7
 801de08:	f3af 8000 	nop.w
 801de0c:	1c42      	adds	r2, r0, #1
 801de0e:	4606      	mov	r6, r0
 801de10:	d1d6      	bne.n	801ddc0 <_svfiprintf_r+0x174>
 801de12:	89ab      	ldrh	r3, [r5, #12]
 801de14:	065b      	lsls	r3, r3, #25
 801de16:	f53f af2d 	bmi.w	801dc74 <_svfiprintf_r+0x28>
 801de1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801de1c:	b01d      	add	sp, #116	; 0x74
 801de1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de22:	ab03      	add	r3, sp, #12
 801de24:	9300      	str	r3, [sp, #0]
 801de26:	462a      	mov	r2, r5
 801de28:	4b05      	ldr	r3, [pc, #20]	; (801de40 <_svfiprintf_r+0x1f4>)
 801de2a:	a904      	add	r1, sp, #16
 801de2c:	4638      	mov	r0, r7
 801de2e:	f000 f879 	bl	801df24 <_printf_i>
 801de32:	e7eb      	b.n	801de0c <_svfiprintf_r+0x1c0>
 801de34:	080209a0 	.word	0x080209a0
 801de38:	080209aa 	.word	0x080209aa
 801de3c:	00000000 	.word	0x00000000
 801de40:	0801db99 	.word	0x0801db99
 801de44:	080209a6 	.word	0x080209a6

0801de48 <_printf_common>:
 801de48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801de4c:	4616      	mov	r6, r2
 801de4e:	4699      	mov	r9, r3
 801de50:	688a      	ldr	r2, [r1, #8]
 801de52:	690b      	ldr	r3, [r1, #16]
 801de54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801de58:	4293      	cmp	r3, r2
 801de5a:	bfb8      	it	lt
 801de5c:	4613      	movlt	r3, r2
 801de5e:	6033      	str	r3, [r6, #0]
 801de60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801de64:	4607      	mov	r7, r0
 801de66:	460c      	mov	r4, r1
 801de68:	b10a      	cbz	r2, 801de6e <_printf_common+0x26>
 801de6a:	3301      	adds	r3, #1
 801de6c:	6033      	str	r3, [r6, #0]
 801de6e:	6823      	ldr	r3, [r4, #0]
 801de70:	0699      	lsls	r1, r3, #26
 801de72:	bf42      	ittt	mi
 801de74:	6833      	ldrmi	r3, [r6, #0]
 801de76:	3302      	addmi	r3, #2
 801de78:	6033      	strmi	r3, [r6, #0]
 801de7a:	6825      	ldr	r5, [r4, #0]
 801de7c:	f015 0506 	ands.w	r5, r5, #6
 801de80:	d106      	bne.n	801de90 <_printf_common+0x48>
 801de82:	f104 0a19 	add.w	sl, r4, #25
 801de86:	68e3      	ldr	r3, [r4, #12]
 801de88:	6832      	ldr	r2, [r6, #0]
 801de8a:	1a9b      	subs	r3, r3, r2
 801de8c:	42ab      	cmp	r3, r5
 801de8e:	dc26      	bgt.n	801dede <_printf_common+0x96>
 801de90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801de94:	1e13      	subs	r3, r2, #0
 801de96:	6822      	ldr	r2, [r4, #0]
 801de98:	bf18      	it	ne
 801de9a:	2301      	movne	r3, #1
 801de9c:	0692      	lsls	r2, r2, #26
 801de9e:	d42b      	bmi.n	801def8 <_printf_common+0xb0>
 801dea0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801dea4:	4649      	mov	r1, r9
 801dea6:	4638      	mov	r0, r7
 801dea8:	47c0      	blx	r8
 801deaa:	3001      	adds	r0, #1
 801deac:	d01e      	beq.n	801deec <_printf_common+0xa4>
 801deae:	6823      	ldr	r3, [r4, #0]
 801deb0:	6922      	ldr	r2, [r4, #16]
 801deb2:	f003 0306 	and.w	r3, r3, #6
 801deb6:	2b04      	cmp	r3, #4
 801deb8:	bf02      	ittt	eq
 801deba:	68e5      	ldreq	r5, [r4, #12]
 801debc:	6833      	ldreq	r3, [r6, #0]
 801debe:	1aed      	subeq	r5, r5, r3
 801dec0:	68a3      	ldr	r3, [r4, #8]
 801dec2:	bf0c      	ite	eq
 801dec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801dec8:	2500      	movne	r5, #0
 801deca:	4293      	cmp	r3, r2
 801decc:	bfc4      	itt	gt
 801dece:	1a9b      	subgt	r3, r3, r2
 801ded0:	18ed      	addgt	r5, r5, r3
 801ded2:	2600      	movs	r6, #0
 801ded4:	341a      	adds	r4, #26
 801ded6:	42b5      	cmp	r5, r6
 801ded8:	d11a      	bne.n	801df10 <_printf_common+0xc8>
 801deda:	2000      	movs	r0, #0
 801dedc:	e008      	b.n	801def0 <_printf_common+0xa8>
 801dede:	2301      	movs	r3, #1
 801dee0:	4652      	mov	r2, sl
 801dee2:	4649      	mov	r1, r9
 801dee4:	4638      	mov	r0, r7
 801dee6:	47c0      	blx	r8
 801dee8:	3001      	adds	r0, #1
 801deea:	d103      	bne.n	801def4 <_printf_common+0xac>
 801deec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801def0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801def4:	3501      	adds	r5, #1
 801def6:	e7c6      	b.n	801de86 <_printf_common+0x3e>
 801def8:	18e1      	adds	r1, r4, r3
 801defa:	1c5a      	adds	r2, r3, #1
 801defc:	2030      	movs	r0, #48	; 0x30
 801defe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801df02:	4422      	add	r2, r4
 801df04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801df08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801df0c:	3302      	adds	r3, #2
 801df0e:	e7c7      	b.n	801dea0 <_printf_common+0x58>
 801df10:	2301      	movs	r3, #1
 801df12:	4622      	mov	r2, r4
 801df14:	4649      	mov	r1, r9
 801df16:	4638      	mov	r0, r7
 801df18:	47c0      	blx	r8
 801df1a:	3001      	adds	r0, #1
 801df1c:	d0e6      	beq.n	801deec <_printf_common+0xa4>
 801df1e:	3601      	adds	r6, #1
 801df20:	e7d9      	b.n	801ded6 <_printf_common+0x8e>
	...

0801df24 <_printf_i>:
 801df24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801df28:	7e0f      	ldrb	r7, [r1, #24]
 801df2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801df2c:	2f78      	cmp	r7, #120	; 0x78
 801df2e:	4691      	mov	r9, r2
 801df30:	4680      	mov	r8, r0
 801df32:	460c      	mov	r4, r1
 801df34:	469a      	mov	sl, r3
 801df36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801df3a:	d807      	bhi.n	801df4c <_printf_i+0x28>
 801df3c:	2f62      	cmp	r7, #98	; 0x62
 801df3e:	d80a      	bhi.n	801df56 <_printf_i+0x32>
 801df40:	2f00      	cmp	r7, #0
 801df42:	f000 80d4 	beq.w	801e0ee <_printf_i+0x1ca>
 801df46:	2f58      	cmp	r7, #88	; 0x58
 801df48:	f000 80c0 	beq.w	801e0cc <_printf_i+0x1a8>
 801df4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801df50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801df54:	e03a      	b.n	801dfcc <_printf_i+0xa8>
 801df56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801df5a:	2b15      	cmp	r3, #21
 801df5c:	d8f6      	bhi.n	801df4c <_printf_i+0x28>
 801df5e:	a101      	add	r1, pc, #4	; (adr r1, 801df64 <_printf_i+0x40>)
 801df60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801df64:	0801dfbd 	.word	0x0801dfbd
 801df68:	0801dfd1 	.word	0x0801dfd1
 801df6c:	0801df4d 	.word	0x0801df4d
 801df70:	0801df4d 	.word	0x0801df4d
 801df74:	0801df4d 	.word	0x0801df4d
 801df78:	0801df4d 	.word	0x0801df4d
 801df7c:	0801dfd1 	.word	0x0801dfd1
 801df80:	0801df4d 	.word	0x0801df4d
 801df84:	0801df4d 	.word	0x0801df4d
 801df88:	0801df4d 	.word	0x0801df4d
 801df8c:	0801df4d 	.word	0x0801df4d
 801df90:	0801e0d5 	.word	0x0801e0d5
 801df94:	0801dffd 	.word	0x0801dffd
 801df98:	0801e08f 	.word	0x0801e08f
 801df9c:	0801df4d 	.word	0x0801df4d
 801dfa0:	0801df4d 	.word	0x0801df4d
 801dfa4:	0801e0f7 	.word	0x0801e0f7
 801dfa8:	0801df4d 	.word	0x0801df4d
 801dfac:	0801dffd 	.word	0x0801dffd
 801dfb0:	0801df4d 	.word	0x0801df4d
 801dfb4:	0801df4d 	.word	0x0801df4d
 801dfb8:	0801e097 	.word	0x0801e097
 801dfbc:	682b      	ldr	r3, [r5, #0]
 801dfbe:	1d1a      	adds	r2, r3, #4
 801dfc0:	681b      	ldr	r3, [r3, #0]
 801dfc2:	602a      	str	r2, [r5, #0]
 801dfc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801dfc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801dfcc:	2301      	movs	r3, #1
 801dfce:	e09f      	b.n	801e110 <_printf_i+0x1ec>
 801dfd0:	6820      	ldr	r0, [r4, #0]
 801dfd2:	682b      	ldr	r3, [r5, #0]
 801dfd4:	0607      	lsls	r7, r0, #24
 801dfd6:	f103 0104 	add.w	r1, r3, #4
 801dfda:	6029      	str	r1, [r5, #0]
 801dfdc:	d501      	bpl.n	801dfe2 <_printf_i+0xbe>
 801dfde:	681e      	ldr	r6, [r3, #0]
 801dfe0:	e003      	b.n	801dfea <_printf_i+0xc6>
 801dfe2:	0646      	lsls	r6, r0, #25
 801dfe4:	d5fb      	bpl.n	801dfde <_printf_i+0xba>
 801dfe6:	f9b3 6000 	ldrsh.w	r6, [r3]
 801dfea:	2e00      	cmp	r6, #0
 801dfec:	da03      	bge.n	801dff6 <_printf_i+0xd2>
 801dfee:	232d      	movs	r3, #45	; 0x2d
 801dff0:	4276      	negs	r6, r6
 801dff2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801dff6:	485a      	ldr	r0, [pc, #360]	; (801e160 <_printf_i+0x23c>)
 801dff8:	230a      	movs	r3, #10
 801dffa:	e012      	b.n	801e022 <_printf_i+0xfe>
 801dffc:	682b      	ldr	r3, [r5, #0]
 801dffe:	6820      	ldr	r0, [r4, #0]
 801e000:	1d19      	adds	r1, r3, #4
 801e002:	6029      	str	r1, [r5, #0]
 801e004:	0605      	lsls	r5, r0, #24
 801e006:	d501      	bpl.n	801e00c <_printf_i+0xe8>
 801e008:	681e      	ldr	r6, [r3, #0]
 801e00a:	e002      	b.n	801e012 <_printf_i+0xee>
 801e00c:	0641      	lsls	r1, r0, #25
 801e00e:	d5fb      	bpl.n	801e008 <_printf_i+0xe4>
 801e010:	881e      	ldrh	r6, [r3, #0]
 801e012:	4853      	ldr	r0, [pc, #332]	; (801e160 <_printf_i+0x23c>)
 801e014:	2f6f      	cmp	r7, #111	; 0x6f
 801e016:	bf0c      	ite	eq
 801e018:	2308      	moveq	r3, #8
 801e01a:	230a      	movne	r3, #10
 801e01c:	2100      	movs	r1, #0
 801e01e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e022:	6865      	ldr	r5, [r4, #4]
 801e024:	60a5      	str	r5, [r4, #8]
 801e026:	2d00      	cmp	r5, #0
 801e028:	bfa2      	ittt	ge
 801e02a:	6821      	ldrge	r1, [r4, #0]
 801e02c:	f021 0104 	bicge.w	r1, r1, #4
 801e030:	6021      	strge	r1, [r4, #0]
 801e032:	b90e      	cbnz	r6, 801e038 <_printf_i+0x114>
 801e034:	2d00      	cmp	r5, #0
 801e036:	d04b      	beq.n	801e0d0 <_printf_i+0x1ac>
 801e038:	4615      	mov	r5, r2
 801e03a:	fbb6 f1f3 	udiv	r1, r6, r3
 801e03e:	fb03 6711 	mls	r7, r3, r1, r6
 801e042:	5dc7      	ldrb	r7, [r0, r7]
 801e044:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e048:	4637      	mov	r7, r6
 801e04a:	42bb      	cmp	r3, r7
 801e04c:	460e      	mov	r6, r1
 801e04e:	d9f4      	bls.n	801e03a <_printf_i+0x116>
 801e050:	2b08      	cmp	r3, #8
 801e052:	d10b      	bne.n	801e06c <_printf_i+0x148>
 801e054:	6823      	ldr	r3, [r4, #0]
 801e056:	07de      	lsls	r6, r3, #31
 801e058:	d508      	bpl.n	801e06c <_printf_i+0x148>
 801e05a:	6923      	ldr	r3, [r4, #16]
 801e05c:	6861      	ldr	r1, [r4, #4]
 801e05e:	4299      	cmp	r1, r3
 801e060:	bfde      	ittt	le
 801e062:	2330      	movle	r3, #48	; 0x30
 801e064:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e068:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801e06c:	1b52      	subs	r2, r2, r5
 801e06e:	6122      	str	r2, [r4, #16]
 801e070:	f8cd a000 	str.w	sl, [sp]
 801e074:	464b      	mov	r3, r9
 801e076:	aa03      	add	r2, sp, #12
 801e078:	4621      	mov	r1, r4
 801e07a:	4640      	mov	r0, r8
 801e07c:	f7ff fee4 	bl	801de48 <_printf_common>
 801e080:	3001      	adds	r0, #1
 801e082:	d14a      	bne.n	801e11a <_printf_i+0x1f6>
 801e084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e088:	b004      	add	sp, #16
 801e08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e08e:	6823      	ldr	r3, [r4, #0]
 801e090:	f043 0320 	orr.w	r3, r3, #32
 801e094:	6023      	str	r3, [r4, #0]
 801e096:	4833      	ldr	r0, [pc, #204]	; (801e164 <_printf_i+0x240>)
 801e098:	2778      	movs	r7, #120	; 0x78
 801e09a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801e09e:	6823      	ldr	r3, [r4, #0]
 801e0a0:	6829      	ldr	r1, [r5, #0]
 801e0a2:	061f      	lsls	r7, r3, #24
 801e0a4:	f851 6b04 	ldr.w	r6, [r1], #4
 801e0a8:	d402      	bmi.n	801e0b0 <_printf_i+0x18c>
 801e0aa:	065f      	lsls	r7, r3, #25
 801e0ac:	bf48      	it	mi
 801e0ae:	b2b6      	uxthmi	r6, r6
 801e0b0:	07df      	lsls	r7, r3, #31
 801e0b2:	bf48      	it	mi
 801e0b4:	f043 0320 	orrmi.w	r3, r3, #32
 801e0b8:	6029      	str	r1, [r5, #0]
 801e0ba:	bf48      	it	mi
 801e0bc:	6023      	strmi	r3, [r4, #0]
 801e0be:	b91e      	cbnz	r6, 801e0c8 <_printf_i+0x1a4>
 801e0c0:	6823      	ldr	r3, [r4, #0]
 801e0c2:	f023 0320 	bic.w	r3, r3, #32
 801e0c6:	6023      	str	r3, [r4, #0]
 801e0c8:	2310      	movs	r3, #16
 801e0ca:	e7a7      	b.n	801e01c <_printf_i+0xf8>
 801e0cc:	4824      	ldr	r0, [pc, #144]	; (801e160 <_printf_i+0x23c>)
 801e0ce:	e7e4      	b.n	801e09a <_printf_i+0x176>
 801e0d0:	4615      	mov	r5, r2
 801e0d2:	e7bd      	b.n	801e050 <_printf_i+0x12c>
 801e0d4:	682b      	ldr	r3, [r5, #0]
 801e0d6:	6826      	ldr	r6, [r4, #0]
 801e0d8:	6961      	ldr	r1, [r4, #20]
 801e0da:	1d18      	adds	r0, r3, #4
 801e0dc:	6028      	str	r0, [r5, #0]
 801e0de:	0635      	lsls	r5, r6, #24
 801e0e0:	681b      	ldr	r3, [r3, #0]
 801e0e2:	d501      	bpl.n	801e0e8 <_printf_i+0x1c4>
 801e0e4:	6019      	str	r1, [r3, #0]
 801e0e6:	e002      	b.n	801e0ee <_printf_i+0x1ca>
 801e0e8:	0670      	lsls	r0, r6, #25
 801e0ea:	d5fb      	bpl.n	801e0e4 <_printf_i+0x1c0>
 801e0ec:	8019      	strh	r1, [r3, #0]
 801e0ee:	2300      	movs	r3, #0
 801e0f0:	6123      	str	r3, [r4, #16]
 801e0f2:	4615      	mov	r5, r2
 801e0f4:	e7bc      	b.n	801e070 <_printf_i+0x14c>
 801e0f6:	682b      	ldr	r3, [r5, #0]
 801e0f8:	1d1a      	adds	r2, r3, #4
 801e0fa:	602a      	str	r2, [r5, #0]
 801e0fc:	681d      	ldr	r5, [r3, #0]
 801e0fe:	6862      	ldr	r2, [r4, #4]
 801e100:	2100      	movs	r1, #0
 801e102:	4628      	mov	r0, r5
 801e104:	f7e2 f8ac 	bl	8000260 <memchr>
 801e108:	b108      	cbz	r0, 801e10e <_printf_i+0x1ea>
 801e10a:	1b40      	subs	r0, r0, r5
 801e10c:	6060      	str	r0, [r4, #4]
 801e10e:	6863      	ldr	r3, [r4, #4]
 801e110:	6123      	str	r3, [r4, #16]
 801e112:	2300      	movs	r3, #0
 801e114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e118:	e7aa      	b.n	801e070 <_printf_i+0x14c>
 801e11a:	6923      	ldr	r3, [r4, #16]
 801e11c:	462a      	mov	r2, r5
 801e11e:	4649      	mov	r1, r9
 801e120:	4640      	mov	r0, r8
 801e122:	47d0      	blx	sl
 801e124:	3001      	adds	r0, #1
 801e126:	d0ad      	beq.n	801e084 <_printf_i+0x160>
 801e128:	6823      	ldr	r3, [r4, #0]
 801e12a:	079b      	lsls	r3, r3, #30
 801e12c:	d413      	bmi.n	801e156 <_printf_i+0x232>
 801e12e:	68e0      	ldr	r0, [r4, #12]
 801e130:	9b03      	ldr	r3, [sp, #12]
 801e132:	4298      	cmp	r0, r3
 801e134:	bfb8      	it	lt
 801e136:	4618      	movlt	r0, r3
 801e138:	e7a6      	b.n	801e088 <_printf_i+0x164>
 801e13a:	2301      	movs	r3, #1
 801e13c:	4632      	mov	r2, r6
 801e13e:	4649      	mov	r1, r9
 801e140:	4640      	mov	r0, r8
 801e142:	47d0      	blx	sl
 801e144:	3001      	adds	r0, #1
 801e146:	d09d      	beq.n	801e084 <_printf_i+0x160>
 801e148:	3501      	adds	r5, #1
 801e14a:	68e3      	ldr	r3, [r4, #12]
 801e14c:	9903      	ldr	r1, [sp, #12]
 801e14e:	1a5b      	subs	r3, r3, r1
 801e150:	42ab      	cmp	r3, r5
 801e152:	dcf2      	bgt.n	801e13a <_printf_i+0x216>
 801e154:	e7eb      	b.n	801e12e <_printf_i+0x20a>
 801e156:	2500      	movs	r5, #0
 801e158:	f104 0619 	add.w	r6, r4, #25
 801e15c:	e7f5      	b.n	801e14a <_printf_i+0x226>
 801e15e:	bf00      	nop
 801e160:	080209b1 	.word	0x080209b1
 801e164:	080209c2 	.word	0x080209c2

0801e168 <__sflush_r>:
 801e168:	898a      	ldrh	r2, [r1, #12]
 801e16a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e16e:	4605      	mov	r5, r0
 801e170:	0710      	lsls	r0, r2, #28
 801e172:	460c      	mov	r4, r1
 801e174:	d458      	bmi.n	801e228 <__sflush_r+0xc0>
 801e176:	684b      	ldr	r3, [r1, #4]
 801e178:	2b00      	cmp	r3, #0
 801e17a:	dc05      	bgt.n	801e188 <__sflush_r+0x20>
 801e17c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e17e:	2b00      	cmp	r3, #0
 801e180:	dc02      	bgt.n	801e188 <__sflush_r+0x20>
 801e182:	2000      	movs	r0, #0
 801e184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e188:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e18a:	2e00      	cmp	r6, #0
 801e18c:	d0f9      	beq.n	801e182 <__sflush_r+0x1a>
 801e18e:	2300      	movs	r3, #0
 801e190:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e194:	682f      	ldr	r7, [r5, #0]
 801e196:	6a21      	ldr	r1, [r4, #32]
 801e198:	602b      	str	r3, [r5, #0]
 801e19a:	d032      	beq.n	801e202 <__sflush_r+0x9a>
 801e19c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e19e:	89a3      	ldrh	r3, [r4, #12]
 801e1a0:	075a      	lsls	r2, r3, #29
 801e1a2:	d505      	bpl.n	801e1b0 <__sflush_r+0x48>
 801e1a4:	6863      	ldr	r3, [r4, #4]
 801e1a6:	1ac0      	subs	r0, r0, r3
 801e1a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e1aa:	b10b      	cbz	r3, 801e1b0 <__sflush_r+0x48>
 801e1ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e1ae:	1ac0      	subs	r0, r0, r3
 801e1b0:	2300      	movs	r3, #0
 801e1b2:	4602      	mov	r2, r0
 801e1b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e1b6:	6a21      	ldr	r1, [r4, #32]
 801e1b8:	4628      	mov	r0, r5
 801e1ba:	47b0      	blx	r6
 801e1bc:	1c43      	adds	r3, r0, #1
 801e1be:	89a3      	ldrh	r3, [r4, #12]
 801e1c0:	d106      	bne.n	801e1d0 <__sflush_r+0x68>
 801e1c2:	6829      	ldr	r1, [r5, #0]
 801e1c4:	291d      	cmp	r1, #29
 801e1c6:	d82b      	bhi.n	801e220 <__sflush_r+0xb8>
 801e1c8:	4a29      	ldr	r2, [pc, #164]	; (801e270 <__sflush_r+0x108>)
 801e1ca:	410a      	asrs	r2, r1
 801e1cc:	07d6      	lsls	r6, r2, #31
 801e1ce:	d427      	bmi.n	801e220 <__sflush_r+0xb8>
 801e1d0:	2200      	movs	r2, #0
 801e1d2:	6062      	str	r2, [r4, #4]
 801e1d4:	04d9      	lsls	r1, r3, #19
 801e1d6:	6922      	ldr	r2, [r4, #16]
 801e1d8:	6022      	str	r2, [r4, #0]
 801e1da:	d504      	bpl.n	801e1e6 <__sflush_r+0x7e>
 801e1dc:	1c42      	adds	r2, r0, #1
 801e1de:	d101      	bne.n	801e1e4 <__sflush_r+0x7c>
 801e1e0:	682b      	ldr	r3, [r5, #0]
 801e1e2:	b903      	cbnz	r3, 801e1e6 <__sflush_r+0x7e>
 801e1e4:	6560      	str	r0, [r4, #84]	; 0x54
 801e1e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e1e8:	602f      	str	r7, [r5, #0]
 801e1ea:	2900      	cmp	r1, #0
 801e1ec:	d0c9      	beq.n	801e182 <__sflush_r+0x1a>
 801e1ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e1f2:	4299      	cmp	r1, r3
 801e1f4:	d002      	beq.n	801e1fc <__sflush_r+0x94>
 801e1f6:	4628      	mov	r0, r5
 801e1f8:	f7ff fc7a 	bl	801daf0 <_free_r>
 801e1fc:	2000      	movs	r0, #0
 801e1fe:	6360      	str	r0, [r4, #52]	; 0x34
 801e200:	e7c0      	b.n	801e184 <__sflush_r+0x1c>
 801e202:	2301      	movs	r3, #1
 801e204:	4628      	mov	r0, r5
 801e206:	47b0      	blx	r6
 801e208:	1c41      	adds	r1, r0, #1
 801e20a:	d1c8      	bne.n	801e19e <__sflush_r+0x36>
 801e20c:	682b      	ldr	r3, [r5, #0]
 801e20e:	2b00      	cmp	r3, #0
 801e210:	d0c5      	beq.n	801e19e <__sflush_r+0x36>
 801e212:	2b1d      	cmp	r3, #29
 801e214:	d001      	beq.n	801e21a <__sflush_r+0xb2>
 801e216:	2b16      	cmp	r3, #22
 801e218:	d101      	bne.n	801e21e <__sflush_r+0xb6>
 801e21a:	602f      	str	r7, [r5, #0]
 801e21c:	e7b1      	b.n	801e182 <__sflush_r+0x1a>
 801e21e:	89a3      	ldrh	r3, [r4, #12]
 801e220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e224:	81a3      	strh	r3, [r4, #12]
 801e226:	e7ad      	b.n	801e184 <__sflush_r+0x1c>
 801e228:	690f      	ldr	r7, [r1, #16]
 801e22a:	2f00      	cmp	r7, #0
 801e22c:	d0a9      	beq.n	801e182 <__sflush_r+0x1a>
 801e22e:	0793      	lsls	r3, r2, #30
 801e230:	680e      	ldr	r6, [r1, #0]
 801e232:	bf08      	it	eq
 801e234:	694b      	ldreq	r3, [r1, #20]
 801e236:	600f      	str	r7, [r1, #0]
 801e238:	bf18      	it	ne
 801e23a:	2300      	movne	r3, #0
 801e23c:	eba6 0807 	sub.w	r8, r6, r7
 801e240:	608b      	str	r3, [r1, #8]
 801e242:	f1b8 0f00 	cmp.w	r8, #0
 801e246:	dd9c      	ble.n	801e182 <__sflush_r+0x1a>
 801e248:	6a21      	ldr	r1, [r4, #32]
 801e24a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e24c:	4643      	mov	r3, r8
 801e24e:	463a      	mov	r2, r7
 801e250:	4628      	mov	r0, r5
 801e252:	47b0      	blx	r6
 801e254:	2800      	cmp	r0, #0
 801e256:	dc06      	bgt.n	801e266 <__sflush_r+0xfe>
 801e258:	89a3      	ldrh	r3, [r4, #12]
 801e25a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e25e:	81a3      	strh	r3, [r4, #12]
 801e260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e264:	e78e      	b.n	801e184 <__sflush_r+0x1c>
 801e266:	4407      	add	r7, r0
 801e268:	eba8 0800 	sub.w	r8, r8, r0
 801e26c:	e7e9      	b.n	801e242 <__sflush_r+0xda>
 801e26e:	bf00      	nop
 801e270:	dfbffffe 	.word	0xdfbffffe

0801e274 <_fflush_r>:
 801e274:	b538      	push	{r3, r4, r5, lr}
 801e276:	690b      	ldr	r3, [r1, #16]
 801e278:	4605      	mov	r5, r0
 801e27a:	460c      	mov	r4, r1
 801e27c:	b913      	cbnz	r3, 801e284 <_fflush_r+0x10>
 801e27e:	2500      	movs	r5, #0
 801e280:	4628      	mov	r0, r5
 801e282:	bd38      	pop	{r3, r4, r5, pc}
 801e284:	b118      	cbz	r0, 801e28e <_fflush_r+0x1a>
 801e286:	6a03      	ldr	r3, [r0, #32]
 801e288:	b90b      	cbnz	r3, 801e28e <_fflush_r+0x1a>
 801e28a:	f7ff f9b7 	bl	801d5fc <__sinit>
 801e28e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e292:	2b00      	cmp	r3, #0
 801e294:	d0f3      	beq.n	801e27e <_fflush_r+0xa>
 801e296:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e298:	07d0      	lsls	r0, r2, #31
 801e29a:	d404      	bmi.n	801e2a6 <_fflush_r+0x32>
 801e29c:	0599      	lsls	r1, r3, #22
 801e29e:	d402      	bmi.n	801e2a6 <_fflush_r+0x32>
 801e2a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e2a2:	f7ff fbe2 	bl	801da6a <__retarget_lock_acquire_recursive>
 801e2a6:	4628      	mov	r0, r5
 801e2a8:	4621      	mov	r1, r4
 801e2aa:	f7ff ff5d 	bl	801e168 <__sflush_r>
 801e2ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e2b0:	07da      	lsls	r2, r3, #31
 801e2b2:	4605      	mov	r5, r0
 801e2b4:	d4e4      	bmi.n	801e280 <_fflush_r+0xc>
 801e2b6:	89a3      	ldrh	r3, [r4, #12]
 801e2b8:	059b      	lsls	r3, r3, #22
 801e2ba:	d4e1      	bmi.n	801e280 <_fflush_r+0xc>
 801e2bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e2be:	f7ff fbd5 	bl	801da6c <__retarget_lock_release_recursive>
 801e2c2:	e7dd      	b.n	801e280 <_fflush_r+0xc>

0801e2c4 <fiprintf>:
 801e2c4:	b40e      	push	{r1, r2, r3}
 801e2c6:	b503      	push	{r0, r1, lr}
 801e2c8:	4601      	mov	r1, r0
 801e2ca:	ab03      	add	r3, sp, #12
 801e2cc:	4805      	ldr	r0, [pc, #20]	; (801e2e4 <fiprintf+0x20>)
 801e2ce:	f853 2b04 	ldr.w	r2, [r3], #4
 801e2d2:	6800      	ldr	r0, [r0, #0]
 801e2d4:	9301      	str	r3, [sp, #4]
 801e2d6:	f000 f837 	bl	801e348 <_vfiprintf_r>
 801e2da:	b002      	add	sp, #8
 801e2dc:	f85d eb04 	ldr.w	lr, [sp], #4
 801e2e0:	b003      	add	sp, #12
 801e2e2:	4770      	bx	lr
 801e2e4:	20002478 	.word	0x20002478

0801e2e8 <abort>:
 801e2e8:	b508      	push	{r3, lr}
 801e2ea:	2006      	movs	r0, #6
 801e2ec:	f000 fa04 	bl	801e6f8 <raise>
 801e2f0:	2001      	movs	r0, #1
 801e2f2:	f7e5 f865 	bl	80033c0 <_exit>

0801e2f6 <__sfputc_r>:
 801e2f6:	6893      	ldr	r3, [r2, #8]
 801e2f8:	3b01      	subs	r3, #1
 801e2fa:	2b00      	cmp	r3, #0
 801e2fc:	b410      	push	{r4}
 801e2fe:	6093      	str	r3, [r2, #8]
 801e300:	da08      	bge.n	801e314 <__sfputc_r+0x1e>
 801e302:	6994      	ldr	r4, [r2, #24]
 801e304:	42a3      	cmp	r3, r4
 801e306:	db01      	blt.n	801e30c <__sfputc_r+0x16>
 801e308:	290a      	cmp	r1, #10
 801e30a:	d103      	bne.n	801e314 <__sfputc_r+0x1e>
 801e30c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e310:	f000 b934 	b.w	801e57c <__swbuf_r>
 801e314:	6813      	ldr	r3, [r2, #0]
 801e316:	1c58      	adds	r0, r3, #1
 801e318:	6010      	str	r0, [r2, #0]
 801e31a:	7019      	strb	r1, [r3, #0]
 801e31c:	4608      	mov	r0, r1
 801e31e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e322:	4770      	bx	lr

0801e324 <__sfputs_r>:
 801e324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e326:	4606      	mov	r6, r0
 801e328:	460f      	mov	r7, r1
 801e32a:	4614      	mov	r4, r2
 801e32c:	18d5      	adds	r5, r2, r3
 801e32e:	42ac      	cmp	r4, r5
 801e330:	d101      	bne.n	801e336 <__sfputs_r+0x12>
 801e332:	2000      	movs	r0, #0
 801e334:	e007      	b.n	801e346 <__sfputs_r+0x22>
 801e336:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e33a:	463a      	mov	r2, r7
 801e33c:	4630      	mov	r0, r6
 801e33e:	f7ff ffda 	bl	801e2f6 <__sfputc_r>
 801e342:	1c43      	adds	r3, r0, #1
 801e344:	d1f3      	bne.n	801e32e <__sfputs_r+0xa>
 801e346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e348 <_vfiprintf_r>:
 801e348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e34c:	460d      	mov	r5, r1
 801e34e:	b09d      	sub	sp, #116	; 0x74
 801e350:	4614      	mov	r4, r2
 801e352:	4698      	mov	r8, r3
 801e354:	4606      	mov	r6, r0
 801e356:	b118      	cbz	r0, 801e360 <_vfiprintf_r+0x18>
 801e358:	6a03      	ldr	r3, [r0, #32]
 801e35a:	b90b      	cbnz	r3, 801e360 <_vfiprintf_r+0x18>
 801e35c:	f7ff f94e 	bl	801d5fc <__sinit>
 801e360:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e362:	07d9      	lsls	r1, r3, #31
 801e364:	d405      	bmi.n	801e372 <_vfiprintf_r+0x2a>
 801e366:	89ab      	ldrh	r3, [r5, #12]
 801e368:	059a      	lsls	r2, r3, #22
 801e36a:	d402      	bmi.n	801e372 <_vfiprintf_r+0x2a>
 801e36c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e36e:	f7ff fb7c 	bl	801da6a <__retarget_lock_acquire_recursive>
 801e372:	89ab      	ldrh	r3, [r5, #12]
 801e374:	071b      	lsls	r3, r3, #28
 801e376:	d501      	bpl.n	801e37c <_vfiprintf_r+0x34>
 801e378:	692b      	ldr	r3, [r5, #16]
 801e37a:	b99b      	cbnz	r3, 801e3a4 <_vfiprintf_r+0x5c>
 801e37c:	4629      	mov	r1, r5
 801e37e:	4630      	mov	r0, r6
 801e380:	f000 f93a 	bl	801e5f8 <__swsetup_r>
 801e384:	b170      	cbz	r0, 801e3a4 <_vfiprintf_r+0x5c>
 801e386:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e388:	07dc      	lsls	r4, r3, #31
 801e38a:	d504      	bpl.n	801e396 <_vfiprintf_r+0x4e>
 801e38c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e390:	b01d      	add	sp, #116	; 0x74
 801e392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e396:	89ab      	ldrh	r3, [r5, #12]
 801e398:	0598      	lsls	r0, r3, #22
 801e39a:	d4f7      	bmi.n	801e38c <_vfiprintf_r+0x44>
 801e39c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e39e:	f7ff fb65 	bl	801da6c <__retarget_lock_release_recursive>
 801e3a2:	e7f3      	b.n	801e38c <_vfiprintf_r+0x44>
 801e3a4:	2300      	movs	r3, #0
 801e3a6:	9309      	str	r3, [sp, #36]	; 0x24
 801e3a8:	2320      	movs	r3, #32
 801e3aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e3ae:	f8cd 800c 	str.w	r8, [sp, #12]
 801e3b2:	2330      	movs	r3, #48	; 0x30
 801e3b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801e568 <_vfiprintf_r+0x220>
 801e3b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e3bc:	f04f 0901 	mov.w	r9, #1
 801e3c0:	4623      	mov	r3, r4
 801e3c2:	469a      	mov	sl, r3
 801e3c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e3c8:	b10a      	cbz	r2, 801e3ce <_vfiprintf_r+0x86>
 801e3ca:	2a25      	cmp	r2, #37	; 0x25
 801e3cc:	d1f9      	bne.n	801e3c2 <_vfiprintf_r+0x7a>
 801e3ce:	ebba 0b04 	subs.w	fp, sl, r4
 801e3d2:	d00b      	beq.n	801e3ec <_vfiprintf_r+0xa4>
 801e3d4:	465b      	mov	r3, fp
 801e3d6:	4622      	mov	r2, r4
 801e3d8:	4629      	mov	r1, r5
 801e3da:	4630      	mov	r0, r6
 801e3dc:	f7ff ffa2 	bl	801e324 <__sfputs_r>
 801e3e0:	3001      	adds	r0, #1
 801e3e2:	f000 80a9 	beq.w	801e538 <_vfiprintf_r+0x1f0>
 801e3e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e3e8:	445a      	add	r2, fp
 801e3ea:	9209      	str	r2, [sp, #36]	; 0x24
 801e3ec:	f89a 3000 	ldrb.w	r3, [sl]
 801e3f0:	2b00      	cmp	r3, #0
 801e3f2:	f000 80a1 	beq.w	801e538 <_vfiprintf_r+0x1f0>
 801e3f6:	2300      	movs	r3, #0
 801e3f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e3fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e400:	f10a 0a01 	add.w	sl, sl, #1
 801e404:	9304      	str	r3, [sp, #16]
 801e406:	9307      	str	r3, [sp, #28]
 801e408:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e40c:	931a      	str	r3, [sp, #104]	; 0x68
 801e40e:	4654      	mov	r4, sl
 801e410:	2205      	movs	r2, #5
 801e412:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e416:	4854      	ldr	r0, [pc, #336]	; (801e568 <_vfiprintf_r+0x220>)
 801e418:	f7e1 ff22 	bl	8000260 <memchr>
 801e41c:	9a04      	ldr	r2, [sp, #16]
 801e41e:	b9d8      	cbnz	r0, 801e458 <_vfiprintf_r+0x110>
 801e420:	06d1      	lsls	r1, r2, #27
 801e422:	bf44      	itt	mi
 801e424:	2320      	movmi	r3, #32
 801e426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e42a:	0713      	lsls	r3, r2, #28
 801e42c:	bf44      	itt	mi
 801e42e:	232b      	movmi	r3, #43	; 0x2b
 801e430:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e434:	f89a 3000 	ldrb.w	r3, [sl]
 801e438:	2b2a      	cmp	r3, #42	; 0x2a
 801e43a:	d015      	beq.n	801e468 <_vfiprintf_r+0x120>
 801e43c:	9a07      	ldr	r2, [sp, #28]
 801e43e:	4654      	mov	r4, sl
 801e440:	2000      	movs	r0, #0
 801e442:	f04f 0c0a 	mov.w	ip, #10
 801e446:	4621      	mov	r1, r4
 801e448:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e44c:	3b30      	subs	r3, #48	; 0x30
 801e44e:	2b09      	cmp	r3, #9
 801e450:	d94d      	bls.n	801e4ee <_vfiprintf_r+0x1a6>
 801e452:	b1b0      	cbz	r0, 801e482 <_vfiprintf_r+0x13a>
 801e454:	9207      	str	r2, [sp, #28]
 801e456:	e014      	b.n	801e482 <_vfiprintf_r+0x13a>
 801e458:	eba0 0308 	sub.w	r3, r0, r8
 801e45c:	fa09 f303 	lsl.w	r3, r9, r3
 801e460:	4313      	orrs	r3, r2
 801e462:	9304      	str	r3, [sp, #16]
 801e464:	46a2      	mov	sl, r4
 801e466:	e7d2      	b.n	801e40e <_vfiprintf_r+0xc6>
 801e468:	9b03      	ldr	r3, [sp, #12]
 801e46a:	1d19      	adds	r1, r3, #4
 801e46c:	681b      	ldr	r3, [r3, #0]
 801e46e:	9103      	str	r1, [sp, #12]
 801e470:	2b00      	cmp	r3, #0
 801e472:	bfbb      	ittet	lt
 801e474:	425b      	neglt	r3, r3
 801e476:	f042 0202 	orrlt.w	r2, r2, #2
 801e47a:	9307      	strge	r3, [sp, #28]
 801e47c:	9307      	strlt	r3, [sp, #28]
 801e47e:	bfb8      	it	lt
 801e480:	9204      	strlt	r2, [sp, #16]
 801e482:	7823      	ldrb	r3, [r4, #0]
 801e484:	2b2e      	cmp	r3, #46	; 0x2e
 801e486:	d10c      	bne.n	801e4a2 <_vfiprintf_r+0x15a>
 801e488:	7863      	ldrb	r3, [r4, #1]
 801e48a:	2b2a      	cmp	r3, #42	; 0x2a
 801e48c:	d134      	bne.n	801e4f8 <_vfiprintf_r+0x1b0>
 801e48e:	9b03      	ldr	r3, [sp, #12]
 801e490:	1d1a      	adds	r2, r3, #4
 801e492:	681b      	ldr	r3, [r3, #0]
 801e494:	9203      	str	r2, [sp, #12]
 801e496:	2b00      	cmp	r3, #0
 801e498:	bfb8      	it	lt
 801e49a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801e49e:	3402      	adds	r4, #2
 801e4a0:	9305      	str	r3, [sp, #20]
 801e4a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801e578 <_vfiprintf_r+0x230>
 801e4a6:	7821      	ldrb	r1, [r4, #0]
 801e4a8:	2203      	movs	r2, #3
 801e4aa:	4650      	mov	r0, sl
 801e4ac:	f7e1 fed8 	bl	8000260 <memchr>
 801e4b0:	b138      	cbz	r0, 801e4c2 <_vfiprintf_r+0x17a>
 801e4b2:	9b04      	ldr	r3, [sp, #16]
 801e4b4:	eba0 000a 	sub.w	r0, r0, sl
 801e4b8:	2240      	movs	r2, #64	; 0x40
 801e4ba:	4082      	lsls	r2, r0
 801e4bc:	4313      	orrs	r3, r2
 801e4be:	3401      	adds	r4, #1
 801e4c0:	9304      	str	r3, [sp, #16]
 801e4c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e4c6:	4829      	ldr	r0, [pc, #164]	; (801e56c <_vfiprintf_r+0x224>)
 801e4c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e4cc:	2206      	movs	r2, #6
 801e4ce:	f7e1 fec7 	bl	8000260 <memchr>
 801e4d2:	2800      	cmp	r0, #0
 801e4d4:	d03f      	beq.n	801e556 <_vfiprintf_r+0x20e>
 801e4d6:	4b26      	ldr	r3, [pc, #152]	; (801e570 <_vfiprintf_r+0x228>)
 801e4d8:	bb1b      	cbnz	r3, 801e522 <_vfiprintf_r+0x1da>
 801e4da:	9b03      	ldr	r3, [sp, #12]
 801e4dc:	3307      	adds	r3, #7
 801e4de:	f023 0307 	bic.w	r3, r3, #7
 801e4e2:	3308      	adds	r3, #8
 801e4e4:	9303      	str	r3, [sp, #12]
 801e4e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4e8:	443b      	add	r3, r7
 801e4ea:	9309      	str	r3, [sp, #36]	; 0x24
 801e4ec:	e768      	b.n	801e3c0 <_vfiprintf_r+0x78>
 801e4ee:	fb0c 3202 	mla	r2, ip, r2, r3
 801e4f2:	460c      	mov	r4, r1
 801e4f4:	2001      	movs	r0, #1
 801e4f6:	e7a6      	b.n	801e446 <_vfiprintf_r+0xfe>
 801e4f8:	2300      	movs	r3, #0
 801e4fa:	3401      	adds	r4, #1
 801e4fc:	9305      	str	r3, [sp, #20]
 801e4fe:	4619      	mov	r1, r3
 801e500:	f04f 0c0a 	mov.w	ip, #10
 801e504:	4620      	mov	r0, r4
 801e506:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e50a:	3a30      	subs	r2, #48	; 0x30
 801e50c:	2a09      	cmp	r2, #9
 801e50e:	d903      	bls.n	801e518 <_vfiprintf_r+0x1d0>
 801e510:	2b00      	cmp	r3, #0
 801e512:	d0c6      	beq.n	801e4a2 <_vfiprintf_r+0x15a>
 801e514:	9105      	str	r1, [sp, #20]
 801e516:	e7c4      	b.n	801e4a2 <_vfiprintf_r+0x15a>
 801e518:	fb0c 2101 	mla	r1, ip, r1, r2
 801e51c:	4604      	mov	r4, r0
 801e51e:	2301      	movs	r3, #1
 801e520:	e7f0      	b.n	801e504 <_vfiprintf_r+0x1bc>
 801e522:	ab03      	add	r3, sp, #12
 801e524:	9300      	str	r3, [sp, #0]
 801e526:	462a      	mov	r2, r5
 801e528:	4b12      	ldr	r3, [pc, #72]	; (801e574 <_vfiprintf_r+0x22c>)
 801e52a:	a904      	add	r1, sp, #16
 801e52c:	4630      	mov	r0, r6
 801e52e:	f3af 8000 	nop.w
 801e532:	4607      	mov	r7, r0
 801e534:	1c78      	adds	r0, r7, #1
 801e536:	d1d6      	bne.n	801e4e6 <_vfiprintf_r+0x19e>
 801e538:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e53a:	07d9      	lsls	r1, r3, #31
 801e53c:	d405      	bmi.n	801e54a <_vfiprintf_r+0x202>
 801e53e:	89ab      	ldrh	r3, [r5, #12]
 801e540:	059a      	lsls	r2, r3, #22
 801e542:	d402      	bmi.n	801e54a <_vfiprintf_r+0x202>
 801e544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e546:	f7ff fa91 	bl	801da6c <__retarget_lock_release_recursive>
 801e54a:	89ab      	ldrh	r3, [r5, #12]
 801e54c:	065b      	lsls	r3, r3, #25
 801e54e:	f53f af1d 	bmi.w	801e38c <_vfiprintf_r+0x44>
 801e552:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e554:	e71c      	b.n	801e390 <_vfiprintf_r+0x48>
 801e556:	ab03      	add	r3, sp, #12
 801e558:	9300      	str	r3, [sp, #0]
 801e55a:	462a      	mov	r2, r5
 801e55c:	4b05      	ldr	r3, [pc, #20]	; (801e574 <_vfiprintf_r+0x22c>)
 801e55e:	a904      	add	r1, sp, #16
 801e560:	4630      	mov	r0, r6
 801e562:	f7ff fcdf 	bl	801df24 <_printf_i>
 801e566:	e7e4      	b.n	801e532 <_vfiprintf_r+0x1ea>
 801e568:	080209a0 	.word	0x080209a0
 801e56c:	080209aa 	.word	0x080209aa
 801e570:	00000000 	.word	0x00000000
 801e574:	0801e325 	.word	0x0801e325
 801e578:	080209a6 	.word	0x080209a6

0801e57c <__swbuf_r>:
 801e57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e57e:	460e      	mov	r6, r1
 801e580:	4614      	mov	r4, r2
 801e582:	4605      	mov	r5, r0
 801e584:	b118      	cbz	r0, 801e58e <__swbuf_r+0x12>
 801e586:	6a03      	ldr	r3, [r0, #32]
 801e588:	b90b      	cbnz	r3, 801e58e <__swbuf_r+0x12>
 801e58a:	f7ff f837 	bl	801d5fc <__sinit>
 801e58e:	69a3      	ldr	r3, [r4, #24]
 801e590:	60a3      	str	r3, [r4, #8]
 801e592:	89a3      	ldrh	r3, [r4, #12]
 801e594:	071a      	lsls	r2, r3, #28
 801e596:	d525      	bpl.n	801e5e4 <__swbuf_r+0x68>
 801e598:	6923      	ldr	r3, [r4, #16]
 801e59a:	b31b      	cbz	r3, 801e5e4 <__swbuf_r+0x68>
 801e59c:	6823      	ldr	r3, [r4, #0]
 801e59e:	6922      	ldr	r2, [r4, #16]
 801e5a0:	1a98      	subs	r0, r3, r2
 801e5a2:	6963      	ldr	r3, [r4, #20]
 801e5a4:	b2f6      	uxtb	r6, r6
 801e5a6:	4283      	cmp	r3, r0
 801e5a8:	4637      	mov	r7, r6
 801e5aa:	dc04      	bgt.n	801e5b6 <__swbuf_r+0x3a>
 801e5ac:	4621      	mov	r1, r4
 801e5ae:	4628      	mov	r0, r5
 801e5b0:	f7ff fe60 	bl	801e274 <_fflush_r>
 801e5b4:	b9e0      	cbnz	r0, 801e5f0 <__swbuf_r+0x74>
 801e5b6:	68a3      	ldr	r3, [r4, #8]
 801e5b8:	3b01      	subs	r3, #1
 801e5ba:	60a3      	str	r3, [r4, #8]
 801e5bc:	6823      	ldr	r3, [r4, #0]
 801e5be:	1c5a      	adds	r2, r3, #1
 801e5c0:	6022      	str	r2, [r4, #0]
 801e5c2:	701e      	strb	r6, [r3, #0]
 801e5c4:	6962      	ldr	r2, [r4, #20]
 801e5c6:	1c43      	adds	r3, r0, #1
 801e5c8:	429a      	cmp	r2, r3
 801e5ca:	d004      	beq.n	801e5d6 <__swbuf_r+0x5a>
 801e5cc:	89a3      	ldrh	r3, [r4, #12]
 801e5ce:	07db      	lsls	r3, r3, #31
 801e5d0:	d506      	bpl.n	801e5e0 <__swbuf_r+0x64>
 801e5d2:	2e0a      	cmp	r6, #10
 801e5d4:	d104      	bne.n	801e5e0 <__swbuf_r+0x64>
 801e5d6:	4621      	mov	r1, r4
 801e5d8:	4628      	mov	r0, r5
 801e5da:	f7ff fe4b 	bl	801e274 <_fflush_r>
 801e5de:	b938      	cbnz	r0, 801e5f0 <__swbuf_r+0x74>
 801e5e0:	4638      	mov	r0, r7
 801e5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e5e4:	4621      	mov	r1, r4
 801e5e6:	4628      	mov	r0, r5
 801e5e8:	f000 f806 	bl	801e5f8 <__swsetup_r>
 801e5ec:	2800      	cmp	r0, #0
 801e5ee:	d0d5      	beq.n	801e59c <__swbuf_r+0x20>
 801e5f0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801e5f4:	e7f4      	b.n	801e5e0 <__swbuf_r+0x64>
	...

0801e5f8 <__swsetup_r>:
 801e5f8:	b538      	push	{r3, r4, r5, lr}
 801e5fa:	4b2a      	ldr	r3, [pc, #168]	; (801e6a4 <__swsetup_r+0xac>)
 801e5fc:	4605      	mov	r5, r0
 801e5fe:	6818      	ldr	r0, [r3, #0]
 801e600:	460c      	mov	r4, r1
 801e602:	b118      	cbz	r0, 801e60c <__swsetup_r+0x14>
 801e604:	6a03      	ldr	r3, [r0, #32]
 801e606:	b90b      	cbnz	r3, 801e60c <__swsetup_r+0x14>
 801e608:	f7fe fff8 	bl	801d5fc <__sinit>
 801e60c:	89a3      	ldrh	r3, [r4, #12]
 801e60e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e612:	0718      	lsls	r0, r3, #28
 801e614:	d422      	bmi.n	801e65c <__swsetup_r+0x64>
 801e616:	06d9      	lsls	r1, r3, #27
 801e618:	d407      	bmi.n	801e62a <__swsetup_r+0x32>
 801e61a:	2309      	movs	r3, #9
 801e61c:	602b      	str	r3, [r5, #0]
 801e61e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e622:	81a3      	strh	r3, [r4, #12]
 801e624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e628:	e034      	b.n	801e694 <__swsetup_r+0x9c>
 801e62a:	0758      	lsls	r0, r3, #29
 801e62c:	d512      	bpl.n	801e654 <__swsetup_r+0x5c>
 801e62e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e630:	b141      	cbz	r1, 801e644 <__swsetup_r+0x4c>
 801e632:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e636:	4299      	cmp	r1, r3
 801e638:	d002      	beq.n	801e640 <__swsetup_r+0x48>
 801e63a:	4628      	mov	r0, r5
 801e63c:	f7ff fa58 	bl	801daf0 <_free_r>
 801e640:	2300      	movs	r3, #0
 801e642:	6363      	str	r3, [r4, #52]	; 0x34
 801e644:	89a3      	ldrh	r3, [r4, #12]
 801e646:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e64a:	81a3      	strh	r3, [r4, #12]
 801e64c:	2300      	movs	r3, #0
 801e64e:	6063      	str	r3, [r4, #4]
 801e650:	6923      	ldr	r3, [r4, #16]
 801e652:	6023      	str	r3, [r4, #0]
 801e654:	89a3      	ldrh	r3, [r4, #12]
 801e656:	f043 0308 	orr.w	r3, r3, #8
 801e65a:	81a3      	strh	r3, [r4, #12]
 801e65c:	6923      	ldr	r3, [r4, #16]
 801e65e:	b94b      	cbnz	r3, 801e674 <__swsetup_r+0x7c>
 801e660:	89a3      	ldrh	r3, [r4, #12]
 801e662:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e666:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e66a:	d003      	beq.n	801e674 <__swsetup_r+0x7c>
 801e66c:	4621      	mov	r1, r4
 801e66e:	4628      	mov	r0, r5
 801e670:	f000 f884 	bl	801e77c <__smakebuf_r>
 801e674:	89a0      	ldrh	r0, [r4, #12]
 801e676:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e67a:	f010 0301 	ands.w	r3, r0, #1
 801e67e:	d00a      	beq.n	801e696 <__swsetup_r+0x9e>
 801e680:	2300      	movs	r3, #0
 801e682:	60a3      	str	r3, [r4, #8]
 801e684:	6963      	ldr	r3, [r4, #20]
 801e686:	425b      	negs	r3, r3
 801e688:	61a3      	str	r3, [r4, #24]
 801e68a:	6923      	ldr	r3, [r4, #16]
 801e68c:	b943      	cbnz	r3, 801e6a0 <__swsetup_r+0xa8>
 801e68e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e692:	d1c4      	bne.n	801e61e <__swsetup_r+0x26>
 801e694:	bd38      	pop	{r3, r4, r5, pc}
 801e696:	0781      	lsls	r1, r0, #30
 801e698:	bf58      	it	pl
 801e69a:	6963      	ldrpl	r3, [r4, #20]
 801e69c:	60a3      	str	r3, [r4, #8]
 801e69e:	e7f4      	b.n	801e68a <__swsetup_r+0x92>
 801e6a0:	2000      	movs	r0, #0
 801e6a2:	e7f7      	b.n	801e694 <__swsetup_r+0x9c>
 801e6a4:	20002478 	.word	0x20002478

0801e6a8 <_raise_r>:
 801e6a8:	291f      	cmp	r1, #31
 801e6aa:	b538      	push	{r3, r4, r5, lr}
 801e6ac:	4604      	mov	r4, r0
 801e6ae:	460d      	mov	r5, r1
 801e6b0:	d904      	bls.n	801e6bc <_raise_r+0x14>
 801e6b2:	2316      	movs	r3, #22
 801e6b4:	6003      	str	r3, [r0, #0]
 801e6b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e6ba:	bd38      	pop	{r3, r4, r5, pc}
 801e6bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801e6be:	b112      	cbz	r2, 801e6c6 <_raise_r+0x1e>
 801e6c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e6c4:	b94b      	cbnz	r3, 801e6da <_raise_r+0x32>
 801e6c6:	4620      	mov	r0, r4
 801e6c8:	f000 f830 	bl	801e72c <_getpid_r>
 801e6cc:	462a      	mov	r2, r5
 801e6ce:	4601      	mov	r1, r0
 801e6d0:	4620      	mov	r0, r4
 801e6d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e6d6:	f000 b817 	b.w	801e708 <_kill_r>
 801e6da:	2b01      	cmp	r3, #1
 801e6dc:	d00a      	beq.n	801e6f4 <_raise_r+0x4c>
 801e6de:	1c59      	adds	r1, r3, #1
 801e6e0:	d103      	bne.n	801e6ea <_raise_r+0x42>
 801e6e2:	2316      	movs	r3, #22
 801e6e4:	6003      	str	r3, [r0, #0]
 801e6e6:	2001      	movs	r0, #1
 801e6e8:	e7e7      	b.n	801e6ba <_raise_r+0x12>
 801e6ea:	2400      	movs	r4, #0
 801e6ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e6f0:	4628      	mov	r0, r5
 801e6f2:	4798      	blx	r3
 801e6f4:	2000      	movs	r0, #0
 801e6f6:	e7e0      	b.n	801e6ba <_raise_r+0x12>

0801e6f8 <raise>:
 801e6f8:	4b02      	ldr	r3, [pc, #8]	; (801e704 <raise+0xc>)
 801e6fa:	4601      	mov	r1, r0
 801e6fc:	6818      	ldr	r0, [r3, #0]
 801e6fe:	f7ff bfd3 	b.w	801e6a8 <_raise_r>
 801e702:	bf00      	nop
 801e704:	20002478 	.word	0x20002478

0801e708 <_kill_r>:
 801e708:	b538      	push	{r3, r4, r5, lr}
 801e70a:	4d07      	ldr	r5, [pc, #28]	; (801e728 <_kill_r+0x20>)
 801e70c:	2300      	movs	r3, #0
 801e70e:	4604      	mov	r4, r0
 801e710:	4608      	mov	r0, r1
 801e712:	4611      	mov	r1, r2
 801e714:	602b      	str	r3, [r5, #0]
 801e716:	f7e4 fe43 	bl	80033a0 <_kill>
 801e71a:	1c43      	adds	r3, r0, #1
 801e71c:	d102      	bne.n	801e724 <_kill_r+0x1c>
 801e71e:	682b      	ldr	r3, [r5, #0]
 801e720:	b103      	cbz	r3, 801e724 <_kill_r+0x1c>
 801e722:	6023      	str	r3, [r4, #0]
 801e724:	bd38      	pop	{r3, r4, r5, pc}
 801e726:	bf00      	nop
 801e728:	20010fcc 	.word	0x20010fcc

0801e72c <_getpid_r>:
 801e72c:	f7e4 be30 	b.w	8003390 <_getpid>

0801e730 <__swhatbuf_r>:
 801e730:	b570      	push	{r4, r5, r6, lr}
 801e732:	460c      	mov	r4, r1
 801e734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e738:	2900      	cmp	r1, #0
 801e73a:	b096      	sub	sp, #88	; 0x58
 801e73c:	4615      	mov	r5, r2
 801e73e:	461e      	mov	r6, r3
 801e740:	da0d      	bge.n	801e75e <__swhatbuf_r+0x2e>
 801e742:	89a3      	ldrh	r3, [r4, #12]
 801e744:	f013 0f80 	tst.w	r3, #128	; 0x80
 801e748:	f04f 0100 	mov.w	r1, #0
 801e74c:	bf0c      	ite	eq
 801e74e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801e752:	2340      	movne	r3, #64	; 0x40
 801e754:	2000      	movs	r0, #0
 801e756:	6031      	str	r1, [r6, #0]
 801e758:	602b      	str	r3, [r5, #0]
 801e75a:	b016      	add	sp, #88	; 0x58
 801e75c:	bd70      	pop	{r4, r5, r6, pc}
 801e75e:	466a      	mov	r2, sp
 801e760:	f000 f848 	bl	801e7f4 <_fstat_r>
 801e764:	2800      	cmp	r0, #0
 801e766:	dbec      	blt.n	801e742 <__swhatbuf_r+0x12>
 801e768:	9901      	ldr	r1, [sp, #4]
 801e76a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801e76e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801e772:	4259      	negs	r1, r3
 801e774:	4159      	adcs	r1, r3
 801e776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e77a:	e7eb      	b.n	801e754 <__swhatbuf_r+0x24>

0801e77c <__smakebuf_r>:
 801e77c:	898b      	ldrh	r3, [r1, #12]
 801e77e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e780:	079d      	lsls	r5, r3, #30
 801e782:	4606      	mov	r6, r0
 801e784:	460c      	mov	r4, r1
 801e786:	d507      	bpl.n	801e798 <__smakebuf_r+0x1c>
 801e788:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e78c:	6023      	str	r3, [r4, #0]
 801e78e:	6123      	str	r3, [r4, #16]
 801e790:	2301      	movs	r3, #1
 801e792:	6163      	str	r3, [r4, #20]
 801e794:	b002      	add	sp, #8
 801e796:	bd70      	pop	{r4, r5, r6, pc}
 801e798:	ab01      	add	r3, sp, #4
 801e79a:	466a      	mov	r2, sp
 801e79c:	f7ff ffc8 	bl	801e730 <__swhatbuf_r>
 801e7a0:	9900      	ldr	r1, [sp, #0]
 801e7a2:	4605      	mov	r5, r0
 801e7a4:	4630      	mov	r0, r6
 801e7a6:	f7fe fcf1 	bl	801d18c <_malloc_r>
 801e7aa:	b948      	cbnz	r0, 801e7c0 <__smakebuf_r+0x44>
 801e7ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e7b0:	059a      	lsls	r2, r3, #22
 801e7b2:	d4ef      	bmi.n	801e794 <__smakebuf_r+0x18>
 801e7b4:	f023 0303 	bic.w	r3, r3, #3
 801e7b8:	f043 0302 	orr.w	r3, r3, #2
 801e7bc:	81a3      	strh	r3, [r4, #12]
 801e7be:	e7e3      	b.n	801e788 <__smakebuf_r+0xc>
 801e7c0:	89a3      	ldrh	r3, [r4, #12]
 801e7c2:	6020      	str	r0, [r4, #0]
 801e7c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e7c8:	81a3      	strh	r3, [r4, #12]
 801e7ca:	9b00      	ldr	r3, [sp, #0]
 801e7cc:	6163      	str	r3, [r4, #20]
 801e7ce:	9b01      	ldr	r3, [sp, #4]
 801e7d0:	6120      	str	r0, [r4, #16]
 801e7d2:	b15b      	cbz	r3, 801e7ec <__smakebuf_r+0x70>
 801e7d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e7d8:	4630      	mov	r0, r6
 801e7da:	f000 f81d 	bl	801e818 <_isatty_r>
 801e7de:	b128      	cbz	r0, 801e7ec <__smakebuf_r+0x70>
 801e7e0:	89a3      	ldrh	r3, [r4, #12]
 801e7e2:	f023 0303 	bic.w	r3, r3, #3
 801e7e6:	f043 0301 	orr.w	r3, r3, #1
 801e7ea:	81a3      	strh	r3, [r4, #12]
 801e7ec:	89a3      	ldrh	r3, [r4, #12]
 801e7ee:	431d      	orrs	r5, r3
 801e7f0:	81a5      	strh	r5, [r4, #12]
 801e7f2:	e7cf      	b.n	801e794 <__smakebuf_r+0x18>

0801e7f4 <_fstat_r>:
 801e7f4:	b538      	push	{r3, r4, r5, lr}
 801e7f6:	4d07      	ldr	r5, [pc, #28]	; (801e814 <_fstat_r+0x20>)
 801e7f8:	2300      	movs	r3, #0
 801e7fa:	4604      	mov	r4, r0
 801e7fc:	4608      	mov	r0, r1
 801e7fe:	4611      	mov	r1, r2
 801e800:	602b      	str	r3, [r5, #0]
 801e802:	f7e4 fe2c 	bl	800345e <_fstat>
 801e806:	1c43      	adds	r3, r0, #1
 801e808:	d102      	bne.n	801e810 <_fstat_r+0x1c>
 801e80a:	682b      	ldr	r3, [r5, #0]
 801e80c:	b103      	cbz	r3, 801e810 <_fstat_r+0x1c>
 801e80e:	6023      	str	r3, [r4, #0]
 801e810:	bd38      	pop	{r3, r4, r5, pc}
 801e812:	bf00      	nop
 801e814:	20010fcc 	.word	0x20010fcc

0801e818 <_isatty_r>:
 801e818:	b538      	push	{r3, r4, r5, lr}
 801e81a:	4d06      	ldr	r5, [pc, #24]	; (801e834 <_isatty_r+0x1c>)
 801e81c:	2300      	movs	r3, #0
 801e81e:	4604      	mov	r4, r0
 801e820:	4608      	mov	r0, r1
 801e822:	602b      	str	r3, [r5, #0]
 801e824:	f7e4 fe2b 	bl	800347e <_isatty>
 801e828:	1c43      	adds	r3, r0, #1
 801e82a:	d102      	bne.n	801e832 <_isatty_r+0x1a>
 801e82c:	682b      	ldr	r3, [r5, #0]
 801e82e:	b103      	cbz	r3, 801e832 <_isatty_r+0x1a>
 801e830:	6023      	str	r3, [r4, #0]
 801e832:	bd38      	pop	{r3, r4, r5, pc}
 801e834:	20010fcc 	.word	0x20010fcc

0801e838 <_init>:
 801e838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e83a:	bf00      	nop
 801e83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e83e:	bc08      	pop	{r3}
 801e840:	469e      	mov	lr, r3
 801e842:	4770      	bx	lr

0801e844 <_fini>:
 801e844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e846:	bf00      	nop
 801e848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e84a:	bc08      	pop	{r3}
 801e84c:	469e      	mov	lr, r3
 801e84e:	4770      	bx	lr
